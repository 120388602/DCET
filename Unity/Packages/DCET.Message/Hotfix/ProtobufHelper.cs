#if !__CSharpLua__
using ProtoBuf.Meta;
#endif
using System;
using System.IO;

namespace DCET
{
	public static class ProtobufHelper
	{
		static ProtobufHelper()
		{
#if __CSharpLua__
			/*
			[[
			protobuf.register_file("Assets/Res/Lua/pbc/AutoGeneratedCode/OuterMessage.pb")
			]]
			*/
#endif
		}

		public static byte[] ToBytes(object message)
		{
#if !__CSharpLua__
			using (MemoryStream memoryStream = new MemoryStream())
			{
				RuntimeTypeModel.Default.Serialize(memoryStream, message);

				return memoryStream.ToArray();
			}
#else
			byte[] bytes = null;
			/*
			[[
			 bytes = encodeProtobuf(message)
			]]
			*/
			return bytes;
#endif
		}

		public static void ToStream(object message, MemoryStream memoryStream)
		{
#if !__CSharpLua__
			RuntimeTypeModel.Default.Serialize(memoryStream, message);
#else
			byte[] bytes = null;

			/*
			[[
			 bytes = encodeProtobuf(message)
			]]
			*/

			if(bytes != null)
			{
				memoryStream.Write(bytes, 0, bytes.Length);
			}
#endif
		}

		public static object FromBytes(Type type, byte[] bytes, int index, int count)
		{
#if !__CSharpLua__
			using (MemoryStream s = new MemoryStream(bytes, index, count))
			{
				return RuntimeTypeModel.Default.Deserialize(s, null, type);
			}
#else
			using (MemoryStream s = new MemoryStream(bytes, index, count))
			{
				byte[] datas = s.ToArray();

				if(bytes != null)
				{
					/*
					[[
					return decodeProtobuf(datas, type)
					]]
					*/
				}

				return null;
			}
#endif
		}

		public static object FromBytes(object instance, byte[] bytes, int index, int count)
		{
			if(instance != null)
			{
				return FromBytes(instance.GetType(), bytes, index, count);
			}

			return null;
		}
		
		public static object FromStream(Type type, MemoryStream stream)
		{
#if !__CSharpLua__
			return RuntimeTypeModel.Default.Deserialize(stream, null, type);
#else
			byte[] bytes = stream.ToArray();

			if(bytes != null)
			{
				/*
				[[
				return decodeProtobuf(bytes, type)
				]]
				*/
			}

			return null;
#endif
		}

		public static object FromStream(object message, MemoryStream stream)
		{
			if(message != null)
			{
				return FromStream(message.GetType(), stream);
			}

			return null;
		}
	}
}