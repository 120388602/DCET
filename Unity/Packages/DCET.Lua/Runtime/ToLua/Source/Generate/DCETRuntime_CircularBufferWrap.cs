//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DCETRuntime_CircularBufferWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DCETRuntime.CircularBuffer), typeof(System.IO.Stream));
		L.RegFunction("AddLast", AddLast);
		L.RegFunction("RemoveFirst", RemoveFirst);
		L.RegFunction("ReadAsync", ReadAsync);
		L.RegFunction("ReadStream", ReadStream);
		L.RegFunction("WriteStream", WriteStream);
		L.RegFunction("WriteAsync", WriteAsync);
		L.RegFunction("Read", Read);
		L.RegFunction("Write", Write);
		L.RegFunction("Flush", Flush);
		L.RegFunction("Seek", Seek);
		L.RegFunction("SetLength", SetLength);
		L.RegFunction("New", _CreateDCETRuntime_CircularBuffer);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ChunkSize", get_ChunkSize, set_ChunkSize);
		L.RegVar("LastIndex", get_LastIndex, set_LastIndex);
		L.RegFunction("getLastIndex", get_LastIndex);
		L.RegFunction("setLastIndex", set_LastIndex);
		L.RegVar("FirstIndex", get_FirstIndex, set_FirstIndex);
		L.RegFunction("getFirstIndex", get_FirstIndex);
		L.RegFunction("setFirstIndex", set_FirstIndex);
		L.RegVar("Length", get_Length, null);
		L.RegFunction("getLength", get_Length);
		L.RegVar("First", get_First, null);
		L.RegFunction("getFirst", get_First);
		L.RegVar("Last", get_Last, null);
		L.RegFunction("getLast", get_Last);
		L.RegVar("CanRead", get_CanRead, null);
		L.RegFunction("getCanRead", get_CanRead);
		L.RegVar("CanSeek", get_CanSeek, null);
		L.RegFunction("getCanSeek", get_CanSeek);
		L.RegVar("CanWrite", get_CanWrite, null);
		L.RegFunction("getCanWrite", get_CanWrite);
		L.RegVar("Position", get_Position, set_Position);
		L.RegFunction("getPosition", get_Position);
		L.RegFunction("setPosition", set_Position);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDCETRuntime_CircularBuffer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DCETRuntime.CircularBuffer obj = new DCETRuntime.CircularBuffer();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DCETRuntime.CircularBuffer.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			obj.AddLast();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveFirst(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			obj.RemoveFirst();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				System.Threading.Tasks.Task o = obj.ReadAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DCETRuntime.CircularBuffer.ReadAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.ReadStream(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
			obj.WriteStream(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				System.Threading.Tasks.Task<int> o = obj.WriteAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DCETRuntime.CircularBuffer.WriteAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.Read(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.Write(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			obj.Flush();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Seek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			System.IO.SeekOrigin arg1 = (System.IO.SeekOrigin)LuaDLL.luaL_checknumber(L, 3);
			long o = obj.Seek(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)ToLua.CheckObject<DCETRuntime.CircularBuffer>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetLength(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChunkSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			int ret = obj.ChunkSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ChunkSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			int ret = obj.LastIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FirstIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			int ret = obj.FirstIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FirstIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			long ret = obj.Length;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_First(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			byte[] ret = obj.First;
			LuaDLL.tolua_pushlstring(L, ret, ret.Length);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index First on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Last(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			byte[] ret = obj.Last;
			LuaDLL.tolua_pushlstring(L, ret, ret.Length);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Last on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanRead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			bool ret = obj.CanRead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanRead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanSeek(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			bool ret = obj.CanSeek;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanSeek on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanWrite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			bool ret = obj.CanWrite;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanWrite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			long ret = obj.Position;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChunkSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ChunkSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ChunkSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LastIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LastIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FirstIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.FirstIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FirstIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.CircularBuffer obj = (DCETRuntime.CircularBuffer)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.Position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}
}

