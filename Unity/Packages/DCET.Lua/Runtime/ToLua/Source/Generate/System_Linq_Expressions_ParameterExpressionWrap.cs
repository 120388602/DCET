//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Linq_Expressions_ParameterExpressionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Linq.Expressions.ParameterExpression), typeof(System.Linq.Expressions.Expression));
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Type", get_Type, null);
		L.RegFunction("getType", get_Type);
		L.RegVar("NodeType", get_NodeType, null);
		L.RegFunction("getNodeType", get_NodeType);
		L.RegVar("Name", get_Name, null);
		L.RegFunction("getName", get_Name);
		L.RegVar("IsByRef", get_IsByRef, null);
		L.RegFunction("getIsByRef", get_IsByRef);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Linq.Expressions.ParameterExpression obj = (System.Linq.Expressions.ParameterExpression)o;
			System.Type ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Linq.Expressions.ParameterExpression obj = (System.Linq.Expressions.ParameterExpression)o;
			System.Linq.Expressions.ExpressionType ret = obj.NodeType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NodeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Linq.Expressions.ParameterExpression obj = (System.Linq.Expressions.ParameterExpression)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsByRef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Linq.Expressions.ParameterExpression obj = (System.Linq.Expressions.ParameterExpression)o;
			bool ret = obj.IsByRef;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsByRef on a nil value");
		}
	}
}

