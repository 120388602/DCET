//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_AStarConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.AStarConfig), typeof(System.Object));
		L.RegFunction("New", _CreatePF_AStarConfig);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("graphs", get_graphs, set_graphs);
		L.RegVar("debugPathID", get_debugPathID, set_debugPathID);
		L.RegVar("prioritizeGraphs", get_prioritizeGraphs, set_prioritizeGraphs);
		L.RegVar("fullGetNearestSearch", get_fullGetNearestSearch, set_fullGetNearestSearch);
		L.RegVar("heuristicScale", get_heuristicScale, set_heuristicScale);
		L.RegVar("heuristic", get_heuristic, set_heuristic);
		L.RegVar("logPathResults", get_logPathResults, set_logPathResults);
		L.RegVar("prioritizeGraphsLimit", get_prioritizeGraphsLimit, set_prioritizeGraphsLimit);
		L.RegVar("maxFrameTime", get_maxFrameTime, set_maxFrameTime);
		L.RegVar("euclideanEmbedding", get_euclideanEmbedding, set_euclideanEmbedding);
		L.RegVar("maxNearestNodeDistance", get_maxNearestNodeDistance, set_maxNearestNodeDistance);
		L.RegVar("debugPathData", get_debugPathData, set_debugPathData);
		L.RegVar("pathProcessor", get_pathProcessor, set_pathProcessor);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("getInstance", get_Instance);
		L.RegVar("maxNearestNodeDistanceSqr", get_maxNearestNodeDistanceSqr, null);
		L.RegFunction("getmaxNearestNodeDistanceSqr", get_maxNearestNodeDistanceSqr);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_AStarConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.AStarConfig obj = new PF.AStarConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.AStarConfig.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.NavGraph[] ret = obj.graphs;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			ushort ret = obj.debugPathID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_prioritizeGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			bool ret = obj.prioritizeGraphs;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fullGetNearestSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			bool ret = obj.fullGetNearestSearch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fullGetNearestSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float ret = obj.heuristicScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.Heuristic ret = obj.heuristic;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logPathResults(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.PathLog ret = obj.logPathResults;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logPathResults on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_prioritizeGraphsLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float ret = obj.prioritizeGraphsLimit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphsLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxFrameTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float ret = obj.maxFrameTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxFrameTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_euclideanEmbedding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.EuclideanEmbedding ret = obj.euclideanEmbedding;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index euclideanEmbedding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxNearestNodeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float ret = obj.maxNearestNodeDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.PathHandler ret = obj.debugPathData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathProcessor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.PathProcessor ret = obj.pathProcessor;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathProcessor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, PF.AStarConfig.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxNearestNodeDistanceSqr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float ret = obj.maxNearestNodeDistanceSqr;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistanceSqr on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_graphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.NavGraph[] arg0 = ToLua.CheckObjectArray<PF.NavGraph>(L, 2);
			obj.graphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.debugPathID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_prioritizeGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.prioritizeGraphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fullGetNearestSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.fullGetNearestSearch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fullGetNearestSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristicScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.Heuristic arg0 = (PF.Heuristic)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logPathResults(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.PathLog arg0 = (PF.PathLog)LuaDLL.luaL_checknumber(L, 2);
			obj.logPathResults = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logPathResults on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_prioritizeGraphsLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.prioritizeGraphsLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphsLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxFrameTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxFrameTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxFrameTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_euclideanEmbedding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.EuclideanEmbedding arg0 = (PF.EuclideanEmbedding)ToLua.CheckObject<PF.EuclideanEmbedding>(L, 2);
			obj.euclideanEmbedding = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index euclideanEmbedding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxNearestNodeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxNearestNodeDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.PathHandler arg0 = (PF.PathHandler)ToLua.CheckObject<PF.PathHandler>(L, 2);
			obj.debugPathData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathProcessor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.AStarConfig obj = (PF.AStarConfig)o;
			PF.PathProcessor arg0 = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 2);
			obj.pathProcessor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathProcessor on a nil value");
		}
	}
}

