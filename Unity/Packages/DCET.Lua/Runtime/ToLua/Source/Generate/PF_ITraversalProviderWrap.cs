//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_ITraversalProviderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.ITraversalProvider), null);
		L.RegFunction("CanTraverse", CanTraverse);
		L.RegFunction("GetTraversalCost", GetTraversalCost);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanTraverse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.ITraversalProvider obj = (PF.ITraversalProvider)ToLua.CheckObject<PF.ITraversalProvider>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			PF.GraphNode arg1 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 3);
			bool o = obj.CanTraverse(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTraversalCost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.ITraversalProvider obj = (PF.ITraversalProvider)ToLua.CheckObject<PF.ITraversalProvider>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			PF.GraphNode arg1 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 3);
			uint o = obj.GetTraversalCost(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

