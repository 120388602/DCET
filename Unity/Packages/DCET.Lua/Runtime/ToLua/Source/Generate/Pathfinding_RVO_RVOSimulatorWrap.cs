//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_RVO_RVOSimulatorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.RVO.RVOSimulator), typeof(Pathfinding.VersionedMonoBehaviour));
		L.RegFunction("GetSimulator", GetSimulator);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("desiredSimulationFPS", get_desiredSimulationFPS, set_desiredSimulationFPS);
		L.RegVar("workerThreads", get_workerThreads, set_workerThreads);
		L.RegVar("doubleBuffering", get_doubleBuffering, set_doubleBuffering);
		L.RegVar("symmetryBreakingBias", get_symmetryBreakingBias, set_symmetryBreakingBias);
		L.RegVar("movementPlane", get_movementPlane, set_movementPlane);
		L.RegVar("drawObstacles", get_drawObstacles, set_drawObstacles);
		L.RegVar("active", get_active, null);
		L.RegFunction("getactive", get_active);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSimulator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)ToLua.CheckObject<Pathfinding.RVO.RVOSimulator>(L, 1);
			Pathfinding.RVO.Simulator o = obj.GetSimulator();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_desiredSimulationFPS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			int ret = obj.desiredSimulationFPS;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index desiredSimulationFPS on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_workerThreads(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			PF.ThreadCount ret = obj.workerThreads;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index workerThreads on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_doubleBuffering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			bool ret = obj.doubleBuffering;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index doubleBuffering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_symmetryBreakingBias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			float ret = obj.symmetryBreakingBias;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index symmetryBreakingBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_movementPlane(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			Pathfinding.RVO.MovementPlane ret = obj.movementPlane;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index movementPlane on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawObstacles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			bool ret = obj.drawObstacles;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawObstacles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_active(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.RVO.RVOSimulator.active);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_desiredSimulationFPS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.desiredSimulationFPS = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index desiredSimulationFPS on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_workerThreads(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			PF.ThreadCount arg0 = (PF.ThreadCount)LuaDLL.luaL_checknumber(L, 2);
			obj.workerThreads = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index workerThreads on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_doubleBuffering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.doubleBuffering = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index doubleBuffering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_symmetryBreakingBias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.symmetryBreakingBias = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index symmetryBreakingBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_movementPlane(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			Pathfinding.RVO.MovementPlane arg0 = (Pathfinding.RVO.MovementPlane)LuaDLL.luaL_checknumber(L, 2);
			obj.movementPlane = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index movementPlane on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawObstacles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOSimulator obj = (Pathfinding.RVO.RVOSimulator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.drawObstacles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawObstacles on a nil value");
		}
	}
}

