//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_BBTreeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.BBTree), typeof(System.Object));
		L.RegFunction("Clear", Clear);
		L.RegFunction("RebuildFrom", RebuildFrom);
		L.RegFunction("QueryClosest", QueryClosest);
		L.RegFunction("QueryClosestXZ", QueryClosestXZ);
		L.RegFunction("QueryInside", QueryInside);
		L.RegFunction("New", _CreatePF_BBTree);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_BBTree(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.BBTree obj = new PF.BBTree();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.BBTree.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.BBTree obj = (PF.BBTree)ToLua.CheckObject<PF.BBTree>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RebuildFrom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.BBTree obj = (PF.BBTree)ToLua.CheckObject<PF.BBTree>(L, 1);
			PF.TriangleMeshNode[] arg0 = ToLua.CheckObjectArray<PF.TriangleMeshNode>(L, 2);
			obj.RebuildFrom(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int QueryClosest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				PF.BBTree obj = (PF.BBTree)ToLua.CheckObject<PF.BBTree>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				PF.NNConstraint arg1 = (PF.NNConstraint)ToLua.CheckObject<PF.NNConstraint>(L, 3);
				float arg2;
				PF.NNInfoInternal o = obj.QueryClosest(arg0, arg1, out arg2);
				ToLua.PushValue(L, o);
				LuaDLL.lua_pushnumber(L, arg2);
				return 2;
			}
			else if (count == 5)
			{
				PF.BBTree obj = (PF.BBTree)ToLua.CheckObject<PF.BBTree>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				PF.NNConstraint arg1 = (PF.NNConstraint)ToLua.CheckObject<PF.NNConstraint>(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				PF.NNInfoInternal arg3 = StackTraits<PF.NNInfoInternal>.Check(L, 5);
				PF.NNInfoInternal o = obj.QueryClosest(arg0, arg1, ref arg2, arg3);
				ToLua.PushValue(L, o);
				LuaDLL.lua_pushnumber(L, arg2);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.BBTree.QueryClosest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int QueryClosestXZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			PF.BBTree obj = (PF.BBTree)ToLua.CheckObject<PF.BBTree>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			PF.NNConstraint arg1 = (PF.NNConstraint)ToLua.CheckObject<PF.NNConstraint>(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			PF.NNInfoInternal arg3 = StackTraits<PF.NNInfoInternal>.Check(L, 5);
			PF.NNInfoInternal o = obj.QueryClosestXZ(arg0, arg1, ref arg2, arg3);
			ToLua.PushValue(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int QueryInside(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.BBTree obj = (PF.BBTree)ToLua.CheckObject<PF.BBTree>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			PF.NNConstraint arg1 = (PF.NNConstraint)ToLua.CheckObject<PF.NNConstraint>(L, 3);
			PF.TriangleMeshNode o = obj.QueryInside(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

