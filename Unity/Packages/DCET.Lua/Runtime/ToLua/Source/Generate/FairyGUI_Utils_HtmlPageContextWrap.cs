//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_Utils_HtmlPageContextWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.Utils.HtmlPageContext), typeof(System.Object));
		L.RegFunction("CreateObject", CreateObject);
		L.RegFunction("FreeObject", FreeObject);
		L.RegFunction("GetImageTexture", GetImageTexture);
		L.RegFunction("FreeImageTexture", FreeImageTexture);
		L.RegFunction("New", _CreateFairyGUI_Utils_HtmlPageContext);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("inst", get_inst, set_inst);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_Utils_HtmlPageContext(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FairyGUI.Utils.HtmlPageContext obj = new FairyGUI.Utils.HtmlPageContext();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.Utils.HtmlPageContext.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FairyGUI.Utils.HtmlPageContext obj = (FairyGUI.Utils.HtmlPageContext)ToLua.CheckObject<FairyGUI.Utils.HtmlPageContext>(L, 1);
			FairyGUI.RichTextField arg0 = (FairyGUI.RichTextField)ToLua.CheckObject<FairyGUI.RichTextField>(L, 2);
			FairyGUI.Utils.HtmlElement arg1 = (FairyGUI.Utils.HtmlElement)ToLua.CheckObject<FairyGUI.Utils.HtmlElement>(L, 3);
			FairyGUI.Utils.IHtmlObject o = obj.CreateObject(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FreeObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.Utils.HtmlPageContext obj = (FairyGUI.Utils.HtmlPageContext)ToLua.CheckObject<FairyGUI.Utils.HtmlPageContext>(L, 1);
			FairyGUI.Utils.IHtmlObject arg0 = (FairyGUI.Utils.IHtmlObject)ToLua.CheckObject<FairyGUI.Utils.IHtmlObject>(L, 2);
			obj.FreeObject(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetImageTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.Utils.HtmlPageContext obj = (FairyGUI.Utils.HtmlPageContext)ToLua.CheckObject<FairyGUI.Utils.HtmlPageContext>(L, 1);
			FairyGUI.Utils.HtmlImage arg0 = (FairyGUI.Utils.HtmlImage)ToLua.CheckObject<FairyGUI.Utils.HtmlImage>(L, 2);
			FairyGUI.NTexture o = obj.GetImageTexture(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FreeImageTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FairyGUI.Utils.HtmlPageContext obj = (FairyGUI.Utils.HtmlPageContext)ToLua.CheckObject<FairyGUI.Utils.HtmlPageContext>(L, 1);
			FairyGUI.Utils.HtmlImage arg0 = (FairyGUI.Utils.HtmlImage)ToLua.CheckObject<FairyGUI.Utils.HtmlImage>(L, 2);
			FairyGUI.NTexture arg1 = (FairyGUI.NTexture)ToLua.CheckObject<FairyGUI.NTexture>(L, 3);
			obj.FreeImageTexture(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inst(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, FairyGUI.Utils.HtmlPageContext.inst);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inst(IntPtr L)
	{
		try
		{
			FairyGUI.Utils.HtmlPageContext arg0 = (FairyGUI.Utils.HtmlPageContext)ToLua.CheckObject<FairyGUI.Utils.HtmlPageContext>(L, 2);
			FairyGUI.Utils.HtmlPageContext.inst = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

