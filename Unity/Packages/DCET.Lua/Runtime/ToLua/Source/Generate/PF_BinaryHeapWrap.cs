//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_BinaryHeapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.BinaryHeap), typeof(System.Object));
		L.RegFunction("Clear", Clear);
		L.RegFunction("Add", Add);
		L.RegFunction("Remove", Remove);
		L.RegFunction("Rebuild", Rebuild);
		L.RegFunction("New", _CreatePF_BinaryHeap);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("numberOfItems", get_numberOfItems, set_numberOfItems);
		L.RegVar("growthFactor", get_growthFactor, set_growthFactor);
		L.RegConstant("NotInHeap", 65535);
		L.RegVar("isEmpty", get_isEmpty, null);
		L.RegFunction("getisEmpty", get_isEmpty);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_BinaryHeap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				PF.BinaryHeap obj = new PF.BinaryHeap(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.BinaryHeap.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)ToLua.CheckObject<PF.BinaryHeap>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.BinaryHeap obj = (PF.BinaryHeap)ToLua.CheckObject<PF.BinaryHeap>(L, 1);
			PF.PathNode arg0 = (PF.PathNode)ToLua.CheckObject<PF.PathNode>(L, 2);
			obj.Add(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)ToLua.CheckObject<PF.BinaryHeap>(L, 1);
			PF.PathNode o = obj.Remove();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rebuild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)ToLua.CheckObject<PF.BinaryHeap>(L, 1);
			obj.Rebuild();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_numberOfItems(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)o;
			int ret = obj.numberOfItems;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index numberOfItems on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_growthFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)o;
			float ret = obj.growthFactor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index growthFactor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isEmpty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)o;
			bool ret = obj.isEmpty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isEmpty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_numberOfItems(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.numberOfItems = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index numberOfItems on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_growthFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.BinaryHeap obj = (PF.BinaryHeap)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.growthFactor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index growthFactor on a nil value");
		}
	}
}

