//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_Util_RetainedGizmos_HasherWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.Util.RetainedGizmos.Hasher), null);
		L.RegFunction("AddHash", AddHash);
		L.RegFunction("HashNode", HashNode);
		L.RegFunction("New", _CreatePathfinding_Util_RetainedGizmos_Hasher);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Hash", get_Hash, null);
		L.RegFunction("getHash", get_Hash);
		L.RegFunction("default", __default__);
		L.RegFunction("__clone__", __clone__);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_Util_RetainedGizmos_Hasher(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AstarPath arg0 = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.Util.RetainedGizmos.Hasher obj = new Pathfinding.Util.RetainedGizmos.Hasher(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				Pathfinding.Util.RetainedGizmos.Hasher obj = new Pathfinding.Util.RetainedGizmos.Hasher();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.Util.RetainedGizmos.Hasher.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHash(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Util.RetainedGizmos.Hasher obj = (Pathfinding.Util.RetainedGizmos.Hasher)ToLua.CheckObject(L, 1, typeof(Pathfinding.Util.RetainedGizmos.Hasher));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddHash(arg0);
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HashNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Util.RetainedGizmos.Hasher obj = (Pathfinding.Util.RetainedGizmos.Hasher)ToLua.CheckObject(L, 1, typeof(Pathfinding.Util.RetainedGizmos.Hasher));
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			obj.HashNode(arg0);
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hash(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.RetainedGizmos.Hasher obj = (Pathfinding.Util.RetainedGizmos.Hasher)o;
			ulong ret = obj.Hash;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Hash on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __default__(IntPtr L)
	{
		try
		{
			var o = new Pathfinding.Util.RetainedGizmos.Hasher();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __clone__(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (Pathfinding.Util.RetainedGizmos.Hasher)ToLua.CheckObject(L, 1, typeof(Pathfinding.Util.RetainedGizmos.Hasher));
			var o = obj;
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

