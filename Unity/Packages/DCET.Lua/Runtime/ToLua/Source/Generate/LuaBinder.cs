//this source code was auto-generated by tolua#, do not modify it
using System;
using UnityEngine;
using LuaInterface;

public static class LuaBinder
{
	public static void Bind(LuaState L)
	{
		float t = Time.realtimeSinceStartup;
		L.BeginModule(null);
		LuaInterface_DebuggerWrap.Register(L);
		LuaProfilerWrap.Register(L);
		AstarPathWrap.Register(L);
		L.BeginModule("LuaInterface");
		LuaInterface_LuaInjectionStationWrap.Register(L);
		LuaInterface_InjectTypeWrap.Register(L);
		L.EndModule();
		L.BeginModule("UnityEngine");
		UnityEngine_ComponentWrap.Register(L);
		UnityEngine_TransformWrap.Register(L);
		UnityEngine_MaterialWrap.Register(L);
		UnityEngine_LightWrap.Register(L);
		UnityEngine_CameraWrap.Register(L);
		UnityEngine_AudioSourceWrap.Register(L);
		UnityEngine_YieldInstructionWrap.Register(L);
		UnityEngine_WaitForEndOfFrameWrap.Register(L);
		UnityEngine_WaitForFixedUpdateWrap.Register(L);
		UnityEngine_WaitForSecondsWrap.Register(L);
		UnityEngine_BehaviourWrap.Register(L);
		UnityEngine_MonoBehaviourWrap.Register(L);
		UnityEngine_GameObjectWrap.Register(L);
		UnityEngine_TrackedReferenceWrap.Register(L);
		UnityEngine_ApplicationWrap.Register(L);
		UnityEngine_PhysicsWrap.Register(L);
		UnityEngine_ColliderWrap.Register(L);
		UnityEngine_TimeWrap.Register(L);
		UnityEngine_TextureWrap.Register(L);
		UnityEngine_Texture2DWrap.Register(L);
		UnityEngine_ShaderWrap.Register(L);
		UnityEngine_RendererWrap.Register(L);
		UnityEngine_WWWWrap.Register(L);
		UnityEngine_ScreenWrap.Register(L);
		UnityEngine_CameraClearFlagsWrap.Register(L);
		UnityEngine_AudioClipWrap.Register(L);
		UnityEngine_AssetBundleWrap.Register(L);
		UnityEngine_ParticleSystemWrap.Register(L);
		UnityEngine_AsyncOperationWrap.Register(L);
		UnityEngine_LightTypeWrap.Register(L);
		UnityEngine_SleepTimeoutWrap.Register(L);
		UnityEngine_AnimatorWrap.Register(L);
		UnityEngine_InputWrap.Register(L);
		UnityEngine_KeyCodeWrap.Register(L);
		UnityEngine_SkinnedMeshRendererWrap.Register(L);
		UnityEngine_SpaceWrap.Register(L);
		UnityEngine_AnimationBlendModeWrap.Register(L);
		UnityEngine_QueueModeWrap.Register(L);
		UnityEngine_PlayModeWrap.Register(L);
		UnityEngine_WrapModeWrap.Register(L);
		UnityEngine_QualitySettingsWrap.Register(L);
		UnityEngine_RenderSettingsWrap.Register(L);
		UnityEngine_ResourcesWrap.Register(L);
		UnityEngine_RuntimeAnimatorControllerWrap.Register(L);
		UnityEngine_AnimatorControllerParameterWrap.Register(L);
		UnityEngine_AssetBundleManifestWrap.Register(L);
		UnityEngine_TextAssetWrap.Register(L);
		UnityEngine_AudioBehaviourWrap.Register(L);
		UnityEngine_ScriptableObjectWrap.Register(L);
		UnityEngine_PropertyAttributeWrap.Register(L);
		L.BeginModule("SceneManagement");
		UnityEngine_SceneManagement_SceneManagerWrap.Register(L);
		L.EndModule();
		L.BeginModule("Networking");
		UnityEngine_Networking_CertificateHandlerWrap.Register(L);
		L.EndModule();
		L.BeginModule("Events");
		L.RegFunction("UnityAction", UnityEngine_Events_UnityAction);
		L.RegFunction("UnityAction_UnityEngine_SceneManagement_Scene_UnityEngine_SceneManagement_LoadSceneMode", UnityEngine_Events_UnityAction_UnityEngine_SceneManagement_Scene_UnityEngine_SceneManagement_LoadSceneMode);
		L.RegFunction("UnityAction_UnityEngine_SceneManagement_Scene", UnityEngine_Events_UnityAction_UnityEngine_SceneManagement_Scene);
		L.RegFunction("UnityAction_UnityEngine_SceneManagement_Scene_UnityEngine_SceneManagement_Scene", UnityEngine_Events_UnityAction_UnityEngine_SceneManagement_Scene_UnityEngine_SceneManagement_Scene);
		L.EndModule();
		L.BeginModule("Camera");
		L.RegFunction("CameraCallback", UnityEngine_Camera_CameraCallback);
		L.EndModule();
		L.BeginModule("Application");
		L.RegFunction("AdvertisingIdentifierCallback", UnityEngine_Application_AdvertisingIdentifierCallback);
		L.RegFunction("LowMemoryCallback", UnityEngine_Application_LowMemoryCallback);
		L.RegFunction("LogCallback", UnityEngine_Application_LogCallback);
		L.EndModule();
		L.BeginModule("AudioClip");
		L.RegFunction("PCMReaderCallback", UnityEngine_AudioClip_PCMReaderCallback);
		L.RegFunction("PCMSetPositionCallback", UnityEngine_AudioClip_PCMSetPositionCallback);
		L.EndModule();
		L.EndModule();
		L.BeginModule("System");
		System_SerializableAttributeWrap.Register(L);
		System_EventArgsWrap.Register(L);
		System_AttributeWrap.Register(L);
		System_SystemExceptionWrap.Register(L);
		System_ExceptionWrap.Register(L);
		System_MarshalByRefObjectWrap.Register(L);
		L.RegFunction("Action", System_Action);
		L.RegFunction("Predicate_int", System_Predicate_int);
		L.RegFunction("Action_int", System_Action_int);
		L.RegFunction("Comparison_int", System_Comparison_int);
		L.RegFunction("Func_int_int", System_Func_int_int);
		L.RegFunction("Action_bool", System_Action_bool);
		L.RegFunction("Func_bool", System_Func_bool);
		L.RegFunction("Action_UnityEngine_AsyncOperation", System_Action_UnityEngine_AsyncOperation);
		L.RegFunction("AsyncCallback", System_AsyncCallback);
		L.RegFunction("EventHandler_System_Net_Sockets_SocketAsyncEventArgs", System_EventHandler_System_Net_Sockets_SocketAsyncEventArgs);
		L.RegFunction("Predicate_BehaviorDesigner_Runtime_Tasks_HotfixAction", System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixAction);
		L.RegFunction("Action_BehaviorDesigner_Runtime_Tasks_HotfixAction", System_Action_BehaviorDesigner_Runtime_Tasks_HotfixAction);
		L.RegFunction("Comparison_BehaviorDesigner_Runtime_Tasks_HotfixAction", System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixAction);
		L.RegFunction("Predicate_BehaviorDesigner_Runtime_Tasks_HotfixComposite", System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixComposite);
		L.RegFunction("Action_BehaviorDesigner_Runtime_Tasks_HotfixComposite", System_Action_BehaviorDesigner_Runtime_Tasks_HotfixComposite);
		L.RegFunction("Comparison_BehaviorDesigner_Runtime_Tasks_HotfixComposite", System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixComposite);
		L.RegFunction("Predicate_BehaviorDesigner_Runtime_Tasks_HotfixConditional", System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixConditional);
		L.RegFunction("Action_BehaviorDesigner_Runtime_Tasks_HotfixConditional", System_Action_BehaviorDesigner_Runtime_Tasks_HotfixConditional);
		L.RegFunction("Comparison_BehaviorDesigner_Runtime_Tasks_HotfixConditional", System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixConditional);
		L.RegFunction("Predicate_BehaviorDesigner_Runtime_Tasks_HotfixDecorator", System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixDecorator);
		L.RegFunction("Action_BehaviorDesigner_Runtime_Tasks_HotfixDecorator", System_Action_BehaviorDesigner_Runtime_Tasks_HotfixDecorator);
		L.RegFunction("Comparison_BehaviorDesigner_Runtime_Tasks_HotfixDecorator", System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixDecorator);
		L.RegFunction("Action_System_IO_MemoryStream", System_Action_System_IO_MemoryStream);
		L.RegFunction("Action_System_Net_Sockets_Socket", System_Action_System_Net_Sockets_Socket);
		L.RegFunction("Func_float", System_Func_float);
		L.RegFunction("Func_BehaviorDesigner_Runtime_Tasks_TaskStatus", System_Func_BehaviorDesigner_Runtime_Tasks_TaskStatus);
		L.RegFunction("Func_object_bool", System_Func_object_bool);
		L.RegFunction("Func_int", System_Func_int);
		L.RegFunction("Func_string", System_Func_string);
		L.RegFunction("Func_BehaviorDesigner_Runtime_Tasks_TaskStatus_BehaviorDesigner_Runtime_Tasks_TaskStatus", System_Func_BehaviorDesigner_Runtime_Tasks_TaskStatus_BehaviorDesigner_Runtime_Tasks_TaskStatus);
		L.RegFunction("Action_int_BehaviorDesigner_Runtime_Tasks_TaskStatus", System_Action_int_BehaviorDesigner_Runtime_Tasks_TaskStatus);
		L.RegFunction("Action_BehaviorDesigner_Runtime_Tasks_TaskStatus", System_Action_BehaviorDesigner_Runtime_Tasks_TaskStatus);
		L.RegFunction("Action_System_Collections_Generic_List_int_bool", System_Action_System_Collections_Generic_List_int_bool);
		L.RegFunction("Action_PF_GraphNode", System_Action_PF_GraphNode);
		L.RegFunction("Func_PF_GraphNode_bool", System_Func_PF_GraphNode_bool);
		L.RegFunction("Action_PF_NavmeshTiles", System_Action_PF_NavmeshTiles);
		L.RegFunction("Action_PF_Path", System_Action_PF_Path);
		L.RegFunction("Func_PF_NavGraph_bool", System_Func_PF_NavGraph_bool);
		L.RegFunction("Action_System_Collections_Generic_List_PF_Int3_bool", System_Action_System_Collections_Generic_List_PF_Int3_bool);
		L.RegFunction("Action_Pathfinding_IWorkItemContext", System_Action_Pathfinding_IWorkItemContext);
		L.RegFunction("Func_bool_bool", System_Func_bool_bool);
		L.RegFunction("Func_Pathfinding_IWorkItemContext_bool_bool", System_Func_Pathfinding_IWorkItemContext_bool_bool);
		L.RegFunction("Action_UnityEngine_Bounds", System_Action_UnityEngine_Bounds);
		L.RegFunction("Func_UnityEngine_Vector3", System_Func_UnityEngine_Vector3);
		L.RegFunction("Action_floats_int", System_Action_floats_int);
		L.RegFunction("Action_UnityEngine_Collision", System_Action_UnityEngine_Collision);
		L.RegFunction("Action_UnityEngine_Collision2D", System_Action_UnityEngine_Collision2D);
		L.RegFunction("Action_UnityEngine_ControllerColliderHit", System_Action_UnityEngine_ControllerColliderHit);
		L.RegFunction("Action_float", System_Action_float);
		L.RegFunction("Action_UnityEngine_Joint2D", System_Action_UnityEngine_Joint2D);
		L.RegFunction("Action_UnityEngine_GameObject", System_Action_UnityEngine_GameObject);
		L.RegFunction("Action_UnityEngine_Collider", System_Action_UnityEngine_Collider);
		L.RegFunction("Action_UnityEngine_Collider2D", System_Action_UnityEngine_Collider2D);
		L.RegFunction("EventHandler_System_Diagnostics_Tracing_EventCommandEventArgs", System_EventHandler_System_Diagnostics_Tracing_EventCommandEventArgs);
		L.BeginModule("Net");
		System_Net_IPEndPointWrap.Register(L);
		System_Net_EndPointWrap.Register(L);
		System_Net_IPAddressWrap.Register(L);
		L.BeginModule("Sockets");
		System_Net_Sockets_SocketWrap.Register(L);
		System_Net_Sockets_AddressFamilyWrap.Register(L);
		System_Net_Sockets_SocketTypeWrap.Register(L);
		System_Net_Sockets_ProtocolTypeWrap.Register(L);
		System_Net_Sockets_SocketAsyncEventArgsWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("IO");
		System_IO_PathWrap.Register(L);
		System_IO_IOExceptionWrap.Register(L);
		System_IO_StreamWrap.Register(L);
		System_IO_MemoryStreamWrap.Register(L);
		L.EndModule();
		L.BeginModule("Collections");
		L.BeginModule("Generic");
		System_Collections_Generic_List_BehaviorDesigner_Runtime_Tasks_HotfixActionWrap.Register(L);
		System_Collections_Generic_List_BehaviorDesigner_Runtime_Tasks_HotfixCompositeWrap.Register(L);
		System_Collections_Generic_List_BehaviorDesigner_Runtime_Tasks_HotfixConditionalWrap.Register(L);
		System_Collections_Generic_List_BehaviorDesigner_Runtime_Tasks_HotfixDecoratorWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("Text");
		System_Text_EncodingWrap.Register(L);
		L.EndModule();
		L.BeginModule("Threading");
		System_Threading_SynchronizationContextWrap.Register(L);
		L.RegFunction("SendOrPostCallback", System_Threading_SendOrPostCallback);
		L.EndModule();
		L.BeginModule("Diagnostics");
		L.BeginModule("Tracing");
		System_Diagnostics_Tracing_EventSourceWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.EndModule();
		L.BeginModule("CSharpLua");
		CSharpLua_BridgeMonoBehaviourWrap.Register(L);
		L.EndModule();
		L.BeginModule("ProtoBuf");
		ProtoBuf_ProtoMemberAttributeWrap.Register(L);
		ProtoBuf_ProtoContractAttributeWrap.Register(L);
		L.EndModule();
		L.BeginModule("MongoDB");
		L.BeginModule("Bson");
		L.BeginModule("Serialization");
		L.BeginModule("Attributes");
		MongoDB_Bson_Serialization_Attributes_BsonIgnoreAttributeWrap.Register(L);
		MongoDB_Bson_Serialization_Attributes_BsonIgnoreExtraElementsAttributeWrap.Register(L);
		MongoDB_Bson_Serialization_Attributes_BsonIgnoreIfDefaultAttributeWrap.Register(L);
		MongoDB_Bson_Serialization_Attributes_BsonDefaultValueAttributeWrap.Register(L);
		MongoDB_Bson_Serialization_Attributes_BsonElementAttributeWrap.Register(L);
		MongoDB_Bson_Serialization_Attributes_BsonIdAttributeWrap.Register(L);
		MongoDB_Bson_Serialization_Attributes_BsonIgnoreIfNullAttributeWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.EndModule();
		L.EndModule();
		L.BeginModule("DCETRuntime");
		DCETRuntime_BundleDownloaderWrap.Register(L);
		DCETRuntime_GlobalConfigComponentWrap.Register(L);
		DCETRuntime_GlobalProtoWrap.Register(L);
		DCETRuntime_FileVersionInfoWrap.Register(L);
		DCETRuntime_VersionConfigWrap.Register(L);
		DCETRuntime_KcpWrap.Register(L);
		DCETRuntime_ParserStateWrap.Register(L);
		DCETRuntime_PacketWrap.Register(L);
		DCETRuntime_PacketParserWrap.Register(L);
		DCETRuntime_ErrorCodeWrap.Register(L);
		DCETRuntime_TChannelProxyWrap.Register(L);
		DCETRuntime_TServiceProxyWrap.Register(L);
		DCETRuntime_FUIPackageWrap.Register(L);
		DCETRuntime_CircularBufferWrap.Register(L);
		DCETRuntime_ComponentViewWrap.Register(L);
		DCETRuntime_DefineWrap.Register(L);
		DCETRuntime_GameLoopWrap.Register(L);
		DCETRuntime_IStaticMethodWrap.Register(L);
		DCETRuntime_MonoStaticMethodWrap.Register(L);
		DCETRuntime_OneThreadSynchronizationContextWrap.Register(L);
		DCETRuntime_AssetBundleHelperWrap.Register(L);
		DCETRuntime_AssetDatabaseHelperWrap.Register(L);
		DCETRuntime_ByteHelperWrap.Register(L);
		DCETRuntime_FileHelperWrap.Register(L);
		DCETRuntime_GameObjectHelperWrap.Register(L);
		DCETRuntime_MD5HelperWrap.Register(L);
		DCETRuntime_MongoHelperWrap.Register(L);
		DCETRuntime_PathHelperWrap.Register(L);
		DCETRuntime_ProcessHelperWrap.Register(L);
		DCETRuntime_ResourcesHelperWrap.Register(L);
		DCETRuntime_StringHelperWrap.Register(L);
		DCETRuntime_ZipHelperWrap.Register(L);
		DCETRuntime_AssetBundleLoaderAsyncWrap.Register(L);
		DCETRuntime_AssetBundlesWrap.Register(L);
		DCETRuntime_AssetLoaderAsyncWrap.Register(L);
		DCETRuntime_CameraDepthTextureWrap.Register(L);
		DCETRuntime_GizmosDebugWrap.Register(L);
		DCETRuntime_LogWrap.Register(L);
		DCETRuntime_MonoBehaviourBridgeWrap.Register(L);
		DCETRuntime_PrefabLightmapDataWrap.Register(L);
		DCETRuntime_ReferenceCollectorDataWrap.Register(L);
		DCETRuntime_ReferenceCollectorDataComparerWrap.Register(L);
		DCETRuntime_ReferenceCollectorWrap.Register(L);
		DCETRuntime_ReferenceLoaderWrap.Register(L);
		DCETRuntime_AcceptAllCertificateWrap.Register(L);
		DCETRuntime_UnityWebRequestAsyncWrap.Register(L);
		L.RegFunction("KcpOutput", DCETRuntime_KcpOutput);
		L.BeginModule("PrefabLightmapData");
		DCETRuntime_PrefabLightmapData_MeshRendererLightmapDataWrap.Register(L);
		DCETRuntime_PrefabLightmapData_TerrainLightmapDataWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("BehaviorDesigner");
		L.BeginModule("Runtime");
		BehaviorDesigner_Runtime_BehaviorTreeWrap.Register(L);
		BehaviorDesigner_Runtime_BehaviorTreeControllerWrap.Register(L);
		BehaviorDesigner_Runtime_ExternalBehaviorTreeWrap.Register(L);
		BehaviorDesigner_Runtime_BehaviorWrap.Register(L);
		BehaviorDesigner_Runtime_ExternalBehaviorWrap.Register(L);
		L.BeginModule("Tasks");
		BehaviorDesigner_Runtime_Tasks_HotfixActionWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_EntryTaskWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_HotfixCompositeWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ParallelWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ParallelCompleteWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ParallelSelectorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_PrioritySelectorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_RandomSelectorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_RandomSequenceWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_SelectorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_SelectorEvaluatorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_SequenceWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_UtilitySelectorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_HotfixConditionalWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ConditionalEvaluatorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_HotfixDecoratorWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_InterruptWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_InverterWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_RepeaterWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ReturnFailureWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ReturnSuccessWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_TaskGuardWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_UntilFailureWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_UntilSuccessWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ActionWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_TaskWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ParentTaskWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_CompositeWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_ConditionalWrap.Register(L);
		BehaviorDesigner_Runtime_Tasks_DecoratorWrap.Register(L);
		L.EndModule();
		L.BeginModule("Behavior");
		L.RegFunction("BehaviorHandler", BehaviorDesigner_Runtime_Behavior_BehaviorHandler);
		L.EndModule();
		L.EndModule();
		L.EndModule();
		L.BeginModule("PF");
		PF_ListExtensionsWrap.Register(L);
		PF_ChecksumWrap.Register(L);
		PF_AStarConfigWrap.Register(L);
		PF_AstarDeserializerWrap.Register(L);
		PF_VectorMathWrap.Register(L);
		PF_AstarMathWrap.Register(L);
		PF_PolygonWrap.Register(L);
		PF_MemoryWrap.Register(L);
		PF_BBTreeWrap.Register(L);
		PF_BinaryHeapWrap.Register(L);
		PF_HeuristicOptimizationModeWrap.Register(L);
		PF_EuclideanEmbeddingWrap.Register(L);
		PF_FunnelWrap.Register(L);
		PF_ConnectionWrap.Register(L);
		PF_GraphNodeWrap.Register(L);
		PF_MeshNodeWrap.Register(L);
		PF_GraphTransformWrap.Register(L);
		PF_GuidWrap.Register(L);
		PF_Int3Wrap.Register(L);
		PF_Int2Wrap.Register(L);
		PF_IntRectWrap.Register(L);
		PF_NavGraphWrap.Register(L);
		PF_GraphHitInfoWrap.Register(L);
		PF_NavmeshBaseWrap.Register(L);
		PF_NavmeshTileWrap.Register(L);
		PF_NNConstraintWrap.Register(L);
		PF_PathNNConstraintWrap.Register(L);
		PF_NNInfoInternalWrap.Register(L);
		PF_NNInfoWrap.Register(L);
		PF_GraphUpdateThreadingWrap.Register(L);
		PF_ThreadCountWrap.Register(L);
		PF_PathStateWrap.Register(L);
		PF_PathCompleteStateWrap.Register(L);
		PF_CloseToDestinationModeWrap.Register(L);
		PF_SideWrap.Register(L);
		PF_InspectorGridModeWrap.Register(L);
		PF_DefaultITraversalProviderWrap.Register(L);
		PF_PathWrap.Register(L);
		PF_ABPathWrap.Register(L);
		PF_ConstantPathWrap.Register(L);
		PF_EndingConditionDistanceWrap.Register(L);
		PF_FleePathWrap.Register(L);
		PF_FloodPathWrap.Register(L);
		PF_FloodPathConstraintWrap.Register(L);
		PF_FloodPathTracerWrap.Register(L);
		PF_MultiTargetPathWrap.Register(L);
		PF_RandomPathWrap.Register(L);
		PF_XPathWrap.Register(L);
		PF_PathEndingConditionWrap.Register(L);
		PF_ABPathEndingConditionWrap.Register(L);
		PF_EndingConditionProximityWrap.Register(L);
		PF_GraphDebugModeWrap.Register(L);
		PF_PathLogWrap.Register(L);
		PF_HeuristicWrap.Register(L);
		PF_PathFindHelperWrap.Register(L);
		PF_PathNodeWrap.Register(L);
		PF_PathHandlerWrap.Register(L);
		PF_PathPoolWrap.Register(L);
		PF_PathProcessorWrap.Register(L);
		PF_PathReturnQueueWrap.Register(L);
		PF_RecastGraphWrap.Register(L);
		PF_GraphSerializationContextWrap.Register(L);
		PF_AstarSerializerWrap.Register(L);
		PF_GraphMetaWrap.Register(L);
		PF_SerializeSettingsWrap.Register(L);
		PF_JsonMemberAttributeWrap.Register(L);
		PF_JsonOptInAttributeWrap.Register(L);
		PF_TinyJsonSerializerWrap.Register(L);
		PF_TinyJsonDeserializerWrap.Register(L);
		PF_TriangleMeshNodeWrap.Register(L);
		PF_WindowsStoreCompatibilityWrap.Register(L);
		L.RegFunction("OnPathDelegate", PF_OnPathDelegate);
		L.BeginModule("Funnel");
		PF_Funnel_FunnelPortalsWrap.Register(L);
		PF_Funnel_PathPartWrap.Register(L);
		L.EndModule();
		L.BeginModule("MultiTargetPath");
		PF_MultiTargetPath_HeuristicModeWrap.Register(L);
		L.EndModule();
		L.BeginModule("PathProcessor");
		PF_PathProcessor_GraphUpdateLockWrap.Register(L);
		L.EndModule();
		L.BeginModule("RecastGraph");
		PF_RecastGraph_RelevantGraphSurfaceModeWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("Pathfinding");
		Pathfinding_AIDestinationSetterWrap.Register(L);
		Pathfinding_PatrolWrap.Register(L);
		Pathfinding_AIBaseWrap.Register(L);
		Pathfinding_AILerpWrap.Register(L);
		Pathfinding_AIPathWrap.Register(L);
		Pathfinding_SeekerWrap.Register(L);
		Pathfinding_AstarColorWrap.Register(L);
		Pathfinding_ProgressWrap.Register(L);
		Pathfinding_GraphUpdateObjectWrap.Register(L);
		Pathfinding_AstarDataWrap.Register(L);
		Pathfinding_GraphUpdateSceneWrap.Register(L);
		Pathfinding_GraphUpdateShapeWrap.Register(L);
		Pathfinding_AstarDebuggerWrap.Register(L);
		Pathfinding_GraphEditorBaseWrap.Register(L);
		Pathfinding_GraphModifierWrap.Register(L);
		Pathfinding_GraphUtilitiesWrap.Register(L);
		Pathfinding_NodeLinkWrap.Register(L);
		Pathfinding_AstarWorkItemWrap.Register(L);
		Pathfinding_RecastTileUpdateWrap.Register(L);
		Pathfinding_RecastTileUpdateHandlerWrap.Register(L);
		Pathfinding_TargetMoverWrap.Register(L);
		Pathfinding_ObjImporterWrap.Register(L);
		Pathfinding_RecastBBTreeWrap.Register(L);
		Pathfinding_RecastBBTreeBoxWrap.Register(L);
		Pathfinding_RecastMeshObjWrap.Register(L);
		Pathfinding_MathHelperWrap.Register(L);
		Pathfinding_AdvancedSmoothWrap.Register(L);
		Pathfinding_AlternativePathWrap.Register(L);
		Pathfinding_FunnelModifierWrap.Register(L);
		Pathfinding_PathModifierWrap.Register(L);
		Pathfinding_MonoModifierWrap.Register(L);
		Pathfinding_RadiusModifierWrap.Register(L);
		Pathfinding_RaycastModifierWrap.Register(L);
		Pathfinding_SimpleSmoothModifierWrap.Register(L);
		Pathfinding_StartEndModifierWrap.Register(L);
		Pathfinding_RelevantGraphSurfaceWrap.Register(L);
		Pathfinding_EnumFlagAttributeWrap.Register(L);
		Pathfinding_UniqueComponentAttributeWrap.Register(L);
		Pathfinding_VersionedMonoBehaviourWrap.Register(L);
		Pathfinding_BlockManagerWrap.Register(L);
		Pathfinding_SingleNodeBlockerWrap.Register(L);
		Pathfinding_UnityHelperWrap.Register(L);
		Pathfinding_AstarProfilerWrap.Register(L);
		Pathfinding_GraphUpdateUtilitiesWrap.Register(L);
		Pathfinding_PathUtilitiesWrap.Register(L);
		Pathfinding_ProfileWrap.Register(L);
		Pathfinding_UnityReferenceHelperWrap.Register(L);
		L.RegFunction("OnScanStatus", Pathfinding_OnScanStatus);
		L.RegFunction("OnGraphDelegate", Pathfinding_OnGraphDelegate);
		L.RegFunction("OnScanDelegate", Pathfinding_OnScanDelegate);
		L.BeginModule("Voxels");
		Pathfinding_Voxels_VoxelAreaWrap.Register(L);
		Pathfinding_Voxels_LinkedVoxelSpanWrap.Register(L);
		Pathfinding_Voxels_ExtraMeshWrap.Register(L);
		Pathfinding_Voxels_RasterizationMeshWrap.Register(L);
		Pathfinding_Voxels_VoxelContourSetWrap.Register(L);
		Pathfinding_Voxels_VoxelContourWrap.Register(L);
		Pathfinding_Voxels_VoxelMeshWrap.Register(L);
		Pathfinding_Voxels_VoxelCellWrap.Register(L);
		Pathfinding_Voxels_CompactVoxelCellWrap.Register(L);
		Pathfinding_Voxels_CompactVoxelSpanWrap.Register(L);
		Pathfinding_Voxels_VoxelSpanWrap.Register(L);
		Pathfinding_Voxels_VoxelizeWrap.Register(L);
		Pathfinding_Voxels_UtilityWrap.Register(L);
		L.EndModule();
		L.BeginModule("Util");
		Pathfinding_Util_DrawWrap.Register(L);
		Pathfinding_Util_MovementUtilitiesWrap.Register(L);
		Pathfinding_Util_PathInterpolatorWrap.Register(L);
		Pathfinding_Util_GraphGizmoHelperWrap.Register(L);
		Pathfinding_Util_RetainedGizmosWrap.Register(L);
		L.BeginModule("RetainedGizmos");
		Pathfinding_Util_RetainedGizmos_HasherWrap.Register(L);
		Pathfinding_Util_RetainedGizmos_BuilderWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("RVO");
		Pathfinding_RVO_ObstacleVertexWrap.Register(L);
		Pathfinding_RVO_MovementPlaneWrap.Register(L);
		Pathfinding_RVO_RVOLayerWrap.Register(L);
		Pathfinding_RVO_SimulatorWrap.Register(L);
		Pathfinding_RVO_LineWrap.Register(L);
		Pathfinding_RVO_RVOQuadtreeWrap.Register(L);
		Pathfinding_RVO_RVOControllerWrap.Register(L);
		Pathfinding_RVO_RVONavmeshWrap.Register(L);
		Pathfinding_RVO_RVOObstacleWrap.Register(L);
		Pathfinding_RVO_RVOSimulatorWrap.Register(L);
		Pathfinding_RVO_RVOSquareObstacleWrap.Register(L);
		L.BeginModule("Sampled");
		Pathfinding_RVO_Sampled_AgentWrap.Register(L);
		L.EndModule();
		L.BeginModule("RVOObstacle");
		Pathfinding_RVO_RVOObstacle_ObstacleVertexWindingWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("Examples");
		Pathfinding_Examples_TurnBasedAIWrap.Register(L);
		Pathfinding_Examples_MecanimBridgeWrap.Register(L);
		Pathfinding_Examples_MineBotAnimationWrap.Register(L);
		L.EndModule();
		L.BeginModule("Seeker");
		Pathfinding_Seeker_ModifierPassWrap.Register(L);
		L.EndModule();
		L.BeginModule("GraphModifier");
		Pathfinding_GraphModifier_EventTypeWrap.Register(L);
		L.EndModule();
		L.BeginModule("AdvancedSmooth");
		Pathfinding_AdvancedSmooth_MaxTurnWrap.Register(L);
		Pathfinding_AdvancedSmooth_ConstantTurnWrap.Register(L);
		Pathfinding_AdvancedSmooth_TurnConstructorWrap.Register(L);
		Pathfinding_AdvancedSmooth_TurnWrap.Register(L);
		L.EndModule();
		L.BeginModule("RaycastModifier");
		Pathfinding_RaycastModifier_QualityWrap.Register(L);
		L.EndModule();
		L.BeginModule("SimpleSmoothModifier");
		Pathfinding_SimpleSmoothModifier_SmoothTypeWrap.Register(L);
		L.EndModule();
		L.BeginModule("StartEndModifier");
		Pathfinding_StartEndModifier_ExactnessWrap.Register(L);
		L.EndModule();
		L.BeginModule("BlockManager");
		Pathfinding_BlockManager_BlockModeWrap.Register(L);
		Pathfinding_BlockManager_TraversalProviderWrap.Register(L);
		L.EndModule();
		L.BeginModule("AstarProfiler");
		Pathfinding_AstarProfiler_ProfilePointWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("AstarPath");
		AstarPath_AstarDistributionWrap.Register(L);
		L.EndModule();
		L.BeginModule("FairyGUI");
		FairyGUI_BlendModeWrap.Register(L);
		FairyGUI_BlendModeUtilsWrap.Register(L);
		FairyGUI_CaptureCameraWrap.Register(L);
		FairyGUI_ContainerWrap.Register(L);
		FairyGUI_DisplayObjectWrap.Register(L);
		FairyGUI_DisplayObjectInfoWrap.Register(L);
		FairyGUI_DisplayOptionsWrap.Register(L);
		FairyGUI_GoWrapperWrap.Register(L);
		FairyGUI_ColliderHitTestWrap.Register(L);
		FairyGUI_HitTestContextWrap.Register(L);
		FairyGUI_HitTestModeWrap.Register(L);
		FairyGUI_MeshColliderHitTestWrap.Register(L);
		FairyGUI_PixelHitTestDataWrap.Register(L);
		FairyGUI_PixelHitTestWrap.Register(L);
		FairyGUI_RectHitTestWrap.Register(L);
		FairyGUI_ImageWrap.Register(L);
		FairyGUI_MaterialManagerWrap.Register(L);
		FairyGUI_CompositeMeshWrap.Register(L);
		FairyGUI_EllipseMeshWrap.Register(L);
		FairyGUI_FillMeshWrap.Register(L);
		FairyGUI_LineMeshWrap.Register(L);
		FairyGUI_PolygonMeshWrap.Register(L);
		FairyGUI_RectMeshWrap.Register(L);
		FairyGUI_RegularPolygonMeshWrap.Register(L);
		FairyGUI_RoundedRectMeshWrap.Register(L);
		FairyGUI_VertexBufferWrap.Register(L);
		FairyGUI_MovieClipWrap.Register(L);
		FairyGUI_NAudioClipWrap.Register(L);
		FairyGUI_NGraphicsWrap.Register(L);
		FairyGUI_NMaterialWrap.Register(L);
		FairyGUI_DestroyMethodWrap.Register(L);
		FairyGUI_NTextureWrap.Register(L);
		FairyGUI_ShaderConfigWrap.Register(L);
		FairyGUI_ShapeWrap.Register(L);
		FairyGUI_StageWrap.Register(L);
		FairyGUI_StageCameraWrap.Register(L);
		FairyGUI_StageEngineWrap.Register(L);
		FairyGUI_StatsWrap.Register(L);
		FairyGUI_BaseFontWrap.Register(L);
		FairyGUI_GlyphInfoWrap.Register(L);
		FairyGUI_BitmapFontWrap.Register(L);
		FairyGUI_CopyPastePatchWrap.Register(L);
		FairyGUI_DynamicFontWrap.Register(L);
		FairyGUI_EmojiWrap.Register(L);
		FairyGUI_FontManagerWrap.Register(L);
		FairyGUI_InputTextFieldWrap.Register(L);
		FairyGUI_RichTextFieldWrap.Register(L);
		FairyGUI_RTLSupportWrap.Register(L);
		FairyGUI_SelectionShapeWrap.Register(L);
		FairyGUI_TextFieldWrap.Register(L);
		FairyGUI_TextFormatWrap.Register(L);
		FairyGUI_TouchScreenKeyboardWrap.Register(L);
		FairyGUI_TypingEffectWrap.Register(L);
		FairyGUI_UpdateContextWrap.Register(L);
		FairyGUI_EventContextWrap.Register(L);
		FairyGUI_EventDispatcherWrap.Register(L);
		FairyGUI_EventListenerWrap.Register(L);
		FairyGUI_InputEventWrap.Register(L);
		FairyGUI_BlurFilterWrap.Register(L);
		FairyGUI_ColorFilterWrap.Register(L);
		FairyGUI_LongPressGestureWrap.Register(L);
		FairyGUI_PinchGestureWrap.Register(L);
		FairyGUI_RotationGestureWrap.Register(L);
		FairyGUI_SwipeGestureWrap.Register(L);
		FairyGUI_EaseTypeWrap.Register(L);
		FairyGUI_GPathPointWrap.Register(L);
		FairyGUI_GPathWrap.Register(L);
		FairyGUI_GTweenWrap.Register(L);
		FairyGUI_GTweenerWrap.Register(L);
		FairyGUI_TweenPropTypeWrap.Register(L);
		FairyGUI_TweenValueWrap.Register(L);
		FairyGUI_ChangePageActionWrap.Register(L);
		FairyGUI_ControllerActionWrap.Register(L);
		FairyGUI_PlayTransitionActionWrap.Register(L);
		FairyGUI_AsyncCreationHelperWrap.Register(L);
		FairyGUI_ControllerWrap.Register(L);
		FairyGUI_DragDropManagerWrap.Register(L);
		FairyGUI_EMRenderSupportWrap.Register(L);
		FairyGUI_PackageItemTypeWrap.Register(L);
		FairyGUI_ObjectTypeWrap.Register(L);
		FairyGUI_AlignTypeWrap.Register(L);
		FairyGUI_VertAlignTypeWrap.Register(L);
		FairyGUI_OverflowTypeWrap.Register(L);
		FairyGUI_FillTypeWrap.Register(L);
		FairyGUI_AutoSizeTypeWrap.Register(L);
		FairyGUI_ScrollTypeWrap.Register(L);
		FairyGUI_ScrollBarDisplayTypeWrap.Register(L);
		FairyGUI_RelationTypeWrap.Register(L);
		FairyGUI_ListLayoutTypeWrap.Register(L);
		FairyGUI_ListSelectionModeWrap.Register(L);
		FairyGUI_ProgressTitleTypeWrap.Register(L);
		FairyGUI_ButtonModeWrap.Register(L);
		FairyGUI_TransitionActionTypeWrap.Register(L);
		FairyGUI_GroupLayoutTypeWrap.Register(L);
		FairyGUI_ChildrenRenderOrderWrap.Register(L);
		FairyGUI_PopupDirectionWrap.Register(L);
		FairyGUI_FlipTypeWrap.Register(L);
		FairyGUI_FillMethodWrap.Register(L);
		FairyGUI_OriginHorizontalWrap.Register(L);
		FairyGUI_OriginVerticalWrap.Register(L);
		FairyGUI_Origin90Wrap.Register(L);
		FairyGUI_Origin180Wrap.Register(L);
		FairyGUI_Origin360Wrap.Register(L);
		FairyGUI_GButtonWrap.Register(L);
		FairyGUI_GComboBoxWrap.Register(L);
		FairyGUI_GComponentWrap.Register(L);
		FairyGUI_GearAnimationWrap.Register(L);
		FairyGUI_GearBaseWrap.Register(L);
		FairyGUI_GearTweenConfigWrap.Register(L);
		FairyGUI_GearColorWrap.Register(L);
		FairyGUI_GearDisplayWrap.Register(L);
		FairyGUI_GearIconWrap.Register(L);
		FairyGUI_GearLookWrap.Register(L);
		FairyGUI_GearSizeWrap.Register(L);
		FairyGUI_GearTextWrap.Register(L);
		FairyGUI_GearXYWrap.Register(L);
		FairyGUI_GGraphWrap.Register(L);
		FairyGUI_GGroupWrap.Register(L);
		FairyGUI_GImageWrap.Register(L);
		FairyGUI_GLabelWrap.Register(L);
		FairyGUI_GListWrap.Register(L);
		FairyGUI_GLoaderWrap.Register(L);
		FairyGUI_GMovieClipWrap.Register(L);
		FairyGUI_GObjectWrap.Register(L);
		FairyGUI_GObjectPoolWrap.Register(L);
		FairyGUI_GProgressBarWrap.Register(L);
		FairyGUI_GRichTextFieldWrap.Register(L);
		FairyGUI_GRootWrap.Register(L);
		FairyGUI_GScrollBarWrap.Register(L);
		FairyGUI_GSliderWrap.Register(L);
		FairyGUI_GTextFieldWrap.Register(L);
		FairyGUI_GTextInputWrap.Register(L);
		FairyGUI_MarginWrap.Register(L);
		FairyGUI_PackageItemWrap.Register(L);
		FairyGUI_PageOptionWrap.Register(L);
		FairyGUI_PopupMenuWrap.Register(L);
		FairyGUI_RelationsWrap.Register(L);
		FairyGUI_ScrollPaneWrap.Register(L);
		FairyGUI_TransitionWrap.Register(L);
		FairyGUI_TranslationHelperWrap.Register(L);
		FairyGUI_TreeNodeWrap.Register(L);
		FairyGUI_TreeViewWrap.Register(L);
		FairyGUI_UIConfigWrap.Register(L);
		FairyGUI_UIContentScalerWrap.Register(L);
		FairyGUI_UIObjectFactoryWrap.Register(L);
		FairyGUI_UIPackageWrap.Register(L);
		FairyGUI_UIPainterWrap.Register(L);
		FairyGUI_FitScreenWrap.Register(L);
		FairyGUI_UIPanelWrap.Register(L);
		FairyGUI_WindowWrap.Register(L);
		FairyGUI_TimersWrap.Register(L);
		L.RegFunction("EventCallback0", FairyGUI_EventCallback0);
		L.RegFunction("EventCallback1", FairyGUI_EventCallback1);
		L.RegFunction("GTweenCallback", FairyGUI_GTweenCallback);
		L.RegFunction("GTweenCallback1", FairyGUI_GTweenCallback1);
		L.RegFunction("ListItemRenderer", FairyGUI_ListItemRenderer);
		L.RegFunction("ListItemProvider", FairyGUI_ListItemProvider);
		L.RegFunction("PlayCompleteCallback", FairyGUI_PlayCompleteCallback);
		L.RegFunction("TransitionHook", FairyGUI_TransitionHook);
		L.RegFunction("TimerCallback", FairyGUI_TimerCallback);
		L.BeginModule("Utils");
		FairyGUI_Utils_ByteBufferWrap.Register(L);
		FairyGUI_Utils_HtmlButtonWrap.Register(L);
		FairyGUI_Utils_HtmlElementTypeWrap.Register(L);
		FairyGUI_Utils_HtmlElementWrap.Register(L);
		FairyGUI_Utils_HtmlImageWrap.Register(L);
		FairyGUI_Utils_HtmlInputWrap.Register(L);
		FairyGUI_Utils_HtmlLinkWrap.Register(L);
		FairyGUI_Utils_HtmlPageContextWrap.Register(L);
		FairyGUI_Utils_HtmlParseOptionsWrap.Register(L);
		FairyGUI_Utils_HtmlParserWrap.Register(L);
		FairyGUI_Utils_HtmlSelectWrap.Register(L);
		FairyGUI_Utils_ToolSetWrap.Register(L);
		FairyGUI_Utils_UBBParserWrap.Register(L);
		FairyGUI_Utils_XMLWrap.Register(L);
		FairyGUI_Utils_XMLTagTypeWrap.Register(L);
		FairyGUI_Utils_XMLIteratorWrap.Register(L);
		FairyGUI_Utils_XMLListWrap.Register(L);
		FairyGUI_Utils_XMLUtilsWrap.Register(L);
		FairyGUI_Utils_ZipReaderWrap.Register(L);
		L.BeginModule("XMLList");
		FairyGUI_Utils_XMLList_EnumeratorWrap.Register(L);
		L.EndModule();
		L.BeginModule("ZipReader");
		FairyGUI_Utils_ZipReader_ZipEntryWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.BeginModule("BlendModeUtils");
		FairyGUI_BlendModeUtils_BlendFactorWrap.Register(L);
		L.EndModule();
		L.BeginModule("MovieClip");
		FairyGUI_MovieClip_FrameWrap.Register(L);
		L.EndModule();
		L.BeginModule("ShaderConfig");
		FairyGUI_ShaderConfig_PropertyIDsWrap.Register(L);
		L.RegFunction("GetFunction", FairyGUI_ShaderConfig_GetFunction);
		L.EndModule();
		L.BeginModule("BitmapFont");
		FairyGUI_BitmapFont_BMGlyphWrap.Register(L);
		L.EndModule();
		L.BeginModule("RTLSupport");
		FairyGUI_RTLSupport_DirectionTypeWrap.Register(L);
		L.EndModule();
		L.BeginModule("TextField");
		FairyGUI_TextField_LineInfoWrap.Register(L);
		FairyGUI_TextField_CharPositionWrap.Register(L);
		L.EndModule();
		L.BeginModule("TextFormat");
		FairyGUI_TextFormat_SpecialStyleWrap.Register(L);
		L.EndModule();
		L.BeginModule("UpdateContext");
		FairyGUI_UpdateContext_ClipInfoWrap.Register(L);
		L.EndModule();
		L.BeginModule("GPathPoint");
		FairyGUI_GPathPoint_CurveTypeWrap.Register(L);
		L.EndModule();
		L.BeginModule("ControllerAction");
		FairyGUI_ControllerAction_ActionTypeWrap.Register(L);
		L.EndModule();
		L.BeginModule("UIConfig");
		FairyGUI_UIConfig_ConfigKeyWrap.Register(L);
		FairyGUI_UIConfig_ConfigValueWrap.Register(L);
		L.RegFunction("SoundLoader", FairyGUI_UIConfig_SoundLoader);
		L.EndModule();
		L.BeginModule("UIContentScaler");
		FairyGUI_UIContentScaler_ScaleModeWrap.Register(L);
		FairyGUI_UIContentScaler_ScreenMatchModeWrap.Register(L);
		L.EndModule();
		L.BeginModule("NGraphics");
		L.RegFunction("MeshModifier", FairyGUI_NGraphics_MeshModifier);
		L.EndModule();
		L.BeginModule("InputTextField");
		L.RegFunction("CopyHandler", FairyGUI_InputTextField_CopyHandler);
		L.RegFunction("PasteHandler", FairyGUI_InputTextField_PasteHandler);
		L.EndModule();
		L.BeginModule("UIPackage");
		L.RegFunction("CreateObjectCallback", FairyGUI_UIPackage_CreateObjectCallback);
		L.RegFunction("LoadResource", FairyGUI_UIPackage_LoadResource);
		L.EndModule();
		L.BeginModule("GObjectPool");
		L.RegFunction("InitCallbackDelegate", FairyGUI_GObjectPool_InitCallbackDelegate);
		L.EndModule();
		L.BeginModule("UIObjectFactory");
		L.RegFunction("GComponentCreator", FairyGUI_UIObjectFactory_GComponentCreator);
		L.RegFunction("GLoaderCreator", FairyGUI_UIObjectFactory_GLoaderCreator);
		L.EndModule();
		L.BeginModule("TreeView");
		L.RegFunction("TreeNodeCreateCellDelegate", FairyGUI_TreeView_TreeNodeCreateCellDelegate);
		L.RegFunction("TreeNodeRenderDelegate", FairyGUI_TreeView_TreeNodeRenderDelegate);
		L.RegFunction("TreeNodeWillExpandDelegate", FairyGUI_TreeView_TreeNodeWillExpandDelegate);
		L.EndModule();
		L.EndModule();
		L.BeginModule("Microsoft");
		L.BeginModule("IO");
		Microsoft_IO_RecyclableMemoryStreamManagerWrap.Register(L);
		Microsoft_IO_RecyclableMemoryStreamWrap.Register(L);
		L.BeginModule("RecyclableMemoryStreamManager");
		Microsoft_IO_RecyclableMemoryStreamManager_EventsWrap.Register(L);
		L.RegFunction("EventHandler", Microsoft_IO_RecyclableMemoryStreamManager_EventHandler);
		L.RegFunction("StreamLengthReportHandler", Microsoft_IO_RecyclableMemoryStreamManager_StreamLengthReportHandler);
		L.RegFunction("LargeBufferDiscardedEventHandler", Microsoft_IO_RecyclableMemoryStreamManager_LargeBufferDiscardedEventHandler);
		L.RegFunction("UsageReportEventHandler", Microsoft_IO_RecyclableMemoryStreamManager_UsageReportEventHandler);
		L.BeginModule("Events");
		Microsoft_IO_RecyclableMemoryStreamManager_Events_MemoryStreamBufferTypeWrap.Register(L);
		Microsoft_IO_RecyclableMemoryStreamManager_Events_MemoryStreamDiscardReasonWrap.Register(L);
		L.EndModule();
		L.EndModule();
		L.EndModule();
		L.EndModule();
		L.EndModule();
		L.BeginPreLoad();
		L.AddPreLoad("UnityEngine.MeshRenderer", LuaOpen_UnityEngine_MeshRenderer, typeof(UnityEngine.MeshRenderer));
		L.AddPreLoad("UnityEngine.BoxCollider", LuaOpen_UnityEngine_BoxCollider, typeof(UnityEngine.BoxCollider));
		L.AddPreLoad("UnityEngine.MeshCollider", LuaOpen_UnityEngine_MeshCollider, typeof(UnityEngine.MeshCollider));
		L.AddPreLoad("UnityEngine.SphereCollider", LuaOpen_UnityEngine_SphereCollider, typeof(UnityEngine.SphereCollider));
		L.AddPreLoad("UnityEngine.CharacterController", LuaOpen_UnityEngine_CharacterController, typeof(UnityEngine.CharacterController));
		L.AddPreLoad("UnityEngine.CapsuleCollider", LuaOpen_UnityEngine_CapsuleCollider, typeof(UnityEngine.CapsuleCollider));
		L.AddPreLoad("UnityEngine.Animation", LuaOpen_UnityEngine_Animation, typeof(UnityEngine.Animation));
		L.AddPreLoad("UnityEngine.AnimationClip", LuaOpen_UnityEngine_AnimationClip, typeof(UnityEngine.AnimationClip));
		L.AddPreLoad("UnityEngine.AnimationState", LuaOpen_UnityEngine_AnimationState, typeof(UnityEngine.AnimationState));
		L.AddPreLoad("UnityEngine.BlendWeights", LuaOpen_UnityEngine_BlendWeights, typeof(UnityEngine.BlendWeights));
		L.AddPreLoad("UnityEngine.RenderTexture", LuaOpen_UnityEngine_RenderTexture, typeof(UnityEngine.RenderTexture));
		L.AddPreLoad("UnityEngine.Rigidbody", LuaOpen_UnityEngine_Rigidbody, typeof(UnityEngine.Rigidbody));
		L.EndPreLoad();
		Debugger.Log("Register lua type cost time: {0}", Time.realtimeSinceStartup - t);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Events_UnityAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Events_UnityAction_UnityEngine_SceneManagement_Scene_UnityEngine_SceneManagement_LoadSceneMode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Events_UnityAction_UnityEngine_SceneManagement_Scene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Events_UnityAction_UnityEngine_SceneManagement_Scene_UnityEngine_SceneManagement_Scene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Camera_CameraCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Camera.CameraCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Camera.CameraCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Application_AdvertisingIdentifierCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Application_LowMemoryCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Application.LowMemoryCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Application.LowMemoryCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Application_LogCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.Application.LogCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.Application.LogCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_AudioClip_PCMReaderCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMReaderCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMReaderCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_AudioClip_PCMSetPositionCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Predicate_int(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Predicate<int>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Predicate<int>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_int(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<int>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<int>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Comparison_int(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Comparison<int>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Comparison<int>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_int_int(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<int,int>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<int,int>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_AsyncOperation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.AsyncOperation>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.AsyncOperation>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_AsyncCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.AsyncCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.AsyncCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_EventHandler_System_Net_Sockets_SocketAsyncEventArgs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixAction>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixAction>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_BehaviorDesigner_Runtime_Tasks_HotfixAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixAction>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixAction>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixAction>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixAction>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixComposite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixComposite>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixComposite>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_BehaviorDesigner_Runtime_Tasks_HotfixComposite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixComposite>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixComposite>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixComposite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixComposite>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixComposite>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixConditional(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixConditional>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixConditional>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_BehaviorDesigner_Runtime_Tasks_HotfixConditional(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixConditional>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixConditional>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixConditional(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixConditional>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixConditional>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Predicate_BehaviorDesigner_Runtime_Tasks_HotfixDecorator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixDecorator>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Predicate<BehaviorDesigner.Runtime.Tasks.HotfixDecorator>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_BehaviorDesigner_Runtime_Tasks_HotfixDecorator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixDecorator>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.HotfixDecorator>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Comparison_BehaviorDesigner_Runtime_Tasks_HotfixDecorator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixDecorator>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Comparison<BehaviorDesigner.Runtime.Tasks.HotfixDecorator>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_System_IO_MemoryStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<System.IO.MemoryStream>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<System.IO.MemoryStream>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_System_Net_Sockets_Socket(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<System.Net.Sockets.Socket>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<System.Net.Sockets.Socket>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_float(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<float>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<float>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_BehaviorDesigner_Runtime_Tasks_TaskStatus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_object_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<object,bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<object,bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_int(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<int>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<int>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_string(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<string>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<string>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_BehaviorDesigner_Runtime_Tasks_TaskStatus_BehaviorDesigner_Runtime_Tasks_TaskStatus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<BehaviorDesigner.Runtime.Tasks.TaskStatus,BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<BehaviorDesigner.Runtime.Tasks.TaskStatus,BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_int_BehaviorDesigner_Runtime_Tasks_TaskStatus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<int,BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<int,BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_BehaviorDesigner_Runtime_Tasks_TaskStatus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<BehaviorDesigner.Runtime.Tasks.TaskStatus>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_System_Collections_Generic_List_int_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<System.Collections.Generic.List<int>,bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<System.Collections.Generic.List<int>,bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_PF_GraphNode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<PF.GraphNode>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<PF.GraphNode>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_PF_GraphNode_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<PF.GraphNode,bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<PF.GraphNode,bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_PF_NavmeshTiles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<PF.NavmeshTile[]>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<PF.NavmeshTile[]>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_PF_Path(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<PF.Path>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<PF.Path>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_PF_NavGraph_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<PF.NavGraph,bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<PF.NavGraph,bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_System_Collections_Generic_List_PF_Int3_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<System.Collections.Generic.List<PF.Int3>,bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<System.Collections.Generic.List<PF.Int3>,bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_Pathfinding_IWorkItemContext(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<Pathfinding.IWorkItemContext>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<Pathfinding.IWorkItemContext>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_bool_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<bool,bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<bool,bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_Pathfinding_IWorkItemContext_bool_bool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<Pathfinding.IWorkItemContext,bool,bool>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<Pathfinding.IWorkItemContext,bool,bool>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_Bounds(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Bounds>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Bounds>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Func_UnityEngine_Vector3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Func<UnityEngine.Vector3>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Func<UnityEngine.Vector3>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_floats_int(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<float[],int>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<float[],int>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_Collision(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collision>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collision>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_Collision2D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collision2D>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collision2D>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_ControllerColliderHit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.ControllerColliderHit>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.ControllerColliderHit>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_float(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<float>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<float>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_Joint2D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Joint2D>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Joint2D>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_GameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.GameObject>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.GameObject>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_Collider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collider>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collider>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Action_UnityEngine_Collider2D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collider2D>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Action<UnityEngine.Collider2D>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_EventHandler_System_Diagnostics_Tracing_EventCommandEventArgs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int System_Threading_SendOrPostCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<System.Threading.SendOrPostCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<System.Threading.SendOrPostCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DCETRuntime_KcpOutput(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<DCETRuntime.KcpOutput>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<DCETRuntime.KcpOutput>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorDesigner_Runtime_Behavior_BehaviorHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PF_OnPathDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<PF.OnPathDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<PF.OnPathDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pathfinding_OnScanStatus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Pathfinding.OnScanStatus>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Pathfinding.OnScanStatus>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pathfinding_OnGraphDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Pathfinding.OnGraphDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Pathfinding.OnGraphDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pathfinding_OnScanDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Pathfinding.OnScanDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Pathfinding.OnScanDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_EventCallback0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.EventCallback0>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.EventCallback0>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_EventCallback1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.EventCallback1>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.EventCallback1>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_GTweenCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.GTweenCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.GTweenCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_GTweenCallback1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.GTweenCallback1>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.GTweenCallback1>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_ListItemRenderer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.ListItemRenderer>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.ListItemRenderer>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_ListItemProvider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.ListItemProvider>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.ListItemProvider>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_PlayCompleteCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.PlayCompleteCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.PlayCompleteCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TransitionHook(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.TransitionHook>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.TransitionHook>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TimerCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.TimerCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.TimerCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_ShaderConfig_GetFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.ShaderConfig.GetFunction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.ShaderConfig.GetFunction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_UIConfig_SoundLoader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.UIConfig.SoundLoader>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.UIConfig.SoundLoader>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_NGraphics_MeshModifier(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.NGraphics.MeshModifier>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.NGraphics.MeshModifier>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_InputTextField_CopyHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.InputTextField.CopyHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.InputTextField.CopyHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_InputTextField_PasteHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.InputTextField.PasteHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.InputTextField.PasteHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_UIPackage_CreateObjectCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.UIPackage.CreateObjectCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.UIPackage.CreateObjectCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_UIPackage_LoadResource(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.UIPackage.LoadResource>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.UIPackage.LoadResource>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_GObjectPool_InitCallbackDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.GObjectPool.InitCallbackDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.GObjectPool.InitCallbackDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_UIObjectFactory_GComponentCreator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.UIObjectFactory.GComponentCreator>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.UIObjectFactory.GComponentCreator>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_UIObjectFactory_GLoaderCreator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.UIObjectFactory.GLoaderCreator>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.UIObjectFactory.GLoaderCreator>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TreeView_TreeNodeCreateCellDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.TreeView.TreeNodeCreateCellDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.TreeView.TreeNodeCreateCellDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TreeView_TreeNodeRenderDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.TreeView.TreeNodeRenderDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.TreeView.TreeNodeRenderDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_TreeView_TreeNodeWillExpandDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.TreeView.TreeNodeWillExpandDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.TreeView.TreeNodeWillExpandDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_EventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_StreamLengthReportHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_LargeBufferDiscardedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_UsageReportEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_MeshRenderer(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_MeshRendererWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.MeshRenderer));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_BoxCollider(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_BoxColliderWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.BoxCollider));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_MeshCollider(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_MeshColliderWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.MeshCollider));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_SphereCollider(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_SphereColliderWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.SphereCollider));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_CharacterController(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_CharacterControllerWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.CharacterController));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_CapsuleCollider(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_CapsuleColliderWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.CapsuleCollider));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_Animation(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_AnimationWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.Animation));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_AnimationClip(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_AnimationClipWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.AnimationClip));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_AnimationState(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_AnimationStateWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.AnimationState));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_BlendWeights(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_BlendWeightsWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.BlendWeights));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_RenderTexture(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_RenderTextureWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.RenderTexture));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaOpen_UnityEngine_Rigidbody(IntPtr L)
	{
		try
		{
			LuaState state = LuaState.Get(L);
			state.BeginPreModule("UnityEngine");
			UnityEngine_RigidbodyWrap.Register(state);
			int reference = state.GetMetaReference(typeof(UnityEngine.Rigidbody));
			state.EndPreModule(L, reference);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

