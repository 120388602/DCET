//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_AstarColorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.AstarColor), typeof(System.Object));
		L.RegFunction("GetAreaColor", GetAreaColor);
		L.RegFunction("OnEnable", OnEnable);
		L.RegFunction("New", _CreatePathfinding_AstarColor);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("_NodeConnection", get__NodeConnection, set__NodeConnection);
		L.RegVar("_UnwalkableNode", get__UnwalkableNode, set__UnwalkableNode);
		L.RegVar("_BoundsHandles", get__BoundsHandles, set__BoundsHandles);
		L.RegVar("_ConnectionLowLerp", get__ConnectionLowLerp, set__ConnectionLowLerp);
		L.RegVar("_ConnectionHighLerp", get__ConnectionHighLerp, set__ConnectionHighLerp);
		L.RegVar("_MeshEdgeColor", get__MeshEdgeColor, set__MeshEdgeColor);
		L.RegVar("_AreaColors", get__AreaColors, set__AreaColors);
		L.RegVar("NodeConnection", get_NodeConnection, set_NodeConnection);
		L.RegVar("UnwalkableNode", get_UnwalkableNode, set_UnwalkableNode);
		L.RegVar("BoundsHandles", get_BoundsHandles, set_BoundsHandles);
		L.RegVar("ConnectionLowLerp", get_ConnectionLowLerp, set_ConnectionLowLerp);
		L.RegVar("ConnectionHighLerp", get_ConnectionHighLerp, set_ConnectionHighLerp);
		L.RegVar("MeshEdgeColor", get_MeshEdgeColor, set_MeshEdgeColor);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_AstarColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Pathfinding.AstarColor obj = new Pathfinding.AstarColor();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.AstarColor.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAreaColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Color o = Pathfinding.AstarColor.GetAreaColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)ToLua.CheckObject<Pathfinding.AstarColor>(L, 1);
			obj.OnEnable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__NodeConnection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color ret = obj._NodeConnection;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _NodeConnection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__UnwalkableNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color ret = obj._UnwalkableNode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _UnwalkableNode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__BoundsHandles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color ret = obj._BoundsHandles;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _BoundsHandles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__ConnectionLowLerp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color ret = obj._ConnectionLowLerp;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _ConnectionLowLerp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__ConnectionHighLerp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color ret = obj._ConnectionHighLerp;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _ConnectionHighLerp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__MeshEdgeColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color ret = obj._MeshEdgeColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _MeshEdgeColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__AreaColors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color[] ret = obj._AreaColors;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _AreaColors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeConnection(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.AstarColor.NodeConnection);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnwalkableNode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.AstarColor.UnwalkableNode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BoundsHandles(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.AstarColor.BoundsHandles);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionLowLerp(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.AstarColor.ConnectionLowLerp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionHighLerp(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.AstarColor.ConnectionHighLerp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MeshEdgeColor(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.AstarColor.MeshEdgeColor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__NodeConnection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj._NodeConnection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _NodeConnection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__UnwalkableNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj._UnwalkableNode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _UnwalkableNode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__BoundsHandles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj._BoundsHandles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _BoundsHandles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__ConnectionLowLerp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj._ConnectionLowLerp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _ConnectionLowLerp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__ConnectionHighLerp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj._ConnectionHighLerp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _ConnectionHighLerp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__MeshEdgeColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj._MeshEdgeColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _MeshEdgeColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__AreaColors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AstarColor obj = (Pathfinding.AstarColor)o;
			UnityEngine.Color[] arg0 = ToLua.CheckStructArray<UnityEngine.Color>(L, 2);
			obj._AreaColors = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _AreaColors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NodeConnection(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Pathfinding.AstarColor.NodeConnection = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UnwalkableNode(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Pathfinding.AstarColor.UnwalkableNode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BoundsHandles(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Pathfinding.AstarColor.BoundsHandles = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnectionLowLerp(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Pathfinding.AstarColor.ConnectionLowLerp = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnectionHighLerp(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Pathfinding.AstarColor.ConnectionHighLerp = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MeshEdgeColor(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Pathfinding.AstarColor.MeshEdgeColor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

