//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_PolygonMeshWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.PolygonMesh), typeof(System.Object));
		L.RegFunction("OnPopulateMesh", OnPopulateMesh);
		L.RegFunction("HitTest", HitTest);
		L.RegFunction("New", _CreateFairyGUI_PolygonMesh);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("points", get_points, null);
		L.RegVar("fillColor", get_fillColor, set_fillColor);
		L.RegVar("colors", get_colors, set_colors);
		L.RegVar("usePercentPositions", get_usePercentPositions, set_usePercentPositions);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_PolygonMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FairyGUI.PolygonMesh obj = new FairyGUI.PolygonMesh();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.PolygonMesh.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPopulateMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)ToLua.CheckObject<FairyGUI.PolygonMesh>(L, 1);
			FairyGUI.VertexBuffer arg0 = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 2, typeof(FairyGUI.VertexBuffer));
			obj.OnPopulateMesh(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HitTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)ToLua.CheckObject<FairyGUI.PolygonMesh>(L, 1);
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			bool o = obj.HitTest(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_points(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)o;
			System.Collections.Generic.List<UnityEngine.Vector2> ret = obj.points;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index points on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fillColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)o;
			System.Nullable<UnityEngine.Color32> ret = obj.fillColor;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fillColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)o;
			UnityEngine.Color32[] ret = obj.colors;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_usePercentPositions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)o;
			bool ret = obj.usePercentPositions;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index usePercentPositions on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fillColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)o;
			System.Nullable<UnityEngine.Color32> arg0 = ToLua.CheckNullable<UnityEngine.Color32>(L, 2);
			obj.fillColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fillColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_colors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)o;
			UnityEngine.Color32[] arg0 = ToLua.CheckStructArray<UnityEngine.Color32>(L, 2);
			obj.colors = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_usePercentPositions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.PolygonMesh obj = (FairyGUI.PolygonMesh)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.usePercentPositions = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index usePercentPositions on a nil value");
		}
	}
}

