//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_TriangleMeshNodeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.TriangleMeshNode), typeof(PF.MeshNode));
		L.RegFunction("GetNavmeshHolder", GetNavmeshHolder);
		L.RegFunction("SetNavmeshHolder", SetNavmeshHolder);
		L.RegFunction("UpdatePositionFromVertices", UpdatePositionFromVertices);
		L.RegFunction("GetVertexIndex", GetVertexIndex);
		L.RegFunction("GetVertexArrayIndex", GetVertexArrayIndex);
		L.RegFunction("GetVertices", GetVertices);
		L.RegFunction("GetVerticesInGraphSpace", GetVerticesInGraphSpace);
		L.RegFunction("GetVertex", GetVertex);
		L.RegFunction("GetVertexInGraphSpace", GetVertexInGraphSpace);
		L.RegFunction("GetVertexCount", GetVertexCount);
		L.RegFunction("ClosestPointOnNode", ClosestPointOnNode);
		L.RegFunction("ClosestPointOnNodeXZ", ClosestPointOnNodeXZ);
		L.RegFunction("ContainsPoint", ContainsPoint);
		L.RegFunction("ContainsPointInGraphSpace", ContainsPointInGraphSpace);
		L.RegFunction("UpdateRecursiveG", UpdateRecursiveG);
		L.RegFunction("Open", Open);
		L.RegFunction("SharedEdge", SharedEdge);
		L.RegFunction("GetPortal", GetPortal);
		L.RegFunction("SurfaceArea", SurfaceArea);
		L.RegFunction("SerializeNode", SerializeNode);
		L.RegFunction("DeserializeNode", DeserializeNode);
		L.RegFunction("New", _CreatePF_TriangleMeshNode);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("v0", get_v0, set_v0);
		L.RegVar("v1", get_v1, set_v1);
		L.RegVar("v2", get_v2, set_v2);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_TriangleMeshNode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.TriangleMeshNode obj = new PF.TriangleMeshNode();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.TriangleMeshNode.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNavmeshHolder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			PF.INavmeshHolder o = PF.TriangleMeshNode.GetNavmeshHolder(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNavmeshHolder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			PF.INavmeshHolder arg1 = (PF.INavmeshHolder)ToLua.CheckObject<PF.INavmeshHolder>(L, 2);
			PF.TriangleMeshNode.SetNavmeshHolder(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdatePositionFromVertices(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			obj.UpdatePositionFromVertices();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetVertexIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexArrayIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetVertexArrayIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertices(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.Int3 arg0;
			PF.Int3 arg1;
			PF.Int3 arg2;
			obj.GetVertices(out arg0, out arg1, out arg2);
			ToLua.PushValue(L, arg0);
			ToLua.PushValue(L, arg1);
			ToLua.PushValue(L, arg2);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVerticesInGraphSpace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.Int3 arg0;
			PF.Int3 arg1;
			PF.Int3 arg2;
			obj.GetVerticesInGraphSpace(out arg0, out arg1, out arg2);
			ToLua.PushValue(L, arg0);
			ToLua.PushValue(L, arg1);
			ToLua.PushValue(L, arg2);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PF.Int3 o = obj.GetVertex(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexInGraphSpace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PF.Int3 o = obj.GetVertexInGraphSpace(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			int o = obj.GetVertexCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPointOnNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 o = obj.ClosestPointOnNode(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPointOnNodeXZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 o = obj.ClosestPointOnNodeXZ(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool o = obj.ContainsPoint(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<PF.Int3>(L, 2))
			{
				PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
				PF.Int3 arg0 = StackTraits<PF.Int3>.To(L, 2);
				bool o = obj.ContainsPoint(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.TriangleMeshNode.ContainsPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsPointInGraphSpace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.Int3 arg0 = StackTraits<PF.Int3>.Check(L, 2);
			bool o = obj.ContainsPointInGraphSpace(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateRecursiveG(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			PF.PathNode arg1 = (PF.PathNode)ToLua.CheckObject<PF.PathNode>(L, 3);
			PF.PathHandler arg2 = (PF.PathHandler)ToLua.CheckObject<PF.PathHandler>(L, 4);
			obj.UpdateRecursiveG(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			PF.PathNode arg1 = (PF.PathNode)ToLua.CheckObject<PF.PathNode>(L, 3);
			PF.PathHandler arg2 = (PF.PathHandler)ToLua.CheckObject<PF.PathHandler>(L, 4);
			obj.Open(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SharedEdge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			int o = obj.SharedEdge(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPortal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
				System.Collections.Generic.List<UnityEngine.Vector3> arg2 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 4, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				bool o = obj.GetPortal(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 7)
			{
				PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
				System.Collections.Generic.List<UnityEngine.Vector3> arg2 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 4, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				int arg4;
				int arg5;
				bool o = obj.GetPortal(arg0, arg1, arg2, arg3, out arg4, out arg5);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg4);
				LuaDLL.lua_pushinteger(L, arg5);
				return 3;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.TriangleMeshNode.GetPortal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SurfaceArea(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			float o = obj.SurfaceArea();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.GraphSerializationContext arg0 = (PF.GraphSerializationContext)ToLua.CheckObject<PF.GraphSerializationContext>(L, 2);
			obj.SerializeNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeserializeNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)ToLua.CheckObject<PF.TriangleMeshNode>(L, 1);
			PF.GraphSerializationContext arg0 = (PF.GraphSerializationContext)ToLua.CheckObject<PF.GraphSerializationContext>(L, 2);
			obj.DeserializeNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_v0(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)o;
			int ret = obj.v0;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index v0 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_v1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)o;
			int ret = obj.v1;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index v1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_v2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)o;
			int ret = obj.v2;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index v2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_v0(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.v0 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index v0 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_v1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.v1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index v1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_v2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.TriangleMeshNode obj = (PF.TriangleMeshNode)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.v2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index v2 on a nil value");
		}
	}
}

