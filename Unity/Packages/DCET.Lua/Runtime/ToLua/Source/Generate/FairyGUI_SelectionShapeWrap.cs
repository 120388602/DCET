//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_SelectionShapeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.SelectionShape), typeof(FairyGUI.DisplayObject));
		L.RegFunction("Refresh", Refresh);
		L.RegFunction("Clear", Clear);
		L.RegFunction("OnPopulateMesh", OnPopulateMesh);
		L.RegFunction("New", _CreateFairyGUI_SelectionShape);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("rects", get_rects, null);
		L.RegVar("color", get_color, set_color);
		L.RegFunction("getcolor", get_color);
		L.RegFunction("setcolor", set_color);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_SelectionShape(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FairyGUI.SelectionShape obj = new FairyGUI.SelectionShape();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.SelectionShape.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Refresh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.SelectionShape obj = (FairyGUI.SelectionShape)ToLua.CheckObject<FairyGUI.SelectionShape>(L, 1);
			obj.Refresh();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.SelectionShape obj = (FairyGUI.SelectionShape)ToLua.CheckObject<FairyGUI.SelectionShape>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPopulateMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.SelectionShape obj = (FairyGUI.SelectionShape)ToLua.CheckObject<FairyGUI.SelectionShape>(L, 1);
			FairyGUI.VertexBuffer arg0 = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 2, typeof(FairyGUI.VertexBuffer));
			obj.OnPopulateMesh(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rects(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.SelectionShape obj = (FairyGUI.SelectionShape)o;
			System.Collections.Generic.List<UnityEngine.Rect> ret = obj.rects;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rects on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.SelectionShape obj = (FairyGUI.SelectionShape)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.SelectionShape obj = (FairyGUI.SelectionShape)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}
}

