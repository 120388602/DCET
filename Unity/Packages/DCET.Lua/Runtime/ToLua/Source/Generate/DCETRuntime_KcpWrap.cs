//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DCETRuntime_KcpWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DCETRuntime.Kcp), typeof(System.Object));
		L.RegFunction("KcpCheck", KcpCheck);
		L.RegFunction("KcpCreate", KcpCreate);
		L.RegFunction("KcpFlush", KcpFlush);
		L.RegFunction("KcpGetconv", KcpGetconv);
		L.RegFunction("KcpInput", KcpInput);
		L.RegFunction("KcpNodelay", KcpNodelay);
		L.RegFunction("KcpPeeksize", KcpPeeksize);
		L.RegFunction("KcpRecv", KcpRecv);
		L.RegFunction("KcpRelease", KcpRelease);
		L.RegFunction("KcpSend", KcpSend);
		L.RegFunction("KcpSetminrto", KcpSetminrto);
		L.RegFunction("KcpSetmtu", KcpSetmtu);
		L.RegFunction("KcpSetoutput", KcpSetoutput);
		L.RegFunction("KcpUpdate", KcpUpdate);
		L.RegFunction("KcpWaitsnd", KcpWaitsnd);
		L.RegFunction("KcpWndsize", KcpWndsize);
		L.RegFunction("New", _CreateDCETRuntime_Kcp);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDCETRuntime_Kcp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DCETRuntime.Kcp obj = new DCETRuntime.Kcp();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DCETRuntime.Kcp.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint o = DCETRuntime.Kcp.KcpCheck(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpCreate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			System.IntPtr arg1 = ToLua.CheckIntPtr(L, 2);
			System.IntPtr o = DCETRuntime.Kcp.KcpCreate(arg0, arg1);
			LuaDLL.lua_pushlightuserdata(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpFlush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			DCETRuntime.Kcp.KcpFlush(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpGetconv(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			uint o = DCETRuntime.Kcp.KcpGetconv(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpInput(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = DCETRuntime.Kcp.KcpInput(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpNodelay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			int o = DCETRuntime.Kcp.KcpNodelay(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpPeeksize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			int o = DCETRuntime.Kcp.KcpPeeksize(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpRecv(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = DCETRuntime.Kcp.KcpRecv(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpRelease(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			DCETRuntime.Kcp.KcpRelease(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpSend(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = DCETRuntime.Kcp.KcpSend(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpSetminrto(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			DCETRuntime.Kcp.KcpSetminrto(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpSetmtu(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = DCETRuntime.Kcp.KcpSetmtu(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpSetoutput(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			DCETRuntime.KcpOutput arg1 = (DCETRuntime.KcpOutput)ToLua.CheckDelegate<DCETRuntime.KcpOutput>(L, 2);
			DCETRuntime.Kcp.KcpSetoutput(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 2);
			DCETRuntime.Kcp.KcpUpdate(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpWaitsnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			int o = DCETRuntime.Kcp.KcpWaitsnd(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KcpWndsize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = DCETRuntime.Kcp.KcpWndsize(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

