//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_Utils_HtmlParseOptionsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.Utils.HtmlParseOptions), typeof(System.Object));
		L.RegFunction("New", _CreateFairyGUI_Utils_HtmlParseOptions);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("linkUnderline", get_linkUnderline, set_linkUnderline);
		L.RegVar("linkColor", get_linkColor, set_linkColor);
		L.RegVar("linkBgColor", get_linkBgColor, set_linkBgColor);
		L.RegVar("linkHoverBgColor", get_linkHoverBgColor, set_linkHoverBgColor);
		L.RegVar("ignoreWhiteSpace", get_ignoreWhiteSpace, set_ignoreWhiteSpace);
		L.RegVar("DefaultLinkUnderline", get_DefaultLinkUnderline, set_DefaultLinkUnderline);
		L.RegVar("DefaultLinkColor", get_DefaultLinkColor, set_DefaultLinkColor);
		L.RegVar("DefaultLinkBgColor", get_DefaultLinkBgColor, set_DefaultLinkBgColor);
		L.RegVar("DefaultLinkHoverBgColor", get_DefaultLinkHoverBgColor, set_DefaultLinkHoverBgColor);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_Utils_HtmlParseOptions(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FairyGUI.Utils.HtmlParseOptions obj = new FairyGUI.Utils.HtmlParseOptions();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.Utils.HtmlParseOptions.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_linkUnderline(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			bool ret = obj.linkUnderline;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkUnderline on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_linkColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			UnityEngine.Color ret = obj.linkColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_linkBgColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			UnityEngine.Color ret = obj.linkBgColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkBgColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_linkHoverBgColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			UnityEngine.Color ret = obj.linkHoverBgColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkHoverBgColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ignoreWhiteSpace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			bool ret = obj.ignoreWhiteSpace;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ignoreWhiteSpace on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultLinkUnderline(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, FairyGUI.Utils.HtmlParseOptions.DefaultLinkUnderline);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultLinkColor(IntPtr L)
	{
		try
		{
			ToLua.Push(L, FairyGUI.Utils.HtmlParseOptions.DefaultLinkColor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultLinkBgColor(IntPtr L)
	{
		try
		{
			ToLua.Push(L, FairyGUI.Utils.HtmlParseOptions.DefaultLinkBgColor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultLinkHoverBgColor(IntPtr L)
	{
		try
		{
			ToLua.Push(L, FairyGUI.Utils.HtmlParseOptions.DefaultLinkHoverBgColor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_linkUnderline(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.linkUnderline = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkUnderline on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_linkColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.linkColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_linkBgColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.linkBgColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkBgColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_linkHoverBgColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.linkHoverBgColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linkHoverBgColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ignoreWhiteSpace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Utils.HtmlParseOptions obj = (FairyGUI.Utils.HtmlParseOptions)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ignoreWhiteSpace = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ignoreWhiteSpace on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultLinkUnderline(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			FairyGUI.Utils.HtmlParseOptions.DefaultLinkUnderline = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultLinkColor(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			FairyGUI.Utils.HtmlParseOptions.DefaultLinkColor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultLinkBgColor(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			FairyGUI.Utils.HtmlParseOptions.DefaultLinkBgColor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultLinkHoverBgColor(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			FairyGUI.Utils.HtmlParseOptions.DefaultLinkHoverBgColor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

