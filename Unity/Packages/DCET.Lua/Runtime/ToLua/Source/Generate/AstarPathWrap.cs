//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AstarPathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AstarPath), typeof(Pathfinding.VersionedMonoBehaviour));
		L.RegFunction("GetTagNames", GetTagNames);
		L.RegFunction("FindAstarPath", FindAstarPath);
		L.RegFunction("FindTagNames", FindTagNames);
		L.RegFunction("AddWorkItem", AddWorkItem);
		L.RegFunction("FlushGraphUpdates", FlushGraphUpdates);
		L.RegFunction("FlushWorkItems", FlushWorkItems);
		L.RegFunction("CalculateThreadCount", CalculateThreadCount);
		L.RegFunction("ConfigureReferencesInternal", ConfigureReferencesInternal);
		L.RegFunction("FloodFill", FloodFill);
		L.RegFunction("PausePathfinding", PausePathfinding);
		L.RegFunction("Scan", Scan);
		L.RegFunction("ScanAsync", ScanAsync);
		L.RegFunction("BlockUntilCalculated", BlockUntilCalculated);
		L.RegFunction("StartPath", StartPath);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Version", get_Version, null);
		L.RegVar("Distribution", get_Distribution, null);
		L.RegVar("Branch", get_Branch, null);
		L.RegVar("data", get_data, set_data);
		L.RegVar("active", get_active, set_active);
		L.RegVar("showNavGraphs", get_showNavGraphs, set_showNavGraphs);
		L.RegVar("showUnwalkableNodes", get_showUnwalkableNodes, set_showUnwalkableNodes);
		L.RegVar("debugMode", get_debugMode, set_debugMode);
		L.RegVar("debugFloor", get_debugFloor, set_debugFloor);
		L.RegVar("debugRoof", get_debugRoof, set_debugRoof);
		L.RegVar("manualDebugFloorRoof", get_manualDebugFloorRoof, set_manualDebugFloorRoof);
		L.RegVar("showSearchTree", get_showSearchTree, set_showSearchTree);
		L.RegVar("unwalkableNodeDebugSize", get_unwalkableNodeDebugSize, set_unwalkableNodeDebugSize);
		L.RegVar("logPathResults", get_logPathResults, set_logPathResults);
		L.RegVar("maxNearestNodeDistance", get_maxNearestNodeDistance, set_maxNearestNodeDistance);
		L.RegVar("scanOnStartup", get_scanOnStartup, set_scanOnStartup);
		L.RegVar("fullGetNearestSearch", get_fullGetNearestSearch, set_fullGetNearestSearch);
		L.RegVar("prioritizeGraphs", get_prioritizeGraphs, set_prioritizeGraphs);
		L.RegVar("prioritizeGraphsLimit", get_prioritizeGraphsLimit, set_prioritizeGraphsLimit);
		L.RegVar("colorSettings", get_colorSettings, set_colorSettings);
		L.RegVar("heuristic", get_heuristic, set_heuristic);
		L.RegVar("heuristicScale", get_heuristicScale, set_heuristicScale);
		L.RegVar("threadCount", get_threadCount, set_threadCount);
		L.RegVar("maxFrameTime", get_maxFrameTime, set_maxFrameTime);
		L.RegVar("batchGraphUpdates", get_batchGraphUpdates, set_batchGraphUpdates);
		L.RegVar("graphUpdateBatchingInterval", get_graphUpdateBatchingInterval, set_graphUpdateBatchingInterval);
		L.RegVar("debugPathData", get_debugPathData, set_debugPathData);
		L.RegVar("debugPathID", get_debugPathID, set_debugPathID);
		L.RegVar("pathProcessor", get_pathProcessor, set_pathProcessor);
		L.RegVar("euclideanEmbedding", get_euclideanEmbedding, set_euclideanEmbedding);
		L.RegVar("showGraphs", get_showGraphs, set_showGraphs);
		L.RegVar("graphs", get_graphs, null);
		L.RegFunction("getgraphs", get_graphs);
		L.RegVar("maxNearestNodeDistanceSqr", get_maxNearestNodeDistanceSqr, null);
		L.RegFunction("getmaxNearestNodeDistanceSqr", get_maxNearestNodeDistanceSqr);
		L.RegVar("lastScanTime", get_lastScanTime, null);
		L.RegFunction("getlastScanTime", get_lastScanTime);
		L.RegVar("isScanning", get_isScanning, null);
		L.RegFunction("getisScanning", get_isScanning);
		L.RegVar("IsAnyGraphUpdateQueued", get_IsAnyGraphUpdateQueued, null);
		L.RegFunction("getIsAnyGraphUpdateQueued", get_IsAnyGraphUpdateQueued);
		L.RegVar("IsAnyGraphUpdateInProgress", get_IsAnyGraphUpdateInProgress, null);
		L.RegFunction("getIsAnyGraphUpdateInProgress", get_IsAnyGraphUpdateInProgress);
		L.RegVar("IsAnyWorkItemInProgress", get_IsAnyWorkItemInProgress, null);
		L.RegFunction("getIsAnyWorkItemInProgress", get_IsAnyWorkItemInProgress);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTagNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			string[] o = obj.GetTagNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindAstarPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AstarPath.FindAstarPath();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTagNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string[] o = AstarPath.FindTagNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWorkItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Action>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				System.Action arg0 = (System.Action)ToLua.ToObject(L, 2);
				obj.AddWorkItem(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.AstarWorkItem>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.AstarWorkItem arg0 = StackTraits<Pathfinding.AstarWorkItem>.To(L, 2);
				obj.AddWorkItem(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.AddWorkItem");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushGraphUpdates(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			obj.FlushGraphUpdates();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushWorkItems(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			obj.FlushWorkItems();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateThreadCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.ThreadCount arg0 = (PF.ThreadCount)LuaDLL.luaL_checknumber(L, 1);
			int o = AstarPath.CalculateThreadCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConfigureReferencesInternal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			obj.ConfigureReferencesInternal();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FloodFill(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				obj.FloodFill();
				return 0;
			}
			else if (count == 2)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
				obj.FloodFill(arg0);
				return 0;
			}
			else if (count == 3)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
				uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
				obj.FloodFill(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.FloodFill");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PausePathfinding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			PF.PathProcessor.GraphUpdateLock o = obj.PausePathfinding();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Scan(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				obj.Scan();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<PF.NavGraph[]>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				PF.NavGraph[] arg0 = ToLua.ToObjectArray<PF.NavGraph>(L, 2);
				obj.Scan(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<PF.NavGraph>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				PF.NavGraph arg0 = (PF.NavGraph)ToLua.ToObject(L, 2);
				obj.Scan(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.Scan");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScanAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				System.Collections.Generic.IEnumerable<Pathfinding.Progress> o = obj.ScanAsync();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<PF.NavGraph[]>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				PF.NavGraph[] arg0 = ToLua.ToObjectArray<PF.NavGraph>(L, 2);
				System.Collections.Generic.IEnumerable<Pathfinding.Progress> o = obj.ScanAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<PF.NavGraph>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				PF.NavGraph arg0 = (PF.NavGraph)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<Pathfinding.Progress> o = obj.ScanAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.ScanAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BlockUntilCalculated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 1);
			AstarPath.BlockUntilCalculated(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 1);
				AstarPath.StartPath(arg0);
				return 0;
			}
			else if (count == 2)
			{
				PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				AstarPath.StartPath(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.StartPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Version(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, AstarPath.Version);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Distribution(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)AstarPath.Distribution);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Branch(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, AstarPath.Branch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarData ret = obj.data;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_active(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.active);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showNavGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showNavGraphs;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showNavGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showUnwalkableNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showUnwalkableNodes;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showUnwalkableNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.GraphDebugMode ret = obj.debugMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugFloor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.debugFloor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugFloor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.debugRoof;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_manualDebugFloorRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.manualDebugFloorRoof;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manualDebugFloorRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showSearchTree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showSearchTree;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showSearchTree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unwalkableNodeDebugSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.unwalkableNodeDebugSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index unwalkableNodeDebugSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logPathResults(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.PathLog ret = obj.logPathResults;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logPathResults on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxNearestNodeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.maxNearestNodeDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scanOnStartup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.scanOnStartup;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scanOnStartup on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fullGetNearestSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.fullGetNearestSearch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fullGetNearestSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_prioritizeGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.prioritizeGraphs;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_prioritizeGraphsLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.prioritizeGraphsLimit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphsLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colorSettings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarColor ret = obj.colorSettings;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorSettings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.Heuristic ret = obj.heuristic;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.heuristicScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_threadCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.ThreadCount ret = obj.threadCount;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index threadCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxFrameTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.maxFrameTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxFrameTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_batchGraphUpdates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.batchGraphUpdates;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index batchGraphUpdates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphUpdateBatchingInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.graphUpdateBatchingInterval;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphUpdateBatchingInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.PathHandler ret = obj.debugPathData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			ushort ret = obj.debugPathID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathProcessor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.PathProcessor ret = obj.pathProcessor;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathProcessor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_euclideanEmbedding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.EuclideanEmbedding ret = obj.euclideanEmbedding;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index euclideanEmbedding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showGraphs;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.NavGraph[] ret = obj.graphs;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxNearestNodeDistanceSqr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.maxNearestNodeDistanceSqr;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistanceSqr on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastScanTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.lastScanTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lastScanTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isScanning(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.isScanning;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isScanning on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnyGraphUpdateQueued(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.IsAnyGraphUpdateQueued;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAnyGraphUpdateQueued on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnyGraphUpdateInProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.IsAnyGraphUpdateInProgress;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAnyGraphUpdateInProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnyWorkItemInProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.IsAnyWorkItemInProgress;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAnyWorkItemInProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarData arg0 = (Pathfinding.AstarData)ToLua.CheckObject<Pathfinding.AstarData>(L, 2);
			obj.data = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_active(IntPtr L)
	{
		try
		{
			AstarPath arg0 = (AstarPath)ToLua.CheckObject<AstarPath>(L, 2);
			AstarPath.active = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showNavGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showNavGraphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showNavGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showUnwalkableNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showUnwalkableNodes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showUnwalkableNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.GraphDebugMode arg0 = (PF.GraphDebugMode)LuaDLL.luaL_checknumber(L, 2);
			obj.debugMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugFloor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.debugFloor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugFloor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.debugRoof = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_manualDebugFloorRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.manualDebugFloorRoof = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manualDebugFloorRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showSearchTree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showSearchTree = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showSearchTree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unwalkableNodeDebugSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.unwalkableNodeDebugSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index unwalkableNodeDebugSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logPathResults(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.PathLog arg0 = (PF.PathLog)LuaDLL.luaL_checknumber(L, 2);
			obj.logPathResults = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logPathResults on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxNearestNodeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxNearestNodeDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scanOnStartup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.scanOnStartup = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scanOnStartup on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fullGetNearestSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.fullGetNearestSearch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fullGetNearestSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_prioritizeGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.prioritizeGraphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_prioritizeGraphsLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.prioritizeGraphsLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphsLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_colorSettings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarColor arg0 = (Pathfinding.AstarColor)ToLua.CheckObject<Pathfinding.AstarColor>(L, 2);
			obj.colorSettings = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorSettings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.Heuristic arg0 = (PF.Heuristic)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristicScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_threadCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.ThreadCount arg0 = (PF.ThreadCount)LuaDLL.luaL_checknumber(L, 2);
			obj.threadCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index threadCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxFrameTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxFrameTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxFrameTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_batchGraphUpdates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.batchGraphUpdates = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index batchGraphUpdates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_graphUpdateBatchingInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.graphUpdateBatchingInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphUpdateBatchingInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.PathHandler arg0 = (PF.PathHandler)ToLua.CheckObject<PF.PathHandler>(L, 2);
			obj.debugPathData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.debugPathID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathProcessor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.PathProcessor arg0 = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 2);
			obj.pathProcessor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathProcessor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_euclideanEmbedding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			PF.EuclideanEmbedding arg0 = (PF.EuclideanEmbedding)ToLua.CheckObject<PF.EuclideanEmbedding>(L, 2);
			obj.euclideanEmbedding = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index euclideanEmbedding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showGraphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showGraphs on a nil value");
		}
	}
}

