//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Linq_Expressions_ExpressionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Linq.Expressions.Expression), typeof(System.Object));
		L.RegFunction("Assign", Assign);
		L.RegFunction("MakeBinary", MakeBinary);
		L.RegFunction("Equal", Equal);
		L.RegFunction("ReferenceEqual", ReferenceEqual);
		L.RegFunction("NotEqual", NotEqual);
		L.RegFunction("ReferenceNotEqual", ReferenceNotEqual);
		L.RegFunction("GreaterThan", GreaterThan);
		L.RegFunction("LessThan", LessThan);
		L.RegFunction("GreaterThanOrEqual", GreaterThanOrEqual);
		L.RegFunction("LessThanOrEqual", LessThanOrEqual);
		L.RegFunction("AndAlso", AndAlso);
		L.RegFunction("OrElse", OrElse);
		L.RegFunction("Coalesce", Coalesce);
		L.RegFunction("Add", Add);
		L.RegFunction("AddAssign", AddAssign);
		L.RegFunction("AddAssignChecked", AddAssignChecked);
		L.RegFunction("AddChecked", AddChecked);
		L.RegFunction("Subtract", Subtract);
		L.RegFunction("SubtractAssign", SubtractAssign);
		L.RegFunction("SubtractAssignChecked", SubtractAssignChecked);
		L.RegFunction("SubtractChecked", SubtractChecked);
		L.RegFunction("Divide", Divide);
		L.RegFunction("DivideAssign", DivideAssign);
		L.RegFunction("Modulo", Modulo);
		L.RegFunction("ModuloAssign", ModuloAssign);
		L.RegFunction("Multiply", Multiply);
		L.RegFunction("MultiplyAssign", MultiplyAssign);
		L.RegFunction("MultiplyAssignChecked", MultiplyAssignChecked);
		L.RegFunction("MultiplyChecked", MultiplyChecked);
		L.RegFunction("LeftShift", LeftShift);
		L.RegFunction("LeftShiftAssign", LeftShiftAssign);
		L.RegFunction("RightShift", RightShift);
		L.RegFunction("RightShiftAssign", RightShiftAssign);
		L.RegFunction("And", And);
		L.RegFunction("AndAssign", AndAssign);
		L.RegFunction("Or", Or);
		L.RegFunction("OrAssign", OrAssign);
		L.RegFunction("ExclusiveOr", ExclusiveOr);
		L.RegFunction("ExclusiveOrAssign", ExclusiveOrAssign);
		L.RegFunction("Power", Power);
		L.RegFunction("PowerAssign", PowerAssign);
		L.RegFunction("ArrayIndex", ArrayIndex);
		L.RegFunction("Block", Block);
		L.RegFunction("Catch", Catch);
		L.RegFunction("MakeCatchBlock", MakeCatchBlock);
		L.RegFunction("Condition", Condition);
		L.RegFunction("IfThen", IfThen);
		L.RegFunction("IfThenElse", IfThenElse);
		L.RegFunction("Constant", Constant);
		L.RegFunction("DebugInfo", DebugInfo);
		L.RegFunction("ClearDebugInfo", ClearDebugInfo);
		L.RegFunction("Empty", Empty);
		L.RegFunction("Default", Default);
		L.RegFunction("ElementInit", ElementInit);
		L.RegFunction("Reduce", Reduce);
		L.RegFunction("ReduceAndCheck", ReduceAndCheck);
		L.RegFunction("ReduceExtensions", ReduceExtensions);
		L.RegFunction("ToString", ToString);
		L.RegFunction("Dynamic", Dynamic);
		L.RegFunction("MakeDynamic", MakeDynamic);
		L.RegFunction("Break", Break);
		L.RegFunction("Continue", Continue);
		L.RegFunction("Return", Return);
		L.RegFunction("Goto", Goto);
		L.RegFunction("MakeGoto", MakeGoto);
		L.RegFunction("MakeIndex", MakeIndex);
		L.RegFunction("ArrayAccess", ArrayAccess);
		L.RegFunction("Property", Property);
		L.RegFunction("Invoke", Invoke);
		L.RegFunction("Label", Label);
		L.RegFunction("Lambda", Lambda);
		L.RegFunction("GetFuncType", GetFuncType);
		L.RegFunction("TryGetFuncType", TryGetFuncType);
		L.RegFunction("GetActionType", GetActionType);
		L.RegFunction("TryGetActionType", TryGetActionType);
		L.RegFunction("GetDelegateType", GetDelegateType);
		L.RegFunction("ListInit", ListInit);
		L.RegFunction("Loop", Loop);
		L.RegFunction("Bind", Bind);
		L.RegFunction("Field", Field);
		L.RegFunction("PropertyOrField", PropertyOrField);
		L.RegFunction("MakeMemberAccess", MakeMemberAccess);
		L.RegFunction("MemberInit", MemberInit);
		L.RegFunction("ListBind", ListBind);
		L.RegFunction("MemberBind", MemberBind);
		L.RegFunction("Call", Call);
		L.RegFunction("NewArrayInit", NewArrayInit);
		L.RegFunction("NewArrayBounds", NewArrayBounds);
		L.RegFunction("New", New);
		L.RegFunction("Parameter", Parameter);
		L.RegFunction("Variable", Variable);
		L.RegFunction("RuntimeVariables", RuntimeVariables);
		L.RegFunction("SwitchCase", SwitchCase);
		L.RegFunction("Switch", Switch);
		L.RegFunction("SymbolDocument", SymbolDocument);
		L.RegFunction("TryFault", TryFault);
		L.RegFunction("TryFinally", TryFinally);
		L.RegFunction("TryCatch", TryCatch);
		L.RegFunction("TryCatchFinally", TryCatchFinally);
		L.RegFunction("MakeTry", MakeTry);
		L.RegFunction("TypeIs", TypeIs);
		L.RegFunction("TypeEqual", TypeEqual);
		L.RegFunction("MakeUnary", MakeUnary);
		L.RegFunction("Negate", Negate);
		L.RegFunction("UnaryPlus", UnaryPlus);
		L.RegFunction("NegateChecked", NegateChecked);
		L.RegFunction("Not", Not);
		L.RegFunction("IsFalse", IsFalse);
		L.RegFunction("IsTrue", IsTrue);
		L.RegFunction("OnesComplement", OnesComplement);
		L.RegFunction("TypeAs", TypeAs);
		L.RegFunction("Unbox", Unbox);
		L.RegFunction("Convert", Convert);
		L.RegFunction("ConvertChecked", ConvertChecked);
		L.RegFunction("ArrayLength", ArrayLength);
		L.RegFunction("Quote", Quote);
		L.RegFunction("Rethrow", Rethrow);
		L.RegFunction("Throw", Throw);
		L.RegFunction("Increment", Increment);
		L.RegFunction("Decrement", Decrement);
		L.RegFunction("PreIncrementAssign", PreIncrementAssign);
		L.RegFunction("PreDecrementAssign", PreDecrementAssign);
		L.RegFunction("PostIncrementAssign", PostIncrementAssign);
		L.RegFunction("PostDecrementAssign", PostDecrementAssign);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("NodeType", get_NodeType, null);
		L.RegFunction("getNodeType", get_NodeType);
		L.RegVar("Type", get_Type, null);
		L.RegFunction("getType", get_Type);
		L.RegVar("CanReduce", get_CanReduce, null);
		L.RegFunction("getCanReduce", get_CanReduce);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Assign(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Assign(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeBinary(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Linq.Expressions.ExpressionType arg0 = (System.Linq.Expressions.ExpressionType)LuaDLL.luaL_checknumber(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MakeBinary(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.Linq.Expressions.ExpressionType arg0 = (System.Linq.Expressions.ExpressionType)LuaDLL.luaL_checknumber(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				System.Reflection.MethodInfo arg4 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 5);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MakeBinary(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Linq.Expressions.ExpressionType arg0 = (System.Linq.Expressions.ExpressionType)LuaDLL.luaL_checknumber(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				System.Reflection.MethodInfo arg4 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 5);
				System.Linq.Expressions.LambdaExpression arg5 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 6);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MakeBinary(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MakeBinary");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Equal(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Equal(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Equal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReferenceEqual(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ReferenceEqual(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotEqual(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.NotEqual(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.NotEqual(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.NotEqual");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReferenceNotEqual(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ReferenceNotEqual(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GreaterThan(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.GreaterThan(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.GreaterThan(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.GreaterThan");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LessThan(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LessThan(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LessThan(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.LessThan");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GreaterThanOrEqual(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.GreaterThanOrEqual(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.GreaterThanOrEqual(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.GreaterThanOrEqual");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LessThanOrEqual(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LessThanOrEqual(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LessThanOrEqual(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.LessThanOrEqual");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AndAlso(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AndAlso(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AndAlso(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.AndAlso");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OrElse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.OrElse(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.OrElse(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.OrElse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Coalesce(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Coalesce(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.LambdaExpression arg2 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Coalesce(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Coalesce");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Add(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Add(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Add");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.AddAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAssignChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddAssignChecked(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddAssignChecked(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddAssignChecked(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.AddAssignChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddChecked(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AddChecked(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.AddChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Subtract(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Subtract(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Subtract(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Subtract");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubtractAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.SubtractAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubtractAssignChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractAssignChecked(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractAssignChecked(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractAssignChecked(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.SubtractAssignChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubtractChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractChecked(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.SubtractChecked(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.SubtractChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Divide(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Divide(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Divide(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Divide");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DivideAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.DivideAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.DivideAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.DivideAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.DivideAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Modulo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Modulo(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Modulo(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Modulo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ModuloAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ModuloAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ModuloAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ModuloAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ModuloAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Multiply(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Multiply(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Multiply(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Multiply");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MultiplyAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MultiplyAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MultiplyAssignChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyAssignChecked(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyAssignChecked(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyAssignChecked(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MultiplyAssignChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MultiplyChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyChecked(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.MultiplyChecked(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MultiplyChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LeftShift(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LeftShift(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LeftShift(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.LeftShift");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LeftShiftAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LeftShiftAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LeftShiftAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.LeftShiftAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.LeftShiftAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RightShift(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.RightShift(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.RightShift(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.RightShift");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RightShiftAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.RightShiftAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.RightShiftAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.RightShiftAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.RightShiftAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int And(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.And(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.And(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.And");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AndAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AndAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AndAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.AndAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.AndAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Or(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Or(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Or(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Or");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OrAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.OrAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.OrAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.OrAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.OrAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExclusiveOr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ExclusiveOr(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ExclusiveOr(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ExclusiveOr");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExclusiveOrAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ExclusiveOrAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ExclusiveOrAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ExclusiveOrAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ExclusiveOrAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Power(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Power(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.Power(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Power");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PowerAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.PowerAssign(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.PowerAssign(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.LambdaExpression arg3 = (System.Linq.Expressions.LambdaExpression)ToLua.CheckObject<System.Linq.Expressions.LambdaExpression>(L, 4);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.PowerAssign(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.PowerAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ArrayIndex(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.BinaryExpression o = System.Linq.Expressions.Expression.ArrayIndex(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.ArrayIndex(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.ArrayIndex(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ArrayIndex");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Block(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg0 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 1);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg0 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 3, count - 2))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 3, count - 2);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg0 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 1, count))
			{
				System.Linq.Expressions.Expression[] arg0 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 1, count);
				System.Linq.Expressions.BlockExpression o = System.Linq.Expressions.Expression.Block(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Block");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Catch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.CatchBlock o = System.Linq.Expressions.Expression.Catch(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.ParameterExpression arg0 = (System.Linq.Expressions.ParameterExpression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.CatchBlock o = System.Linq.Expressions.Expression.Catch(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.CatchBlock o = System.Linq.Expressions.Expression.Catch(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.ParameterExpression arg0 = (System.Linq.Expressions.ParameterExpression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.CatchBlock o = System.Linq.Expressions.Expression.Catch(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Catch");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeCatchBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			System.Linq.Expressions.ParameterExpression arg1 = (System.Linq.Expressions.ParameterExpression)ToLua.CheckObject<System.Linq.Expressions.ParameterExpression>(L, 2);
			System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
			System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 4);
			System.Linq.Expressions.CatchBlock o = System.Linq.Expressions.Expression.MakeCatchBlock(arg0, arg1, arg2, arg3);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Condition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
				System.Linq.Expressions.ConditionalExpression o = System.Linq.Expressions.Expression.Condition(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
				System.Type arg3 = ToLua.CheckMonoType(L, 4);
				System.Linq.Expressions.ConditionalExpression o = System.Linq.Expressions.Expression.Condition(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Condition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IfThen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.ConditionalExpression o = System.Linq.Expressions.Expression.IfThen(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IfThenElse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
			System.Linq.Expressions.ConditionalExpression o = System.Linq.Expressions.Expression.IfThenElse(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Constant(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Linq.Expressions.ConstantExpression o = System.Linq.Expressions.Expression.Constant(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				System.Linq.Expressions.ConstantExpression o = System.Linq.Expressions.Expression.Constant(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Constant");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DebugInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			System.Linq.Expressions.SymbolDocumentInfo arg0 = (System.Linq.Expressions.SymbolDocumentInfo)ToLua.CheckObject<System.Linq.Expressions.SymbolDocumentInfo>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			System.Linq.Expressions.DebugInfoExpression o = System.Linq.Expressions.Expression.DebugInfo(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearDebugInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Linq.Expressions.SymbolDocumentInfo arg0 = (System.Linq.Expressions.SymbolDocumentInfo)ToLua.CheckObject<System.Linq.Expressions.SymbolDocumentInfo>(L, 1);
			System.Linq.Expressions.DebugInfoExpression o = System.Linq.Expressions.Expression.ClearDebugInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Empty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Linq.Expressions.DefaultExpression o = System.Linq.Expressions.Expression.Empty();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Default(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			System.Linq.Expressions.DefaultExpression o = System.Linq.Expressions.Expression.Default(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ElementInit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.ElementInit o = System.Linq.Expressions.Expression.ElementInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.ElementInit o = System.Linq.Expressions.Expression.ElementInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ElementInit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reduce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Linq.Expressions.Expression obj = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression o = obj.Reduce();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReduceAndCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Linq.Expressions.Expression obj = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression o = obj.ReduceAndCheck();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReduceExtensions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Linq.Expressions.Expression obj = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression o = obj.ReduceExtensions();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Linq.Expressions.Expression obj = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dynamic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Runtime.CompilerServices.CallSiteBinder arg0 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.Dynamic(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Runtime.CompilerServices.CallSiteBinder arg0 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.Dynamic(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Runtime.CompilerServices.CallSiteBinder arg0 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.Dynamic(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Runtime.CompilerServices.CallSiteBinder arg0 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.Dynamic(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Runtime.CompilerServices.CallSiteBinder arg0 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.Expression arg5 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 6);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.Dynamic(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Runtime.CompilerServices.CallSiteBinder, System.Type>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 3, count - 2))
			{
				System.Runtime.CompilerServices.CallSiteBinder arg0 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 3, count - 2);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.Dynamic(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Dynamic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeDynamic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Runtime.CompilerServices.CallSiteBinder arg1 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.MakeDynamic(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Runtime.CompilerServices.CallSiteBinder arg1 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.MakeDynamic(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Runtime.CompilerServices.CallSiteBinder arg1 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.MakeDynamic(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Runtime.CompilerServices.CallSiteBinder arg1 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.MakeDynamic(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Runtime.CompilerServices.CallSiteBinder arg1 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.Expression arg5 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 6);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.MakeDynamic(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type, System.Runtime.CompilerServices.CallSiteBinder>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 3, count - 2))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Runtime.CompilerServices.CallSiteBinder arg1 = (System.Runtime.CompilerServices.CallSiteBinder)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 3, count - 2);
				System.Linq.Expressions.DynamicExpression o = System.Linq.Expressions.Expression.MakeDynamic(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MakeDynamic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Break(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Break(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 2))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Break(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Type>(L, 2))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Break(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Break(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Break");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Continue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Continue(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Continue(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Continue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Return(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Return(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Type>(L, 2))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Return(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 2))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Return(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Return(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Return");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Goto(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Goto(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Type>(L, 2))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Goto(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 2))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Goto(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 1, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.Goto(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Goto");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeGoto(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Linq.Expressions.GotoExpressionKind arg0 = (System.Linq.Expressions.GotoExpressionKind)LuaDLL.luaL_checknumber(L, 1);
			System.Linq.Expressions.LabelTarget arg1 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 2, typeof(System.Linq.Expressions.LabelTarget));
			System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
			System.Type arg3 = ToLua.CheckMonoType(L, 4);
			System.Linq.Expressions.GotoExpression o = System.Linq.Expressions.Expression.MakeGoto(arg0, arg1, arg2, arg3);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Reflection.PropertyInfo arg1 = (System.Reflection.PropertyInfo)ToLua.CheckObject<System.Reflection.PropertyInfo>(L, 2);
			System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 3);
			System.Linq.Expressions.IndexExpression o = System.Linq.Expressions.Expression.MakeIndex(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ArrayAccess(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.IndexExpression o = System.Linq.Expressions.Expression.ArrayAccess(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.IndexExpression o = System.Linq.Expressions.Expression.ArrayAccess(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ArrayAccess");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Property(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.Property(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.PropertyInfo>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.PropertyInfo arg1 = (System.Reflection.PropertyInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.Property(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MethodInfo>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.Property(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.PropertyInfo arg1 = (System.Reflection.PropertyInfo)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.IndexExpression o = System.Linq.Expressions.Expression.Property(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, string>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.Property(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression, string>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 3, count - 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Linq.Expressions.Expression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 3, count - 2);
				System.Linq.Expressions.IndexExpression o = System.Linq.Expressions.Expression.Property(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Reflection.PropertyInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 3, count - 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.PropertyInfo arg1 = (System.Reflection.PropertyInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 3, count - 2);
				System.Linq.Expressions.IndexExpression o = System.Linq.Expressions.Expression.Property(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Property");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Invoke(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.InvocationExpression o = System.Linq.Expressions.Expression.Invoke(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.InvocationExpression o = System.Linq.Expressions.Expression.Invoke(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Invoke");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Label(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Linq.Expressions.LabelTarget o = System.Linq.Expressions.Expression.Label();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Linq.Expressions.LabelTarget>(L, 1))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.ToObject(L, 1);
				System.Linq.Expressions.LabelExpression o = System.Linq.Expressions.Expression.Label(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Linq.Expressions.LabelTarget o = System.Linq.Expressions.Expression.Label(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Type>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.LabelTarget o = System.Linq.Expressions.Expression.Label(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.LabelTarget arg0 = (System.Linq.Expressions.LabelTarget)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.LabelExpression o = System.Linq.Expressions.Expression.Label(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Type, string>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Linq.Expressions.LabelTarget o = System.Linq.Expressions.Expression.Label(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Label");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lambda(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, string, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg3 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 4);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, string, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg3 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 4);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, string, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg3 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 4);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, string, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg4 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 5);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, bool>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.ParameterExpression>(L, 4, count - 3))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Linq.Expressions.ParameterExpression[] arg3 = ToLua.ToParamsObject<System.Linq.Expressions.ParameterExpression>(L, 4, count - 3);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression, bool>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.ParameterExpression>(L, 3, count - 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				System.Linq.Expressions.ParameterExpression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.ParameterExpression>(L, 3, count - 2);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.ParameterExpression>(L, 3, count - 2))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.ParameterExpression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.ParameterExpression>(L, 3, count - 2);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.ParameterExpression>(L, 2, count - 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.ParameterExpression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.ParameterExpression>(L, 2, count - 1);
				System.Linq.Expressions.LambdaExpression o = System.Linq.Expressions.Expression.Lambda(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Lambda");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFuncType(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.Type[] arg0 = ToLua.CheckParamsObject<System.Type>(L, 1, count);
			System.Type o = System.Linq.Expressions.Expression.GetFuncType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetFuncType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type[] arg0 = ToLua.CheckObjectArray<System.Type>(L, 1);
			System.Type arg1 = null;
			bool o = System.Linq.Expressions.Expression.TryGetFuncType(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetActionType(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.Type[] arg0 = ToLua.CheckParamsObject<System.Type>(L, 1, count);
			System.Type o = System.Linq.Expressions.Expression.GetActionType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetActionType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type[] arg0 = ToLua.CheckObjectArray<System.Type>(L, 1);
			System.Type arg1 = null;
			bool o = System.Linq.Expressions.Expression.TryGetActionType(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDelegateType(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.Type[] arg0 = ToLua.CheckParamsObject<System.Type>(L, 1, count);
			System.Type o = System.Linq.Expressions.Expression.GetDelegateType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ListInit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.ListInitExpression o = System.Linq.Expressions.Expression.ListInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>>(L, 1))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.ListInitExpression o = System.Linq.Expressions.Expression.ListInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.ListInitExpression o = System.Linq.Expressions.Expression.ListInit(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 3, count - 2))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 3, count - 2);
				System.Linq.Expressions.ListInitExpression o = System.Linq.Expressions.Expression.ListInit(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.NewExpression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.ListInitExpression o = System.Linq.Expressions.Expression.ListInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.NewExpression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.ElementInit>(L, 2, count - 1))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.ElementInit[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.ElementInit>(L, 2, count - 1);
				System.Linq.Expressions.ListInitExpression o = System.Linq.Expressions.Expression.ListInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ListInit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Loop(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.LoopExpression o = System.Linq.Expressions.Expression.Loop(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.LabelTarget arg1 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 2, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.LoopExpression o = System.Linq.Expressions.Expression.Loop(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.LabelTarget arg1 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 2, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.LabelTarget arg2 = (System.Linq.Expressions.LabelTarget)ToLua.CheckObject(L, 3, typeof(System.Linq.Expressions.LabelTarget));
				System.Linq.Expressions.LoopExpression o = System.Linq.Expressions.Expression.Loop(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Loop");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Bind(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberAssignment o = System.Linq.Expressions.Expression.Bind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberAssignment o = System.Linq.Expressions.Expression.Bind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Bind");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Field(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Reflection.FieldInfo>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.FieldInfo arg1 = (System.Reflection.FieldInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.Field(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.Field(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.Field(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Field");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PropertyOrField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.PropertyOrField(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeMemberAccess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Reflection.MemberInfo arg1 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 2);
			System.Linq.Expressions.MemberExpression o = System.Linq.Expressions.Expression.MakeMemberAccess(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MemberInit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>>(L, 2))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.CheckObject<System.Linq.Expressions.NewExpression>(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberInitExpression o = System.Linq.Expressions.Expression.MemberInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.NewExpression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.MemberBinding>(L, 2, count - 1))
			{
				System.Linq.Expressions.NewExpression arg0 = (System.Linq.Expressions.NewExpression)ToLua.CheckObject<System.Linq.Expressions.NewExpression>(L, 1);
				System.Linq.Expressions.MemberBinding[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.MemberBinding>(L, 2, count - 1);
				System.Linq.Expressions.MemberInitExpression o = System.Linq.Expressions.Expression.MemberInit(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MemberInit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ListBind(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberListBinding o = System.Linq.Expressions.Expression.ListBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberListBinding o = System.Linq.Expressions.Expression.ListBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.MemberInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.ElementInit>(L, 2, count - 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.ElementInit[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.ElementInit>(L, 2, count - 1);
				System.Linq.Expressions.MemberListBinding o = System.Linq.Expressions.Expression.ListBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.ElementInit>(L, 2, count - 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.ElementInit[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.ElementInit>(L, 2, count - 1);
				System.Linq.Expressions.MemberListBinding o = System.Linq.Expressions.Expression.ListBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ListBind");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MemberBind(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberMemberBinding o = System.Linq.Expressions.Expression.MemberBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MemberMemberBinding o = System.Linq.Expressions.Expression.MemberBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.MemberInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.MemberBinding>(L, 2, count - 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.MemberBinding[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.MemberBinding>(L, 2, count - 1);
				System.Linq.Expressions.MemberMemberBinding o = System.Linq.Expressions.Expression.MemberBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.MemberBinding>(L, 2, count - 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.MemberBinding[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.MemberBinding>(L, 2, count - 1);
				System.Linq.Expressions.MemberMemberBinding o = System.Linq.Expressions.Expression.MemberBind(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MemberBind");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Call(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Reflection.MethodInfo>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg2 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 4);
				System.Linq.Expressions.Expression arg4 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 5);
				System.Linq.Expressions.Expression arg5 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 6);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression, string, System.Type[]>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 4, count - 3))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type[] arg2 = ToLua.ToObjectArray<System.Type>(L, 3);
				System.Linq.Expressions.Expression[] arg3 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 4, count - 3);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type, string, System.Type[]>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 4, count - 3))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type[] arg2 = ToLua.ToObjectArray<System.Type>(L, 3);
				System.Linq.Expressions.Expression[] arg3 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 4, count - 3);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 3, count - 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 3, count - 2);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.MethodCallExpression o = System.Linq.Expressions.Expression.Call(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Call");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewArrayInit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.NewArrayExpression o = System.Linq.Expressions.Expression.NewArrayInit(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.NewArrayExpression o = System.Linq.Expressions.Expression.NewArrayInit(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.NewArrayInit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewArrayBounds(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.NewArrayExpression o = System.Linq.Expressions.Expression.NewArrayBounds(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.NewArrayExpression o = System.Linq.Expressions.Expression.NewArrayBounds(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.NewArrayBounds");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int New(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<System.Reflection.ConstructorInfo>(L, 1))
			{
				System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.NewExpression o = System.Linq.Expressions.Expression.New(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Type>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.NewExpression o = System.Linq.Expressions.Expression.New(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1))
			{
				System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.NewExpression o = System.Linq.Expressions.Expression.New(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>>(L, 1))
			{
				System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> arg2 = (System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)ToLua.ToObject(L, 3);
				System.Linq.Expressions.NewExpression o = System.Linq.Expressions.Expression.New(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 1) && TypeChecker.CheckParamsType<System.Reflection.MemberInfo>(L, 3, count - 2))
			{
				System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Reflection.MemberInfo[] arg2 = ToLua.ToParamsObject<System.Reflection.MemberInfo>(L, 3, count - 2);
				System.Linq.Expressions.NewExpression o = System.Linq.Expressions.Expression.New(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Reflection.ConstructorInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.NewExpression o = System.Linq.Expressions.Expression.New(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parameter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				System.Linq.Expressions.ParameterExpression o = System.Linq.Expressions.Expression.Parameter(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Linq.Expressions.ParameterExpression o = System.Linq.Expressions.Expression.Parameter(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Parameter");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Variable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				System.Linq.Expressions.ParameterExpression o = System.Linq.Expressions.Expression.Variable(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Linq.Expressions.ParameterExpression o = System.Linq.Expressions.Expression.Variable(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Variable");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RuntimeVariables(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> arg0 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)ToLua.ToObject(L, 1);
				System.Linq.Expressions.RuntimeVariablesExpression o = System.Linq.Expressions.Expression.RuntimeVariables(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<System.Linq.Expressions.ParameterExpression>(L, 1, count))
			{
				System.Linq.Expressions.ParameterExpression[] arg0 = ToLua.ToParamsObject<System.Linq.Expressions.ParameterExpression>(L, 1, count);
				System.Linq.Expressions.RuntimeVariablesExpression o = System.Linq.Expressions.Expression.RuntimeVariables(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.RuntimeVariables");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwitchCase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>>(L, 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arg1 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)ToLua.ToObject(L, 2);
				System.Linq.Expressions.SwitchCase o = System.Linq.Expressions.Expression.SwitchCase(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.Expression>(L, 2, count - 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.Expression[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.Expression>(L, 2, count - 1);
				System.Linq.Expressions.SwitchCase o = System.Linq.Expressions.Expression.SwitchCase(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.SwitchCase");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Switch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>>(L, 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 3);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> arg3 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)ToLua.ToObject(L, 4);
				System.Linq.Expressions.SwitchExpression o = System.Linq.Expressions.Expression.Switch(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 4);
				System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> arg4 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)ToLua.ToObject(L, 5);
				System.Linq.Expressions.SwitchExpression o = System.Linq.Expressions.Expression.Switch(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.SwitchCase>(L, 5, count - 4))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 4);
				System.Linq.Expressions.SwitchCase[] arg4 = ToLua.ToParamsObject<System.Linq.Expressions.SwitchCase>(L, 5, count - 4);
				System.Linq.Expressions.SwitchExpression o = System.Linq.Expressions.Expression.Switch(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.SwitchCase>(L, 4, count - 3))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 3);
				System.Linq.Expressions.SwitchCase[] arg3 = ToLua.ToParamsObject<System.Linq.Expressions.SwitchCase>(L, 4, count - 3);
				System.Linq.Expressions.SwitchExpression o = System.Linq.Expressions.Expression.Switch(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.SwitchCase>(L, 3, count - 2))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 2);
				System.Linq.Expressions.SwitchCase[] arg2 = ToLua.ToParamsObject<System.Linq.Expressions.SwitchCase>(L, 3, count - 2);
				System.Linq.Expressions.SwitchExpression o = System.Linq.Expressions.Expression.Switch(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Linq.Expressions.Expression>(L, 1) && TypeChecker.CheckParamsType<System.Linq.Expressions.SwitchCase>(L, 2, count - 1))
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.ToObject(L, 1);
				System.Linq.Expressions.SwitchCase[] arg1 = ToLua.ToParamsObject<System.Linq.Expressions.SwitchCase>(L, 2, count - 1);
				System.Linq.Expressions.SwitchExpression o = System.Linq.Expressions.Expression.Switch(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Switch");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SymbolDocument(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Linq.Expressions.SymbolDocumentInfo o = System.Linq.Expressions.Expression.SymbolDocument(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Guid arg1 = StackTraits<System.Guid>.Check(L, 2);
				System.Linq.Expressions.SymbolDocumentInfo o = System.Linq.Expressions.Expression.SymbolDocument(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Guid arg1 = StackTraits<System.Guid>.Check(L, 2);
				System.Guid arg2 = StackTraits<System.Guid>.Check(L, 3);
				System.Linq.Expressions.SymbolDocumentInfo o = System.Linq.Expressions.Expression.SymbolDocument(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Guid arg1 = StackTraits<System.Guid>.Check(L, 2);
				System.Guid arg2 = StackTraits<System.Guid>.Check(L, 3);
				System.Guid arg3 = StackTraits<System.Guid>.Check(L, 4);
				System.Linq.Expressions.SymbolDocumentInfo o = System.Linq.Expressions.Expression.SymbolDocument(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.SymbolDocument");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryFault(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.TryExpression o = System.Linq.Expressions.Expression.TryFault(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryFinally(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.TryExpression o = System.Linq.Expressions.Expression.TryFinally(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryCatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.CatchBlock[] arg1 = ToLua.CheckParamsObject<System.Linq.Expressions.CatchBlock>(L, 2, count - 1);
			System.Linq.Expressions.TryExpression o = System.Linq.Expressions.Expression.TryCatch(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryCatchFinally(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.CatchBlock[] arg2 = ToLua.CheckParamsObject<System.Linq.Expressions.CatchBlock>(L, 3, count - 2);
			System.Linq.Expressions.TryExpression o = System.Linq.Expressions.Expression.TryCatchFinally(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeTry(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
			System.Linq.Expressions.Expression arg2 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 3);
			System.Linq.Expressions.Expression arg3 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 4);
			System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> arg4 = (System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>>(L, 5);
			System.Linq.Expressions.TryExpression o = System.Linq.Expressions.Expression.MakeTry(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TypeIs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			System.Linq.Expressions.TypeBinaryExpression o = System.Linq.Expressions.Expression.TypeIs(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TypeEqual(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			System.Linq.Expressions.TypeBinaryExpression o = System.Linq.Expressions.Expression.TypeEqual(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeUnary(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Linq.Expressions.ExpressionType arg0 = (System.Linq.Expressions.ExpressionType)LuaDLL.luaL_checknumber(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.MakeUnary(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Linq.Expressions.ExpressionType arg0 = (System.Linq.Expressions.ExpressionType)LuaDLL.luaL_checknumber(L, 1);
				System.Linq.Expressions.Expression arg1 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.MakeUnary(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.MakeUnary");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Negate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Negate(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Negate(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Negate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnaryPlus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.UnaryPlus(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.UnaryPlus(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.UnaryPlus");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NegateChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.NegateChecked(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.NegateChecked(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.NegateChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Not(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Not(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Not(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Not");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFalse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.IsFalse(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.IsFalse(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.IsFalse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTrue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.IsTrue(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.IsTrue(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.IsTrue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnesComplement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.OnesComplement(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.OnesComplement(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.OnesComplement");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TypeAs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.TypeAs(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unbox(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Unbox(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Convert(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Convert(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Convert(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Convert");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvertChecked(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.ConvertChecked(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				System.Reflection.MethodInfo arg2 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 3);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.ConvertChecked(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.ConvertChecked");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ArrayLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.ArrayLength(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Quote(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
			System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Quote(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rethrow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Rethrow();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 1)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Rethrow(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Rethrow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Throw(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Throw(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Throw(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Throw");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Increment(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Increment(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Increment(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Increment");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Decrement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Decrement(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.Decrement(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.Decrement");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreIncrementAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PreIncrementAssign(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PreIncrementAssign(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.PreIncrementAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreDecrementAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PreDecrementAssign(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PreDecrementAssign(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.PreDecrementAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostIncrementAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PostIncrementAssign(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PostIncrementAssign(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.PostIncrementAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostDecrementAssign(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PostDecrementAssign(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Linq.Expressions.Expression arg0 = (System.Linq.Expressions.Expression)ToLua.CheckObject<System.Linq.Expressions.Expression>(L, 1);
				System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
				System.Linq.Expressions.UnaryExpression o = System.Linq.Expressions.Expression.PostDecrementAssign(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Linq.Expressions.Expression.PostDecrementAssign");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Linq.Expressions.Expression obj = (System.Linq.Expressions.Expression)o;
			System.Linq.Expressions.ExpressionType ret = obj.NodeType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NodeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Linq.Expressions.Expression obj = (System.Linq.Expressions.Expression)o;
			System.Type ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanReduce(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Linq.Expressions.Expression obj = (System.Linq.Expressions.Expression)o;
			bool ret = obj.CanReduce;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanReduce on a nil value");
		}
	}
}

