//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DCETRuntime_ZipHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("ZipHelper");
		L.RegFunction("Compress", Compress);
		L.RegFunction("Decompress", Decompress);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Compress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = DCETRuntime.ZipHelper.Compress(arg0);
			LuaDLL.tolua_pushlstring(L, o, o.Length);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Decompress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				byte[] o = DCETRuntime.ZipHelper.Decompress(arg0);
				LuaDLL.tolua_pushlstring(L, o, o.Length);
				return 1;
			}
			else if (count == 3)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				byte[] o = DCETRuntime.ZipHelper.Decompress(arg0, arg1, arg2);
				LuaDLL.tolua_pushlstring(L, o, o.Length);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DCETRuntime.ZipHelper.Decompress");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

