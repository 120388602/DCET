//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Threading_SynchronizationContextWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Threading.SynchronizationContext), typeof(System.Object));
		L.RegFunction("IsWaitNotificationRequired", IsWaitNotificationRequired);
		L.RegFunction("Send", Send);
		L.RegFunction("Post", Post);
		L.RegFunction("OperationStarted", OperationStarted);
		L.RegFunction("OperationCompleted", OperationCompleted);
		L.RegFunction("Wait", Wait);
		L.RegFunction("SetSynchronizationContext", SetSynchronizationContext);
		L.RegFunction("CreateCopy", CreateCopy);
		L.RegFunction("New", _CreateSystem_Threading_SynchronizationContext);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Current", get_Current, null);
		L.RegFunction("getCurrent", get_Current);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Threading_SynchronizationContext(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Threading.SynchronizationContext obj = new System.Threading.SynchronizationContext();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Threading.SynchronizationContext.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsWaitNotificationRequired(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Threading.SynchronizationContext obj = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			bool o = obj.IsWaitNotificationRequired();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Threading.SynchronizationContext obj = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			System.Threading.SendOrPostCallback arg0 = (System.Threading.SendOrPostCallback)ToLua.CheckDelegate<System.Threading.SendOrPostCallback>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.Send(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Post(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Threading.SynchronizationContext obj = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			System.Threading.SendOrPostCallback arg0 = (System.Threading.SendOrPostCallback)ToLua.CheckDelegate<System.Threading.SendOrPostCallback>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.Post(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OperationStarted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Threading.SynchronizationContext obj = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			obj.OperationStarted();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OperationCompleted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Threading.SynchronizationContext obj = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			obj.OperationCompleted();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Wait(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Threading.SynchronizationContext obj = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			System.IntPtr[] arg0 = ToLua.CheckNumberArray<System.IntPtr>(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.Wait(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSynchronizationContext(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Threading.SynchronizationContext arg0 = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			System.Threading.SynchronizationContext.SetSynchronizationContext(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateCopy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Threading.SynchronizationContext obj = (System.Threading.SynchronizationContext)ToLua.CheckObject<System.Threading.SynchronizationContext>(L, 1);
			System.Threading.SynchronizationContext o = obj.CreateCopy();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Current(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Threading.SynchronizationContext.Current);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

