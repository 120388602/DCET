//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Text_RegularExpressions_RegexWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Text.RegularExpressions.Regex), typeof(System.Object));
		L.RegFunction("Escape", Escape);
		L.RegFunction("Unescape", Unescape);
		L.RegFunction("ToString", ToString);
		L.RegFunction("GetGroupNames", GetGroupNames);
		L.RegFunction("GetGroupNumbers", GetGroupNumbers);
		L.RegFunction("GroupNameFromNumber", GroupNameFromNumber);
		L.RegFunction("GroupNumberFromName", GroupNumberFromName);
		L.RegFunction("IsMatch", IsMatch);
		L.RegFunction("Match", Match);
		L.RegFunction("Matches", Matches);
		L.RegFunction("Replace", Replace);
		L.RegFunction("Split", Split);
		L.RegFunction("CompileToAssembly", CompileToAssembly);
		L.RegFunction("New", _CreateSystem_Text_RegularExpressions_Regex);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("InfiniteMatchTimeout", get_InfiniteMatchTimeout, null);
		L.RegVar("CacheSize", get_CacheSize, set_CacheSize);
		L.RegFunction("getCacheSize", get_CacheSize);
		L.RegFunction("setCacheSize", set_CacheSizeter);
		L.RegVar("Options", get_Options, null);
		L.RegFunction("getOptions", get_Options);
		L.RegVar("MatchTimeout", get_MatchTimeout, null);
		L.RegFunction("getMatchTimeout", get_MatchTimeout);
		L.RegVar("RightToLeft", get_RightToLeft, null);
		L.RegFunction("getRightToLeft", get_RightToLeft);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Text_RegularExpressions_Regex(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Text.RegularExpressions.Regex obj = new System.Text.RegularExpressions.Regex(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Text.RegularExpressions.RegexOptions arg1 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.luaL_checknumber(L, 2);
				System.Text.RegularExpressions.Regex obj = new System.Text.RegularExpressions.Regex(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Text.RegularExpressions.RegexOptions arg1 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.luaL_checknumber(L, 2);
				System.TimeSpan arg2 = StackTraits<System.TimeSpan>.Check(L, 3);
				System.Text.RegularExpressions.Regex obj = new System.Text.RegularExpressions.Regex(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Text.RegularExpressions.Regex.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Escape(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = System.Text.RegularExpressions.Regex.Escape(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unescape(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = System.Text.RegularExpressions.Regex.Unescape(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.CheckObject<System.Text.RegularExpressions.Regex>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGroupNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.CheckObject<System.Text.RegularExpressions.Regex>(L, 1);
			string[] o = obj.GetGroupNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGroupNumbers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.CheckObject<System.Text.RegularExpressions.Regex>(L, 1);
			int[] o = obj.GetGroupNumbers();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GroupNameFromNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.CheckObject<System.Text.RegularExpressions.Regex>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GroupNameFromNumber(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GroupNumberFromName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.CheckObject<System.Text.RegularExpressions.Regex>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.GroupNumberFromName(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsMatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				bool o = System.Text.RegularExpressions.Regex.IsMatch(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.IsMatch(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.IsMatch(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, uint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 3);
				bool o = System.Text.RegularExpressions.Regex.IsMatch(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.luaL_checknumber(L, 3);
				System.TimeSpan arg3 = StackTraits<System.TimeSpan>.Check(L, 4);
				bool o = System.Text.RegularExpressions.Regex.IsMatch(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.RegularExpressions.Regex.IsMatch");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Match(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.Match o = System.Text.RegularExpressions.Regex.Match(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.Match o = obj.Match(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.Text.RegularExpressions.Match o = obj.Match(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, uint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 3);
				System.Text.RegularExpressions.Match o = System.Text.RegularExpressions.Regex.Match(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, int, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				System.Text.RegularExpressions.Match o = obj.Match(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, uint, System.TimeSpan>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 3);
				System.TimeSpan arg3 = StackTraits<System.TimeSpan>.To(L, 4);
				System.Text.RegularExpressions.Match o = System.Text.RegularExpressions.Regex.Match(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.RegularExpressions.Regex.Match");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Matches(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchCollection o = System.Text.RegularExpressions.Regex.Matches(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchCollection o = obj.Matches(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.Text.RegularExpressions.MatchCollection o = obj.Matches(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, uint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 3);
				System.Text.RegularExpressions.MatchCollection o = System.Text.RegularExpressions.Regex.Matches(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.luaL_checknumber(L, 3);
				System.TimeSpan arg3 = StackTraits<System.TimeSpan>.Check(L, 4);
				System.Text.RegularExpressions.MatchCollection o = System.Text.RegularExpressions.Regex.Matches(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.RegularExpressions.Regex.Matches");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Replace(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				string o = System.Text.RegularExpressions.Regex.Replace(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, string>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string o = obj.Replace(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, System.Text.RegularExpressions.MatchEvaluator>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchEvaluator arg2 = (System.Text.RegularExpressions.MatchEvaluator)ToLua.ToObject(L, 3);
				string o = System.Text.RegularExpressions.Regex.Replace(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, System.Text.RegularExpressions.MatchEvaluator>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchEvaluator arg1 = (System.Text.RegularExpressions.MatchEvaluator)ToLua.ToObject(L, 3);
				string o = obj.Replace(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, string, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				string o = obj.Replace(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, System.Text.RegularExpressions.MatchEvaluator, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchEvaluator arg1 = (System.Text.RegularExpressions.MatchEvaluator)ToLua.ToObject(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				string o = obj.Replace(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, string, uint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				System.Text.RegularExpressions.RegexOptions arg3 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 4);
				string o = System.Text.RegularExpressions.Regex.Replace(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, System.Text.RegularExpressions.MatchEvaluator, uint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchEvaluator arg2 = (System.Text.RegularExpressions.MatchEvaluator)ToLua.ToObject(L, 3);
				System.Text.RegularExpressions.RegexOptions arg3 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 4);
				string o = System.Text.RegularExpressions.Regex.Replace(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, string, int, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				string o = obj.Replace(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, System.Text.RegularExpressions.MatchEvaluator, int, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchEvaluator arg1 = (System.Text.RegularExpressions.MatchEvaluator)ToLua.ToObject(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				string o = obj.Replace(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, string, string, uint, System.TimeSpan>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				System.Text.RegularExpressions.RegexOptions arg3 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 4);
				System.TimeSpan arg4 = StackTraits<System.TimeSpan>.To(L, 5);
				string o = System.Text.RegularExpressions.Regex.Replace(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, string, System.Text.RegularExpressions.MatchEvaluator, uint, System.TimeSpan>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.MatchEvaluator arg2 = (System.Text.RegularExpressions.MatchEvaluator)ToLua.ToObject(L, 3);
				System.Text.RegularExpressions.RegexOptions arg3 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 4);
				System.TimeSpan arg4 = StackTraits<System.TimeSpan>.To(L, 5);
				string o = System.Text.RegularExpressions.Regex.Replace(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.RegularExpressions.Regex.Replace");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Split(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string[] o = System.Text.RegularExpressions.Regex.Split(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string[] o = obj.Split(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				string[] o = obj.Split(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, uint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 3);
				string[] o = System.Text.RegularExpressions.Regex.Split(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Text.RegularExpressions.Regex, string, int, int>(L, 1))
			{
				System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				string[] o = obj.Split(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, uint, System.TimeSpan>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Text.RegularExpressions.RegexOptions arg2 = (System.Text.RegularExpressions.RegexOptions)LuaDLL.lua_tonumber(L, 3);
				System.TimeSpan arg3 = StackTraits<System.TimeSpan>.To(L, 4);
				string[] o = System.Text.RegularExpressions.Regex.Split(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.RegularExpressions.Regex.Split");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompileToAssembly(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Text.RegularExpressions.RegexCompilationInfo[] arg0 = ToLua.CheckObjectArray<System.Text.RegularExpressions.RegexCompilationInfo>(L, 1);
				System.Reflection.AssemblyName arg1 = (System.Reflection.AssemblyName)ToLua.CheckObject(L, 2, typeof(System.Reflection.AssemblyName));
				System.Text.RegularExpressions.Regex.CompileToAssembly(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				System.Text.RegularExpressions.RegexCompilationInfo[] arg0 = ToLua.CheckObjectArray<System.Text.RegularExpressions.RegexCompilationInfo>(L, 1);
				System.Reflection.AssemblyName arg1 = (System.Reflection.AssemblyName)ToLua.CheckObject(L, 2, typeof(System.Reflection.AssemblyName));
				System.Reflection.Emit.CustomAttributeBuilder[] arg2 = ToLua.CheckObjectArray<System.Reflection.Emit.CustomAttributeBuilder>(L, 3);
				System.Text.RegularExpressions.Regex.CompileToAssembly(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				System.Text.RegularExpressions.RegexCompilationInfo[] arg0 = ToLua.CheckObjectArray<System.Text.RegularExpressions.RegexCompilationInfo>(L, 1);
				System.Reflection.AssemblyName arg1 = (System.Reflection.AssemblyName)ToLua.CheckObject(L, 2, typeof(System.Reflection.AssemblyName));
				System.Reflection.Emit.CustomAttributeBuilder[] arg2 = ToLua.CheckObjectArray<System.Reflection.Emit.CustomAttributeBuilder>(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				System.Text.RegularExpressions.Regex.CompileToAssembly(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.RegularExpressions.Regex.CompileToAssembly");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InfiniteMatchTimeout(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, System.Text.RegularExpressions.Regex.InfiniteMatchTimeout);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheSize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, System.Text.RegularExpressions.Regex.CacheSize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Options(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)o;
			System.Text.RegularExpressions.RegexOptions ret = obj.Options;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Options on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MatchTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)o;
			System.TimeSpan ret = obj.MatchTimeout;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MatchTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RightToLeft(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.RegularExpressions.Regex obj = (System.Text.RegularExpressions.Regex)o;
			bool ret = obj.RightToLeft;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RightToLeft on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CacheSize(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Text.RegularExpressions.Regex.CacheSize = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CacheSizeter(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			System.Text.RegularExpressions.Regex.CacheSize = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

