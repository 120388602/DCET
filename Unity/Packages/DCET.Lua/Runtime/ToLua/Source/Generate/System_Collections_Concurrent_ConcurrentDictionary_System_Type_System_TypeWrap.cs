//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Collections_Concurrent_ConcurrentDictionary_System_Type_System_TypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>), typeof(System.Object), "ConcurrentDictionary_System_Type_System_Type");
		L.RegFunction("TryAdd", TryAdd);
		L.RegFunction("ContainsKey", ContainsKey);
		L.RegFunction("TryRemove", TryRemove);
		L.RegFunction("TryGetValue", TryGetValue);
		L.RegFunction("TryUpdate", TryUpdate);
		L.RegFunction("Clear", Clear);
		L.RegFunction("ToArray", ToArray);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("get", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("set", set_Item);
		L.RegFunction("GetOrAdd", GetOrAdd);
		L.RegFunction("AddOrUpdate", AddOrUpdate);
		L.RegFunction("New", _CreateSystem_Collections_Concurrent_ConcurrentDictionary_System_Type_System_Type);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Count", get_Count, null);
		L.RegFunction("getCount", get_Count);
		L.RegVar("IsEmpty", get_IsEmpty, null);
		L.RegFunction("getIsEmpty", get_IsEmpty);
		L.RegVar("Keys", get_Keys, null);
		L.RegFunction("getKeys", get_Keys);
		L.RegVar("Values", get_Values, null);
		L.RegFunction("getValues", get_Values);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Collections_Concurrent_ConcurrentDictionary_System_Type_System_Type(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = new System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>> arg0 = (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>>)ToLua.ToObject(L, 1);
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = new System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEqualityComparer<System.Type>>(L, 1))
			{
				System.Collections.Generic.IEqualityComparer<System.Type> arg0 = (System.Collections.Generic.IEqualityComparer<System.Type>)ToLua.ToObject(L, 1);
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = new System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int, int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = new System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>>, System.Collections.Generic.IEqualityComparer<System.Type>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>> arg0 = (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>>)ToLua.ToObject(L, 1);
				System.Collections.Generic.IEqualityComparer<System.Type> arg1 = (System.Collections.Generic.IEqualityComparer<System.Type>)ToLua.ToObject(L, 2);
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = new System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.IEqualityComparer<System.Type>>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Collections.Generic.IEqualityComparer<System.Type> arg2 = (System.Collections.Generic.IEqualityComparer<System.Type>)ToLua.ToObject(L, 3);
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = new System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>>, System.Collections.Generic.IEqualityComparer<System.Type>>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>> arg1 = (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Type>>)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEqualityComparer<System.Type> arg2 = (System.Collections.Generic.IEqualityComparer<System.Type>)ToLua.ToObject(L, 3);
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = new System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type o = obj[arg0];
			ToLua.Push(L, o);
			return 1;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			obj[arg0] = arg1;
			return 0;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryAdd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			bool o = obj.TryAdd(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			bool o = obj.ContainsKey(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryRemove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = null;
			bool o = obj.TryRemove(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = null;
			bool o = obj.TryGetValue(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			System.Type arg2 = ToLua.CheckMonoType(L, 4);
			bool o = obj.TryUpdate(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Collections.Generic.KeyValuePair<System.Type,System.Type>[] o = obj.ToArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Type,System.Type>> o = obj.GetEnumerator();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type o = obj[arg0];
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			obj[arg0] = arg1;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOrAdd(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Func<System.Type,System.Type>>(L, 3))
			{
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
				System.Type arg0 = ToLua.CheckMonoType(L, 2);
				System.Func<System.Type,System.Type> arg1 = (System.Func<System.Type,System.Type>)ToLua.ToObject(L, 3);
				System.Type o = obj.GetOrAdd(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type>(L, 3))
			{
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
				System.Type arg0 = ToLua.CheckMonoType(L, 2);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 3);
				System.Type o = obj.GetOrAdd(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>.GetOrAdd");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOrUpdate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<System.Func<System.Type,System.Type>, System.Func<System.Type,System.Type,System.Type>>(L, 3))
			{
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
				System.Type arg0 = ToLua.CheckMonoType(L, 2);
				System.Func<System.Type,System.Type> arg1 = (System.Func<System.Type,System.Type>)ToLua.ToObject(L, 3);
				System.Func<System.Type,System.Type,System.Type> arg2 = (System.Func<System.Type,System.Type,System.Type>)ToLua.ToObject(L, 4);
				System.Type o = obj.AddOrUpdate(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Type, System.Func<System.Type,System.Type,System.Type>>(L, 3))
			{
				System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)ToLua.CheckObject<System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>>(L, 1);
				System.Type arg0 = ToLua.CheckMonoType(L, 2);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 3);
				System.Func<System.Type,System.Type,System.Type> arg2 = (System.Func<System.Type,System.Type,System.Type>)ToLua.ToObject(L, 4);
				System.Type o = obj.AddOrUpdate(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>.AddOrUpdate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsEmpty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)o;
			bool ret = obj.IsEmpty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsEmpty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Keys(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)o;
			System.Collections.Generic.ICollection<System.Type> ret = obj.Keys;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Keys on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Values(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type> obj = (System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Type>)o;
			System.Collections.Generic.ICollection<System.Type> ret = obj.Values;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Values on a nil value");
		}
	}
}

