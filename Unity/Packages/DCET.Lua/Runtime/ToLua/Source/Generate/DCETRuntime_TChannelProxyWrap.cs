//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DCETRuntime_TChannelProxyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DCETRuntime.TChannelProxy), typeof(System.Object));
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("Send", Send);
		L.RegFunction("ConnectAsync", ConnectAsync);
		L.RegFunction("StartRecv", StartRecv);
		L.RegFunction("RecvAsync", RecvAsync);
		L.RegFunction("StartSend", StartSend);
		L.RegFunction("SendAsync", SendAsync);
		L.RegFunction("New", _CreateDCETRuntime_TChannelProxy);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnError", get_OnError, set_OnError);
		L.RegVar("OnStartRecv", get_OnStartRecv, set_OnStartRecv);
		L.RegVar("OnRead", get_OnRead, set_OnRead);
		L.RegVar("RemoteAddress", get_RemoteAddress, null);
		L.RegFunction("getRemoteAddress", get_RemoteAddress);
		L.RegVar("Stream", get_Stream, null);
		L.RegFunction("getStream", get_Stream);
		L.RegVar("IsSending", get_IsSending, null);
		L.RegFunction("getIsSending", get_IsSending);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDCETRuntime_TChannelProxy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Net.IPEndPoint, DCETRuntime.TServiceProxy>(L, 1))
			{
				System.Net.IPEndPoint arg0 = (System.Net.IPEndPoint)ToLua.ToObject(L, 1);
				DCETRuntime.TServiceProxy arg1 = (DCETRuntime.TServiceProxy)ToLua.ToObject(L, 2);
				DCETRuntime.TChannelProxy obj = new DCETRuntime.TChannelProxy(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Net.Sockets.Socket, DCETRuntime.TServiceProxy>(L, 1))
			{
				System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.ToObject(L, 1);
				DCETRuntime.TServiceProxy arg1 = (DCETRuntime.TServiceProxy)ToLua.ToObject(L, 2);
				DCETRuntime.TChannelProxy obj = new DCETRuntime.TChannelProxy(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DCETRuntime.TChannelProxy.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TChannelProxy));
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TChannelProxy));
			System.IO.MemoryStream arg0 = (System.IO.MemoryStream)ToLua.CheckObject<System.IO.MemoryStream>(L, 2);
			obj.Send(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TChannelProxy));
			System.Net.IPEndPoint arg0 = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 2);
			obj.ConnectAsync(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartRecv(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TChannelProxy));
			obj.StartRecv();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecvAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TChannelProxy));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.RecvAsync(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartSend(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TChannelProxy));
			obj.StartSend();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TChannelProxy));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.SendAsync(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			System.Action<int> ret = obj.OnError;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnStartRecv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			System.Action ret = obj.OnStartRecv;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnStartRecv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnRead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			System.Action<System.IO.MemoryStream> ret = obj.OnRead;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnRead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RemoteAddress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			string ret = obj.RemoteAddress;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RemoteAddress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Stream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			System.IO.MemoryStream ret = obj.Stream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Stream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSending(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			bool ret = obj.IsSending;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSending on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			System.Action<int> arg0 = (System.Action<int>)ToLua.CheckDelegate<System.Action<int>>(L, 2);
			obj.OnError = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnStartRecv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.OnStartRecv = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnStartRecv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnRead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TChannelProxy obj = (DCETRuntime.TChannelProxy)o;
			System.Action<System.IO.MemoryStream> arg0 = (System.Action<System.IO.MemoryStream>)ToLua.CheckDelegate<System.Action<System.IO.MemoryStream>>(L, 2);
			obj.OnRead = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnRead on a nil value");
		}
	}
}

