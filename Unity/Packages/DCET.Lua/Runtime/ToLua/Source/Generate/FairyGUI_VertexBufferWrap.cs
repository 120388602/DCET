//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_VertexBufferWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.VertexBuffer), typeof(System.Object));
		L.RegFunction("Begin", Begin);
		L.RegFunction("End", End);
		L.RegFunction("Clear", Clear);
		L.RegFunction("AddVert", AddVert);
		L.RegFunction("AddQuad", AddQuad);
		L.RegFunction("RepeatColors", RepeatColors);
		L.RegFunction("AddTriangle", AddTriangle);
		L.RegFunction("AddTriangles", AddTriangles);
		L.RegFunction("GetPosition", GetPosition);
		L.RegFunction("Append", Append);
		L.RegFunction("Insert", Insert);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("contentRect", get_contentRect, set_contentRect);
		L.RegVar("uvRect", get_uvRect, set_uvRect);
		L.RegVar("vertexColor", get_vertexColor, set_vertexColor);
		L.RegVar("vertices", get_vertices, null);
		L.RegVar("colors", get_colors, null);
		L.RegVar("uv0", get_uv0, null);
		L.RegVar("triangles", get_triangles, null);
		L.RegVar("currentVertCount", get_currentVertCount, null);
		L.RegFunction("getcurrentVertCount", get_currentVertCount);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Begin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			FairyGUI.VertexBuffer o = FairyGUI.VertexBuffer.Begin();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int End(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
			obj.End();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddVert(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				obj.AddVert(arg0);
				return 0;
			}
			else if (count == 3)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Color32 arg1 = StackTraits<UnityEngine.Color32>.Check(L, 3);
				obj.AddVert(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Color32 arg1 = StackTraits<UnityEngine.Color32>.Check(L, 3);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 4);
				obj.AddVert(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.VertexBuffer.AddVert");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddQuad(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				obj.AddQuad(arg0);
				return 0;
			}
			else if (count == 3)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.Color32 arg1 = StackTraits<UnityEngine.Color32>.Check(L, 3);
				obj.AddQuad(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.Color32 arg1 = StackTraits<UnityEngine.Color32>.Check(L, 3);
				UnityEngine.Rect arg2 = StackTraits<UnityEngine.Rect>.Check(L, 4);
				obj.AddQuad(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.VertexBuffer.AddQuad");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RepeatColors(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
			UnityEngine.Color32[] arg0 = ToLua.CheckStructArray<UnityEngine.Color32>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.RepeatColors(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTriangle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.AddTriangle(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTriangles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				obj.AddTriangles();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.AddTriangles(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int[]>(L, 2))
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				int[] arg0 = ToLua.ToNumberArray<int>(L, 2);
				obj.AddTriangles(arg0);
				return 0;
			}
			else if (count == 3)
			{
				FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
				int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.AddTriangles(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.VertexBuffer.AddTriangles");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 o = obj.GetPosition(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Append(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
			FairyGUI.VertexBuffer arg0 = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 2, typeof(FairyGUI.VertexBuffer));
			obj.Append(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Insert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 1, typeof(FairyGUI.VertexBuffer));
			FairyGUI.VertexBuffer arg0 = (FairyGUI.VertexBuffer)ToLua.CheckObject(L, 2, typeof(FairyGUI.VertexBuffer));
			obj.Insert(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_contentRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			UnityEngine.Rect ret = obj.contentRect;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index contentRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uvRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			UnityEngine.Rect ret = obj.uvRect;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uvRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vertexColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			UnityEngine.Color32 ret = obj.vertexColor;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertexColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vertices(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			System.Collections.Generic.List<UnityEngine.Vector3> ret = obj.vertices;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertices on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			System.Collections.Generic.List<UnityEngine.Color32> ret = obj.colors;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uv0(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			System.Collections.Generic.List<UnityEngine.Vector2> ret = obj.uv0;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uv0 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_triangles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			System.Collections.Generic.List<int> ret = obj.triangles;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index triangles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentVertCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			int ret = obj.currentVertCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentVertCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_contentRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
			obj.contentRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index contentRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uvRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
			obj.uvRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uvRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_vertexColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.VertexBuffer obj = (FairyGUI.VertexBuffer)o;
			UnityEngine.Color32 arg0 = StackTraits<UnityEngine.Color32>.Check(L, 2);
			obj.vertexColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertexColor on a nil value");
		}
	}
}

