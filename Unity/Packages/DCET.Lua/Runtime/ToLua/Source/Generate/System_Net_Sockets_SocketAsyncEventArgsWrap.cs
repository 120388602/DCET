//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_Sockets_SocketAsyncEventArgsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.Sockets.SocketAsyncEventArgs), typeof(System.EventArgs));
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("SetBuffer", SetBuffer);
		L.RegFunction("New", _CreateSystem_Net_Sockets_SocketAsyncEventArgs);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ConnectByNameError", get_ConnectByNameError, null);
		L.RegFunction("getConnectByNameError", get_ConnectByNameError);
		L.RegVar("AcceptSocket", get_AcceptSocket, set_AcceptSocket);
		L.RegFunction("getAcceptSocket", get_AcceptSocket);
		L.RegFunction("setAcceptSocket", set_AcceptSocket);
		L.RegVar("Buffer", get_Buffer, null);
		L.RegFunction("getBuffer", get_Buffer);
		L.RegVar("BufferList", get_BufferList, set_BufferList);
		L.RegFunction("getBufferList", get_BufferList);
		L.RegFunction("setBufferList", set_BufferList);
		L.RegVar("BytesTransferred", get_BytesTransferred, null);
		L.RegFunction("getBytesTransferred", get_BytesTransferred);
		L.RegVar("Count", get_Count, null);
		L.RegFunction("getCount", get_Count);
		L.RegVar("DisconnectReuseSocket", get_DisconnectReuseSocket, set_DisconnectReuseSocket);
		L.RegFunction("getDisconnectReuseSocket", get_DisconnectReuseSocket);
		L.RegFunction("setDisconnectReuseSocket", set_DisconnectReuseSocket);
		L.RegVar("LastOperation", get_LastOperation, null);
		L.RegFunction("getLastOperation", get_LastOperation);
		L.RegVar("Offset", get_Offset, null);
		L.RegFunction("getOffset", get_Offset);
		L.RegVar("RemoteEndPoint", get_RemoteEndPoint, set_RemoteEndPoint);
		L.RegFunction("getRemoteEndPoint", get_RemoteEndPoint);
		L.RegFunction("setRemoteEndPoint", set_RemoteEndPoint);
		L.RegVar("ReceiveMessageFromPacketInfo", get_ReceiveMessageFromPacketInfo, null);
		L.RegFunction("getReceiveMessageFromPacketInfo", get_ReceiveMessageFromPacketInfo);
		L.RegVar("SendPacketsElements", get_SendPacketsElements, set_SendPacketsElements);
		L.RegFunction("getSendPacketsElements", get_SendPacketsElements);
		L.RegFunction("setSendPacketsElements", set_SendPacketsElements);
		L.RegVar("SendPacketsFlags", get_SendPacketsFlags, set_SendPacketsFlags);
		L.RegFunction("getSendPacketsFlags", get_SendPacketsFlags);
		L.RegFunction("setSendPacketsFlags", set_SendPacketsFlags);
		L.RegVar("SocketError", get_SocketError, set_SocketError);
		L.RegFunction("getSocketError", get_SocketError);
		L.RegFunction("setSocketError", set_SocketError);
		L.RegVar("SocketFlags", get_SocketFlags, set_SocketFlags);
		L.RegFunction("getSocketFlags", get_SocketFlags);
		L.RegFunction("setSocketFlags", set_SocketFlags);
		L.RegVar("UserToken", get_UserToken, set_UserToken);
		L.RegFunction("getUserToken", get_UserToken);
		L.RegFunction("setUserToken", set_UserToken);
		L.RegVar("ConnectSocket", get_ConnectSocket, null);
		L.RegFunction("getConnectSocket", get_ConnectSocket);
		L.RegVar("Completed", get_Completed, set_Completed);
		L.RegFunction("addCompleted", addCompleted);
		L.RegFunction("removeCompleted", removeCompleted);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Net_Sockets_SocketAsyncEventArgs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Net.Sockets.SocketAsyncEventArgs obj = new System.Net.Sockets.SocketAsyncEventArgs();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Net.Sockets.SocketAsyncEventArgs.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBuffer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.SetBuffer(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.SetBuffer(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectByNameError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Exception ret = obj.ConnectByNameError;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectByNameError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AcceptSocket(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.Socket ret = obj.AcceptSocket;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AcceptSocket on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Buffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			byte[] ret = obj.Buffer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Buffer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BufferList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Collections.Generic.IList<System.ArraySegment<byte>> ret = obj.BufferList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BufferList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BytesTransferred(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			int ret = obj.BytesTransferred;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BytesTransferred on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DisconnectReuseSocket(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			bool ret = obj.DisconnectReuseSocket;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisconnectReuseSocket on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastOperation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.SocketAsyncOperation ret = obj.LastOperation;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastOperation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			int ret = obj.Offset;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Offset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RemoteEndPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.EndPoint ret = obj.RemoteEndPoint;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RemoteEndPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveMessageFromPacketInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.IPPacketInformation ret = obj.ReceiveMessageFromPacketInfo;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveMessageFromPacketInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendPacketsElements(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.SendPacketsElement[] ret = obj.SendPacketsElements;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendPacketsElements on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendPacketsFlags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.TransmitFileOptions ret = obj.SendPacketsFlags;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendPacketsFlags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.SocketError ret = obj.SocketError;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SocketError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketFlags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.SocketFlags ret = obj.SocketFlags;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SocketFlags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserToken(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			object ret = obj.UserToken;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserToken on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectSocket(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.Socket ret = obj.ConnectSocket;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectSocket on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Completed(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AcceptSocket(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
			obj.AcceptSocket = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AcceptSocket on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BufferList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.CheckObject<System.Collections.Generic.IList<System.ArraySegment<byte>>>(L, 2);
			obj.BufferList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BufferList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DisconnectReuseSocket(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DisconnectReuseSocket = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisconnectReuseSocket on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RemoteEndPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.EndPoint arg0 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 2);
			obj.RemoteEndPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RemoteEndPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendPacketsElements(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.SendPacketsElement[] arg0 = ToLua.CheckObjectArray<System.Net.Sockets.SendPacketsElement>(L, 2);
			obj.SendPacketsElements = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendPacketsElements on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendPacketsFlags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.TransmitFileOptions arg0 = (System.Net.Sockets.TransmitFileOptions)LuaDLL.luaL_checknumber(L, 2);
			obj.SendPacketsFlags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendPacketsFlags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SocketError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.SocketError arg0 = (System.Net.Sockets.SocketError)LuaDLL.luaL_checknumber(L, 2);
			obj.SocketError = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SocketError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SocketFlags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			System.Net.Sockets.SocketFlags arg0 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 2);
			obj.SocketFlags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SocketFlags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserToken(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.UserToken = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserToken on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Completed(IntPtr L)
	{
		try
		{
			System.Net.Sockets.SocketAsyncEventArgs obj = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject(L, 1, typeof(System.Net.Sockets.SocketAsyncEventArgs));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'System.Net.Sockets.SocketAsyncEventArgs.Completed' can only appear on the left hand side of += or -= when used outside of the type 'System.Net.Sockets.SocketAsyncEventArgs'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs> ev = (System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>)arg0.func;
				obj.Completed += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs> ev = (System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>)arg0.func;
				obj.Completed -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addCompleted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject(L, 1, typeof(System.Net.Sockets.SocketAsyncEventArgs));
			var arg0 = (System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>)ToLua.CheckDelegate<System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>>(L, 2);
			obj.Completed += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeCompleted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject(L, 1, typeof(System.Net.Sockets.SocketAsyncEventArgs));
			var arg0 = (System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>)ToLua.CheckDelegate<System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>>(L, 2);
			obj.Completed -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

