//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ProtoBuf_ProtoMemberAttributeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ProtoBuf.ProtoMemberAttribute), typeof(System.Attribute));
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("New", _CreateProtoBuf_ProtoMemberAttribute);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Name", get_Name, set_Name);
		L.RegFunction("getName", get_Name);
		L.RegFunction("setName", set_Name);
		L.RegVar("DataFormat", get_DataFormat, set_DataFormat);
		L.RegFunction("getDataFormat", get_DataFormat);
		L.RegFunction("setDataFormat", set_DataFormat);
		L.RegVar("Tag", get_Tag, null);
		L.RegFunction("getTag", get_Tag);
		L.RegVar("IsRequired", get_IsRequired, set_IsRequired);
		L.RegFunction("getIsRequired", get_IsRequired);
		L.RegFunction("setIsRequired", set_IsRequired);
		L.RegVar("IsPacked", get_IsPacked, set_IsPacked);
		L.RegFunction("getIsPacked", get_IsPacked);
		L.RegFunction("setIsPacked", set_IsPacked);
		L.RegVar("OverwriteList", get_OverwriteList, set_OverwriteList);
		L.RegFunction("getOverwriteList", get_OverwriteList);
		L.RegFunction("setOverwriteList", set_OverwriteList);
		L.RegVar("AsReference", get_AsReference, set_AsReference);
		L.RegFunction("getAsReference", get_AsReference);
		L.RegFunction("setAsReference", set_AsReference);
		L.RegVar("DynamicType", get_DynamicType, set_DynamicType);
		L.RegFunction("getDynamicType", get_DynamicType);
		L.RegFunction("setDynamicType", set_DynamicType);
		L.RegVar("Options", get_Options, set_Options);
		L.RegFunction("getOptions", get_Options);
		L.RegFunction("setOptions", set_Options);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateProtoBuf_ProtoMemberAttribute(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				ProtoBuf.ProtoMemberAttribute obj = new ProtoBuf.ProtoMemberAttribute(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ProtoBuf.ProtoMemberAttribute.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<ProtoBuf.ProtoMemberAttribute>(L, 2))
			{
				ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)ToLua.CheckObject<ProtoBuf.ProtoMemberAttribute>(L, 1);
				ProtoBuf.ProtoMemberAttribute arg0 = (ProtoBuf.ProtoMemberAttribute)ToLua.ToObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)ToLua.CheckObject<ProtoBuf.ProtoMemberAttribute>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ProtoBuf.ProtoMemberAttribute.CompareTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataFormat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			ProtoBuf.DataFormat ret = obj.DataFormat;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataFormat on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			int ret = obj.Tag;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Tag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRequired(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool ret = obj.IsRequired;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsRequired on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPacked(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool ret = obj.IsPacked;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsPacked on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OverwriteList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool ret = obj.OverwriteList;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OverwriteList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsReference(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool ret = obj.AsReference;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsReference on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DynamicType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool ret = obj.DynamicType;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DynamicType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Options(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			ProtoBuf.MemberSerializationOptions ret = obj.Options;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Options on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DataFormat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			ProtoBuf.DataFormat arg0 = (ProtoBuf.DataFormat)LuaDLL.luaL_checknumber(L, 2);
			obj.DataFormat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataFormat on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsRequired(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsRequired = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsRequired on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsPacked(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsPacked = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsPacked on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OverwriteList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.OverwriteList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OverwriteList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AsReference(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AsReference = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsReference on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DynamicType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DynamicType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DynamicType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Options(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ProtoBuf.ProtoMemberAttribute obj = (ProtoBuf.ProtoMemberAttribute)o;
			ProtoBuf.MemberSerializationOptions arg0 = (ProtoBuf.MemberSerializationOptions)LuaDLL.luaL_checknumber(L, 2);
			obj.Options = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Options on a nil value");
		}
	}
}

