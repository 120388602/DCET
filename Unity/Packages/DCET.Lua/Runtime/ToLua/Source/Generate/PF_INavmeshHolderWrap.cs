//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_INavmeshHolderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.INavmeshHolder), null);
		L.RegFunction("GetVertex", GetVertex);
		L.RegFunction("GetVertexInGraphSpace", GetVertexInGraphSpace);
		L.RegFunction("GetVertexArrayIndex", GetVertexArrayIndex);
		L.RegFunction("GetTileCoordinates", GetTileCoordinates);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.INavmeshHolder obj = (PF.INavmeshHolder)ToLua.CheckObject<PF.INavmeshHolder>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PF.Int3 o = obj.GetVertex(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexInGraphSpace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.INavmeshHolder obj = (PF.INavmeshHolder)ToLua.CheckObject<PF.INavmeshHolder>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PF.Int3 o = obj.GetVertexInGraphSpace(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexArrayIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.INavmeshHolder obj = (PF.INavmeshHolder)ToLua.CheckObject<PF.INavmeshHolder>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetVertexArrayIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTileCoordinates(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PF.INavmeshHolder obj = (PF.INavmeshHolder)ToLua.CheckObject<PF.INavmeshHolder>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1;
			int arg2;
			obj.GetTileCoordinates(arg0, out arg1, out arg2);
			LuaDLL.lua_pushinteger(L, arg1);
			LuaDLL.lua_pushinteger(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

