//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Security_SecurityExceptionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Security.SecurityException), typeof(System.SystemException));
		L.RegFunction("GetObjectData", GetObjectData);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateSystem_Security_SecurityException);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Action", get_Action, set_Action);
		L.RegFunction("getAction", get_Action);
		L.RegFunction("setAction", set_Action);
		L.RegVar("DenySetInstance", get_DenySetInstance, set_DenySetInstance);
		L.RegFunction("getDenySetInstance", get_DenySetInstance);
		L.RegFunction("setDenySetInstance", set_DenySetInstance);
		L.RegVar("FailedAssemblyInfo", get_FailedAssemblyInfo, set_FailedAssemblyInfo);
		L.RegFunction("getFailedAssemblyInfo", get_FailedAssemblyInfo);
		L.RegFunction("setFailedAssemblyInfo", set_FailedAssemblyInfo);
		L.RegVar("Method", get_Method, set_Method);
		L.RegFunction("getMethod", get_Method);
		L.RegFunction("setMethod", set_Method);
		L.RegVar("PermitOnlySetInstance", get_PermitOnlySetInstance, set_PermitOnlySetInstance);
		L.RegFunction("getPermitOnlySetInstance", get_PermitOnlySetInstance);
		L.RegFunction("setPermitOnlySetInstance", set_PermitOnlySetInstance);
		L.RegVar("Url", get_Url, set_Url);
		L.RegFunction("getUrl", get_Url);
		L.RegFunction("setUrl", set_Url);
		L.RegVar("Zone", get_Zone, set_Zone);
		L.RegFunction("getZone", get_Zone);
		L.RegFunction("setZone", set_Zone);
		L.RegVar("Demanded", get_Demanded, set_Demanded);
		L.RegFunction("getDemanded", get_Demanded);
		L.RegFunction("setDemanded", set_Demanded);
		L.RegVar("FirstPermissionThatFailed", get_FirstPermissionThatFailed, set_FirstPermissionThatFailed);
		L.RegFunction("getFirstPermissionThatFailed", get_FirstPermissionThatFailed);
		L.RegFunction("setFirstPermissionThatFailed", set_FirstPermissionThatFailed);
		L.RegVar("PermissionState", get_PermissionState, set_PermissionState);
		L.RegFunction("getPermissionState", get_PermissionState);
		L.RegFunction("setPermissionState", set_PermissionState);
		L.RegVar("PermissionType", get_PermissionType, set_PermissionType);
		L.RegFunction("getPermissionType", get_PermissionType);
		L.RegFunction("setPermissionType", set_PermissionType);
		L.RegVar("GrantedSet", get_GrantedSet, set_GrantedSet);
		L.RegFunction("getGrantedSet", get_GrantedSet);
		L.RegFunction("setGrantedSet", set_GrantedSet);
		L.RegVar("RefusedSet", get_RefusedSet, set_RefusedSet);
		L.RegFunction("getRefusedSet", get_RefusedSet);
		L.RegFunction("setRefusedSet", set_RefusedSet);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Security_SecurityException(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Security.SecurityException obj = new System.Security.SecurityException();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Security.SecurityException obj = new System.Security.SecurityException(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Exception>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Exception arg1 = (System.Exception)ToLua.ToObject(L, 2);
				System.Security.SecurityException obj = new System.Security.SecurityException(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Type>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Security.SecurityException obj = new System.Security.SecurityException(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				System.Security.SecurityException obj = new System.Security.SecurityException(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6)
			{
				string arg0 = ToLua.CheckString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				System.Reflection.MethodInfo arg3 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 4);
				object arg4 = ToLua.ToVarObject(L, 5);
				System.Security.IPermission arg5 = (System.Security.IPermission)ToLua.CheckObject<System.Security.IPermission>(L, 6);
				System.Security.SecurityException obj = new System.Security.SecurityException(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 9)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Reflection.AssemblyName arg1 = (System.Reflection.AssemblyName)ToLua.CheckObject(L, 2, typeof(System.Reflection.AssemblyName));
				System.Security.PermissionSet arg2 = (System.Security.PermissionSet)ToLua.CheckObject<System.Security.PermissionSet>(L, 3);
				System.Security.PermissionSet arg3 = (System.Security.PermissionSet)ToLua.CheckObject<System.Security.PermissionSet>(L, 4);
				System.Reflection.MethodInfo arg4 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 5);
				System.Security.Permissions.SecurityAction arg5 = (System.Security.Permissions.SecurityAction)LuaDLL.luaL_checknumber(L, 6);
				object arg6 = ToLua.ToVarObject(L, 7);
				System.Security.IPermission arg7 = (System.Security.IPermission)ToLua.CheckObject<System.Security.IPermission>(L, 8);
				System.Security.Policy.Evidence arg8 = (System.Security.Policy.Evidence)ToLua.CheckObject(L, 9, typeof(System.Security.Policy.Evidence));
				System.Security.SecurityException obj = new System.Security.SecurityException(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Security.SecurityException.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObjectData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Security.SecurityException obj = (System.Security.SecurityException)ToLua.CheckObject<System.Security.SecurityException>(L, 1);
			System.Runtime.Serialization.SerializationInfo arg0 = (System.Runtime.Serialization.SerializationInfo)ToLua.CheckObject(L, 2, typeof(System.Runtime.Serialization.SerializationInfo));
			System.Runtime.Serialization.StreamingContext arg1 = StackTraits<System.Runtime.Serialization.StreamingContext>.Check(L, 3);
			obj.GetObjectData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)ToLua.CheckObject<System.Security.SecurityException>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Action(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Security.Permissions.SecurityAction ret = obj.Action;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Action on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DenySetInstance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			object ret = obj.DenySetInstance;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DenySetInstance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FailedAssemblyInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Reflection.AssemblyName ret = obj.FailedAssemblyInfo;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FailedAssemblyInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Method(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Reflection.MethodInfo ret = obj.Method;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Method on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PermitOnlySetInstance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			object ret = obj.PermitOnlySetInstance;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PermitOnlySetInstance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string ret = obj.Url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Zone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Security.SecurityZone ret = obj.Zone;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Zone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Demanded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			object ret = obj.Demanded;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Demanded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FirstPermissionThatFailed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Security.IPermission ret = obj.FirstPermissionThatFailed;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FirstPermissionThatFailed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PermissionState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string ret = obj.PermissionState;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PermissionState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PermissionType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Type ret = obj.PermissionType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PermissionType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GrantedSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string ret = obj.GrantedSet;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GrantedSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RefusedSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string ret = obj.RefusedSet;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RefusedSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Action(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Security.Permissions.SecurityAction arg0 = (System.Security.Permissions.SecurityAction)LuaDLL.luaL_checknumber(L, 2);
			obj.Action = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Action on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DenySetInstance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.DenySetInstance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DenySetInstance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FailedAssemblyInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Reflection.AssemblyName arg0 = (System.Reflection.AssemblyName)ToLua.CheckObject(L, 2, typeof(System.Reflection.AssemblyName));
			obj.FailedAssemblyInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FailedAssemblyInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Method(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
			obj.Method = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Method on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PermitOnlySetInstance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.PermitOnlySetInstance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PermitOnlySetInstance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Url = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Zone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Security.SecurityZone arg0 = (System.Security.SecurityZone)LuaDLL.luaL_checknumber(L, 2);
			obj.Zone = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Zone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Demanded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Demanded = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Demanded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FirstPermissionThatFailed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Security.IPermission arg0 = (System.Security.IPermission)ToLua.CheckObject<System.Security.IPermission>(L, 2);
			obj.FirstPermissionThatFailed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FirstPermissionThatFailed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PermissionState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PermissionState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PermissionState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PermissionType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			obj.PermissionType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PermissionType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GrantedSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.GrantedSet = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GrantedSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RefusedSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.SecurityException obj = (System.Security.SecurityException)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.RefusedSet = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RefusedSet on a nil value");
		}
	}
}

