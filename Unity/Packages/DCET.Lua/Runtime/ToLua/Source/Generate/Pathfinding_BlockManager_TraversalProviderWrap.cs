//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_BlockManager_TraversalProviderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.BlockManager.TraversalProvider), typeof(System.Object));
		L.RegFunction("CanTraverse", CanTraverse);
		L.RegFunction("GetTraversalCost", GetTraversalCost);
		L.RegFunction("New", _CreatePathfinding_BlockManager_TraversalProvider);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mode", get_mode, null);
		L.RegFunction("getmode", get_mode);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_BlockManager_TraversalProvider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Pathfinding.BlockManager arg0 = (Pathfinding.BlockManager)ToLua.CheckObject<Pathfinding.BlockManager>(L, 1);
				Pathfinding.BlockManager.BlockMode arg1 = (Pathfinding.BlockManager.BlockMode)LuaDLL.luaL_checknumber(L, 2);
				System.Collections.Generic.List<Pathfinding.SingleNodeBlocker> arg2 = (System.Collections.Generic.List<Pathfinding.SingleNodeBlocker>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<Pathfinding.SingleNodeBlocker>));
				Pathfinding.BlockManager.TraversalProvider obj = new Pathfinding.BlockManager.TraversalProvider(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.BlockManager.TraversalProvider.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanTraverse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.BlockManager.TraversalProvider obj = (Pathfinding.BlockManager.TraversalProvider)ToLua.CheckObject<Pathfinding.BlockManager.TraversalProvider>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			PF.GraphNode arg1 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 3);
			bool o = obj.CanTraverse(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTraversalCost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.BlockManager.TraversalProvider obj = (Pathfinding.BlockManager.TraversalProvider)ToLua.CheckObject<Pathfinding.BlockManager.TraversalProvider>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			PF.GraphNode arg1 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 3);
			uint o = obj.GetTraversalCost(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.BlockManager.TraversalProvider obj = (Pathfinding.BlockManager.TraversalProvider)o;
			Pathfinding.BlockManager.BlockMode ret = obj.mode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mode on a nil value");
		}
	}
}

