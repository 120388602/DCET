//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_ITransformWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.ITransform), null);
		L.RegFunction("Transform", Transform);
		L.RegFunction("InverseTransform", InverseTransform);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Transform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.ITransform obj = (PF.ITransform)ToLua.CheckObject<PF.ITransform>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 o = obj.Transform(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InverseTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.ITransform obj = (PF.ITransform)ToLua.CheckObject<PF.ITransform>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 o = obj.InverseTransform(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

