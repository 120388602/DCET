//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_FunnelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.Funnel), typeof(System.Object));
		L.RegFunction("SplitIntoParts", SplitIntoParts);
		L.RegFunction("ConstructFunnelPortals", ConstructFunnelPortals);
		L.RegFunction("ShrinkPortals", ShrinkPortals);
		L.RegFunction("Unwrap", Unwrap);
		L.RegFunction("Calculate", Calculate);
		L.RegFunction("New", _CreatePF_Funnel);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_Funnel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.Funnel obj = new PF.Funnel();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.Funnel.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SplitIntoParts(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 1);
			System.Collections.Generic.List<PF.Funnel.PathPart> o = PF.Funnel.SplitIntoParts(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConstructFunnelPortals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Generic.List<PF.GraphNode> arg0 = (System.Collections.Generic.List<PF.GraphNode>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<PF.GraphNode>));
			PF.Funnel.PathPart arg1 = StackTraits<PF.Funnel.PathPart>.Check(L, 2);
			PF.Funnel.FunnelPortals o = PF.Funnel.ConstructFunnelPortals(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShrinkPortals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.Funnel.FunnelPortals arg0 = StackTraits<PF.Funnel.FunnelPortals>.Check(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			PF.Funnel.ShrinkPortals(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unwrap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.Funnel.FunnelPortals arg0 = StackTraits<PF.Funnel.FunnelPortals>.Check(L, 1);
			UnityEngine.Vector2[] arg1 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 2);
			UnityEngine.Vector2[] arg2 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 3);
			PF.Funnel.Unwrap(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Calculate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.Funnel.FunnelPortals arg0 = StackTraits<PF.Funnel.FunnelPortals>.Check(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			System.Collections.Generic.List<UnityEngine.Vector3> o = PF.Funnel.Calculate(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

