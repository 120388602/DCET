//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DCETRuntime_TServiceProxyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DCETRuntime.TServiceProxy), typeof(System.Object));
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("AcceptAsync", AcceptAsync);
		L.RegFunction("MarkNeedStartSend", MarkNeedStartSend);
		L.RegFunction("New", _CreateDCETRuntime_TServiceProxy);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MemoryStreamManager", get_MemoryStreamManager, set_MemoryStreamManager);
		L.RegVar("needStartSendChannel", get_needStartSendChannel, set_needStartSendChannel);
		L.RegVar("OnAccept", get_OnAccept, set_OnAccept);
		L.RegVar("PacketSizeLength", get_PacketSizeLength, null);
		L.RegFunction("getPacketSizeLength", get_PacketSizeLength);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDCETRuntime_TServiceProxy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				DCETRuntime.TServiceProxy obj = new DCETRuntime.TServiceProxy(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				System.Net.IPEndPoint arg1 = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 2);
				DCETRuntime.TServiceProxy obj = new DCETRuntime.TServiceProxy(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DCETRuntime.TServiceProxy.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TServiceProxy));
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AcceptAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TServiceProxy));
			obj.AcceptAsync();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkNeedStartSend(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)ToLua.CheckObject(L, 1, typeof(DCETRuntime.TServiceProxy));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.MarkNeedStartSend(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemoryStreamManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)o;
			Microsoft.IO.RecyclableMemoryStreamManager ret = obj.MemoryStreamManager;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemoryStreamManager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_needStartSendChannel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)o;
			System.Collections.Generic.List<long> ret = obj.needStartSendChannel;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index needStartSendChannel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnAccept(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)o;
			System.Action<System.Net.Sockets.Socket> ret = obj.OnAccept;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnAccept on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PacketSizeLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)o;
			int ret = obj.PacketSizeLength;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PacketSizeLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MemoryStreamManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)o;
			Microsoft.IO.RecyclableMemoryStreamManager arg0 = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 2, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			obj.MemoryStreamManager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemoryStreamManager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_needStartSendChannel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)o;
			System.Collections.Generic.List<long> arg0 = (System.Collections.Generic.List<long>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<long>));
			obj.needStartSendChannel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index needStartSendChannel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnAccept(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DCETRuntime.TServiceProxy obj = (DCETRuntime.TServiceProxy)o;
			System.Action<System.Net.Sockets.Socket> arg0 = (System.Action<System.Net.Sockets.Socket>)ToLua.CheckDelegate<System.Action<System.Net.Sockets.Socket>>(L, 2);
			obj.OnAccept = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnAccept on a nil value");
		}
	}
}

