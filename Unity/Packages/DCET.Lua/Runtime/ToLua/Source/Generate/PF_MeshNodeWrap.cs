//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_MeshNodeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.MeshNode), typeof(PF.GraphNode));
		L.RegFunction("GetVertex", GetVertex);
		L.RegFunction("GetVertexCount", GetVertexCount);
		L.RegFunction("ClosestPointOnNode", ClosestPointOnNode);
		L.RegFunction("ClosestPointOnNodeXZ", ClosestPointOnNodeXZ);
		L.RegFunction("ClearConnections", ClearConnections);
		L.RegFunction("GetConnections", GetConnections);
		L.RegFunction("FloodFill", FloodFill);
		L.RegFunction("ContainsConnection", ContainsConnection);
		L.RegFunction("UpdateRecursiveG", UpdateRecursiveG);
		L.RegFunction("AddConnection", AddConnection);
		L.RegFunction("RemoveConnection", RemoveConnection);
		L.RegFunction("ContainsPoint", ContainsPoint);
		L.RegFunction("ContainsPointInGraphSpace", ContainsPointInGraphSpace);
		L.RegFunction("GetGizmoHashCode", GetGizmoHashCode);
		L.RegFunction("SerializeReferences", SerializeReferences);
		L.RegFunction("DeserializeReferences", DeserializeReferences);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("connections", get_connections, set_connections);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PF.Int3 o = obj.GetVertex(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			int o = obj.GetVertexCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPointOnNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 o = obj.ClosestPointOnNode(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPointOnNodeXZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 o = obj.ClosestPointOnNodeXZ(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearConnections(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ClearConnections(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnections(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			System.Action<PF.GraphNode> arg0 = (System.Action<PF.GraphNode>)ToLua.CheckDelegate<System.Action<PF.GraphNode>>(L, 2);
			obj.GetConnections(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FloodFill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			System.Collections.Generic.Stack<PF.GraphNode> arg0 = (System.Collections.Generic.Stack<PF.GraphNode>)ToLua.CheckObject<System.Collections.Generic.Stack<PF.GraphNode>>(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			obj.FloodFill(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			bool o = obj.ContainsConnection(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateRecursiveG(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			PF.PathNode arg1 = (PF.PathNode)ToLua.CheckObject<PF.PathNode>(L, 3);
			PF.PathHandler arg2 = (PF.PathHandler)ToLua.CheckObject<PF.PathHandler>(L, 4);
			obj.UpdateRecursiveG(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddConnection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
				uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
				obj.AddConnection(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
				uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.AddConnection(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.MeshNode.AddConnection");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			obj.RemoveConnection(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<PF.Int3>(L, 2))
			{
				PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
				PF.Int3 arg0 = StackTraits<PF.Int3>.To(L, 2);
				bool o = obj.ContainsPoint(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool o = obj.ContainsPoint(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.MeshNode.ContainsPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsPointInGraphSpace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			PF.Int3 arg0 = StackTraits<PF.Int3>.Check(L, 2);
			bool o = obj.ContainsPointInGraphSpace(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGizmoHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			int o = obj.GetGizmoHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeReferences(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			PF.GraphSerializationContext arg0 = (PF.GraphSerializationContext)ToLua.CheckObject<PF.GraphSerializationContext>(L, 2);
			obj.SerializeReferences(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeserializeReferences(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.MeshNode obj = (PF.MeshNode)ToLua.CheckObject<PF.MeshNode>(L, 1);
			PF.GraphSerializationContext arg0 = (PF.GraphSerializationContext)ToLua.CheckObject<PF.GraphSerializationContext>(L, 2);
			obj.DeserializeReferences(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_connections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MeshNode obj = (PF.MeshNode)o;
			PF.Connection[] ret = obj.connections;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_connections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MeshNode obj = (PF.MeshNode)o;
			PF.Connection[] arg0 = ToLua.CheckStructArray<PF.Connection>(L, 2);
			obj.connections = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connections on a nil value");
		}
	}
}

