//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_IMovementPlaneWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.IMovementPlane), null);
		L.RegFunction("ToPlane", ToPlane);
		L.RegFunction("ToWorld", ToWorld);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToPlane(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PF.IMovementPlane obj = (PF.IMovementPlane)ToLua.CheckObject<PF.IMovementPlane>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector2 o = obj.ToPlane(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				PF.IMovementPlane obj = (PF.IMovementPlane)ToLua.CheckObject<PF.IMovementPlane>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1;
				UnityEngine.Vector2 o = obj.ToPlane(arg0, out arg1);
				ToLua.Push(L, o);
				LuaDLL.lua_pushnumber(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.IMovementPlane.ToPlane");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToWorld(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PF.IMovementPlane obj = (PF.IMovementPlane)ToLua.CheckObject<PF.IMovementPlane>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				UnityEngine.Vector3 o = obj.ToWorld(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				PF.IMovementPlane obj = (PF.IMovementPlane)ToLua.CheckObject<PF.IMovementPlane>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector3 o = obj.ToWorld(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.IMovementPlane.ToWorld");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

