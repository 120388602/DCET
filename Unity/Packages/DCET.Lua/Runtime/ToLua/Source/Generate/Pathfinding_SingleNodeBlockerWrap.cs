//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_SingleNodeBlockerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.SingleNodeBlocker), typeof(Pathfinding.VersionedMonoBehaviour));
		L.RegFunction("BlockAtCurrentPosition", BlockAtCurrentPosition);
		L.RegFunction("BlockAt", BlockAt);
		L.RegFunction("Block", Block);
		L.RegFunction("Unblock", Unblock);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("manager", get_manager, set_manager);
		L.RegVar("lastBlocked", get_lastBlocked, null);
		L.RegFunction("getlastBlocked", get_lastBlocked);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BlockAtCurrentPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.SingleNodeBlocker obj = (Pathfinding.SingleNodeBlocker)ToLua.CheckObject<Pathfinding.SingleNodeBlocker>(L, 1);
			obj.BlockAtCurrentPosition();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BlockAt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.SingleNodeBlocker obj = (Pathfinding.SingleNodeBlocker)ToLua.CheckObject<Pathfinding.SingleNodeBlocker>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.BlockAt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Block(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.SingleNodeBlocker obj = (Pathfinding.SingleNodeBlocker)ToLua.CheckObject<Pathfinding.SingleNodeBlocker>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			obj.Block(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unblock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.SingleNodeBlocker obj = (Pathfinding.SingleNodeBlocker)ToLua.CheckObject<Pathfinding.SingleNodeBlocker>(L, 1);
			obj.Unblock();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_manager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SingleNodeBlocker obj = (Pathfinding.SingleNodeBlocker)o;
			Pathfinding.BlockManager ret = obj.manager;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastBlocked(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SingleNodeBlocker obj = (Pathfinding.SingleNodeBlocker)o;
			PF.GraphNode ret = obj.lastBlocked;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lastBlocked on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_manager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SingleNodeBlocker obj = (Pathfinding.SingleNodeBlocker)o;
			Pathfinding.BlockManager arg0 = (Pathfinding.BlockManager)ToLua.CheckObject<Pathfinding.BlockManager>(L, 2);
			obj.manager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manager on a nil value");
		}
	}
}

