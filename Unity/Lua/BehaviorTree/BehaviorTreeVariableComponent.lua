-- Generated by CSharp.lua Compiler
local System = System
local DCETHotfix = DCET.Hotfix
local DictStringEntity = System.Dictionary(System.String, DCETHotfix.Entity)
local DictTypeDictStringEntity = System.Dictionary(System.Type, DictStringEntity)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("VariableComponent_1", function (namespace)
    return function (T)
      local Dispose, __ctor__
      __ctor__ = function (this)
        this.Value = System.default(T)
        System.base(this).__ctor__(this)
      end
      Dispose = function (this)
        if this:getIsDisposed() then
          return
        end

        System.base(this).Dispose(this)

        this.Name = nil
        this.Value = System.default(T)
      end
      return {
        __inherits__ = function (out)
          return {
            out.DCET.Hotfix.Entity
          }
        end,
        Dispose = Dispose,
        __ctor__ = __ctor__
      }
    end
  end)

  namespace.class("BehaviorTreeVariableComponent", function (namespace)
    local GetVariable, SetVariable, Dispose, __ctor__
    __ctor__ = function (this)
      this.behaviorTreeVariables = DictTypeDictStringEntity()
      System.base(this).__ctor__(this)
    end
    GetVariable = function (this, name, T)
      if System.String.IsNullOrWhiteSpace(name) then
        System.throw(System.Exception("name can not be empty" .. ""))
      end

      local type = System.typeof(T)

      if not this.behaviorTreeVariables:ContainsKey(type) then
        this.behaviorTreeVariables:set(type, DictStringEntity())
      end

      local variables = this.behaviorTreeVariables:get(type)

      if not variables:ContainsKey(name) then
        local variable = DCETHotfix.EntityFactory.Create(DCETHotfix.Game.getScene(), DCETHotfix.VariableComponent_1(T))
        variable.Name = name
        variables:set(name, variable)
      end

      return System.cast(DCETHotfix.VariableComponent_1(T), variables:get(name))
    end
    SetVariable = function (this, name, value, T)
      if System.String.IsNullOrWhiteSpace(name) then
        System.throw(System.Exception("name can not be empty" .. ""))
      end

      local type = System.typeof(T)

      if not this.behaviorTreeVariables:ContainsKey(type) then
        this.behaviorTreeVariables:set(type, DictStringEntity())
      end

      local variables = this.behaviorTreeVariables:get(type)

      if not variables:ContainsKey(name) then
        local variable = DCETHotfix.EntityFactory.Create(DCETHotfix.Game.getScene(), DCETHotfix.VariableComponent_1(T))
        variable.Name = name
        variables:set(name, variable)
      end

      local result = System.cast(DCETHotfix.VariableComponent_1(T), variables:get(name))
      result.Value = value

      return result
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)

      for _, item in System.each(this.behaviorTreeVariables:getValues()) do
        for _, variable in System.each(item:getValues()) do
          variable:Dispose()
        end
      end

      this.behaviorTreeVariables:Clear()
    end
    return {
      __inherits__ = function (out)
        return {
          out.DCET.Hotfix.Entity
        }
      end,
      GetVariable = GetVariable,
      SetVariable = SetVariable,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
  end)
end)
