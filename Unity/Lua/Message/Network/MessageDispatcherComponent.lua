-- Generated by CSharp.lua Compiler
local System = System
local DCETModel = DCET.Model
local DCETHotfix
local ListIMHandler
local DictUInt16ListIMHandler
System.import(function (out)
  DCETHotfix = DCET.Hotfix
  ListIMHandler = System.List(DCETHotfix.IMHandler)
  DictUInt16ListIMHandler = System.Dictionary(System.UInt16, ListIMHandler)
end)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("MessageDispatcherComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      __inherits__ = function (out)
        return {
          out.DCET.Hotfix.AwakeSystem_1(out.DCET.Hotfix.MessageDispatcherComponent)
        }
      end,
      Awake = Awake
    }
  end)

  namespace.class("MessageDispatcherComponentLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      self:Load()
    end
    return {
      __inherits__ = function (out)
        return {
          out.DCET.Hotfix.LoadSystem_1(out.DCET.Hotfix.MessageDispatcherComponent)
        }
      end,
      Load = Load
    }
  end)

  -- <summary>
  -- 消息分发组件
  -- </summary>
  namespace.class("MessageDispatcherComponent", function (namespace)
    local Awake, Load, RegisterHandler, Handle, Dispose, __ctor__
    __ctor__ = function (this)
      this.handlers = DictUInt16ListIMHandler()
      System.base(this).__ctor__(this)
    end
    Awake = function (this)
      Load(this)
    end
    Load = function (this)
      this.handlers:Clear()

      local messageDispatcherComponent = DCETModel.Game.getScene():GetComponent(DCETModel.MessageDispatcherComponent)
      local opcodeTypeComponent = DCETModel.Game.getScene():GetComponent(DCETModel.OpcodeTypeComponent)

      local types = DCETHotfix.Game.getEventSystem():GetTypes()

      for _, type in System.each(types) do
        local continue
        repeat
          local attrs = type:GetCustomAttributes(System.typeof(DCETModel.MessageHandlerAttribute), false)
          if #attrs == 0 then
            continue = true
            break
          end

          local iMHandler = System.as(System.Activator.CreateInstance(type), DCETHotfix.IMHandler)
          if iMHandler == nil then
            DCETHotfix.Log.Error("message handle " .. type:getName() .. " 需要继承 IMHandler")
            continue = true
            break
          end

          local messageType = iMHandler:GetMessageType()
          local opcode = this:getParent():GetComponent(DCETHotfix.OpcodeTypeComponent):GetOpcode(messageType)
          if opcode ~= 0 then
            RegisterHandler(this, opcode, iMHandler)
          end

          -- 尝试注册到mono层
          if messageDispatcherComponent ~= nil and opcodeTypeComponent ~= nil then
            local monoOpcode = opcodeTypeComponent:GetOpcode(messageType)
            if monoOpcode == 0 then
              continue = true
              break
            end

            local messageProxy = DCETModel.MessageProxy(messageType, function (session, o)
              iMHandler:Handle(session, o)
            end)
            messageDispatcherComponent:RegisterHandler(monoOpcode, messageProxy)
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    RegisterHandler = function (this, opcode, handler)
      if not this.handlers:ContainsKey(opcode) then
        this.handlers:AddKeyValue(opcode, ListIMHandler())
      end
      this.handlers:get(opcode):Add(handler)
    end
    Handle = function (this, session, messageInfo)
      local actions
      local default
      default, actions = this.handlers:TryGetValue(messageInfo:getOpcode())
      if not default then
        DCETHotfix.Log.Error("消息 " .. messageInfo:getMessage():GetType():getFullName() .. " 没有处理")
        return
      end

      for _, ev in System.each(actions) do
        System.try(function ()
          ev:Handle(session, messageInfo:getMessage())
        end, function (default)
          local e = default
          DCETHotfix.Log.Error(e)
        end)
      end
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)
    end
    return {
      __inherits__ = function (out)
        return {
          out.DCET.Hotfix.Entity
        }
      end,
      Awake = Awake,
      Load = Load,
      RegisterHandler = RegisterHandler,
      Handle = Handle,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
  end)
end)
