-- Generated by CSharp.lua Compiler
local System = System
local BehaviorDesignerRuntime = BehaviorDesigner.Runtime
local BehaviorDesignerTasks = BehaviorDesigner.Runtime.Tasks
local DCETHotfix = DCET.Hotfix
local DictHotfixActionEntity = System.Dictionary(BehaviorDesignerTasks.HotfixAction, DCETHotfix.Entity)
local DictHotfixCompositeEntity = System.Dictionary(BehaviorDesignerTasks.HotfixComposite, DCETHotfix.Entity)
local DictHotfixDecoratorEntity = System.Dictionary(BehaviorDesignerTasks.HotfixDecorator, DCETHotfix.Entity)
local DictHotfixConditionalEntity = System.Dictionary(BehaviorDesignerTasks.HotfixConditional, DCETHotfix.Entity)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("BehaviorTreeComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.DCET.Hotfix.AwakeSystem_1(out.DCET.Hotfix.BehaviorTreeComponent)
        }
      end,
      Awake = Awake
    }
  end)

  namespace.class("BehaviorTreeComponent", function (namespace)
    local Awake, BindHotfixActions, BindHotfixComposites, BindHotfixConditionals, BindHotfixDecorators, Dispose, __ctor__
    __ctor__ = function (this)
      this.behaviorTreeActionComponents = DictHotfixActionEntity()
      this.behaviorTreeCompositeComponents = DictHotfixCompositeEntity()
      this.behaviorTreeConditionalComponents = DictHotfixConditionalEntity()
      this.behaviorTreeDecoratorComponents = DictHotfixDecoratorEntity()
      System.base(this).__ctor__(this)
    end
    Awake = function (this)
      local behavior = this:GetParent(DCETHotfix.BehaviorTree)

      if DCETHotfix.EntityHelper.IsEmptyOrDisposed(behavior) then
        return
      end

      local behaviorTree = behavior:getBehavior()

      if not UnityEngine.op_Implicit(behaviorTree) then
        return
      end

      behaviorTree:setStartWhenEnabled(false)
      behaviorTree:setResetValuesOnRestart(false)

      local behaviorTreeController = DCETHotfix.GameObjectHelper.Ensure(behaviorTree, BehaviorDesignerRuntime.BehaviorTreeController)

      behaviorTreeController:Init()

      BindHotfixActions(this, behaviorTreeController, behavior:getParent())
      BindHotfixComposites(this, behaviorTreeController, behavior:getParent())
      BindHotfixConditionals(this, behaviorTreeController, behavior:getParent())
      BindHotfixDecorators(this, behaviorTreeController, behavior:getParent())

      behaviorTree:EnableBehavior()
    end
    BindHotfixActions = function (this, tasks, parent)
      for _, hotfixAction in System.each(tasks.hotfixActions) do
        local component = DCETHotfix.BehaviorTreeFactory.Create(parent, hotfixAction)

        if component ~= nil then
          this.behaviorTreeActionComponents:AddKeyValue(hotfixAction, component)
        end
      end
    end
    BindHotfixComposites = function (this, tasks, parent)
      for _, hotfixComposite in System.each(tasks.hotfixComposites) do
        local component = DCETHotfix.BehaviorTreeFactory.Create3(parent, hotfixComposite)

        if component ~= nil then
          this.behaviorTreeCompositeComponents:AddKeyValue(hotfixComposite, component)
        end
      end
    end
    BindHotfixConditionals = function (this, tasks, parent)
      for _, hotfixConditional in System.each(tasks.hotfixConditionals) do
        local component = DCETHotfix.BehaviorTreeFactory.Create2(parent, hotfixConditional)

        if component ~= nil then
          this.behaviorTreeConditionalComponents:AddKeyValue(hotfixConditional, component)
        end
      end
    end
    BindHotfixDecorators = function (this, tasks, parent)
      for _, hotfixDecorator in System.each(tasks.hotfixDecorators) do
        local component = DCETHotfix.BehaviorTreeFactory.Create1(parent, hotfixDecorator)

        if component ~= nil then
          this.behaviorTreeDecoratorComponents:AddKeyValue(hotfixDecorator, component)
        end
      end
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)

      for _, item in System.each(this.behaviorTreeActionComponents) do
        item.Value:Dispose()
      end

      this.behaviorTreeActionComponents:Clear()

      for _, item in System.each(this.behaviorTreeCompositeComponents) do
        item.Value:Dispose()
      end

      this.behaviorTreeCompositeComponents:Clear()

      for _, item in System.each(this.behaviorTreeConditionalComponents) do
        item.Value:Dispose()
      end

      this.behaviorTreeConditionalComponents:Clear()

      for _, item in System.each(this.behaviorTreeDecoratorComponents) do
        item.Value:Dispose()
      end

      this.behaviorTreeDecoratorComponents:Clear()
    end
    return {
      base = function (out)
        return {
          out.DCET.Hotfix.Entity
        }
      end,
      Awake = Awake,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
  end)
end)
