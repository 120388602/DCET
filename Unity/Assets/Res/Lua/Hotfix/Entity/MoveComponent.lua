-- Generated by CSharp.lua Compiler
local System = System
local DCETHotfix = DCET.Hotfix
local UnityEngine = UnityEngine
local DCETHotfix
System.import(function (out)
  DCETHotfix = DCET.Hotfix
end)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("MoveComponentUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      self:Update()
    end
    return {
      base = function (out)
        return {
          out.DCET.Hotfix.UpdateSystem_1(out.DCET.Hotfix.MoveComponent)
        }
      end,
      Update = Update,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.Hotfix.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("MoveComponent", function (namespace)
    local Update, MoveToAsync, __ctor__
    __ctor__ = function (this)
      this.Target = System.default(UnityEngine.Vector3)
      this.StartPos = System.default(UnityEngine.Vector3)
      System.base(this).__ctor__(this)
    end
    Update = function (this)
      if this.moveTcs == nil then
        return
      end

      local unit = this:GetParent(DCETHotfix.Unit)
      local timeNow = DCETHotfix.TimeHelper.Now()

      if timeNow - this.StartTime >= this.needTime then
        unit:setPosition(this.Target:__clone__())
        local tcs = this.moveTcs
        this.moveTcs = nil
        tcs:SetResult(true)
        return
      end

      local amount = (timeNow - this.StartTime) * 1 / this.needTime
      unit:setPosition(UnityEngine.Vector3.Lerp(this.StartPos, this.Target, amount))
    end
    MoveToAsync = function (this, target, speedValue, cancellationToken)
      local unit = this:GetParent(DCETHotfix.Unit)

      if (target - this.Target):getmagnitude() < 0.1 then
        return System.Task.getCompletedTask()
      end

      this.Target = target:__clone__()


      this.StartPos = unit:getPosition()
      this.StartTime = DCETHotfix.TimeHelper.Now()
      local distance = (this.Target - this.StartPos):getmagnitude()
      if math.Abs(distance) < 0.1 then
        return System.Task.getCompletedTask()
      end

      this.needTime = System.ToInt64(distance / speedValue * 1000)

      this.moveTcs = System.TaskCompletionSource()

      cancellationToken:Register(function ()
        this.moveTcs = nil
      end)
      return this.moveTcs:getTask()
    end
    return {
      base = function (out)
        return {
          out.DCET.Hotfix.Entity
        }
      end,
      StartTime = 0,
      needTime = 0,
      Update = Update,
      MoveToAsync = MoveToAsync,
      __ctor__ = __ctor__
    }
  end)
end)
