-- Generated by CSharp.lua Compiler
-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: HotfixMessage.proto
--#region Designer generated code
local System = System
local DCET = DCET
local GoogleProtobuf = Google.Protobuf
local GoogleProtobufCollections = Google.Protobuf.Collections
local RepeatedField_1Int32 = GoogleProtobufCollections.RepeatedField_1(System.Int32)
local RepeatedField_1Int64 = GoogleProtobufCollections.RepeatedField_1(System.Int64)
local RepeatedField_1String = GoogleProtobufCollections.RepeatedField_1(System.String)
local DCET
local MessageParser_1C2R_Login
local MessageParser_1R2C_Login
local MessageParser_1PlayerInfo
local RepeatedField_1PlayerInfo
local MessageParser_1C2G_LoginGate
local MessageParser_1G2C_LoginGate
local MessageParser_1C2G_PlayerInfo
local MessageParser_1G2C_PlayerInfo
local MessageParser_1C2M_TestActorRequest
local MessageParser_1G2C_TestHotfixMessage
local MessageParser_1M2C_TestActorResponse
System.import(function (out)
  DCET = out.DCET
  MessageParser_1C2R_Login = GoogleProtobuf.MessageParser_1(DCET.C2R_Login)
  MessageParser_1R2C_Login = GoogleProtobuf.MessageParser_1(DCET.R2C_Login)
  MessageParser_1PlayerInfo = GoogleProtobuf.MessageParser_1(DCET.PlayerInfo)
  RepeatedField_1PlayerInfo = GoogleProtobufCollections.RepeatedField_1(DCET.PlayerInfo)
  MessageParser_1C2G_LoginGate = GoogleProtobuf.MessageParser_1(DCET.C2G_LoginGate)
  MessageParser_1G2C_LoginGate = GoogleProtobuf.MessageParser_1(DCET.G2C_LoginGate)
  MessageParser_1C2G_PlayerInfo = GoogleProtobuf.MessageParser_1(DCET.C2G_PlayerInfo)
  MessageParser_1G2C_PlayerInfo = GoogleProtobuf.MessageParser_1(DCET.G2C_PlayerInfo)
  MessageParser_1C2M_TestActorRequest = GoogleProtobuf.MessageParser_1(DCET.C2M_TestActorRequest)
  MessageParser_1G2C_TestHotfixMessage = GoogleProtobuf.MessageParser_1(DCET.G2C_TestHotfixMessage)
  MessageParser_1M2C_TestActorResponse = GoogleProtobuf.MessageParser_1(DCET.M2C_TestActorResponse)
end)
System.namespace("DCET", function (namespace)
  --#region Messages
  namespace.class("C2R_Login", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getAccount, setAccount, getPassword, setPassword, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1C2R_Login(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getAccount = function (this)
      return this.account_
    end
    setAccount = function (this, value)
      this.account_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getPassword = function (this)
      return this.password_
    end
    setPassword = function (this, value)
      this.password_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if #getAccount(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getAccount(this))
      end
      if #getPassword(this) ~= 0 then
        output:WriteRawTag(18)
        output:WriteString(getPassword(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if #getAccount(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getAccount(this)))
      end
      if #getPassword(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getPassword(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.account_ = ""
      this.password_ = ""
      this.rpcId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setAccount(this, input:ReadString())
            break
          elseif default == 18 then
            setPassword(this, input:ReadString())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      account_ = "",
      getAccount = getAccount,
      setAccount = setAccount,
      password_ = "",
      getPassword = getPassword,
      setPassword = setPassword,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10001 --[[HotfixOpcode.C2R_Login]]) }
        }
      end
    }
    return class
  end)

  namespace.class("R2C_Login", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    getAddress, setAddress, getKey, setKey, getGateId, setGateId, WriteTo, CalculateSize, 
    MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1R2C_Login(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getAddress = function (this)
      return this.address_
    end
    setAddress = function (this, value)
      this.address_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getKey = function (this)
      return this.key_
    end
    setKey = function (this, value)
      this.key_ = value
    end
    getGateId = function (this)
      return this.gateId_
    end
    setGateId = function (this, value)
      this.gateId_ = value
    end
    WriteTo = function (this, output)
      if #getAddress(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getAddress(this))
      end
      if getKey(this) ~= 0 then
        output:WriteRawTag(16)
        output:WriteInt64(getKey(this))
      end
      if getGateId(this) ~= 0 then
        output:WriteRawTag(24)
        output:WriteInt64(getGateId(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      if #getAddress(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getAddress(this)))
      end
      if getKey(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getKey(this)))
      end
      if getGateId(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getGateId(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.address_ = ""
      this.key_ = 0
      this.gateId_ = 0
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setAddress(this, input:ReadString())
            break
          elseif default == 16 then
            setKey(this, input:ReadInt64())
            break
          elseif default == 24 then
            setGateId(this, input:ReadInt64())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      address_ = "",
      getAddress = getAddress,
      setAddress = setAddress,
      key_ = 0,
      getKey = getKey,
      setKey = setKey,
      gateId_ = 0,
      getGateId = getGateId,
      setGateId = setGateId,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10002 --[[HotfixOpcode.R2C_Login]]) }
        }
      end
    }
    return class
  end)

  namespace.class("C2G_LoginGate", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getKey, setKey, getGateId, setGateId, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1C2G_LoginGate(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getKey = function (this)
      return this.key_
    end
    setKey = function (this, value)
      this.key_ = value
    end
    getGateId = function (this)
      return this.gateId_
    end
    setGateId = function (this, value)
      this.gateId_ = value
    end
    WriteTo = function (this, output)
      if getKey(this) ~= 0 then
        output:WriteRawTag(8)
        output:WriteInt64(getKey(this))
      end
      if getGateId(this) ~= 0 then
        output:WriteRawTag(16)
        output:WriteInt64(getGateId(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getKey(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getKey(this)))
      end
      if getGateId(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getGateId(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.key_ = 0
      this.gateId_ = 0
      this.rpcId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 8 then
            setKey(this, input:ReadInt64())
            break
          elseif default == 16 then
            setGateId(this, input:ReadInt64())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      key_ = 0,
      getKey = getKey,
      setKey = setKey,
      gateId_ = 0,
      getGateId = getGateId,
      setGateId = setGateId,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10003 --[[HotfixOpcode.C2G_LoginGate]]) }
        }
      end
    }
    return class
  end)

  namespace.class("G2C_LoginGate", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    getPlayerId, setPlayerId, WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1G2C_LoginGate(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getPlayerId = function (this)
      return this.playerId_
    end
    setPlayerId = function (this, value)
      this.playerId_ = value
    end
    WriteTo = function (this, output)
      if getPlayerId(this) ~= 0 then
        output:WriteRawTag(8)
        output:WriteInt64(getPlayerId(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      if getPlayerId(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getPlayerId(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.playerId_ = 0
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 8 then
            setPlayerId(this, input:ReadInt64())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      playerId_ = 0,
      getPlayerId = getPlayerId,
      setPlayerId = setPlayerId,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10004 --[[HotfixOpcode.G2C_LoginGate]]) }
        }
      end
    }
    return class
  end)

  namespace.class("G2C_TestHotfixMessage", function (namespace)
    local _parser, getParser, getInfo, setInfo, WriteTo, CalculateSize, MergeFrom, class, 
    static
    static = function (this)
      _parser = MessageParser_1G2C_TestHotfixMessage(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getInfo = function (this)
      return this.info_
    end
    setInfo = function (this, value)
      this.info_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if #getInfo(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getInfo(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if #getInfo(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getInfo(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.info_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setInfo(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IMessage
        }
      end,
      getParser = getParser,
      info_ = "",
      getInfo = getInfo,
      setInfo = setInfo,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10005 --[[HotfixOpcode.G2C_TestHotfixMessage]]) }
        }
      end
    }
    return class
  end)

  namespace.class("C2M_TestActorRequest", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getActorId, setActorId, getInfo, setInfo, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1C2M_TestActorRequest(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getActorId = function (this)
      return this.actorId_
    end
    setActorId = function (this, value)
      this.actorId_ = value
    end
    getInfo = function (this)
      return this.info_
    end
    setInfo = function (this, value)
      this.info_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if #getInfo(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getInfo(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getActorId(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt64(getActorId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getActorId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getActorId(this)))
      end
      if #getInfo(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getInfo(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.info_ = ""
      this.rpcId_ = 0
      this.actorId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setInfo(this, input:ReadString())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setActorId(this, input:ReadInt64())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorLocationRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      actorId_ = 0,
      getActorId = getActorId,
      setActorId = setActorId,
      info_ = "",
      getInfo = getInfo,
      setInfo = setInfo,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10006 --[[HotfixOpcode.C2M_TestActorRequest]]) }
        }
      end
    }
    return class
  end)

  namespace.class("M2C_TestActorResponse", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    getInfo, setInfo, WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1M2C_TestActorResponse(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getInfo = function (this)
      return this.info_
    end
    setInfo = function (this, value)
      this.info_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if #getInfo(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getInfo(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      if #getInfo(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getInfo(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.info_ = ""
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setInfo(this, input:ReadString())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorLocationResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      info_ = "",
      getInfo = getInfo,
      setInfo = setInfo,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10007 --[[HotfixOpcode.M2C_TestActorResponse]]) }
        }
      end
    }
    return class
  end)

  namespace.class("PlayerInfo", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, WriteTo, CalculateSize, MergeFrom, class, 
    static
    static = function (this)
      _parser = MessageParser_1PlayerInfo(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    WriteTo = function (this, output)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.rpcId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IMessage
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10008 --[[HotfixOpcode.PlayerInfo]]) }
        }
      end
    }
    return class
  end)

  namespace.class("C2G_PlayerInfo", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, WriteTo, CalculateSize, MergeFrom, class, 
    static
    static = function (this)
      _parser = MessageParser_1C2G_PlayerInfo(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    WriteTo = function (this, output)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.rpcId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10009 --[[HotfixOpcode.C2G_PlayerInfo]]) }
        }
      end
    }
    return class
  end)

  namespace.class("G2C_PlayerInfo", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    getPlayerInfo, setPlayerInfo, _repeated_playerInfos_codec, getPlayerInfos, setPlayerInfos, _repeated_testRepeatedString_codec, getTestRepeatedString, setTestRepeatedString, 
    _repeated_testRepeatedInt32_codec, getTestRepeatedInt32, setTestRepeatedInt32, _repeated_testRepeatedInt64_codec, getTestRepeatedInt64, setTestRepeatedInt64, WriteTo, CalculateSize, 
    MergeFrom, class, static, __ctor__
    static = function (this)
      _parser = MessageParser_1G2C_PlayerInfo(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
      _repeated_playerInfos_codec = GoogleProtobuf.FieldCodec.ForMessage(18, DCET.PlayerInfo.getParser(), DCET.PlayerInfo)
      _repeated_testRepeatedString_codec = GoogleProtobuf.FieldCodec.ForString(26)
      _repeated_testRepeatedInt32_codec = GoogleProtobuf.FieldCodec.ForInt32(34)
      _repeated_testRepeatedInt64_codec = GoogleProtobuf.FieldCodec.ForInt64(42)
    end
    __ctor__ = function (this)
      this.playerInfos_ = RepeatedField_1PlayerInfo()
      this.testRepeatedString_ = RepeatedField_1String()
      this.testRepeatedInt32_ = RepeatedField_1Int32()
      this.testRepeatedInt64_ = RepeatedField_1Int64()
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getPlayerInfo = function (this)
      return this.playerInfo_
    end
    setPlayerInfo = function (this, value)
      this.playerInfo_ = value
    end
    getPlayerInfos = function (this)
      return this.playerInfos_
    end
    setPlayerInfos = function (this, value)
      this.playerInfos_ = value
    end
    getTestRepeatedString = function (this)
      return this.testRepeatedString_
    end
    setTestRepeatedString = function (this, value)
      this.testRepeatedString_ = value
    end
    getTestRepeatedInt32 = function (this)
      return this.testRepeatedInt32_
    end
    setTestRepeatedInt32 = function (this, value)
      this.testRepeatedInt32_ = value
    end
    getTestRepeatedInt64 = function (this)
      return this.testRepeatedInt64_
    end
    setTestRepeatedInt64 = function (this, value)
      this.testRepeatedInt64_ = value
    end
    WriteTo = function (this, output)
      if this.playerInfo_ ~= nil then
        output:WriteRawTag(10)
        output:WriteMessage(getPlayerInfo(this))
      end
      this.playerInfos_:WriteTo(output, _repeated_playerInfos_codec)
      this.testRepeatedString_:WriteTo(output, _repeated_testRepeatedString_codec)
      this.testRepeatedInt32_:WriteTo(output, _repeated_testRepeatedInt32_codec)
      this.testRepeatedInt64_:WriteTo(output, _repeated_testRepeatedInt64_codec)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      if this.playerInfo_ ~= nil then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeMessageSize(getPlayerInfo(this)))
      end
      size = size + this.playerInfos_:CalculateSize(_repeated_playerInfos_codec)
      size = size + this.testRepeatedString_:CalculateSize(_repeated_testRepeatedString_codec)
      size = size + this.testRepeatedInt32_:CalculateSize(_repeated_testRepeatedInt32_codec)
      size = size + this.testRepeatedInt64_:CalculateSize(_repeated_testRepeatedInt64_codec)
      return size
    end
    MergeFrom = function (this, input)
      if this.playerInfo_ ~= nil then
        DCET.MessagePool.Instance:Recycle(this.playerInfo_)
      end
      this.playerInfo_ = nil
      for i = 0, this.playerInfos_:getCount() - 1 do
        DCET.MessagePool.Instance:Recycle(this.playerInfos_:get(i))
      end
      this.playerInfos_:Clear()
      this.testRepeatedString_:Clear()
      this.testRepeatedInt32_:Clear()
      this.testRepeatedInt64_:Clear()
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            if this.playerInfo_ == nil then
              this.playerInfo_ = DCET.PlayerInfo()
            end
            input:ReadMessage(this.playerInfo_)
            break
          elseif default == 18 then
            this.playerInfos_:AddEntriesFrom(input, _repeated_playerInfos_codec)
            break
          elseif default == 26 then
            this.testRepeatedString_:AddEntriesFrom(input, _repeated_testRepeatedString_codec)
            break
          elseif default == 34 or default == 32 then
            this.testRepeatedInt32_:AddEntriesFrom(input, _repeated_testRepeatedInt32_codec)
            break
          elseif default == 42 or default == 40 then
            this.testRepeatedInt64_:AddEntriesFrom(input, _repeated_testRepeatedInt64_codec)
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      getPlayerInfo = getPlayerInfo,
      setPlayerInfo = setPlayerInfo,
      getPlayerInfos = getPlayerInfos,
      setPlayerInfos = setPlayerInfos,
      getTestRepeatedString = getTestRepeatedString,
      setTestRepeatedString = setTestRepeatedString,
      getTestRepeatedInt32 = getTestRepeatedInt32,
      setTestRepeatedInt32 = setTestRepeatedInt32,
      getTestRepeatedInt64 = getTestRepeatedInt64,
      setTestRepeatedInt64 = setTestRepeatedInt64,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(10010 --[[HotfixOpcode.G2C_PlayerInfo]]) }
        }
      end
    }
    return class
  end)

  --#endregion
end)
--#endregion Designer generated code
