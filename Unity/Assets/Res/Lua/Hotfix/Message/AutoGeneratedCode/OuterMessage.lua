-- Generated by CSharp.lua Compiler
-- Generated by the protocol buffer compiler.  DO NOT EDIT!
-- source: OuterMessage.proto
--#region Designer generated code
local System = System
local DCET = DCET
local GoogleProtobuf = Google.Protobuf
local GoogleProtobufCollections = Google.Protobuf.Collections
local RepeatedField_1Single = GoogleProtobufCollections.RepeatedField_1(System.Single)
local DCET
local MessageParser_1C2R_Ping
local MessageParser_1G2C_Test
local MessageParser_1R2C_Ping
local MessageParser_1UnitInfo
local RepeatedField_1UnitInfo
local MessageParser_1C2M_Reload
local MessageParser_1M2C_Reload
local MessageParser_1C2G_EnterMap
local MessageParser_1G2C_EnterMap
local MessageParser_1Frame_ClickMap
local MessageParser_1C2M_TestRequest
local MessageParser_1M2C_CreateUnits
local MessageParser_1M2C_TestResponse
local MessageParser_1Actor_TransferRequest
local MessageParser_1M2C_PathfindingResult
local MessageParser_1Actor_TransferResponse
System.import(function (out)
  DCET = out.DCET
  MessageParser_1C2R_Ping = GoogleProtobuf.MessageParser_1(DCET.C2R_Ping)
  MessageParser_1G2C_Test = GoogleProtobuf.MessageParser_1(DCET.G2C_Test)
  MessageParser_1R2C_Ping = GoogleProtobuf.MessageParser_1(DCET.R2C_Ping)
  MessageParser_1UnitInfo = GoogleProtobuf.MessageParser_1(DCET.UnitInfo)
  RepeatedField_1UnitInfo = GoogleProtobufCollections.RepeatedField_1(DCET.UnitInfo)
  MessageParser_1C2M_Reload = GoogleProtobuf.MessageParser_1(DCET.C2M_Reload)
  MessageParser_1M2C_Reload = GoogleProtobuf.MessageParser_1(DCET.M2C_Reload)
  MessageParser_1C2G_EnterMap = GoogleProtobuf.MessageParser_1(DCET.C2G_EnterMap)
  MessageParser_1G2C_EnterMap = GoogleProtobuf.MessageParser_1(DCET.G2C_EnterMap)
  MessageParser_1Frame_ClickMap = GoogleProtobuf.MessageParser_1(DCET.Frame_ClickMap)
  MessageParser_1C2M_TestRequest = GoogleProtobuf.MessageParser_1(DCET.C2M_TestRequest)
  MessageParser_1M2C_CreateUnits = GoogleProtobuf.MessageParser_1(DCET.M2C_CreateUnits)
  MessageParser_1M2C_TestResponse = GoogleProtobuf.MessageParser_1(DCET.M2C_TestResponse)
  MessageParser_1Actor_TransferRequest = GoogleProtobuf.MessageParser_1(DCET.Actor_TransferRequest)
  MessageParser_1M2C_PathfindingResult = GoogleProtobuf.MessageParser_1(DCET.M2C_PathfindingResult)
  MessageParser_1Actor_TransferResponse = GoogleProtobuf.MessageParser_1(DCET.Actor_TransferResponse)
end)
System.namespace("DCET", function (namespace)
  --#region Messages
  namespace.class("C2M_TestRequest", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getActorId, setActorId, getRequest, setRequest, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1C2M_TestRequest(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getActorId = function (this)
      return this.actorId_
    end
    setActorId = function (this, value)
      this.actorId_ = value
    end
    getRequest = function (this)
      return this.request_
    end
    setRequest = function (this, value)
      this.request_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if #getRequest(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getRequest(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getActorId(this) ~= 0 then
        output:WriteRawTag1(232, 5)
        output:WriteInt64(getActorId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getActorId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getActorId(this)))
      end
      if #getRequest(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getRequest(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.request_ = ""
      this.rpcId_ = 0
      this.actorId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setRequest(this, input:ReadString())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 744 then
            setActorId(this, input:ReadInt64())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorLocationRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      actorId_ = 0,
      getActorId = getActorId,
      setActorId = setActorId,
      request_ = "",
      getRequest = getRequest,
      setRequest = setRequest,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(101 --[[OuterOpcode.C2M_TestRequest]]) }
        }
      end
    }
    return class
  end)

  namespace.class("M2C_TestResponse", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    getResponse, setResponse, WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1M2C_TestResponse(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getResponse = function (this)
      return this.response_
    end
    setResponse = function (this, value)
      this.response_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if #getResponse(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getResponse(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      if #getResponse(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getResponse(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.response_ = ""
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setResponse(this, input:ReadString())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorLocationResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      response_ = "",
      getResponse = getResponse,
      setResponse = setResponse,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(102 --[[OuterOpcode.M2C_TestResponse]]) }
        }
      end
    }
    return class
  end)

  namespace.class("Actor_TransferRequest", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getActorId, setActorId, getMapIndex, setMapIndex, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1Actor_TransferRequest(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getActorId = function (this)
      return this.actorId_
    end
    setActorId = function (this, value)
      this.actorId_ = value
    end
    getMapIndex = function (this)
      return this.mapIndex_
    end
    setMapIndex = function (this, value)
      this.mapIndex_ = value
    end
    WriteTo = function (this, output)
      if getMapIndex(this) ~= 0 then
        output:WriteRawTag(8)
        output:WriteInt32(getMapIndex(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getActorId(this) ~= 0 then
        output:WriteRawTag1(232, 5)
        output:WriteInt64(getActorId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getActorId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getActorId(this)))
      end
      if getMapIndex(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getMapIndex(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.mapIndex_ = 0
      this.rpcId_ = 0
      this.actorId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 8 then
            setMapIndex(this, input:ReadInt32())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 744 then
            setActorId(this, input:ReadInt64())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorLocationRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      actorId_ = 0,
      getActorId = getActorId,
      setActorId = setActorId,
      mapIndex_ = 0,
      getMapIndex = getMapIndex,
      setMapIndex = setMapIndex,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(103 --[[OuterOpcode.Actor_TransferRequest]]) }
        }
      end
    }
    return class
  end)

  namespace.class("Actor_TransferResponse", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1Actor_TransferResponse(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorLocationResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(104 --[[OuterOpcode.Actor_TransferResponse]]) }
        }
      end
    }
    return class
  end)

  namespace.class("C2G_EnterMap", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, WriteTo, CalculateSize, MergeFrom, class, 
    static
    static = function (this)
      _parser = MessageParser_1C2G_EnterMap(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    WriteTo = function (this, output)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.rpcId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(105 --[[OuterOpcode.C2G_EnterMap]]) }
        }
      end
    }
    return class
  end)

  namespace.class("G2C_EnterMap", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    getUnitId, setUnitId, _repeated_units_codec, getUnits, setUnits, WriteTo, CalculateSize, MergeFrom, 
    class, static, __ctor__
    static = function (this)
      _parser = MessageParser_1G2C_EnterMap(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
      _repeated_units_codec = GoogleProtobuf.FieldCodec.ForMessage(18, DCET.UnitInfo.getParser(), DCET.UnitInfo)
    end
    __ctor__ = function (this)
      this.units_ = RepeatedField_1UnitInfo()
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getUnitId = function (this)
      return this.unitId_
    end
    setUnitId = function (this, value)
      this.unitId_ = value
    end
    getUnits = function (this)
      return this.units_
    end
    setUnits = function (this, value)
      this.units_ = value
    end
    WriteTo = function (this, output)
      if getUnitId(this) ~= 0 then
        output:WriteRawTag(8)
        output:WriteInt64(getUnitId(this))
      end
      this.units_:WriteTo(output, _repeated_units_codec)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      if getUnitId(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getUnitId(this)))
      end
      size = size + this.units_:CalculateSize(_repeated_units_codec)
      return size
    end
    MergeFrom = function (this, input)
      this.unitId_ = 0
      for i = 0, this.units_:getCount() - 1 do
        DCET.MessagePool.Instance:Recycle(this.units_:get(i))
      end
      this.units_:Clear()
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 8 then
            setUnitId(this, input:ReadInt64())
            break
          elseif default == 18 then
            this.units_:AddEntriesFrom(input, _repeated_units_codec)
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      unitId_ = 0,
      getUnitId = getUnitId,
      setUnitId = setUnitId,
      getUnits = getUnits,
      setUnits = setUnits,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(106 --[[OuterOpcode.G2C_EnterMap]]) }
        }
      end
    }
    return class
  end)

  namespace.class("UnitInfo", function (namespace)
    local _parser, getParser, getUnitId, setUnitId, getX, setX, getY, setY, 
    getZ, setZ, WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1UnitInfo(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getUnitId = function (this)
      return this.unitId_
    end
    setUnitId = function (this, value)
      this.unitId_ = value
    end
    getX = function (this)
      return this.x_
    end
    setX = function (this, value)
      this.x_ = value
    end
    getY = function (this)
      return this.y_
    end
    setY = function (this, value)
      this.y_ = value
    end
    getZ = function (this)
      return this.z_
    end
    setZ = function (this, value)
      this.z_ = value
    end
    WriteTo = function (this, output)
      if getUnitId(this) ~= 0 then
        output:WriteRawTag(8)
        output:WriteInt64(getUnitId(this))
      end
      if getX(this) ~= 0 then
        output:WriteRawTag(21)
        output:WriteFloat(getX(this))
      end
      if getY(this) ~= 0 then
        output:WriteRawTag(29)
        output:WriteFloat(getY(this))
      end
      if getZ(this) ~= 0 then
        output:WriteRawTag(37)
        output:WriteFloat(getZ(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getUnitId(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getUnitId(this)))
      end
      if getX(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      if getY(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      if getZ(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      return size
    end
    MergeFrom = function (this, input)
      this.unitId_ = 0
      this.x_ = 0
      this.y_ = 0
      this.z_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 8 then
            setUnitId(this, input:ReadInt64())
            break
          elseif default == 21 then
            setX(this, input:ReadFloat())
            break
          elseif default == 29 then
            setY(this, input:ReadFloat())
            break
          elseif default == 37 then
            setZ(this, input:ReadFloat())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage
        }
      end,
      getParser = getParser,
      unitId_ = 0,
      getUnitId = getUnitId,
      setUnitId = setUnitId,
      x_ = 0,
      getX = getX,
      setX = setX,
      y_ = 0,
      getY = getY,
      setY = setY,
      z_ = 0,
      getZ = getZ,
      setZ = setZ,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(107 --[[OuterOpcode.UnitInfo]]) }
        }
      end
    }
    return class
  end)

  namespace.class("M2C_CreateUnits", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getActorId, setActorId, _repeated_units_codec, getUnits, 
    setUnits, WriteTo, CalculateSize, MergeFrom, class, static, __ctor__
    static = function (this)
      _parser = MessageParser_1M2C_CreateUnits(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
      _repeated_units_codec = GoogleProtobuf.FieldCodec.ForMessage(10, DCET.UnitInfo.getParser(), DCET.UnitInfo)
    end
    __ctor__ = function (this)
      this.units_ = RepeatedField_1UnitInfo()
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getActorId = function (this)
      return this.actorId_
    end
    setActorId = function (this, value)
      this.actorId_ = value
    end
    getUnits = function (this)
      return this.units_
    end
    setUnits = function (this, value)
      this.units_ = value
    end
    WriteTo = function (this, output)
      this.units_:WriteTo(output, _repeated_units_codec)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getActorId(this) ~= 0 then
        output:WriteRawTag1(232, 5)
        output:WriteInt64(getActorId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getActorId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getActorId(this)))
      end
      size = size + this.units_:CalculateSize(_repeated_units_codec)
      return size
    end
    MergeFrom = function (this, input)
      for i = 0, this.units_:getCount() - 1 do
        DCET.MessagePool.Instance:Recycle(this.units_:get(i))
      end
      this.units_:Clear()
      this.rpcId_ = 0
      this.actorId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            this.units_:AddEntriesFrom(input, _repeated_units_codec)
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 744 then
            setActorId(this, input:ReadInt64())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorMessage
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      actorId_ = 0,
      getActorId = getActorId,
      setActorId = setActorId,
      getUnits = getUnits,
      setUnits = setUnits,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(108 --[[OuterOpcode.M2C_CreateUnits]]) }
        }
      end
    }
    return class
  end)

  namespace.class("Frame_ClickMap", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getActorId, setActorId, getId, setId, 
    getX, setX, getY, setY, getZ, setZ, WriteTo, CalculateSize, 
    MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1Frame_ClickMap(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getActorId = function (this)
      return this.actorId_
    end
    setActorId = function (this, value)
      this.actorId_ = value
    end
    getId = function (this)
      return this.id_
    end
    setId = function (this, value)
      this.id_ = value
    end
    getX = function (this)
      return this.x_
    end
    setX = function (this, value)
      this.x_ = value
    end
    getY = function (this)
      return this.y_
    end
    setY = function (this, value)
      this.y_ = value
    end
    getZ = function (this)
      return this.z_
    end
    setZ = function (this, value)
      this.z_ = value
    end
    WriteTo = function (this, output)
      if getX(this) ~= 0 then
        output:WriteRawTag(13)
        output:WriteFloat(getX(this))
      end
      if getY(this) ~= 0 then
        output:WriteRawTag(21)
        output:WriteFloat(getY(this))
      end
      if getZ(this) ~= 0 then
        output:WriteRawTag(29)
        output:WriteFloat(getZ(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getActorId(this) ~= 0 then
        output:WriteRawTag1(232, 5)
        output:WriteInt64(getActorId(this))
      end
      if getId(this) ~= 0 then
        output:WriteRawTag1(240, 5)
        output:WriteInt64(getId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getActorId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getActorId(this)))
      end
      if getId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getId(this)))
      end
      if getX(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      if getY(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      if getZ(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      return size
    end
    MergeFrom = function (this, input)
      this.x_ = 0
      this.y_ = 0
      this.z_ = 0
      this.rpcId_ = 0
      this.actorId_ = 0
      this.id_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 13 then
            setX(this, input:ReadFloat())
            break
          elseif default == 21 then
            setY(this, input:ReadFloat())
            break
          elseif default == 29 then
            setZ(this, input:ReadFloat())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 744 then
            setActorId(this, input:ReadInt64())
            break
          elseif default == 752 then
            setId(this, input:ReadInt64())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorLocationMessage
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      actorId_ = 0,
      getActorId = getActorId,
      setActorId = setActorId,
      id_ = 0,
      getId = getId,
      setId = setId,
      x_ = 0,
      getX = getX,
      setX = setX,
      y_ = 0,
      getY = getY,
      setY = setY,
      z_ = 0,
      getZ = getZ,
      setZ = setZ,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(109 --[[OuterOpcode.Frame_ClickMap]]) }
        }
      end
    }
    return class
  end)

  namespace.class("M2C_PathfindingResult", function (namespace)
    local _parser, getParser, getActorId, setActorId, getId, setId, getX, setX, 
    getY, setY, getZ, setZ, _repeated_xs_codec, getXs, setXs, _repeated_ys_codec, 
    getYs, setYs, _repeated_zs_codec, getZs, setZs, WriteTo, CalculateSize, MergeFrom, 
    class, static, __ctor__
    static = function (this)
      _parser = MessageParser_1M2C_PathfindingResult(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
      _repeated_xs_codec = GoogleProtobuf.FieldCodec.ForFloat(42)
      _repeated_ys_codec = GoogleProtobuf.FieldCodec.ForFloat(50)
      _repeated_zs_codec = GoogleProtobuf.FieldCodec.ForFloat(58)
    end
    __ctor__ = function (this)
      this.xs_ = RepeatedField_1Single()
      this.ys_ = RepeatedField_1Single()
      this.zs_ = RepeatedField_1Single()
    end
    getParser = function ()
      return _parser
    end
    getActorId = function (this)
      return this.actorId_
    end
    setActorId = function (this, value)
      this.actorId_ = value
    end
    getId = function (this)
      return this.id_
    end
    setId = function (this, value)
      this.id_ = value
    end
    getX = function (this)
      return this.x_
    end
    setX = function (this, value)
      this.x_ = value
    end
    getY = function (this)
      return this.y_
    end
    setY = function (this, value)
      this.y_ = value
    end
    getZ = function (this)
      return this.z_
    end
    setZ = function (this, value)
      this.z_ = value
    end
    getXs = function (this)
      return this.xs_
    end
    setXs = function (this, value)
      this.xs_ = value
    end
    getYs = function (this)
      return this.ys_
    end
    setYs = function (this, value)
      this.ys_ = value
    end
    getZs = function (this)
      return this.zs_
    end
    setZs = function (this, value)
      this.zs_ = value
    end
    WriteTo = function (this, output)
      if getId(this) ~= 0 then
        output:WriteRawTag(8)
        output:WriteInt64(getId(this))
      end
      if getX(this) ~= 0 then
        output:WriteRawTag(21)
        output:WriteFloat(getX(this))
      end
      if getY(this) ~= 0 then
        output:WriteRawTag(29)
        output:WriteFloat(getY(this))
      end
      if getZ(this) ~= 0 then
        output:WriteRawTag(37)
        output:WriteFloat(getZ(this))
      end
      this.xs_:WriteTo(output, _repeated_xs_codec)
      this.ys_:WriteTo(output, _repeated_ys_codec)
      this.zs_:WriteTo(output, _repeated_zs_codec)
      if getActorId(this) ~= 0 then
        output:WriteRawTag1(232, 5)
        output:WriteInt64(getActorId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getActorId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getActorId(this)))
      end
      if getId(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeInt64Size(getId(this)))
      end
      if getX(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      if getY(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      if getZ(this) ~= 0 then
        size = size + (5 --[[1 + 4]])
      end
      size = size + this.xs_:CalculateSize(_repeated_xs_codec)
      size = size + this.ys_:CalculateSize(_repeated_ys_codec)
      size = size + this.zs_:CalculateSize(_repeated_zs_codec)
      return size
    end
    MergeFrom = function (this, input)
      this.id_ = 0
      this.x_ = 0
      this.y_ = 0
      this.z_ = 0
      this.xs_:Clear()
      this.ys_:Clear()
      this.zs_:Clear()
      this.actorId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 8 then
            setId(this, input:ReadInt64())
            break
          elseif default == 21 then
            setX(this, input:ReadFloat())
            break
          elseif default == 29 then
            setY(this, input:ReadFloat())
            break
          elseif default == 37 then
            setZ(this, input:ReadFloat())
            break
          elseif default == 42 or default == 45 then
            this.xs_:AddEntriesFrom(input, _repeated_xs_codec)
            break
          elseif default == 50 or default == 53 then
            this.ys_:AddEntriesFrom(input, _repeated_ys_codec)
            break
          elseif default == 58 or default == 61 then
            this.zs_:AddEntriesFrom(input, _repeated_zs_codec)
            break
          elseif default == 744 then
            setActorId(this, input:ReadInt64())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IActorMessage
        }
      end,
      getParser = getParser,
      actorId_ = 0,
      getActorId = getActorId,
      setActorId = setActorId,
      id_ = 0,
      getId = getId,
      setId = setId,
      x_ = 0,
      getX = getX,
      setX = setX,
      y_ = 0,
      getY = getY,
      setY = setY,
      z_ = 0,
      getZ = getZ,
      setZ = setZ,
      getXs = getXs,
      setXs = setXs,
      getYs = getYs,
      setYs = setYs,
      getZs = getZs,
      setZs = setZs,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(110 --[[OuterOpcode.M2C_PathfindingResult]]) }
        }
      end
    }
    return class
  end)

  namespace.class("C2R_Ping", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, WriteTo, CalculateSize, MergeFrom, class, 
    static
    static = function (this)
      _parser = MessageParser_1C2R_Ping(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    WriteTo = function (this, output)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.rpcId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(111 --[[OuterOpcode.C2R_Ping]]) }
        }
      end
    }
    return class
  end)

  namespace.class("R2C_Ping", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1R2C_Ping(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(112 --[[OuterOpcode.R2C_Ping]]) }
        }
      end
    }
    return class
  end)

  namespace.class("G2C_Test", function (namespace)
    local _parser, getParser, WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1G2C_Test(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    WriteTo = function (this, output)
    end
    CalculateSize = function (this)
      local size = 0
      return size
    end
    MergeFrom = function (this, input)
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          input:SkipLastField()
          break
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IMessage
        }
      end,
      getParser = getParser,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(113 --[[OuterOpcode.G2C_Test]]) }
        }
      end
    }
    return class
  end)

  namespace.class("C2M_Reload", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getAccount, setAccount, getPassword, setPassword, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1C2M_Reload(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getAccount = function (this)
      return this.account_
    end
    setAccount = function (this, value)
      this.account_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    getPassword = function (this)
      return this.password_
    end
    setPassword = function (this, value)
      this.password_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if #getAccount(this) ~= 0 then
        output:WriteRawTag(10)
        output:WriteString(getAccount(this))
      end
      if #getPassword(this) ~= 0 then
        output:WriteRawTag(18)
        output:WriteString(getPassword(this))
      end
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if #getAccount(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getAccount(this)))
      end
      if #getPassword(this) ~= 0 then
        size = size + (1 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getPassword(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.account_ = ""
      this.password_ = ""
      this.rpcId_ = 0
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 10 then
            setAccount(this, input:ReadString())
            break
          elseif default == 18 then
            setPassword(this, input:ReadString())
            break
          elseif default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IRequest
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      account_ = "",
      getAccount = getAccount,
      setAccount = setAccount,
      password_ = "",
      getPassword = getPassword,
      setPassword = setPassword,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(114 --[[OuterOpcode.C2M_Reload]]) }
        }
      end
    }
    return class
  end)

  namespace.class("M2C_Reload", function (namespace)
    local _parser, getParser, getRpcId, setRpcId, getError, setError, getMessage, setMessage, 
    WriteTo, CalculateSize, MergeFrom, class, static
    static = function (this)
      _parser = MessageParser_1M2C_Reload(function ()
        return System.cast(class, DCET.MessagePool.Instance:Fetch(System.typeof(class)))
      end)
    end
    getParser = function ()
      return _parser
    end
    getRpcId = function (this)
      return this.rpcId_
    end
    setRpcId = function (this, value)
      this.rpcId_ = value
    end
    getError = function (this)
      return this.error_
    end
    setError = function (this, value)
      this.error_ = value
    end
    getMessage = function (this)
      return this.message_
    end
    setMessage = function (this, value)
      this.message_ = GoogleProtobuf.ProtoPreconditions.CheckNotNull(value, "value", System.String)
    end
    WriteTo = function (this, output)
      if getRpcId(this) ~= 0 then
        output:WriteRawTag1(208, 5)
        output:WriteInt32(getRpcId(this))
      end
      if getError(this) ~= 0 then
        output:WriteRawTag1(216, 5)
        output:WriteInt32(getError(this))
      end
      if #getMessage(this) ~= 0 then
        output:WriteRawTag1(226, 5)
        output:WriteString(getMessage(this))
      end
    end
    CalculateSize = function (this)
      local size = 0
      if getRpcId(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getRpcId(this)))
      end
      if getError(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeInt32Size(getError(this)))
      end
      if #getMessage(this) ~= 0 then
        size = size + (2 + GoogleProtobuf.CodedOutputStream.ComputeStringSize(getMessage(this)))
      end
      return size
    end
    MergeFrom = function (this, input)
      this.rpcId_ = 0
      this.error_ = 0
      this.message_ = ""
      local tag
      while true do
        tag = input:ReadTag()
        if not (tag ~= 0) then
          break
        end
        repeat
          local default = tag
          if default == 720 then
            setRpcId(this, input:ReadInt32())
            break
          elseif default == 728 then
            setError(this, input:ReadInt32())
            break
          elseif default == 738 then
            setMessage(this, input:ReadString())
            break
          else
            input:SkipLastField()
            break
          end
        until 1
      end
    end
    class = {
      base = function (out)
        return {
          out.Google.Protobuf.IMessage,
          out.DCET.IResponse
        }
      end,
      getParser = getParser,
      rpcId_ = 0,
      getRpcId = getRpcId,
      setRpcId = setRpcId,
      error_ = 0,
      getError = getError,
      setError = setError,
      message_ = "",
      getMessage = getMessage,
      setMessage = setMessage,
      WriteTo = WriteTo,
      CalculateSize = CalculateSize,
      MergeFrom = MergeFrom,
      static = static,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.MessageAttribute(115 --[[OuterOpcode.M2C_Reload]]) }
        }
      end
    }
    return class
  end)

  --#endregion
end)
--#endregion Designer generated code
