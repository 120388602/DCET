-- Generated by CSharp.lua Compiler
--#region Copyright notice and license
-- Protocol Buffers - Google's data interchange format
-- Copyright 2008 Google Inc.  All rights reserved.
-- https://developers.google.com/protocol-buffers/
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--     * Redistributions of source code must retain the above copyright
-- notice, this list of conditions and the following disclaimer.
--     * Redistributions in binary form must reproduce the above
-- copyright notice, this list of conditions and the following disclaimer
-- in the documentation and/or other materials provided with the
-- distribution.
--     * Neither the name of Google Inc. nor the names of its
-- contributors may be used to endorse or promote products derived from
-- this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--#endregion
local System = System
System.namespace("Google.Protobuf", function (namespace)
  -- <summary>
  -- Thrown when a protocol message being parsed is invalid in some way,
  -- e.g. it contains a malformed varint or a negative byte length.
  -- </summary>
  namespace.class("InvalidProtocolBufferException", function (namespace)
    local MoreDataAvailable, TruncatedMessage, NegativeSize, MalformedVarint, InvalidTag, InvalidBase64, InvalidEndTag, RecursionLimitExceeded, 
    JsonRecursionLimitExceeded, SizeLimitExceeded, InvalidMessageStreamTag, class, __ctor1__, __ctor2__
    __ctor1__ = function (this, message)
      System.base(this).__ctor__(this, message)
    end
    __ctor2__ = function (this, message, innerException)
      System.base(this).__ctor__(this, message, innerException)
    end
    MoreDataAvailable = function ()
      return class("Completed reading a message while more data was available in the stream.")
    end
    TruncatedMessage = function ()
      return class("While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length." --[["While parsing a protocol message, the input ended unexpectedly " +
                "in the middle of a field.  This could mean either that the " +
                "input has been truncated or that an embedded message " +
                "misreported its own length."]])
    end
    NegativeSize = function ()
      return class("CodedInputStream encountered an embedded string or message which claimed to have negative size." --[["CodedInputStream encountered an embedded string or message " +
                "which claimed to have negative size."]])
    end
    MalformedVarint = function ()
      return class("CodedInputStream encountered a malformed varint.")
    end
    -- <summary>
    -- Creates an exception for an error condition of an invalid tag being encountered.
    -- </summary>
    InvalidTag = function ()
      return class("Protocol message contained an invalid tag (zero).")
    end
    InvalidBase64 = function (innerException)
      return System.new(class, 2, "Invalid base64 data", innerException)
    end
    InvalidEndTag = function ()
      return class("Protocol message end-group tag did not match expected tag.")
    end
    RecursionLimitExceeded = function ()
      return class("Protocol message had too many levels of nesting.  May be malicious.  Use CodedInputStream.SetRecursionLimit() to increase the depth limit." --[["Protocol message had too many levels of nesting.  May be malicious.  " +
                "Use CodedInputStream.SetRecursionLimit() to increase the depth limit."]])
    end
    JsonRecursionLimitExceeded = function ()
      return class("Protocol message had too many levels of nesting.  May be malicious.  Use JsonParser.Settings to increase the depth limit." --[["Protocol message had too many levels of nesting.  May be malicious.  " +
                "Use JsonParser.Settings to increase the depth limit."]])
    end
    SizeLimitExceeded = function ()
      return class("Protocol message was too large.  May be malicious.  Use CodedInputStream.SetSizeLimit() to increase the size limit." --[["Protocol message was too large.  May be malicious.  " +
                "Use CodedInputStream.SetSizeLimit() to increase the size limit."]])
    end
    InvalidMessageStreamTag = function ()
      return class("Stream of protocol messages had invalid tag. Expected tag is length-delimited field 1.")
    end
    class = {
      base = function (out, this)
        local base = System.IO.IOException
        this.__tostring = base.__tostring
        return {
          base
        }
      end,
      MoreDataAvailable = MoreDataAvailable,
      TruncatedMessage = TruncatedMessage,
      NegativeSize = NegativeSize,
      MalformedVarint = MalformedVarint,
      InvalidTag = InvalidTag,
      InvalidBase64 = InvalidBase64,
      InvalidEndTag = InvalidEndTag,
      RecursionLimitExceeded = RecursionLimitExceeded,
      JsonRecursionLimitExceeded = JsonRecursionLimitExceeded,
      SizeLimitExceeded = SizeLimitExceeded,
      InvalidMessageStreamTag = InvalidMessageStreamTag,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
