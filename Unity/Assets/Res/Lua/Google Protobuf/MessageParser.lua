-- Generated by CSharp.lua Compiler
--#region Copyright notice and license
-- Protocol Buffers - Google's data interchange format
-- Copyright 2015 Google Inc.  All rights reserved.
-- https://developers.google.com/protocol-buffers/
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--     * Redistributions of source code must retain the above copyright
-- notice, this list of conditions and the following disclaimer.
--     * Redistributions in binary form must reproduce the above
-- copyright notice, this list of conditions and the following disclaimer
-- in the documentation and/or other materials provided with the
-- distribution.
--     * Neither the name of Google Inc. nor the names of its
-- contributors may be used to endorse or promote products derived from
-- this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--#endregion
local System = System
local ArrayByte = System.Array(System.Byte)
local GoogleProtobuf
System.import(function (out)
  GoogleProtobuf = Google.Protobuf
end)
System.namespace("Google.Protobuf", function (namespace)
  -- <summary>
  -- A general message parser, typically used by reflection-based code as all the methods
  -- return simple <see cref="IMessage"/>.
  -- </summary>
  namespace.class("MessageParser", function (namespace)
    local CreateTemplate, ParseFrom, ParseFrom1, ParseFrom2, ParseDelimitedFrom, ParseFrom3, __ctor__
    __ctor__ = function (this, factory)
      this.factory = factory
    end
    -- <summary>
    -- Creates a template instance ready for population.
    -- </summary>
    CreateTemplate = function (this)
      return this.factory()
    end
    -- <summary>
    -- Parses a message from a byte array.
    -- </summary>
    -- <returns>The newly parsed message.</returns>
    ParseFrom = function (this, data)
      GoogleProtobuf.ProtoPreconditions.CheckNotNull(data, "data", ArrayByte)
      local message = this.factory()
      GoogleProtobuf.MessageExtensions.MergeFrom(message, data)
      return message
    end
    -- <summary>
    -- Parses a message from the given byte string.
    -- </summary>
    -- <returns>The parsed message.</returns>
    ParseFrom1 = function (this, data)
      GoogleProtobuf.ProtoPreconditions.CheckNotNull(data, "data", GoogleProtobuf.ByteString)
      local message = this.factory()
      GoogleProtobuf.MessageExtensions.MergeFrom2(message, data)
      return message
    end
    -- <summary>
    -- Parses a message from the given stream.
    -- </summary>
    -- <returns>The parsed message.</returns>
    ParseFrom2 = function (this, input)
      local message = this.factory()
      GoogleProtobuf.MessageExtensions.MergeFrom3(message, input)
      return message
    end
    -- <summary>
    -- Parses a length-delimited message from the given stream.
    -- </summary>
    -- The stream is expected to contain a length and then the data. Only the amount of data
    -- specified by the length will be consumed.
    -- </remarks>
    -- <param name="input">The stream to parse.</param>
    -- <returns>The parsed message.</returns>
    ParseDelimitedFrom = function (this, input)
      local message = this.factory()
      GoogleProtobuf.MessageExtensions.MergeDelimitedFrom(message, input)
      return message
    end
    -- <summary>
    -- Parses a message from the given coded input stream.
    -- </summary>
    -- <returns>The parsed message.</returns>
    ParseFrom3 = function (this, input)
      local message = this.factory()
      message:MergeFrom(input)
      return message
    end
    return {
      CreateTemplate = CreateTemplate,
      ParseFrom = ParseFrom,
      ParseFrom1 = ParseFrom1,
      ParseFrom2 = ParseFrom2,
      ParseDelimitedFrom = ParseDelimitedFrom,
      ParseFrom3 = ParseFrom3,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- A parser for a specific message type.
  -- </summary>
  -- <p>
  -- This delegates most behavior to the
  -- <see cref="IMessage.MergeFrom"/> implementation within the original type, but
  -- provides convenient overloads to parse from a variety of sources.
  -- </p>
  -- <p>
  -- Most applications will never need to create their own instances of this type;
  -- instead, use the static <c>Parser</c> property of a generated message type to obtain a
  -- parser for that type.
  -- </p>
  -- </remarks>
  -- <typeparam name="T">The type of message to be parsed.</typeparam>
  namespace.class("MessageParser_1", function (namespace)
    return function (T)
      local CreateTemplate1, ParseFrom4, ParseFrom5, ParseFrom6, ParseDelimitedFrom1, ParseFrom7, __ctor__
      -- <summary>
      -- Creates a new parser.
      -- </summary>
      -- The factory method is effectively an optimization over using a generic constraint
      -- to require a parameterless constructor: delegates are significantly faster to execute.
      -- </remarks>
      -- <param name="factory">Function to invoke when a new, empty message is required.</param>
      __ctor__ = function (this, factory)
        System.base(this).__ctor__(this, function ()
          return factory(T)
        end)
        this.factory = factory
      end
      -- <summary>
      -- Creates a template instance ready for population.
      -- </summary>
      CreateTemplate1 = function (this)
        return this.factory(T)
      end
      -- <summary>
      -- Parses a message from a byte array.
      -- </summary>
      -- <returns>The newly parsed message.</returns>
      ParseFrom4 = function (this, data)
        GoogleProtobuf.ProtoPreconditions.CheckNotNull(data, "data", ArrayByte)
        local message = this.factory(T)
        GoogleProtobuf.MessageExtensions.MergeFrom(message, data)
        return message
      end
      -- <summary>
      -- Parses a message from the given byte string.
      -- </summary>
      -- <returns>The parsed message.</returns>
      ParseFrom5 = function (this, data)
        GoogleProtobuf.ProtoPreconditions.CheckNotNull(data, "data", GoogleProtobuf.ByteString)
        local message = this.factory(T)
        GoogleProtobuf.MessageExtensions.MergeFrom2(message, data)
        return message
      end
      -- <summary>
      -- Parses a message from the given stream.
      -- </summary>
      -- <returns>The parsed message.</returns>
      ParseFrom6 = function (this, input)
        local message = this.factory(T)
        GoogleProtobuf.MessageExtensions.MergeFrom3(message, input)
        return message
      end
      -- <summary>
      -- Parses a length-delimited message from the given stream.
      -- </summary>
      -- The stream is expected to contain a length and then the data. Only the amount of data
      -- specified by the length will be consumed.
      -- </remarks>
      -- <param name="input">The stream to parse.</param>
      -- <returns>The parsed message.</returns>
      ParseDelimitedFrom1 = function (this, input)
        local message = this.factory(T)
        GoogleProtobuf.MessageExtensions.MergeDelimitedFrom(message, input)
        return message
      end
      -- <summary>
      -- Parses a message from the given coded input stream.
      -- </summary>
      -- <returns>The parsed message.</returns>
      ParseFrom7 = function (this, input)
        local message = this.factory(T)
        message:MergeFrom(input)
        return message
      end
      return {
        base = function (out)
          return {
            out.Google.Protobuf.MessageParser
          }
        end,
        CreateTemplate1 = CreateTemplate1,
        ParseFrom4 = ParseFrom4,
        ParseFrom5 = ParseFrom5,
        ParseFrom6 = ParseFrom6,
        ParseDelimitedFrom1 = ParseDelimitedFrom1,
        ParseFrom7 = ParseFrom7,
        __ctor__ = __ctor__
      }
    end
  end)
end)
