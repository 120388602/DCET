-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local ArrayString = System.Array(System.String)
local DCETHotfix
local DictInt64IConfig
System.import(function (out)
  DCETHotfix = DCET.Hotfix
  DictInt64IConfig = System.Dictionary(System.Int64, DCETHotfix.IConfig)
end)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("ACategory", function (namespace)
    return {
      __inherits__ = function (out)
        return {
          out.DCET.Hotfix.Object
        }
      end
    }
  end)

  -- <summary>
  -- 管理该所有的配置
  -- </summary>
  namespace.class("ACategory_1", function (namespace)
    return function (T)
      local BeginInit, getConfigType, EndInit, TryGet, GetAll, GetOne
      BeginInit = function (this)
        this.dict = DictInt64IConfig()

        local configStr = DCETHotfix.ConfigHelper.GetText(System.typeof(T):getName())

        for _, str in System.each(configStr:Split(ArrayString("\n"), nil, 0 --[[StringSplitOptions.None]])) do
          local continue
          repeat
            System.try(function ()
              local str2 = str:Trim()
              if str2 == "" then
                continue = true
                return
              end
              local t = DCETHotfix.ConfigHelper.ToObject(str2, T)
              this.dict:AddKeyValue(t:getId(), t)
            end, function (default)
              local e = default
              System.throw(System.Exception("parser json fail: " .. str, e))
            end)
            continue = true
          until 1
          if not continue then
            break
          end
        end
      end
      getConfigType = function (this)
        return System.typeof(T)
      end
      EndInit = function (this)
      end
      TryGet = function (this, type)
        local t
        local default
        default, t = this.dict:TryGetValue(type)
        if not default then
          return nil
        end
        return t
      end
      GetAll = function (this)
        return Linq.ToArray(this.dict:getValues())
      end
      GetOne = function (this)
        return Linq.First(this.dict:getValues())
      end
      return {
        __inherits__ = function (out)
          return {
            out.DCET.Hotfix.ACategory
          }
        end,
        BeginInit = BeginInit,
        getConfigType = getConfigType,
        EndInit = EndInit,
        TryGet = TryGet,
        GetAll = GetAll,
        GetOne = GetOne
      }
    end
  end)
end)
