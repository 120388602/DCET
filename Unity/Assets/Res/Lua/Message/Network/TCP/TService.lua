-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local DCET = DCET
local DCETRuntime = DCETRuntime
local DCET
local DictInt64TChannel
System.import(function (out)
  DCET = out.DCET
  DictInt64TChannel = System.Dictionary(System.Int64, DCET.TChannel)
end)
System.namespace("DCET", function (namespace)
  namespace.class("TService", function (namespace)
    local OnAcceptSocket, Dispose, GetChannel, ConnectChannel, ConnectChannel1, MarkNeedStartSend, Remove, Update, 
    internal, __ctor1__, __ctor2__
    internal = function (this)
      this.idChannels = DictInt64TChannel()
    end
    -- <summary>
    -- 即可做client也可做server
    -- </summary>
    __ctor1__ = function (this, packetSizeLength, ipEndPoint, acceptCallback)
      internal(this)
      System.base(this).__ctor__(this)
      this.Proxy = DCETRuntime.TServiceProxy(packetSizeLength, ipEndPoint)
      this.Proxy.OnAccept = this.Proxy.OnAccept + System.fn(this, OnAcceptSocket)
      this:addAcceptCallback(acceptCallback)
    end
    __ctor2__ = function (this, packetSizeLength)
      internal(this)
      System.base(this).__ctor__(this)
      this.Proxy = DCETRuntime.TServiceProxy(packetSizeLength)
    end
    OnAcceptSocket = function (this, acceptSocket)
      local channel = System.new(DCET.TChannel, 2, acceptSocket, this)
      this.idChannels:set(channel.Id, channel)
      channel:setParent(this)

      System.try(function ()
        this:OnAccept(channel)
      end, function (default)
        local exception = default
        DCET.Log.Exception(exception)
      end)
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)

      for _, id in System.each(Linq.ToArray(this.idChannels:getKeys())) do
        local channel = this.idChannels:get(id)
        channel:Dispose()
      end

      local default = this.Proxy
      if default ~= nil then
        default:Dispose()
      end
    end
    GetChannel = function (this, id)
      local channel = nil
      local _
      _, channel = this.idChannels:TryGetValue(id)
      return channel
    end
    ConnectChannel = function (this, ipEndPoint)
      local channel = DCET.TChannel(ipEndPoint, this)
      this.idChannels:set(channel.Id, channel)
      channel:setParent(this)
      return channel
    end
    ConnectChannel1 = function (this, address)
      local ipEndPoint = DCET.NetworkHelper.ToIPEndPoint1(address)
      return ConnectChannel(this, ipEndPoint)
    end
    MarkNeedStartSend = function (this, id)
      this.Proxy:MarkNeedStartSend(id)
    end
    Remove = function (this, id)
      local channel
      local default
      default, channel = this.idChannels:TryGetValue(id)
      if not default then
        return
      end
      if channel == nil then
        return
      end
      this.idChannels:RemoveKey(id)
      channel:Dispose()
    end
    Update = function (this)
      for _, id in System.each(this.Proxy.needStartSendChannel) do
        local continue
        repeat
          local channel
          local default
          default, channel = this.idChannels:TryGetValue(id)
          if not default then
            continue = true
            break
          end

          if channel:getIsSending() then
            continue = true
            break
          end

          System.try(function ()
            channel:StartSend()
          end, function (default)
            local e = default
            DCET.Log.Exception(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end

      this.Proxy.needStartSendChannel:Clear()
    end
    return {
      base = function (out)
        return {
          out.DCET.AService
        }
      end,
      Dispose = Dispose,
      GetChannel = GetChannel,
      ConnectChannel = ConnectChannel,
      ConnectChannel1 = ConnectChannel1,
      MarkNeedStartSend = MarkNeedStartSend,
      Remove = Remove,
      Update = Update,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
