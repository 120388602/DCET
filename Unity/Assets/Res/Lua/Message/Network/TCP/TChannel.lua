-- Generated by CSharp.lua Compiler
local System = System
local DCETRuntime = DCETRuntime
local SystemNet = System.Net
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  -- <summary>
  -- 封装Socket,将回调push到主线程处理
  -- </summary>
  namespace.class("TChannel", function (namespace)
    local Dispose, Start, GetService, getStream, Send, OnStartRecv, getIsSending, StartSend, 
    __ctor1__, __ctor2__
    __ctor1__ = function (this, ipEndPoint, service)
      System.base(this).__ctor__(this, service, 0 --[[ChannelType.Connect]])
      this.Proxy = DCETRuntime.TChannelProxy(ipEndPoint, service.Proxy)
      this.Proxy.OnStartRecv = this.Proxy.OnStartRecv + System.fn(this, OnStartRecv)
      this.Proxy.OnRead = this.Proxy.OnRead + System.fn(this, this.OnRead)
      this.Proxy.OnError = this.Proxy.OnError + System.fn(this, this.OnError)
      this.RemoteAddress = this.Proxy:getRemoteAddress()
      this.remoteIpEndPoint = ipEndPoint
    end
    __ctor2__ = function (this, socket, service)
      System.base(this).__ctor__(this, service, 1 --[[ChannelType.Accept]])
      this.Proxy = DCETRuntime.TChannelProxy(socket, service.Proxy)
      this.RemoteAddress = this.Proxy:getRemoteAddress()
      this.remoteIpEndPoint = System.cast(SystemNet.IPEndPoint, socket:getRemoteEndPoint())
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)

      local default = this.Proxy
      if default ~= nil then
        default:Dispose()
      end
      this.remoteIpEndPoint = nil
    end
    Start = function (this)
      if this.ChannelType == 1 --[[ChannelType.Accept]] then
        this.Proxy:StartRecv()
      else
        this.Proxy:ConnectAsync(this.remoteIpEndPoint)
      end
    end
    GetService = function (this)
      return System.cast(DCET.TService, this.Service)
    end
    getStream = function (this)
      return this.Proxy:getStream()
    end
    Send = function (this, stream)
      if this:getIsDisposed() then
        System.throw(System.Exception("TChannel已经被Dispose, 不能发送消息"))
      end

      this.Proxy:Send(stream)
      GetService(this):MarkNeedStartSend(this.Id)
    end
    OnStartRecv = function (this)
      GetService(this):MarkNeedStartSend(this.Id)
    end
    getIsSending = function (this)
      return this.Proxy:getIsSending()
    end
    StartSend = function (this)
      this.Proxy:StartSend()
    end
    return {
      base = function (out)
        return {
          out.DCET.AChannel
        }
      end,
      Dispose = Dispose,
      Start = Start,
      getStream = getStream,
      Send = Send,
      getIsSending = getIsSending,
      StartSend = StartSend,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
