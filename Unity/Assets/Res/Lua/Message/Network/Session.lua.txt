-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local DCETModel = DCET.Model
local DCETHotfix
local DictInt32Delegate
local ETTaskCompletionSource_1IResponse
System.import(function (out)
  DCETHotfix = DCET.Hotfix
  DictInt32Delegate = System.Dictionary(System.Int32, System.Delegate)
  ETTaskCompletionSource_1IResponse = DCETModel.ETTaskCompletionSource_1(DCETHotfix.IResponse)
end)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("SessionAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, session)
      self.session = session
      local sessionComponent = self.session:AddComponent(DCETModel.SessionCallbackComponent)
      sessionComponent.MessageCallback = function (s, opcode, memoryStream)
        self:Run(s, opcode, memoryStream)
      end
      sessionComponent.DisposeCallback = function (s)
        self:Dispose()
      end
    end
    return {
      __inherits__ = function (out)
        return {
          out.DCET.Hotfix.AwakeSystem_2(out.DCET.Hotfix.Session, out.DCET.Model.Session)
        }
      end,
      Awake = Awake
    }
  end)

  -- <summary>
  -- 用来收发热更层的消息
  -- </summary>
  namespace.class("Session", function (namespace)
    local RpcId, Dispose, Run, Send, Send1, Call, Call1, __ctor__
    __ctor__ = function (this)
      this.requestCallback = DictInt32Delegate()
      System.base(this).__ctor__(this)
    end
    RpcId = 0
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)

      for _, action in System.each(Linq.ToArray(this.requestCallback:getValues())) do
        local default = DCETHotfix.ResponseMessage()
        default:setError(this.session:getError())
        action(default)
      end

      this.requestCallback:Clear()

      this.session:Dispose()
    end
    Run = function (this, s, opcode, memoryStream)
      local opcodeTypeComponent = DCETHotfix.Game.getScene():GetComponent(DCETHotfix.OpcodeTypeComponent)
      local instance = opcodeTypeComponent:GetInstance(opcode)
      local message = this.session:getNetwork():getMessagePacker():DeserializeFrom(instance, memoryStream)

      if DCETModel.OpcodeHelper.IsNeedDebugLogMessage(opcode) then
        DCETHotfix.Log.Msg(message)
      end

      local response = System.as(message, DCETHotfix.IResponse)
      if response == nil then
        DCETHotfix.Game.getScene():GetComponent(DCETHotfix.MessageDispatcherComponent):Handle(this.session, DCETModel.MessageInfo(opcode, message))
        return
      end

      local action
      local default
      default, action = this.requestCallback:TryGetValue(response:getRpcId())
      if not default then
        System.throw(System.Exception("not found rpc, response message: " .. DCETModel.StringHelper.MessageToStr(response)))
      end
      this.requestCallback:RemoveKey(response:getRpcId())

      action(response)
    end
    Send = function (this, message)
      local opcode = DCETHotfix.Game.getScene():GetComponent(DCETHotfix.OpcodeTypeComponent):GetOpcode(message:GetType())
      Send1(this, opcode, message)
    end
    Send1 = function (this, opcode, message)
      if DCETModel.OpcodeHelper.IsNeedDebugLogMessage(opcode) then
        DCETHotfix.Log.Msg(message)
      end
      this.session:Send(opcode, message)
    end
    Call = function (this, request)
      local default = RpcId + 1
      RpcId = default
      local rpcId = default
      local tcs = ETTaskCompletionSource_1IResponse()

      this.requestCallback:set(rpcId, function (response)
        System.try(function ()
          if DCETModel.ErrorCode.IsRpcNeedThrowException(response:getError()) then
            System.throw(DCETModel.RpcException(response:getError(), response:getMessage()))
          end

          tcs:SetResult(response)
        end, function (default)
          local e = default
          tcs:SetException(System.Exception("Rpc Error: " .. request:GetType():getFullName(), e))
        end)
      end)

      request:setRpcId(rpcId)

      Send(this, request)
      return tcs:getTask()
    end
    Call1 = function (this, request, cancellationToken)
      local default = RpcId + 1
      RpcId = default
      local rpcId = default
      local tcs = ETTaskCompletionSource_1IResponse()

      this.requestCallback:set(rpcId, function (response)
        System.try(function ()
          if DCETModel.ErrorCode.IsRpcNeedThrowException(response:getError()) then
            System.throw(DCETModel.RpcException(response:getError(), response:getMessage()))
          end

          tcs:SetResult(response)
        end, function (default)
          local e = default
          tcs:SetException(System.Exception("Rpc Error: " .. request:GetType():getFullName(), e))
        end)
      end)

      cancellationToken:Register(function ()
        this.requestCallback:RemoveKey(rpcId)
      end)

      request:setRpcId(rpcId)

      Send(this, request)
      return tcs:getTask()
    end
    return {
      __inherits__ = function (out)
        return {
          out.DCET.Hotfix.Entity
        }
      end,
      Dispose = Dispose,
      Run = Run,
      Send = Send,
      Send1 = Send1,
      Call = Call,
      Call1 = Call1,
      __ctor__ = __ctor__
    }
  end)
end)
