-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local ListObject = System.List(System.Object)
local QueueInt64 = System.Queue(System.Int64)
local HashSetType = System.HashSet(System.Type)
local DictTypeInt32 = System.Dictionary(System.Type, System.Int32)
local DictStringListObject = System.Dictionary(System.String, ListObject)
local DCETHotfix
local DictInt64Entity
local UnOrderMultiMapSet_2TypeType
local UnOrderMultiMap_2TypeILoadSystem
local UnOrderMultiMap_2TypeIAwakeSystem
local UnOrderMultiMap_2TypeIStartSystem
local UnOrderMultiMap_2TypeIChangeSystem
local UnOrderMultiMap_2TypeIUpdateSystem
local UnOrderMultiMap_2TypeIDestroySystem
local UnOrderMultiMap_2TypeILateUpdateSystem
local UnOrderMultiMap_2TypeIDeserializeSystem
System.import(function (out)
  DCETHotfix = DCET.Hotfix
  DictInt64Entity = System.Dictionary(System.Int64, DCETHotfix.Entity)
  UnOrderMultiMapSet_2TypeType = DCETHotfix.UnOrderMultiMapSet_2(System.Type, System.Type)
  UnOrderMultiMap_2TypeILoadSystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.ILoadSystem)
  UnOrderMultiMap_2TypeIAwakeSystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.IAwakeSystem)
  UnOrderMultiMap_2TypeIStartSystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.IStartSystem)
  UnOrderMultiMap_2TypeIChangeSystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.IChangeSystem)
  UnOrderMultiMap_2TypeIUpdateSystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.IUpdateSystem)
  UnOrderMultiMap_2TypeIDestroySystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.IDestroySystem)
  UnOrderMultiMap_2TypeILateUpdateSystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.ILateUpdateSystem)
  UnOrderMultiMap_2TypeIDeserializeSystem = DCETHotfix.UnOrderMultiMap_2(System.Type, DCETHotfix.IDeserializeSystem)
end)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("EventSystem", function (namespace)
    local RegisterEvent, GetTypes, RegisterSystem, Remove, Get, IsRegister, Deserialize, Awake, 
    Awake1, Awake2, Awake3, Awake4, Change, Load, Start, Destroy, 
    Update, LateUpdate, Run, Run1, Run2, Run3, ToString, __ctor__
    __ctor__ = function (this)
      this.allComponents = DictInt64Entity()
      this.types = UnOrderMultiMapSet_2TypeType()
      this.allEvents = DictStringListObject()
      this.awakeSystems = UnOrderMultiMap_2TypeIAwakeSystem()
      this.startSystems = UnOrderMultiMap_2TypeIStartSystem()
      this.destroySystems = UnOrderMultiMap_2TypeIDestroySystem()
      this.loadSystems = UnOrderMultiMap_2TypeILoadSystem()
      this.updateSystems = UnOrderMultiMap_2TypeIUpdateSystem()
      this.lateUpdateSystems = UnOrderMultiMap_2TypeILateUpdateSystem()
      this.changeSystems = UnOrderMultiMap_2TypeIChangeSystem()
      this.deserializeSystems = UnOrderMultiMap_2TypeIDeserializeSystem()
      this.updates = QueueInt64()
      this.updates2 = QueueInt64()
      this.starts = QueueInt64()
      this.loaders = QueueInt64()
      this.loaders2 = QueueInt64()
      this.lateUpdates = QueueInt64()
      this.lateUpdates2 = QueueInt64()
      for _, type in System.each(DCETHotfix.Game.getHotfix():GetHotfixTypes()) do
        local continue
        repeat
          local objects = type:GetCustomAttributes(System.typeof(DCETHotfix.BaseAttribute), true)
          if #objects == 0 then
            continue = true
            break
          end

          local baseAttribute = System.cast(DCETHotfix.BaseAttribute, objects:get(0))
          this.types:Add(baseAttribute.AttributeType, type)
          continue = true
        until 1
        if not continue then
          break
        end
      end

      this.awakeSystems:Clear()
      this.lateUpdateSystems:Clear()
      this.updateSystems:Clear()
      this.startSystems:Clear()
      this.loadSystems:Clear()
      this.changeSystems:Clear()
      this.destroySystems:Clear()
      this.deserializeSystems:Clear()

      for _, type in System.each(GetTypes(this, System.typeof(DCETHotfix.ObjectSystemAttribute))) do
        local obj = System.Activator.CreateInstance(type)

        repeat
          local default = obj
          if System.is(default, DCETHotfix.IAwakeSystem) then
            this.awakeSystems:Add(default:Type(), default)
            break
          elseif System.is(default, DCETHotfix.IUpdateSystem) then
            this.updateSystems:Add(default:Type(), default)
            break
          elseif System.is(default, DCETHotfix.ILateUpdateSystem) then
            this.lateUpdateSystems:Add(default:Type(), default)
            break
          elseif System.is(default, DCETHotfix.IStartSystem) then
            this.startSystems:Add(default:Type(), default)
            break
          elseif System.is(default, DCETHotfix.IDestroySystem) then
            this.destroySystems:Add(default:Type(), default)
            break
          elseif System.is(default, DCETHotfix.ILoadSystem) then
            this.loadSystems:Add(default:Type(), default)
            break
          elseif System.is(default, DCETHotfix.IChangeSystem) then
            this.changeSystems:Add(default:Type(), default)
            break
          elseif System.is(default, DCETHotfix.IDeserializeSystem) then
            this.deserializeSystems:Add(default:Type(), default)
            break
          end
        until 1
      end

      this.allEvents:Clear()
      if this.types:ContainsKey(System.typeof(DCETHotfix.EventAttribute)) then
        for _, type in System.each(this.types:get(System.typeof(DCETHotfix.EventAttribute))) do
          local attrs = type:GetCustomAttributes(System.typeof(DCETHotfix.EventAttribute), false)

          for _, attr in System.each(attrs) do
            local aEventAttribute = System.cast(DCETHotfix.EventAttribute, attr)
            local obj = System.Activator.CreateInstance(type)
            local iEvent = System.as(obj, DCETHotfix.IEvent)
            if iEvent == nil then
              DCETHotfix.Log.Error1(obj:GetType():getName() .. " 没有继承IEvent")
            end
            RegisterEvent(this, aEventAttribute.Type, iEvent)
          end
        end
      end

      Load(this)
    end
    RegisterEvent = function (this, eventId, e)
      if not this.allEvents:ContainsKey(eventId) then
        this.allEvents:AddKeyValue(eventId, ListObject())
      end
      this.allEvents:get(eventId):Add(e)
    end
    GetTypes = function (this, systemAttributeType)
      if not this.types:ContainsKey(systemAttributeType) then
        return HashSetType()
      end
      return this.types:get(systemAttributeType)
    end
    RegisterSystem = function (this, component, isRegister)
      if not isRegister then
        Remove(this, component.InstanceId)
        return
      end
      this.allComponents:AddKeyValue(component.InstanceId, component)

      local type = component:GetType()

      if this.loadSystems:ContainsKey(type) then
        this.loaders:Enqueue(component.InstanceId)
      end

      if this.updateSystems:ContainsKey(type) then
        this.updates:Enqueue(component.InstanceId)
      end

      if this.startSystems:ContainsKey(type) then
        this.starts:Enqueue(component.InstanceId)
      end

      if this.lateUpdateSystems:ContainsKey(type) then
        this.lateUpdates:Enqueue(component.InstanceId)
      end
    end
    Remove = function (this, instanceId)
      this.allComponents:RemoveKey(instanceId)
    end
    Get = function (this, instanceId)
      local component = nil
      local _
      _, component = this.allComponents:TryGetValue(instanceId)
      return component
    end
    IsRegister = function (this, instanceId)
      return this.allComponents:ContainsKey(instanceId)
    end
    Deserialize = function (this, component)
      local iDeserializeSystems = this.deserializeSystems:get(component:GetType())
      if iDeserializeSystems == nil then
        return
      end

      for _, deserializeSystem in System.each(iDeserializeSystems) do
        local continue
        repeat
          if deserializeSystem == nil then
            continue = true
            break
          end

          System.try(function ()
            deserializeSystem:Run(component)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Awake = function (this, component)
      local iAwakeSystems = this.awakeSystems:get(component:GetType())
      if iAwakeSystems == nil then
        return
      end

      for _, aAwakeSystem in System.each(iAwakeSystems) do
        local continue
        repeat
          if aAwakeSystem == nil then
            continue = true
            break
          end

          local iAwake = System.as(aAwakeSystem, DCETHotfix.IAwake)
          if iAwake == nil then
            continue = true
            break
          end

          System.try(function ()
            iAwake:Run(component)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Awake1 = function (this, component, p1, P1)
      local iAwakeSystems = this.awakeSystems:get(component:GetType())
      if iAwakeSystems == nil then
        return
      end

      for _, aAwakeSystem in System.each(iAwakeSystems) do
        local continue
        repeat
          if aAwakeSystem == nil then
            continue = true
            break
          end

          local iAwake = System.as(aAwakeSystem, DCETHotfix.IAwake_1(P1))
          if iAwake == nil then
            continue = true
            break
          end

          System.try(function ()
            iAwake:Run(component, p1)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Awake2 = function (this, component, p1, p2, P1, P2)
      local iAwakeSystems = this.awakeSystems:get(component:GetType())
      if iAwakeSystems == nil then
        return
      end

      for _, aAwakeSystem in System.each(iAwakeSystems) do
        local continue
        repeat
          if aAwakeSystem == nil then
            continue = true
            break
          end

          local iAwake = System.as(aAwakeSystem, DCETHotfix.IAwake_2(P1, P2))
          if iAwake == nil then
            continue = true
            break
          end

          System.try(function ()
            iAwake:Run(component, p1, p2)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Awake3 = function (this, component, p1, p2, p3, P1, P2, P3)
      local iAwakeSystems = this.awakeSystems:get(component:GetType())
      if iAwakeSystems == nil then
        return
      end

      for _, aAwakeSystem in System.each(iAwakeSystems) do
        local continue
        repeat
          if aAwakeSystem == nil then
            continue = true
            break
          end

          local iAwake = System.as(aAwakeSystem, DCETHotfix.IAwake_3(P1, P2, P3))
          if iAwake == nil then
            continue = true
            break
          end

          System.try(function ()
            iAwake:Run(component, p1, p2, p3)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Awake4 = function (this, component, p1, p2, p3, p4, P1, P2, P3, P4)
      local iAwakeSystems = this.awakeSystems:get(component:GetType())
      if iAwakeSystems == nil then
        return
      end

      for _, aAwakeSystem in System.each(iAwakeSystems) do
        local continue
        repeat
          if aAwakeSystem == nil then
            continue = true
            break
          end

          local iAwake = System.as(aAwakeSystem, DCETHotfix.IAwake_4(P1, P2, P3, P4))
          if iAwake == nil then
            continue = true
            break
          end

          System.try(function ()
            iAwake:Run(component, p1, p2, p3, p4)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Change = function (this, component)
      local iChangeSystems = this.changeSystems:get(component:GetType())
      if iChangeSystems == nil then
        return
      end

      for _, iChangeSystem in System.each(iChangeSystems) do
        local continue
        repeat
          if iChangeSystem == nil then
            continue = true
            break
          end

          System.try(function ()
            iChangeSystem:Run(component)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Load = function (this)
      while #this.loaders > 0 do
        local continue
        repeat
          local instanceId = this.loaders:Dequeue()
          local component
          local default
          default, component = this.allComponents:TryGetValue(instanceId)
          if not default then
            continue = true
            break
          end
          if component:getIsDisposed() then
            continue = true
            break
          end

          local iLoadSystems = this.loadSystems:get(component:GetType())
          if iLoadSystems == nil then
            continue = true
            break
          end

          this.loaders2:Enqueue(instanceId)

          for _, iLoadSystem in System.each(iLoadSystems) do
            System.try(function ()
              iLoadSystem:Run(component)
            end, function (default)
              local e = default
              DCETHotfix.Log.Error(e)
            end)
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end

      this.loaders, this.loaders2 = DCETHotfix.ObjectHelper.Swap(this.loaders, this.loaders2, QueueInt64)
    end
    Start = function (this)
      while #this.starts > 0 do
        local continue
        repeat
          local instanceId = this.starts:Dequeue()
          local component
          local default
          default, component = this.allComponents:TryGetValue(instanceId)
          if not default then
            continue = true
            break
          end

          local iStartSystems = this.startSystems:get(component:GetType())
          if iStartSystems == nil then
            continue = true
            break
          end

          for _, iStartSystem in System.each(iStartSystems) do
            System.try(function ()
              iStartSystem:Run(component)
            end, function (default)
              local e = default
              DCETHotfix.Log.Error(e)
            end)
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Destroy = function (this, component)
      local iDestroySystems = this.destroySystems:get(component:GetType())
      if iDestroySystems == nil then
        return
      end

      for _, iDestroySystem in System.each(iDestroySystems) do
        local continue
        repeat
          if iDestroySystem == nil then
            continue = true
            break
          end

          System.try(function ()
            iDestroySystem:Run(component)
          end, function (default)
            local e = default
            DCETHotfix.Log.Error(e)
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    Update = function (this)
      Start(this)

      while #this.updates > 0 do
        local continue
        repeat
          local instanceId = this.updates:Dequeue()
          local component
          local default
          default, component = this.allComponents:TryGetValue(instanceId)
          if not default then
            continue = true
            break
          end
          if component:getIsDisposed() then
            continue = true
            break
          end

          local iUpdateSystems = this.updateSystems:get(component:GetType())
          if iUpdateSystems == nil then
            continue = true
            break
          end

          this.updates2:Enqueue(instanceId)

          for _, iUpdateSystem in System.each(iUpdateSystems) do
            System.try(function ()
              iUpdateSystem:Run(component)
            end, function (default)
              local e = default
              DCETHotfix.Log.Error(e)
            end)
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end

      this.updates, this.updates2 = DCETHotfix.ObjectHelper.Swap(this.updates, this.updates2, QueueInt64)
    end
    LateUpdate = function (this)
      while #this.lateUpdates > 0 do
        local continue
        repeat
          local instanceId = this.lateUpdates:Dequeue()
          local component
          local default
          default, component = this.allComponents:TryGetValue(instanceId)
          if not default then
            continue = true
            break
          end
          if component:getIsDisposed() then
            continue = true
            break
          end

          local iLateUpdateSystems = this.lateUpdateSystems:get(component:GetType())
          if iLateUpdateSystems == nil then
            continue = true
            break
          end

          this.lateUpdates2:Enqueue(instanceId)

          for _, iLateUpdateSystem in System.each(iLateUpdateSystems) do
            System.try(function ()
              iLateUpdateSystem:Run(component)
            end, function (default)
              local e = default
              DCETHotfix.Log.Error(e)
            end)
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end

      this.lateUpdates, this.lateUpdates2 = DCETHotfix.ObjectHelper.Swap(this.lateUpdates, this.lateUpdates2, QueueInt64)
    end
    Run = function (this, type)
      local iEvents
      local default
      default, iEvents = this.allEvents:TryGetValue(type)
      if not default then
        return
      end
      for _, aEvent in System.each(iEvents) do
        aEvent = System.cast(DCETHotfix.AEvent, aEvent)
        System.try(function ()
          aEvent:Run()
        end, function (default)
          local e = default
          DCETHotfix.Log.Error(e)
        end)
      end
    end
    Run1 = function (this, type, a, A)
      local iEvents
      local default
      default, iEvents = this.allEvents:TryGetValue(type)
      if not default then
        return
      end
      for _, obj in System.each(iEvents) do
        System.try(function ()
          local aEvent = obj
          if System.is(aEvent, DCETHotfix.AEvent_1(A)) then
            aEvent:Run(a)
          else
            local eventProxy = obj
            if System.is(eventProxy, DCETHotfix.EventProxy) then
              eventProxy:Handle1(a)
            end
          end
        end, function (default)
          local e = default
          DCETHotfix.Log.Error(e)
        end)
      end
    end
    Run2 = function (this, type, a, b, A, B)
      local iEvents
      local default
      default, iEvents = this.allEvents:TryGetValue(type)
      if not default then
        return
      end
      for _, obj in System.each(iEvents) do
        System.try(function ()
          local aEvent = obj
          if System.is(aEvent, DCETHotfix.AEvent_2(A, B)) then
            aEvent:Run(a, b)
          else
            local eventProxy = obj
            if System.is(eventProxy, DCETHotfix.EventProxy) then
              eventProxy:Handle2(a, b)
            end
          end
        end, function (default)
          local e = default
          DCETHotfix.Log.Error(e)
        end)
      end
    end
    Run3 = function (this, type, a, b, c, A, B, C)
      local iEvents
      local default
      default, iEvents = this.allEvents:TryGetValue(type)
      if not default then
        return
      end
      for _, obj in System.each(iEvents) do
        System.try(function ()
          local aEvent = obj
          if System.is(aEvent, DCETHotfix.AEvent_3(A, B, C)) then
            aEvent:Run(a, b, c)
          else
            local eventProxy = obj
            if System.is(eventProxy, DCETHotfix.EventProxy) then
              eventProxy:Handle3(a, b, c)
            end
          end
        end, function (default)
          local e = default
          DCETHotfix.Log.Error(e)
        end)
      end
    end
    ToString = function (this)
      local sb = System.StringBuilder()
      local noParent = HashSetType()
      local typeCount = DictTypeInt32()

      local noDomain = HashSetType()

      for _, kv in System.each(this.allComponents) do
        local type = kv.Value:GetType()
        if kv.Value:getParent() == nil then
          noParent:Add(type)
        end

        if kv.Value:getDomain() == nil then
          noDomain:Add(type)
        end

        if typeCount:ContainsKey(type) then
          local default = typeCount
          default:set(default:get() + 1)
        else
          typeCount:set(type, 1)
        end
      end

      sb:AppendLine("not set parent type: ")
      for _, type in System.each(noParent) do
        sb:AppendLine("\t" .. type:getName())
      end

      sb:AppendLine("not set domain type: ")
      for _, type in System.each(noDomain) do
        sb:AppendLine("\t" .. type:getName())
      end

      local orderByDescending = Linq.OrderByDescending(typeCount, function (s)
        return s.Value
      end, nil, System.Int32)

      sb:AppendLine("Entity Count: ")
      for _, kv in System.each(orderByDescending) do
        local continue
        repeat
          if kv.Value == 1 then
            continue = true
            break
          end
          sb:AppendLine("\t" .. kv.Key:getName() .. ": " .. kv.Value)
          continue = true
        until 1
        if not continue then
          break
        end
      end

      return sb:ToString()
    end
    return {
      RegisterEvent = RegisterEvent,
      GetTypes = GetTypes,
      RegisterSystem = RegisterSystem,
      Remove = Remove,
      Get = Get,
      IsRegister = IsRegister,
      Deserialize = Deserialize,
      Awake = Awake,
      Awake1 = Awake1,
      Awake2 = Awake2,
      Awake3 = Awake3,
      Awake4 = Awake4,
      Change = Change,
      Load = Load,
      Destroy = Destroy,
      Update = Update,
      LateUpdate = LateUpdate,
      Run = Run,
      Run1 = Run1,
      Run2 = Run2,
      Run3 = Run3,
      ToString = ToString,
      __ctor__ = __ctor__
    }
  end)
end)
