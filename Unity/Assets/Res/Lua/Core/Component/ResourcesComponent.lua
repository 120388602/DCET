-- Generated by CSharp.lua Compiler
local System = System
local DCETModel = DCET.Model
local SystemIO = System.IO
local UnityEngine = UnityEngine
local DictStringObject = System.Dictionary(System.String, UnityEngine.Object)
local DictStringDictStringObject = System.Dictionary(System.String, DictStringObject)
local DCETHotfix
local DictStringABInfo
System.import(function (out)
  DCETHotfix = DCET.Hotfix
  DictStringABInfo = System.Dictionary(System.String, DCETHotfix.ABInfo)
end)
System.namespace("DCET.Hotfix", function (namespace)
  namespace.class("ResourcesComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.DCET.Hotfix.AwakeSystem_1(out.DCET.Hotfix.ResourcesComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.Hotfix.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("ResourcesComponent", function (namespace)
    local Awake, Dispose, GetAsset, GetAssetBundle, UnloadBundle, UnloadOneBundle, LoadBundle, AddResource, 
    LoadOneBundle, LoadBundleAsync, LoadOneBundleAsync, DebugString, class, __ctor__
    __ctor__ = function (this)
      this.resourceCache = DictStringDictStringObject()
      this.bundles = DictStringABInfo()
      DCETHotfix.Entity.__ctor__(this)
    end
    Awake = function (this)
      if DCETModel.Define.IsAsync then
        LoadOneBundle(this, "StreamingAssets")
        class.AssetBundleManifestObject = System.cast(UnityEngine.AssetBundleManifest, GetAsset(this, "StreamingAssets", "AssetBundleManifest"))
      end
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      DCETHotfix.Entity.Dispose(this)

      for _, abInfo in System.each(this.bundles) do
        abInfo.Value:Dispose()
      end

      this.bundles:Clear()
      this.resourceCache:Clear()
    end
    GetAsset = function (this, bundleName, prefab)
      local dict
      local default
      default, dict = this.resourceCache:TryGetValue(DCETModel.AssetBundleHelper.BundleNameToLower(bundleName))
      if not default then
        System.throw(System.Exception("not found asset: " .. bundleName .. " " .. prefab))
      end

      local resource

      local extern
      extern, resource = dict:TryGetValue(prefab)
      if not extern then
        System.throw(System.Exception("not found asset: " .. bundleName .. " " .. prefab))
      end

      return resource
    end
    GetAssetBundle = function (this, abName)
      local abInfo
      local default
      default, abInfo = this.bundles:TryGetValue(DCETModel.AssetBundleHelper.BundleNameToLower(abName))
      if not default then
        System.throw(System.Exception("not found bundle: " .. abName))
      end
      return abInfo.AssetBundle
    end
    UnloadBundle = function (this, assetBundleName)
      assetBundleName = DCETModel.AssetBundleHelper.BundleNameToLower(assetBundleName)

      local dependencies = DCETHotfix.DependenciesHelper.GetSortedDependencies(assetBundleName)

      --Log.Debug($"-----------dep unload {assetBundleName} dep: {dependencies.ToList().ListToString()}");
      for _, dependency in System.each(dependencies) do
        UnloadOneBundle(this, dependency)
      end
    end
    UnloadOneBundle = function (this, assetBundleName)
      assetBundleName = DCETModel.AssetBundleHelper.BundleNameToLower(assetBundleName)

      local abInfo
      local default
      default, abInfo = this.bundles:TryGetValue(assetBundleName)
      if not default then
        System.throw(System.Exception("not found assetBundle: " .. assetBundleName))
      end

      --Log.Debug($"---------- unload one bundle {assetBundleName} refcount: {abInfo.RefCount - 1}");

      local extern = abInfo
      extern.RefCount = extern.RefCount - 1

      if abInfo.RefCount > 0 then
        return
      end


      this.bundles:RemoveKey(assetBundleName)
      this.resourceCache:RemoveKey(assetBundleName)
      abInfo:Dispose()
      --Log.Debug($"cache count: {this.cacheDictionary.Count}");
    end
    -- <summary>
    -- 同步加载assetbundle
    -- </summary>
    -- <returns></returns>
    LoadBundle = function (this, assetBundleName)
      assetBundleName = assetBundleName:ToLower()
      local dependencies = DCETHotfix.DependenciesHelper.GetSortedDependencies(assetBundleName)
      --Log.Debug($"-----------dep load {assetBundleName} dep: {dependencies.ToList().ListToString()}");
      for _, dependency in System.each(dependencies) do
        local continue
        repeat
          if System.String.IsNullOrEmpty(dependency) then
            continue = true
            break
          end
          LoadOneBundle(this, dependency)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    AddResource = function (this, bundleName, assetName, resource)
      local dict
      local default
      default, dict = this.resourceCache:TryGetValue(DCETModel.AssetBundleHelper.BundleNameToLower(bundleName))
      if not default then
        dict = DictStringObject()
        this.resourceCache:set(bundleName, dict)
      end

      dict:set(assetName, resource)
    end
    LoadOneBundle = function (this, assetBundleName)
      --Log.Debug($"---------------load one bundle {assetBundleName}");
      local abInfo
      local default
      default, abInfo = this.bundles:TryGetValue(assetBundleName)
      if default then
        local extern = abInfo
        extern.RefCount = extern.RefCount + 1
        return
      end

      if DCETModel.Define.IsAsync then
        local p = SystemIO.Path.Combine(DCETModel.PathHelper.getAppHotfixResPath(), assetBundleName)

        local assetBundle

        if SystemIO.File.Exists(p) then
          assetBundle = UnityEngine.AssetBundle.LoadFromFile(p)
        else
          p = SystemIO.Path.Combine(DCETModel.PathHelper.getAppResPath(), assetBundleName)
          assetBundle = UnityEngine.AssetBundle.LoadFromFile(p)
        end

        if UnityEngine.op_Equality(assetBundle, nil) then
          System.throw(System.Exception("assets bundle not found: " .. assetBundleName))
        end

        if not assetBundle:getisStreamedSceneAssetBundle() then
          -- 异步load资源到内存cache住
          local assets = assetBundle:LoadAllAssets()

          for _, asset in System.each(assets) do
            AddResource(this, assetBundleName, asset:getname(), asset)
          end
        end

        abInfo = DCETHotfix.EntityFactory.CreateWithParent3(this, assetBundleName, assetBundle, DCETHotfix.ABInfo, System.String, UnityEngine.AssetBundle)
        this.bundles:set(assetBundleName, abInfo)
      else
        local assetPaths = DCETModel.AssetDatabaseHelper.GetAssetPathsFromAssetBundle(assetBundleName)

        if assetPaths ~= nil then
          for _, s in System.each(assetPaths) do
            local assetName = SystemIO.Path.GetFileNameWithoutExtension(s)
            local resource = DCETModel.AssetDatabaseHelper.LoadAssetAtPath(s)
            AddResource(this, assetBundleName, assetName, resource)
          end
        end

        abInfo = DCETHotfix.EntityFactory.CreateWithParent3(this, assetBundleName, nil, DCETHotfix.ABInfo, System.String, UnityEngine.AssetBundle)
        this.bundles:set(assetBundleName, abInfo)
      end
    end
    -- <summary>
    -- 异步加载assetbundle
    -- </summary>
    -- <returns></returns>
    LoadBundleAsync = function (this, assetBundleName)
      return System.async(function (async, this, assetBundleName)
        assetBundleName = assetBundleName:ToLower()
        local dependencies = DCETHotfix.DependenciesHelper.GetSortedDependencies(assetBundleName)
        -- Log.Debug($"-----------dep load {assetBundleName} dep: {dependencies.ToList().ListToString()}");
        for _, dependency in System.each(dependencies) do
          local continue
          repeat
            if System.String.IsNullOrEmpty(dependency) then
              continue = true
              break
            end
            async:await(LoadOneBundleAsync(this, dependency))
            continue = true
          until 1
          if not continue then
            break
          end
        end
      end, nil, this, assetBundleName)
    end
    LoadOneBundleAsync = function (this, assetBundleName)
      return System.async(function (async, this, assetBundleName)
        local abInfo

        local default
        default, abInfo = this.bundles:TryGetValue(assetBundleName)
        if default then
          local extern = abInfo
          extern.RefCount = extern.RefCount + 1
          return
        end

        if DCETModel.Define.IsAsync then
          local p = SystemIO.Path.Combine(DCETModel.PathHelper.getAppHotfixResPath(), assetBundleName)

          local assetBundle = nil

          if not SystemIO.File.Exists(p) then
            p = SystemIO.Path.Combine(DCETModel.PathHelper.getAppResPath(), assetBundleName)
          end

          System.using(DCETHotfix.EntityFactory.Create1(this:getDomain(), DCETHotfix.AssetsBundleLoaderAsync), function (assetsBundleLoaderAsync)
            assetBundle = async:await(assetsBundleLoaderAsync:LoadAsync(p))
          end)

          if UnityEngine.op_Equality(assetBundle, nil) then
            System.throw(System.Exception("assets bundle not found: " .. assetBundleName))
          end

          if not assetBundle:getisStreamedSceneAssetBundle() then
            -- 异步load资源到内存cache住
            local assets

            System.using(DCETHotfix.EntityFactory.Create2(this:getDomain(), assetBundle, DCETHotfix.AssetsLoaderAsync, UnityEngine.AssetBundle), function (assetsLoaderAsync)
              assets = async:await(assetsLoaderAsync:LoadAllAssetsAsync())
            end)

            for _, asset in System.each(assets) do
              AddResource(this, assetBundleName, asset:getname(), asset)
            end
          end

          abInfo = DCETHotfix.EntityFactory.CreateWithParent3(this, assetBundleName, assetBundle, DCETHotfix.ABInfo, System.String, UnityEngine.AssetBundle)
          this.bundles:set(assetBundleName, abInfo)
        else
          local assetPaths = DCETModel.AssetDatabaseHelper.GetAssetPathsFromAssetBundle(assetBundleName)

          if assetPaths ~= nil then
            for _, s in System.each(assetPaths) do
              local assetName = SystemIO.Path.GetFileNameWithoutExtension(s)
              local resource = DCETModel.AssetDatabaseHelper.LoadAssetAtPath(s)
              AddResource(this, assetBundleName, assetName, resource)
            end
          end

          abInfo = DCETHotfix.EntityFactory.CreateWithParent3(this, assetBundleName, nil, DCETHotfix.ABInfo, System.String, UnityEngine.AssetBundle)
          this.bundles:set(assetBundleName, abInfo)
        end
      end, nil, this, assetBundleName)
    end
    DebugString = function (this)
      local sb = System.StringBuilder()

      for _, abInfo in System.each(this.bundles:getValues()) do
        sb:Append(abInfo.Name .. ":" .. abInfo.RefCount .. "\n")
      end

      return sb:ToString()
    end
    class = {
      base = function (out)
        return {
          out.DCET.Hotfix.Entity
        }
      end,
      Awake = Awake,
      Dispose = Dispose,
      GetAsset = GetAsset,
      GetAssetBundle = GetAssetBundle,
      UnloadBundle = UnloadBundle,
      LoadBundle = LoadBundle,
      AddResource = AddResource,
      LoadOneBundle = LoadOneBundle,
      LoadBundleAsync = LoadBundleAsync,
      LoadOneBundleAsync = LoadOneBundleAsync,
      DebugString = DebugString,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
