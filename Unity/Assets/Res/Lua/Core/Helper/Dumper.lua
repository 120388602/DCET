-- Generated by CSharp.lua Compiler
local System = System
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.class("Dumper", function (namespace)
    local _text, AppendIndent, DoDump, DumpAsString, static
    static = function (this)
      _text = System.StringBuilder("", 1024)
    end
    AppendIndent = function (num)
      _text:AppendCharRepeat(32 --[[' ']], num)
    end
    DoDump = function (obj)
      if obj == nil then
        _text:Append("null")
        _text:Append(",")
        return
      end

      local t = obj:GetType()

      --repeat field
      if System.is(obj, System.IList) then
        --[[
                _text.Append(t.FullName);
                _text.Append(",");
                AppendIndent(1);
                ]]

        _text:Append("[")
        local list = System.as(obj, System.IList)
        for _, v in System.each(list) do
          DoDump(v)
        end

        _text:Append("]")
      elseif t:getIsValueType() then
        _text:Append(obj)
        _text:Append(",")
        AppendIndent(1)
      elseif System.is(obj, System.String) then
        _text:Append("\"")
        _text:Append(obj)
        _text:Append("\"")
        _text:Append(",")
        AppendIndent(1)
      elseif t:getIsArray() then
        local a = System.cast(System.Array, obj)
        _text:Append("[")
        for i = 0, #a - 1 do
          _text:Append(i)
          _text:Append(":")
          DoDump(a:GetValue(i))
        end

        _text:Append("]")
      elseif t:getIsClass() then
        _text:Append("<" .. t:getName() .. ">")
        _text:Append("{")
        local fields = t:GetProperties(20 --[[BindingFlags.Public | BindingFlags.Instance]])
        if #fields > 0 then
          for _, info in System.each(fields) do
            _text:Append(info:getName())
            _text:Append(":")
            local value = info:GetGetMethod():Invoke(obj, nil)
            DoDump(value)
          end
        end

        _text:Append("}")
      else
        DCET.Log.Warning("unsupport type: " .. t:getFullName())
        _text:Append(obj)
        _text:Append(",")
        AppendIndent(1)
      end
    end
    DumpAsString = function (obj, hint)
      _text:Clear()
      _text:Append(hint)
      DoDump(obj)
      return _text:ToString()
    end
    return {
      DumpAsString = DumpAsString,
      static = static
    }
  end)
end)
