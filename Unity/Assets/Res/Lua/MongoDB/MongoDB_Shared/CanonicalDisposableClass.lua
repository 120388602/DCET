-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
System.namespace("MongoDB.Shared", function (namespace)
  -- <summary>
  -- Represents a class that owns one or more disposable resources.
  -- </summary>
  namespace.class("CanonicalDisposableClass", function (namespace)
    local getDisposed, Dispose, SomeMethod, Dispose1, ThrowIfDisposed, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="CanonicalDisposableClass"/> class.
    -- </summary>
    __ctor__ = function (this, disposableResource)
      this._disposableResource = disposableResource
    end
    getDisposed = function (this)
      return this._disposed
    end
    -- <summary>
    -- Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    -- </summary>
    Dispose = function (this)
      this:Dispose1(true)
      System.GC.SuppressFinalize(this)
      -- in case a derived class has a finalizer
    end
    -- <summary>
    -- Some method.
    -- </summary>
    SomeMethod = function (this)
      ThrowIfDisposed(this)
      -- ...
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      -- this method can be called multiple times
      -- make sure your implementation of this method does not throw any exceptions
      if not this._disposed then
        if disposing then
          -- dispose of any managed disposable resources you own here
          if this._disposableResource ~= nil then
            this._disposableResource:Dispose()
            this._disposableResource = nil
            -- not strictly necessary but a good idea
          end
        end

        -- dispose of any unmanaged resources here

        this._disposed = true
      end
    end
    -- <summary>
    -- Throws if disposed.
    -- </summary>
    ThrowIfDisposed = function (this)
      if this._disposed then
        System.throw(System.ObjectDisposedException(this:GetType():getName()))
      end
    end
    return {
      base = function (out)
        return {
          System.IDisposable
        }
      end,
      _disposed = false,
      getDisposed = getDisposed,
      Dispose = Dispose,
      SomeMethod = SomeMethod,
      Dispose1 = Dispose1,
      ThrowIfDisposed = ThrowIfDisposed,
      __ctor__ = __ctor__
    }
  end)
end)
