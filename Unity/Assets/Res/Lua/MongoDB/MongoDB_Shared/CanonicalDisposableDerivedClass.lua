-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBShared
System.import(function (out)
  MongoDBShared = MongoDB.Shared
end)
System.namespace("MongoDB.Shared", function (namespace)
  -- <summary>
  -- Represents a class derived from an IDisposable class and that itself owns one ore more disposable resources.
  -- </summary>
  namespace.class("CanonicalDisposableDerivedClass", function (namespace)
    local AnotherMethod, Dispose1, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="CanonicalDisposableDerivedClass"/> class.
    -- </summary>
    -- <param name="anotherDisposableResource">Another disposable resource.</param>
    __ctor__ = function (this, disposableResource, anotherDisposableResource)
      MongoDBShared.CanonicalDisposableClass.__ctor__(this, disposableResource)
      this._anotherDisposableResource = anotherDisposableResource
    end
    -- <summary>
    -- Another method.
    -- </summary>
    AnotherMethod = function (this)
      this:ThrowIfDisposed()
      -- ...
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      -- this method can be called multiple times
      -- make sure your implementation of this method does not throw any exceptions
      if not this:getDisposed() then
        if disposing then
          -- dispose of any managed disposable resources you own here
          if this._anotherDisposableResource ~= nil then
            this._anotherDisposableResource:Dispose()
            this._anotherDisposableResource = nil
            -- not strictly necessary but a good idea
          end
        end

        -- dispose of any unmanaged resources here
      end

      MongoDBShared.CanonicalDisposableClass.Dispose1(this, disposing)
      -- call base Dispose last
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Shared.CanonicalDisposableClass
        }
      end,
      AnotherMethod = AnotherMethod,
      Dispose1 = Dispose1,
      __ctor__ = __ctor__
    }
  end)
end)
