-- Generated by CSharp.lua Compiler
--[[ Copyright 2017-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MongoDBBson
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- A BsonWriter that appends elements to the end of a document.
  -- </summary>
  namespace.class("ElementAppendingBsonWriter", function (namespace)
    local WriteEndDocument, WriteStartDocument, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="ElementAppendingBsonWriter" /> class.
    -- </summary>
    -- <param name="elements">The elements to append.</param>
    -- <param name="settingsConfigurator">The settings configurator.</param>
    __ctor__ = function (this, wrapped, elements, settingsConfigurator)
      System.base(this).__ctor__(this, wrapped)
      if elements == nil then
        System.throw(System.ArgumentNullException("elements" --[[nameof(elements)]]))
      end
      this._elements = Linq.ToList(elements)
      this._settingsConfigurator = settingsConfigurator or (function (s)
      end)
    end
    WriteEndDocument = function (this)
      local default = this._depth - 1
      this._depth = default
      if default == 0 then
        this:getWrapped():PushSettings(this._settingsConfigurator)
        System.try(function ()
          local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(this:getWrapped())
          for _, element in System.each(this._elements) do
            this:getWrapped():WriteName(element:getName())
            MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, element:getValue(), MongoDBBson.BsonValue)
          end
        end, nil, function ()
          this:getWrapped():PopSettings()
        end)
      end
      System.base(this).WriteEndDocument(this)
    end
    WriteStartDocument = function (this)
      this._depth = this._depth + 1
      System.base(this).WriteStartDocument(this)
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.WrappingBsonWriter
        }
      end,
      _depth = 0,
      WriteEndDocument = WriteEndDocument,
      WriteStartDocument = WriteStartDocument,
      __ctor__ = __ctor__
    }
  end)
end)
