-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBsonIO
System.import(function (out)
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Contains extensions methods for IBsonReader.
  -- </summary>
  namespace.class("IBsonReaderExtensions", function (namespace)
    local FindElement, FindStringElement, ReadBinaryData, ReadBoolean, ReadBytes, ReadDateTime, ReadDecimal128, ReadDouble, 
    ReadInt32, ReadInt64, ReadJavaScript, ReadJavaScriptWithScope, ReadMaxKey, ReadMinKey, ReadName, ReadName1, 
    ReadNull, ReadObjectId, ReadRawBsonArray, ReadRawBsonDocument, ReadRegularExpression, ReadString, ReadSymbol, ReadTimestamp, 
    ReadUndefined, VerifyName
    -- <summary>
    -- Positions the reader to an element by name.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>True if the element was found.</returns>
    FindElement = function (reader, name)
      while reader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
        local elementName = ReadName(reader)
        if elementName == name then
          return true
        end
        reader:SkipValue()
      end

      return false
    end
    -- <summary>
    -- Positions the reader to a string element by name.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>True if the element was found.</returns>
    FindStringElement = function (reader, name)
      local bsonType
      while true do
        bsonType = reader:ReadBsonType()
        if not (bsonType ~= 0 --[[BsonType.EndOfDocument]]) then
          break
        end
        if bsonType == 2 --[[BsonType.String]] then
          local elementName = ReadName(reader)
          if elementName == name then
            return reader:ReadString()
          else
            reader:SkipValue()
          end
        else
          reader:SkipName()
          reader:SkipValue()
        end
      end

      return nil
    end
    -- <summary>
    -- Reads a BSON binary data element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A BsonBinaryData.</returns>
    ReadBinaryData = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadBinaryData()
    end
    -- <summary>
    -- Reads a BSON boolean element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A Boolean.</returns>
    ReadBoolean = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadBoolean()
    end
    -- <summary>
    -- Reads a BSON binary data element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A byte array.</returns>
    ReadBytes = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadBytes()
    end
    -- <summary>
    -- Reads a BSON DateTime element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>The number of milliseconds since the Unix epoch.</returns>
    ReadDateTime = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadDateTime()
    end
    -- <summary>
    -- Reads a BSON Decimal128 element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A <see cref="Decimal128"/>.</returns>
    ReadDecimal128 = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadDecimal128()
    end
    -- <summary>
    -- Reads a BSON Double element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A Double.</returns>
    ReadDouble = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadDouble()
    end
    -- <summary>
    -- Reads a BSON Int32 element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>An Int32.</returns>
    ReadInt32 = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadInt32()
    end
    -- <summary>
    -- Reads a BSON Int64 element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>An Int64.</returns>
    ReadInt64 = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadInt64()
    end
    -- <summary>
    -- Reads a BSON JavaScript element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A string.</returns>
    ReadJavaScript = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadJavaScript()
    end
    -- <summary>
    -- Reads a BSON JavaScript with scope element from the reader (call ReadStartDocument next to read the scope).
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A string.</returns>
    ReadJavaScriptWithScope = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadJavaScriptWithScope()
    end
    -- <summary>
    -- Reads a BSON MaxKey element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    ReadMaxKey = function (reader, name)
      VerifyName(reader, name)
      reader:ReadMaxKey()
    end
    -- <summary>
    -- Reads a BSON MinKey element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    ReadMinKey = function (reader, name)
      VerifyName(reader, name)
      reader:ReadMinKey()
    end
    -- <summary>
    -- Reads the name of an element from the reader.
    -- </summary>
    -- <returns>The name of the element.</returns>
    ReadName = function (reader)
      return reader:ReadName(MongoDBBsonIO.Utf8NameDecoder.getInstance())
    end
    -- <summary>
    -- Reads the name of an element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    ReadName1 = function (reader, name)
      VerifyName(reader, name)
    end
    -- <summary>
    -- Reads a BSON null element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    ReadNull = function (reader, name)
      VerifyName(reader, name)
      reader:ReadNull()
    end
    -- <summary>
    -- Reads a BSON ObjectId element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>An ObjectId.</returns>
    ReadObjectId = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadObjectId()
    end
    -- <summary>
    -- Reads a raw BSON array.
    -- </summary>
    -- <param name="name">The name.</param>
    -- <returns>
    -- The raw BSON array.
    -- </returns>
    ReadRawBsonArray = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadRawBsonArray()
    end
    -- <summary>
    -- Reads a raw BSON document.
    -- </summary>
    -- <param name="name">The name.</param>
    -- <returns>The raw BSON document.</returns>
    ReadRawBsonDocument = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadRawBsonDocument()
    end
    -- <summary>
    -- Reads a BSON regular expression element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A BsonRegularExpression.</returns>
    ReadRegularExpression = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadRegularExpression()
    end
    -- <summary>
    -- Reads a BSON string element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A String.</returns>
    ReadString = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadString()
    end
    -- <summary>
    -- Reads a BSON symbol element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <returns>A string.</returns>
    ReadSymbol = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadSymbol()
    end
    -- <summary>
    -- Reads a BSON timestamp element from the reader.
    -- </summary>
    -- <param name="reader">The reader.</param>
    -- <param name="name">The name of the element.</param>
    ReadTimestamp = function (reader, name)
      VerifyName(reader, name)
      return reader:ReadTimestamp()
    end
    -- <summary>
    -- Reads a BSON undefined element from the reader.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    ReadUndefined = function (reader, name)
      VerifyName(reader, name)
      reader:ReadUndefined()
    end
    VerifyName = function (reader, expectedName)
      local actualName = ReadName(reader)
      if actualName ~= expectedName then
        local message = System.String.Format("Expected element name to be '{0}', not '{1}'.", expectedName, actualName)
        System.throw(System.FormatException(message))
      end
    end
    return {
      FindElement = FindElement,
      FindStringElement = FindStringElement,
      ReadBinaryData = ReadBinaryData,
      ReadBoolean = ReadBoolean,
      ReadBytes = ReadBytes,
      ReadDateTime = ReadDateTime,
      ReadDecimal128 = ReadDecimal128,
      ReadDouble = ReadDouble,
      ReadInt32 = ReadInt32,
      ReadInt64 = ReadInt64,
      ReadJavaScript = ReadJavaScript,
      ReadJavaScriptWithScope = ReadJavaScriptWithScope,
      ReadMaxKey = ReadMaxKey,
      ReadMinKey = ReadMinKey,
      ReadName = ReadName,
      ReadName1 = ReadName1,
      ReadNull = ReadNull,
      ReadObjectId = ReadObjectId,
      ReadRawBsonArray = ReadRawBsonArray,
      ReadRawBsonDocument = ReadRawBsonDocument,
      ReadRegularExpression = ReadRegularExpression,
      ReadString = ReadString,
      ReadSymbol = ReadSymbol,
      ReadTimestamp = ReadTimestamp,
      ReadUndefined = ReadUndefined
    }
  end)
end)
