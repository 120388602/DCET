-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a BSON writer to a BSON Stream.
  -- </summary>
  namespace.class("BsonBinaryWriter", function (namespace)
    local getBaseStream, getBsonStream, getPosition, getSettings1, Close, Flush, PopMaxDocumentSize, PushMaxDocumentSize, 
    WriteBinaryData, WriteBoolean, WriteBytes, WriteDateTime, WriteDecimal128, WriteDouble, WriteEndArray, WriteEndDocument, 
    WriteInt32, WriteInt64, WriteJavaScript, WriteJavaScriptWithScope, WriteMaxKey, WriteMinKey, WriteNull, WriteObjectId, 
    WriteRawBsonArray, WriteRawBsonDocument, WriteRegularExpression, WriteStartArray, WriteStartDocument, WriteString, WriteSymbol, WriteTimestamp, 
    WriteUndefined, Dispose1, BackpatchSize, GetNextState, WriteNameHelper, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the BsonBinaryWriter class.
    -- </summary>
    __ctor1__ = function (this, stream)
      __ctor2__(this, stream, MongoDBBsonIO.BsonBinaryWriterSettings.getDefaults())
    end
    -- <summary>
    -- Initializes a new instance of the BsonBinaryWriter class.
    -- </summary>
    -- <param name="settings">The BsonBinaryWriter settings.</param>
    __ctor2__ = function (this, stream, settings)
      MongoDBBsonIO.BsonWriter.__ctor__(this, settings)
      if stream == nil then
        System.throw(System.ArgumentNullException("stream"))
      end
      if not stream:getCanSeek() then
        System.throw(System.ArgumentException("The stream must be capable of seeking.", "stream"))
      end

      this._baseStream = stream
      this._bsonStream = (System.as(stream, MongoDBBsonIO.BsonStream)) or MongoDBBsonIO.BsonStreamAdapter(stream, false)

      this._context = nil
      this:setState(0 --[[BsonWriterState.Initial]])
    end
    getBaseStream = function (this)
      return this._baseStream
    end
    getBsonStream = function (this)
      return this._bsonStream
    end
    getPosition = function (this)
      return this._baseStream:getPosition()
    end
    getSettings1 = function (this)
      return System.cast(MongoDBBsonIO.BsonBinaryWriterSettings, this.getSettings())
    end
    -- <summary>
    -- Closes the writer. Also closes the base stream.
    -- </summary>
    Close = function (this)
      -- Close can be called on Disposed objects
      if this:getState() ~= 5 --[[BsonWriterState.Closed]] then
        if this:getState() == 4 --[[BsonWriterState.Done]] then
          this:Flush()
        end
        this._context = nil
        this:setState(5 --[[BsonWriterState.Closed]])
      end
    end
    -- <summary>
    -- Flushes any pending data to the output destination.
    -- </summary>
    Flush = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() == 5 --[[BsonWriterState.Closed]] then
        System.throw(System.InvalidOperationException("Flush called on closed BsonWriter."))
      end
      if this:getState() ~= 4 --[[BsonWriterState.Done]] then
        System.throw(System.InvalidOperationException("Flush called before BsonBinaryWriter was finished writing to buffer."))
      end
      this._bsonStream:Flush()
    end
    -- <summary>
    -- Pops the max document size stack, restoring the previous max document size.
    -- </summary>
    PopMaxDocumentSize = function (this)
      this:PopSettings()
    end
    -- <summary>
    -- Pushes a new max document size onto the max document size stack.
    -- </summary>
    PushMaxDocumentSize = function (this, maxDocumentSize)
      this:PushSettings(function (s)
        (System.cast(MongoDBBsonIO.BsonBinaryWriterSettings, s)):setMaxDocumentSize(maxDocumentSize)
      end)
    end
    -- <summary>
    -- Writes BSON binary data to the writer.
    -- </summary>
    WriteBinaryData = function (this, binaryData)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteBinaryData", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      local bytes = binaryData:getBytes()
      local subType = binaryData:getSubType()
      local guidRepresentation = binaryData:getGuidRepresentation()
      repeat
        local default = subType
        if default == 2 --[[BsonBinarySubType.OldBinary]] then
          if getSettings1(this):getFixOldBinarySubTypeOnOutput() then
            subType = 0 --[[BsonBinarySubType.Binary]]
            -- replace obsolete OldBinary with new Binary sub type
          end
          break
        elseif default == 3 --[[BsonBinarySubType.UuidLegacy]] or default == 4 --[[BsonBinarySubType.UuidStandard]] then
          if getSettings1(this):getGuidRepresentation() ~= 0 --[[GuidRepresentation.Unspecified]] then
            local expectedSubType = (getSettings1(this):getGuidRepresentation() == 1 --[[GuidRepresentation.Standard]]) and 4 --[[BsonBinarySubType.UuidStandard]] or 3 --[[BsonBinarySubType.UuidLegacy]]
            if subType ~= expectedSubType then
              local message = System.String.Format("The GuidRepresentation for the writer is {0}, which requires the subType argument to be {1}, not {2}.", getSettings1(this):getGuidRepresentation(), expectedSubType, subType)
              System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
            end
            if guidRepresentation ~= getSettings1(this):getGuidRepresentation() then
              local message = System.String.Format("The GuidRepresentation for the writer is {0}, which requires the the guidRepresentation argument to also be {0}, not {1}.", getSettings1(this):getGuidRepresentation(), guidRepresentation)
              System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
            end
          end
          break
        end
      until 1

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 5 --[[BsonType.Binary]])
      WriteNameHelper(this)
      if subType == 2 --[[BsonBinarySubType.OldBinary]] then
        -- sub type OldBinary has two sizes (for historical reasons)
        this._bsonStream:WriteInt32(#bytes + 4)
        MongoDBBsonIO.BsonStreamExtensions.WriteBinarySubType(this._bsonStream, subType)
        this._bsonStream:WriteInt32(#bytes)
      else
        this._bsonStream:WriteInt32(#bytes)
        MongoDBBsonIO.BsonStreamExtensions.WriteBinarySubType(this._bsonStream, subType)
      end
      MongoDBBsonIO.BsonStreamExtensions.WriteBytes(this._bsonStream, bytes, 0, #bytes)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Boolean to the writer.
    -- </summary>
    WriteBoolean = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteBoolean", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 8 --[[BsonType.Boolean]])
      WriteNameHelper(this)
      MongoDBBsonIO.BsonStreamExtensions.WriteBoolean(this._bsonStream, value)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes BSON binary data to the writer.
    -- </summary>
    WriteBytes = function (this, bytes)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteBytes", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 5 --[[BsonType.Binary]])
      WriteNameHelper(this)
      this._bsonStream:WriteInt32(#bytes)
      MongoDBBsonIO.BsonStreamExtensions.WriteBinarySubType(this._bsonStream, 0 --[[BsonBinarySubType.Binary]])
      MongoDBBsonIO.BsonStreamExtensions.WriteBytes(this._bsonStream, bytes, 0, #bytes)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON DateTime to the writer.
    -- </summary>
    WriteDateTime = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteDateTime", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 9 --[[BsonType.DateTime]])
      WriteNameHelper(this)
      this._bsonStream:WriteInt64(value)

      this:setState(GetNextState(this))
    end
    WriteDecimal128 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteDecimal128" --[[nameof(WriteDecimal128)]], System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 19 --[[BsonType.Decimal128]])
      WriteNameHelper(this)
      this._bsonStream:WriteDecimal128(value:__clone__())

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Double to the writer.
    -- </summary>
    WriteDouble = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteDouble", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 1 --[[BsonType.Double]])
      WriteNameHelper(this)
      this._bsonStream:WriteDouble(value)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the end of a BSON array to the writer.
    -- </summary>
    WriteEndArray = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteEndArray", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end
      if this._context:getContextType() ~= 2 --[[ContextType.Array]] then
        this:ThrowInvalidContextType("WriteEndArray", this._context:getContextType(), System.Array(System.Int32)(2 --[[ContextType.Array]]))
      end

      MongoDBBsonIO.BsonWriter.WriteEndArray(this)
      this._bsonStream:WriteByte(0)
      BackpatchSize(this)
      -- size of document

      this._context = this._context:getParentContext()
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the end of a BSON document to the writer.
    -- </summary>
    WriteEndDocument = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 1 --[[BsonWriterState.Name]] then
        this:ThrowInvalidState("WriteEndDocument", System.Array(System.Int32)(1 --[[BsonWriterState.Name]]))
      end
      if this._context:getContextType() ~= 1 --[[ContextType.Document]] and this._context:getContextType() ~= 4 --[[ContextType.ScopeDocument]] then
        this:ThrowInvalidContextType("WriteEndDocument", this._context:getContextType(), System.Array(System.Int32)(1 --[[ContextType.Document]], 4 --[[ContextType.ScopeDocument]]))
      end

      MongoDBBsonIO.BsonWriter.WriteEndDocument(this)
      this._bsonStream:WriteByte(0)
      BackpatchSize(this)
      -- size of document

      this._context = this._context:getParentContext()
      if this._context == nil then
        this:setState(4 --[[BsonWriterState.Done]])
      else
        if this._context:getContextType() == 3 --[[ContextType.JavaScriptWithScope]] then
          BackpatchSize(this)
          -- size of the JavaScript with scope value
          this._context = this._context:getParentContext()
        end
        this:setState(GetNextState(this))
      end
    end
    -- <summary>
    -- Writes a BSON Int32 to the writer.
    -- </summary>
    WriteInt32 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteInt32", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 16 --[[BsonType.Int32]])
      WriteNameHelper(this)
      this._bsonStream:WriteInt32(value)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Int64 to the writer.
    -- </summary>
    WriteInt64 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteInt64", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 18 --[[BsonType.Int64]])
      WriteNameHelper(this)
      this._bsonStream:WriteInt64(value)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON JavaScript to the writer.
    -- </summary>
    WriteJavaScript = function (this, code)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteJavaScript", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 13 --[[BsonType.JavaScript]])
      WriteNameHelper(this)
      this._bsonStream:WriteString(code, getSettings1(this):getEncoding())

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON JavaScript to the writer (call WriteStartDocument to start writing the scope).
    -- </summary>
    WriteJavaScriptWithScope = function (this, code)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteJavaScriptWithScope", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 15 --[[BsonType.JavaScriptWithScope]])
      WriteNameHelper(this)
      this._context = MongoDBBsonIO.BsonBinaryWriterContext(this._context, 3 --[[ContextType.JavaScriptWithScope]], this._bsonStream:getPosition())
      this._bsonStream:WriteInt32(0)
      -- reserve space for size of JavaScript with scope value
      this._bsonStream:WriteString(code, getSettings1(this):getEncoding())

      this:setState(3 --[[BsonWriterState.ScopeDocument]])
    end
    -- <summary>
    -- Writes a BSON MaxKey to the writer.
    -- </summary>
    WriteMaxKey = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteMaxKey", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 127 --[[BsonType.MaxKey]])
      WriteNameHelper(this)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON MinKey to the writer.
    -- </summary>
    WriteMinKey = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteMinKey", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 255 --[[BsonType.MinKey]])
      WriteNameHelper(this)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON null to the writer.
    -- </summary>
    WriteNull = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteNull", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 10 --[[BsonType.Null]])
      WriteNameHelper(this)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON ObjectId to the writer.
    -- </summary>
    WriteObjectId = function (this, objectId)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteObjectId", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 7 --[[BsonType.ObjectId]])
      WriteNameHelper(this)
      this._bsonStream:WriteObjectId(objectId:__clone__())

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a raw BSON array.
    -- </summary>
    WriteRawBsonArray = function (this, slice)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteRawBsonArray", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 4 --[[BsonType.Array]])
      WriteNameHelper(this)
      MongoDBBsonIO.BsonStreamExtensions.WriteSlice(this._bsonStream, slice)
      -- assumes slice is a valid raw BSON array

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a raw BSON document.
    -- </summary>
    WriteRawBsonDocument = function (this, slice)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 0 --[[BsonWriterState.Initial]] and this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 3 --[[BsonWriterState.ScopeDocument]] and this:getState() ~= 4 --[[BsonWriterState.Done]] then
        this:ThrowInvalidState("WriteRawBsonDocument", System.Array(System.Int32)(0 --[[BsonWriterState.Initial]], 2 --[[BsonWriterState.Value]], 3 --[[BsonWriterState.ScopeDocument]], 4 --[[BsonWriterState.Done]]))
      end

      if this:getState() == 2 --[[BsonWriterState.Value]] then
        MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 3 --[[BsonType.Document]])
        WriteNameHelper(this)
      end
      MongoDBBsonIO.BsonStreamExtensions.WriteSlice(this._bsonStream, slice)
      -- assumes byteBuffer is a valid raw BSON document

      if this._context == nil then
        this:setState(4 --[[BsonWriterState.Done]])
      else
        if this._context:getContextType() == 3 --[[ContextType.JavaScriptWithScope]] then
          BackpatchSize(this)
          -- size of the JavaScript with scope value
          this._context = this._context:getParentContext()
        end
        this:setState(GetNextState(this))
      end
    end
    -- <summary>
    -- Writes a BSON regular expression to the writer.
    -- </summary>
    WriteRegularExpression = function (this, regex)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteRegularExpression", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 11 --[[BsonType.RegularExpression]])
      WriteNameHelper(this)
      this._bsonStream:WriteCString(regex:getPattern())
      this._bsonStream:WriteCString(regex:getOptions())

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the start of a BSON array to the writer.
    -- </summary>
    WriteStartArray = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteStartArray", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonWriter.WriteStartArray(this)
      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 4 --[[BsonType.Array]])
      WriteNameHelper(this)
      this._context = MongoDBBsonIO.BsonBinaryWriterContext(this._context, 2 --[[ContextType.Array]], this._bsonStream:getPosition())
      this._bsonStream:WriteInt32(0)
      -- reserve space for size

      this:setState(2 --[[BsonWriterState.Value]])
    end
    -- <summary>
    -- Writes the start of a BSON document to the writer.
    -- </summary>
    WriteStartDocument = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 0 --[[BsonWriterState.Initial]] and this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 3 --[[BsonWriterState.ScopeDocument]] and this:getState() ~= 4 --[[BsonWriterState.Done]] then
        this:ThrowInvalidState("WriteStartDocument", System.Array(System.Int32)(0 --[[BsonWriterState.Initial]], 2 --[[BsonWriterState.Value]], 3 --[[BsonWriterState.ScopeDocument]], 4 --[[BsonWriterState.Done]]))
      end

      MongoDBBsonIO.BsonWriter.WriteStartDocument(this)
      if this:getState() == 2 --[[BsonWriterState.Value]] then
        MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 3 --[[BsonType.Document]])
        WriteNameHelper(this)
      end
      local contextType = (this:getState() == 3 --[[BsonWriterState.ScopeDocument]]) and 4 --[[ContextType.ScopeDocument]] or 1 --[[ContextType.Document]]
      this._context = MongoDBBsonIO.BsonBinaryWriterContext(this._context, contextType, this._bsonStream:getPosition())
      this._bsonStream:WriteInt32(0)
      -- reserve space for size

      this:setState(1 --[[BsonWriterState.Name]])
    end
    -- <summary>
    -- Writes a BSON String to the writer.
    -- </summary>
    WriteString = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteString", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 2 --[[BsonType.String]])
      WriteNameHelper(this)
      this._bsonStream:WriteString(value, getSettings1(this):getEncoding())

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Symbol to the writer.
    -- </summary>
    WriteSymbol = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteSymbol", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 14 --[[BsonType.Symbol]])
      WriteNameHelper(this)
      this._bsonStream:WriteString(value, getSettings1(this):getEncoding())

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON timestamp to the writer.
    -- </summary>
    WriteTimestamp = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteTimestamp", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 17 --[[BsonType.Timestamp]])
      WriteNameHelper(this)
      this._bsonStream:WriteInt64(value)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON undefined to the writer.
    -- </summary>
    WriteUndefined = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonBinaryWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteUndefined", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonStreamExtensions.WriteBsonType(this._bsonStream, 6 --[[BsonType.Undefined]])
      WriteNameHelper(this)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Disposes of any resources used by the writer.
    -- </summary>
    Dispose1 = function (this, disposing)
      if disposing then
        System.try(function ()
          this:Close()
        end, function (default)
        end)
        -- ignore exceptions
      end
      MongoDBBsonIO.BsonWriter.Dispose1(this, disposing)
    end
    BackpatchSize = function (this)
      local size = this._bsonStream:getPosition() - this._context:getStartPosition()
      if size > getSettings1(this):getMaxDocumentSize() then
        local message = System.String.Format("Size {0} is larger than MaxDocumentSize {1}.", size, getSettings1(this):getMaxDocumentSize())
        System.throw(System.FormatException(message))
      end

      local currentPosition = this._bsonStream:getPosition()
      this._bsonStream:setPosition(this._context:getStartPosition())
      this._bsonStream:WriteInt32(System.toInt32(size))
      this._bsonStream:setPosition(currentPosition)
    end
    GetNextState = function (this)
      if this._context:getContextType() == 2 --[[ContextType.Array]] then
        return 2 --[[BsonWriterState.Value]]
      else
        return 1 --[[BsonWriterState.Name]]
      end
    end
    WriteNameHelper = function (this)
      if this._context:getContextType() == 2 --[[ContextType.Array]] then
        local default = this._context
        local extern = default:getIndex()
        default:setIndex(extern + 1)
        local index = extern
        local nameBytes = MongoDBBsonIO.ArrayElementNameAccelerator.getDefault():GetElementNameBytes(index)
        this._bsonStream:WriteCStringBytes(nameBytes)
      else
        this._bsonStream:WriteCString(this:getName())
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.BsonWriter
        }
      end,
      getBaseStream = getBaseStream,
      getBsonStream = getBsonStream,
      getPosition = getPosition,
      getSettings1 = getSettings1,
      Close = Close,
      Flush = Flush,
      PopMaxDocumentSize = PopMaxDocumentSize,
      PushMaxDocumentSize = PushMaxDocumentSize,
      WriteBinaryData = WriteBinaryData,
      WriteBoolean = WriteBoolean,
      WriteBytes = WriteBytes,
      WriteDateTime = WriteDateTime,
      WriteDecimal128 = WriteDecimal128,
      WriteDouble = WriteDouble,
      WriteEndArray = WriteEndArray,
      WriteEndDocument = WriteEndDocument,
      WriteInt32 = WriteInt32,
      WriteInt64 = WriteInt64,
      WriteJavaScript = WriteJavaScript,
      WriteJavaScriptWithScope = WriteJavaScriptWithScope,
      WriteMaxKey = WriteMaxKey,
      WriteMinKey = WriteMinKey,
      WriteNull = WriteNull,
      WriteObjectId = WriteObjectId,
      WriteRawBsonArray = WriteRawBsonArray,
      WriteRawBsonDocument = WriteRawBsonDocument,
      WriteRegularExpression = WriteRegularExpression,
      WriteStartArray = WriteStartArray,
      WriteStartDocument = WriteStartDocument,
      WriteString = WriteString,
      WriteSymbol = WriteSymbol,
      WriteTimestamp = WriteTimestamp,
      WriteUndefined = WriteUndefined,
      Dispose1 = Dispose1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          methods = {
            { "PopMaxDocumentSize", 0x6, PopMaxDocumentSize, System.ObsoleteAttribute("Use PopSettings instead.") },
            { "PushMaxDocumentSize", 0x106, PushMaxDocumentSize, System.Int32, System.ObsoleteAttribute("Use PushSettings instead.") }
          }
        }
      end
    }
  end)
end)
