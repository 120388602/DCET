-- Generated by CSharp.lua Compiler
--[[ Copyright 2013-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a source of chunks optimized for output buffers.
  -- </summary>
  namespace.class("OutputBufferChunkSource", function (namespace)
    local getBaseSource, getInitialUnpooledChunkSize, getMaxChunkSize, getMinChunkSize, Dispose, GetChunk, ThrowIfDisposed, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="OutputBufferChunkSource"/> class.
    -- </summary>
    -- <param name="initialUnpooledChunkSize">The size of the initial unpooled chunk.</param>
    -- <param name="minChunkSize">The minimum size of a chunk.</param>
    -- <param name="maxChunkSize">The maximum size of a chunk.</param>
    __ctor__ = function (this, baseSource, initialUnpooledChunkSize, minChunkSize, maxChunkSize)
      if baseSource == nil then
        System.throw(System.ArgumentNullException("baseSource"))
      end
      if initialUnpooledChunkSize < 0 then
        System.throw(System.ArgumentOutOfRangeException("initialUnpooledChunkSize"))
      end
      if minChunkSize <= 0 then
        System.throw(System.ArgumentOutOfRangeException("minChunkSize"))
      end
      if maxChunkSize <= 0 then
        System.throw(System.ArgumentOutOfRangeException("maxChunkSize"))
      end
      if not MongoDBBson.PowerOf2.IsPowerOf2(minChunkSize) then
        System.throw(System.ArgumentException("minChunkSize is not a power of 2.", "minChunkSize"))
      end
      if not MongoDBBson.PowerOf2.IsPowerOf2(maxChunkSize) then
        System.throw(System.ArgumentException("maxChunkSize is not a power of 2.", "maxChunkSize"))
      end
      if maxChunkSize < minChunkSize then
        System.throw(System.ArgumentException("maxChunkSize is less than minChunkSize", "maxChunkSize"))
      end

      this._baseSource = baseSource
      this._initialUnpooledChunkSize = initialUnpooledChunkSize
      this._minChunkSize = minChunkSize
      this._maxChunkSize = maxChunkSize
    end
    getBaseSource = function (this)
      ThrowIfDisposed(this)
      return this._baseSource
    end
    getInitialUnpooledChunkSize = function (this)
      return this._initialUnpooledChunkSize
    end
    getMaxChunkSize = function (this)
      return this._maxChunkSize
    end
    getMinChunkSize = function (this)
      return this._minChunkSize
    end
    Dispose = function (this)
      this._disposed = true
    end
    GetChunk = function (this, requestedSize)
      if requestedSize <= 0 then
        System.throw(System.ArgumentOutOfRangeException("requestedSize"))
      end
      ThrowIfDisposed(this)

      local chunk
      if this._previousChunkSize == 0 and this._initialUnpooledChunkSize ~= 0 then
        chunk = MongoDBBsonIO.ByteArrayChunk(this._initialUnpooledChunkSize)
      else
        local powerOf2Size = MongoDBBson.PowerOf2.RoundUpToPowerOf2(this._previousChunkSize + 1)
        local chunkSize = math.Max(math.Min(powerOf2Size, this._maxChunkSize), this._minChunkSize)
        chunk = this._baseSource:GetChunk(chunkSize)
      end

      this._previousChunkSize = chunk:getBytes():getCount()
      return chunk
    end
    ThrowIfDisposed = function (this)
      if this._disposed then
        System.throw(System.ObjectDisposedException(this:GetType():getName()))
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.IBsonChunkSource
        }
      end,
      _disposed = false,
      _initialUnpooledChunkSize = 0,
      _maxChunkSize = 0,
      _minChunkSize = 0,
      _previousChunkSize = 0,
      getBaseSource = getBaseSource,
      getInitialUnpooledChunkSize = getInitialUnpooledChunkSize,
      getMaxChunkSize = getMaxChunkSize,
      getMinChunkSize = getMinChunkSize,
      Dispose = Dispose,
      GetChunk = GetChunk,
      __ctor__ = __ctor__
    }
  end)
end)
