-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ArrayByte = System.Array(System.Byte)
local ArraySegmentByte = System.ArraySegment(System.Byte)
local MongoDBBsonIO
System.import(function (out)
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a mapping from a set of UTF8 encoded strings to a set of elementName/value pairs, implemented as a trie.
  -- </summary>
  namespace.class("BsonTrie_1", function (namespace)
    return function (TValue)
      local getRoot, Add, TryGetNode, TryGetNode1, TryGetValue, TryGetValue1, __ctor__
      local BsonTrieNode_1TValue = MongoDB.Bson.IO.BsonTrieNode_1(TValue)
      -- <summary>
      -- Initializes a new instance of the BsonTrie class.
      -- </summary>
      __ctor__ = function (this)
        this._root = BsonTrieNode_1TValue(0)
      end
      getRoot = function (this)
        return this._root
      end
      -- <summary>
      -- Adds the specified elementName (after encoding as a UTF8 byte sequence) and value to the trie.
      -- </summary>
      -- <param name="value">The value to add. The value can be null for reference types.</param>
      Add = function (this, elementName, value)
        local utf8 = MongoDBBsonIO.Utf8Encodings.getStrict():GetBytes(elementName)

        local node = this._root
        for _, keyByte in System.each(utf8) do
          local child = node:GetChild(keyByte)
          if child == nil then
            child = BsonTrieNode_1TValue(keyByte)
            node:AddChild(child)
          end
          node = child
        end

        node:SetValue(elementName, value)
      end
      -- <summary>
      -- Gets the node associated with the specified element name.
      -- </summary>
      -- <param name="node">
      -- When this method returns, contains the node associated with the specified element name, if the key is found;
      -- otherwise, null. This parameter is passed unitialized.
      -- </param>
      -- <returns>True if the node was found; otherwise, false.</returns>
      TryGetNode = function (this, utf8, node)
        node = this._root
        do
          local i = 0
          while node ~= nil and i < utf8:getCount() do
            local keyByte = utf8:getArray():get(utf8:getOffset() + i)
            node = node:GetChild(keyByte)
            i = i + 1
          end
        end

        return node ~= nil, node
      end
      -- <summary>
      -- Tries to get the node associated with a name read from a stream.
      -- </summary>
      -- <param name="node">The node.</param>
      -- <returns>
      -- True if the node was found.
      -- If the node was found the stream is advanced over the name, otherwise
      -- the stream is repositioned to the beginning of the name.
      -- </returns>
      TryGetNode1 = function (this, stream, node)
        local position = stream:getPosition()
        local utf8 = stream:ReadCStringBytes()

        local default
        default, node = TryGetNode(this, utf8)
        if default then
          return true, node
        end

        stream:setPosition(position)
        return false, node
      end
      -- <summary>
      -- Gets the value associated with the specified element name.
      -- </summary>
      -- <param name="value">
      -- When this method returns, contains the value associated with the specified element name, if the key is found;
      -- otherwise, the default value for the type of the value parameter. This parameter is passed unitialized.
      -- </param>
      -- <returns>True if the value was found; otherwise, false.</returns>
      TryGetValue = function (this, utf8, value)
        local node
        local default
        default, node = TryGetNode(this, utf8)
        if default and node:getHasValue() then
          value = node:getValue()
          return true, value
        end

        value = System.default(TValue)
        return false, value
      end
      -- <summary>
      -- Gets the value associated with the specified element name.
      -- </summary>
      -- <param name="value">
      -- When this method returns, contains the value associated with the specified element name, if the key is found;
      -- otherwise, the default value for the type of the value parameter. This parameter is passed unitialized.
      -- </param>
      -- <returns>True if the value was found; otherwise, false.</returns>
      TryGetValue1 = function (this, elementName, value)
        local bytes = MongoDBBsonIO.Utf8Encodings.getStrict():GetBytes(elementName)
        local utf8 = ArraySegmentByte(bytes, 0, #bytes)
        local default
        default, value = TryGetValue(this, utf8)
        return default, value
      end
      return {
        getRoot = getRoot,
        Add = Add,
        TryGetNode = TryGetNode,
        TryGetNode1 = TryGetNode1,
        TryGetValue = TryGetValue,
        TryGetValue1 = TryGetValue1,
        __ctor__ = __ctor__
      }
    end
  end)

  -- <summary>
  -- Represents a node in a BsonTrie.
  -- </summary>
  namespace.class("BsonTrieNode_1", function (namespace)
    return function (TValue)
      local getHasValue, getElementName, getValue, GetChild, AddChild, SetValue, __ctor__
      local ArrayBsonTrieNode_1TValue = System.Array(MongoDB.Bson.IO.BsonTrieNode_1(TValue))
      __ctor__ = function (this, keyByte)
        this._value = System.default(TValue)
        this._keyByte = keyByte
      end
      getHasValue = function (this)
        return this._elementName ~= nil
      end
      getElementName = function (this)
        if this._elementName == nil then
          System.throw(System.InvalidOperationException("BsonTrieNode doesn't have a value."))
        end

        return this._elementName
      end
      getValue = function (this)
        if this._elementName == nil then
          System.throw(System.InvalidOperationException("BsonTrieNode doesn't have a value."))
        end

        return this._value
      end
      -- <summary>
      -- Gets the child of this node for a given key byte.
      -- </summary>
      -- <returns>The child node if it exists; otherwise, null.</returns>
      GetChild = function (this, keyByte)
        if this._onlyChild ~= nil then
          -- optimization for nodes that have only one child
          if this._onlyChild._keyByte == keyByte then
            return this._onlyChild
          end
        elseif this._children ~= nil then
          -- 这里做了修改，il2cpp uint跟int比较有bug
          local index = keyByte - this._minChildKeyByte
          if index < 0 then
            return nil
          end
          if index < #this._childrenIndexes then
            index = this._childrenIndexes:get(index)
            if index < #this._children then
              return this._children:get(index)
            end
          end
        end
        return nil
      end
      AddChild = function (this, child)
        if GetChild(this, child._keyByte) ~= nil then
          System.throw(System.ArgumentException("BsonTrieNode already contains a child with the same keyByte."))
        end

        if this._children ~= nil then
          -- add a new child to the existing _children
          local children = ArrayBsonTrieNode_1TValue:new(#this._children + 1)
          System.Array.Copy(this._children, children, #this._children)
          children:set(#children - 1, child)

          local childrenIndexes = this._childrenIndexes
          local minChildKeyByte = this._minChildKeyByte
          local maxChildKeyByte = this._minChildKeyByte + #this._childrenIndexes - 1

          -- if new keyByte doesn't fall within existing min/max range expand the range
          if child._keyByte < minChildKeyByte then
            -- grow the indexes on the min side
            minChildKeyByte = child._keyByte
            childrenIndexes = ArrayByte:new(maxChildKeyByte - minChildKeyByte + 1)
            local sizeDelta = #childrenIndexes - #this._childrenIndexes
            for i = 0, sizeDelta - 1 do
              childrenIndexes:set(i, 255)
            end
            System.Array.Copy(this._childrenIndexes, 0, childrenIndexes, sizeDelta, #this._childrenIndexes)
          elseif child._keyByte > maxChildKeyByte then
            -- grow the indexes on the max side
            maxChildKeyByte = child._keyByte
            childrenIndexes = ArrayByte:new(maxChildKeyByte - minChildKeyByte + 1)
            System.Array.Copy(this._childrenIndexes, 0, childrenIndexes, 0, #this._childrenIndexes)
            for i = #this._childrenIndexes, #childrenIndexes - 1 do
              childrenIndexes:set(i, 255)
            end
          end
          childrenIndexes:set(child._keyByte - minChildKeyByte, System.toByte(#children - 1))

          this._children = children
          this._childrenIndexes = childrenIndexes
          this._minChildKeyByte = minChildKeyByte
        elseif this._onlyChild ~= nil then
          -- switch from having an _onlyChild to having two _children
          local children = ArrayBsonTrieNode_1TValue:new(2)
          children:set(0, this._onlyChild)
          children:set(1, child)

          local minChildKeyByte = this._onlyChild._keyByte
          local maxChildKeyByte = child._keyByte
          if minChildKeyByte > maxChildKeyByte then
            minChildKeyByte = child._keyByte
            maxChildKeyByte = this._onlyChild._keyByte
          end

          local childrenIndexes = ArrayByte:new(maxChildKeyByte - minChildKeyByte + 1)
          for i = 0, #childrenIndexes - 1 do
            childrenIndexes:set(i, 255)
          end
          childrenIndexes:set(this._onlyChild._keyByte - minChildKeyByte, 0)
          childrenIndexes:set(child._keyByte - minChildKeyByte, 1)

          this._onlyChild = nil
          this._children = children
          this._childrenIndexes = childrenIndexes
          this._minChildKeyByte = minChildKeyByte
        else
          this._onlyChild = child
        end
      end
      SetValue = function (this, elementName, value)
        if elementName == nil then
          System.throw(System.ArgumentNullException("elementName"))
        end
        if this._elementName ~= nil then
          System.throw(System.InvalidOperationException("BsonTrieNode already has a value."))
        end

        this._elementName = elementName
        this._value = value
      end
      return {
        _keyByte = 0,
        _minChildKeyByte = 0,
        getHasValue = getHasValue,
        getElementName = getElementName,
        getValue = getValue,
        GetChild = GetChild,
        AddChild = AddChild,
        SetValue = SetValue,
        __ctor__ = __ctor__
      }
    end
  end)
end)
