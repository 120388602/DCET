-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a BSON writer to a BsonDocument.
  -- </summary>
  namespace.class("BsonDocumentWriter", function (namespace)
    local getDocument, getPosition, Close, Flush, WriteBinaryData, WriteBoolean, WriteBytes, WriteDateTime, 
    WriteDecimal128, WriteDouble, WriteEndArray, WriteEndDocument, WriteInt32, WriteInt64, WriteJavaScript, WriteJavaScriptWithScope, 
    WriteMaxKey, WriteMinKey, WriteName, WriteNull, WriteObjectId, WriteRegularExpression, WriteStartArray, WriteStartDocument, 
    WriteString, WriteSymbol, WriteTimestamp, WriteUndefined, Dispose1, GetNextState, WriteValue, __ctor1__, 
    __ctor2__
    -- <summary>
    -- Initializes a new instance of the BsonDocumentWriter class.
    -- </summary>
    __ctor1__ = function (this, document)
      __ctor2__(this, document, MongoDBBsonIO.BsonDocumentWriterSettings.getDefaults())
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocumentWriter class.
    -- </summary>
    -- <param name="settings">The settings.</param>
    __ctor2__ = function (this, document, settings)
      MongoDBBsonIO.BsonWriter.__ctor__(this, settings)
      if MongoDBBson.BsonDocument.op_Equality1(document, nil) then
        System.throw(System.ArgumentNullException("document"))
      end

      this._document = document
      this._context = nil
      this:setState(0 --[[BsonWriterState.Initial]])
    end
    getDocument = function (this)
      return this._document
    end
    getPosition = function (this)
      return 0
    end
    -- <summary>
    -- Closes the writer.
    -- </summary>
    Close = function (this)
      -- Close can be called on Disposed objects
      this._context = nil
      this:setState(5 --[[BsonWriterState.Closed]])
    end
    -- <summary>
    -- Flushes any pending data to the output destination.
    -- </summary>
    Flush = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
    end
    -- <summary>
    -- Writes BSON binary data to the writer.
    -- </summary>
    WriteBinaryData = function (this, binaryData)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteBinaryData", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, binaryData)
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Boolean to the writer.
    -- </summary>
    WriteBoolean = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteBoolean", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonValue.op_Implicit(value))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes BSON binary data to the writer.
    -- </summary>
    WriteBytes = function (this, bytes)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteBytes", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, System.new(MongoDBBson.BsonBinaryData, 2, bytes, 0 --[[BsonBinarySubType.Binary]]))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON DateTime to the writer.
    -- </summary>
    WriteDateTime = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteDateTime", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, System.new(MongoDBBson.BsonDateTime, 2, value))
      this:setState(GetNextState(this))
    end
    WriteDecimal128 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteDecimal128" --[[nameof(WriteDecimal128)]], System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonDecimal128(value:__clone__()))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Double to the writer.
    -- </summary>
    WriteDouble = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteDouble", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonValue.op_Implicit9(value))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the end of a BSON array to the writer.
    -- </summary>
    WriteEndArray = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteEndArray", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end
      if this._context:getContextType() ~= 2 --[[ContextType.Array]] then
        this:ThrowInvalidContextType("WriteEndArray", this._context:getContextType(), System.Array(System.Int32)(2 --[[ContextType.Array]]))
      end

      MongoDBBsonIO.BsonWriter.WriteEndArray(this)
      local array = this._context:getArray()
      this._context = this._context:getParentContext()
      WriteValue(this, array)
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the end of a BSON document to the writer.
    -- </summary>
    WriteEndDocument = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 1 --[[BsonWriterState.Name]] then
        this:ThrowInvalidState("WriteEndDocument", System.Array(System.Int32)(1 --[[BsonWriterState.Name]]))
      end
      if this._context:getContextType() ~= 1 --[[ContextType.Document]] and this._context:getContextType() ~= 4 --[[ContextType.ScopeDocument]] then
        this:ThrowInvalidContextType("WriteEndDocument", this._context:getContextType(), System.Array(System.Int32)(1 --[[ContextType.Document]], 4 --[[ContextType.ScopeDocument]]))
      end

      MongoDBBsonIO.BsonWriter.WriteEndDocument(this)
      if this._context:getContextType() == 4 --[[ContextType.ScopeDocument]] then
        local scope = this._context:getDocument()
        this._context = this._context:getParentContext()
        local code = this._context:getCode()
        this._context = this._context:getParentContext()
        WriteValue(this, MongoDBBson.BsonJavaScriptWithScope(code, scope))
      else
        local document = this._context:getDocument()
        this._context = this._context:getParentContext()
        if this._context ~= nil then
          WriteValue(this, document)
        end
      end

      if this._context == nil then
        this:setState(4 --[[BsonWriterState.Done]])
      else
        this:setState(GetNextState(this))
      end
    end
    -- <summary>
    -- Writes a BSON Int32 to the writer.
    -- </summary>
    WriteInt32 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteInt32", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonValue.op_Implicit14(value))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Int64 to the writer.
    -- </summary>
    WriteInt64 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteInt64", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonValue.op_Implicit16(value))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON JavaScript to the writer.
    -- </summary>
    WriteJavaScript = function (this, code)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteJavaScript", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonJavaScript(code))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON JavaScript to the writer (call WriteStartDocument to start writing the scope).
    -- </summary>
    WriteJavaScriptWithScope = function (this, code)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteJavaScriptWithScope", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      this._context = System.new(MongoDBBsonIO.BsonDocumentWriterContext, 3, this._context, 3 --[[ContextType.JavaScriptWithScope]], code)
      this:setState(3 --[[BsonWriterState.ScopeDocument]])
    end
    -- <summary>
    -- Writes a BSON MaxKey to the writer.
    -- </summary>
    WriteMaxKey = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteMaxKey", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonMaxKey.getValue())
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON MinKey to the writer.
    -- </summary>
    WriteMinKey = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteMinKey", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonMinKey.getValue())
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the name of an element to the writer.
    -- </summary>
    WriteName = function (this, name)
      MongoDBBsonIO.BsonWriter.WriteName(this, name)
      this._context:setName(name)
    end
    -- <summary>
    -- Writes a BSON null to the writer.
    -- </summary>
    WriteNull = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteNull", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonNull.getValue())
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON ObjectId to the writer.
    -- </summary>
    WriteObjectId = function (this, objectId)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteObjectId", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonValue.op_Implicit18(objectId:__clone__()))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON regular expression to the writer.
    -- </summary>
    WriteRegularExpression = function (this, regex)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteRegularExpression", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, regex)
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the start of a BSON array to the writer.
    -- </summary>
    WriteStartArray = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteStartArray", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonWriter.WriteStartArray(this)
      this._context = System.new(MongoDBBsonIO.BsonDocumentWriterContext, 2, this._context, 2 --[[ContextType.Array]], MongoDBBson.BsonArray())
      this:setState(2 --[[BsonWriterState.Value]])
    end
    -- <summary>
    -- Writes the start of a BSON document to the writer.
    -- </summary>
    WriteStartDocument = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 0 --[[BsonWriterState.Initial]] and this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 3 --[[BsonWriterState.ScopeDocument]] and this:getState() ~= 4 --[[BsonWriterState.Done]] then
        this:ThrowInvalidState("WriteStartDocument", System.Array(System.Int32)(0 --[[BsonWriterState.Initial]], 2 --[[BsonWriterState.Value]], 3 --[[BsonWriterState.ScopeDocument]], 4 --[[BsonWriterState.Done]]))
      end

      MongoDBBsonIO.BsonWriter.WriteStartDocument(this)
      repeat
        local default = this:getState()
        if default == 0 --[[BsonWriterState.Initial]] or default == 4 --[[BsonWriterState.Done]] then
          this._context = MongoDBBsonIO.BsonDocumentWriterContext(nil, 1 --[[ContextType.Document]], this._document)
          break
        elseif default == 2 --[[BsonWriterState.Value]] then
          this._context = MongoDBBsonIO.BsonDocumentWriterContext(this._context, 1 --[[ContextType.Document]], MongoDBBson.BsonDocument())
          break
        elseif default == 3 --[[BsonWriterState.ScopeDocument]] then
          this._context = MongoDBBsonIO.BsonDocumentWriterContext(this._context, 4 --[[ContextType.ScopeDocument]], MongoDBBson.BsonDocument())
          break
        else
          System.throw(System.new(MongoDBBson.BsonInternalException, 2, "Unexpected state."))
        end
      until 1

      this:setState(1 --[[BsonWriterState.Name]])
    end
    -- <summary>
    -- Writes a BSON String to the writer.
    -- </summary>
    WriteString = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteString", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonValue.op_Implicit21(value))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Symbol to the writer.
    -- </summary>
    WriteSymbol = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteSymbol", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonSymbolTable.Lookup(value))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON timestamp to the writer.
    -- </summary>
    WriteTimestamp = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteTimestamp", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonTimestamp(value))
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON undefined to the writer.
    -- </summary>
    WriteUndefined = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("BsonDocumentWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteUndefined", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      WriteValue(this, MongoDBBson.BsonUndefined.getValue())
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Disposes of any resources used by the writer.
    -- </summary>
    Dispose1 = function (this, disposing)
      if disposing then
        System.try(function ()
          this:Close()
        end, function (default)
        end)
        -- ignore exceptions
      end
      MongoDBBsonIO.BsonWriter.Dispose1(this, disposing)
    end
    GetNextState = function (this)
      if this._context:getContextType() == 2 --[[ContextType.Array]] then
        return 2 --[[BsonWriterState.Value]]
      else
        return 1 --[[BsonWriterState.Name]]
      end
    end
    WriteValue = function (this, value)
      if this._context:getContextType() == 2 --[[ContextType.Array]] then
        this._context:getArray():Add1(value)
      else
        this._context:getDocument():Add9(this._context:getName(), value)
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.BsonWriter
        }
      end,
      getDocument = getDocument,
      getPosition = getPosition,
      Close = Close,
      Flush = Flush,
      WriteBinaryData = WriteBinaryData,
      WriteBoolean = WriteBoolean,
      WriteBytes = WriteBytes,
      WriteDateTime = WriteDateTime,
      WriteDecimal128 = WriteDecimal128,
      WriteDouble = WriteDouble,
      WriteEndArray = WriteEndArray,
      WriteEndDocument = WriteEndDocument,
      WriteInt32 = WriteInt32,
      WriteInt64 = WriteInt64,
      WriteJavaScript = WriteJavaScript,
      WriteJavaScriptWithScope = WriteJavaScriptWithScope,
      WriteMaxKey = WriteMaxKey,
      WriteMinKey = WriteMinKey,
      WriteName = WriteName,
      WriteNull = WriteNull,
      WriteObjectId = WriteObjectId,
      WriteRegularExpression = WriteRegularExpression,
      WriteStartArray = WriteStartArray,
      WriteStartDocument = WriteStartDocument,
      WriteString = WriteString,
      WriteSymbol = WriteSymbol,
      WriteTimestamp = WriteTimestamp,
      WriteUndefined = WriteUndefined,
      Dispose1 = Dispose1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
