-- Generated by CSharp.lua Compiler
--[[ Copyright 2013-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ArrayByte = System.Array(System.Byte)
local ArraySegmentByte = System.ArraySegment(System.Byte)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a chunk backed by a byte array.
  -- </summary>
  namespace.class("ByteArrayChunk", function (namespace)
    local CreateByteArray, getBytes, Dispose, Fork, Dispose1, ThrowIfDisposed, class, __ctor1__, 
    __ctor2__
    -- <summary>
    -- Initializes a new instance of the <see cref="ByteArrayChunk"/> class.
    -- </summary>
    __ctor1__ = function (this, size)
      __ctor2__(this, CreateByteArray(size))
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="ByteArrayChunk"/> class.
    -- </summary>
    -- <exception cref="System.ArgumentNullException">bytes</exception>
    __ctor2__ = function (this, bytes)
      if bytes == nil then
        System.throw(System.ArgumentNullException("bytes"))
      end
      this._bytes = bytes
    end
    CreateByteArray = function (size)
      if size < 0 then
        System.throw(System.ArgumentOutOfRangeException("size"))
      end
      return ArrayByte:new(size)
    end
    getBytes = function (this)
      ThrowIfDisposed(this)
      return ArraySegmentByte(this._bytes)
    end
    Dispose = function (this)
      this:Dispose1(true)
      System.GC.SuppressFinalize(this)
    end
    Fork = function (this)
      ThrowIfDisposed(this)
      return System.new(class, 2, this._bytes)
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      if disposing then
        this._bytes = nil
      end
      this._disposed = true
    end
    ThrowIfDisposed = function (this)
      if this._disposed then
        System.throw(System.ObjectDisposedException(this:GetType():getName()))
      end
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.IBsonChunk
        }
      end,
      _disposed = false,
      getBytes = getBytes,
      Dispose = Dispose,
      Fork = Fork,
      Dispose1 = Dispose1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
