-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ArrayChar = System.Array(System.Char)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a wrapper around a TextReader to provide some buffering functionality.
  -- </summary>
  namespace.class("JsonBuffer", function (namespace)
    local getPosition, setPosition, GetSnippet, GetSubstring, Read, ResetBuffer, UnRead, ReadMoreIfAtEndOfBuffer, 
    __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the <see cref="JsonBuffer"/> class.
    -- </summary>
    __ctor1__ = function (this, json)
      if json == nil then
        System.throw(System.ArgumentNullException("json"))
      end
      this._buffer = System.StringBuilder(json)
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="JsonBuffer" /> class.
    -- </summary>
    __ctor2__ = function (this, reader)
      if reader == nil then
        System.throw(System.ArgumentNullException("reader"))
      end
      this._buffer = System.StringBuilder(256)
      -- start out with a reasonable initial capacity
      this._reader = reader
    end
    getPosition = function (this)
      return this._position
    end
    setPosition = function (this, value)
      if value < 0 or value > this._buffer:getLength() then
        local message = System.String.Format("Invalid position: {0}.", value)
        System.throw(System.ArgumentOutOfRangeException("value", message))
      end
      this._position = value
    end
    -- <summary>
    -- Gets a snippet of a maximum length from the buffer (usually to include in an error message).
    -- </summary>
    -- <param name="maxLength">The maximum length.</param>
    -- <returns>The snippet.</returns>
    GetSnippet = function (this, start, maxLength)
      if start < 0 then
        System.throw(System.ArgumentOutOfRangeException("start", "Start cannot be negative."))
      end
      if maxLength < 0 then
        System.throw(System.ArgumentOutOfRangeException("maxLength", "MaxLength cannot be negative."))
      end
      if start > this._position then
        System.throw(System.ArgumentOutOfRangeException("start", "Start is beyond current position."))
      end
      local availableCount = this._position - start
      local count = math.Min(availableCount, maxLength)
      return this._buffer:ToString(start, count)
    end
    -- <summary>
    -- Gets a substring from the buffer.
    -- </summary>
    -- <param name="count">The count.</param>
    -- <returns>The substring.</returns>
    GetSubstring = function (this, start, count)
      if start < 0 then
        System.throw(System.ArgumentOutOfRangeException("start", "Start cannot be negative."))
      end
      if count < 0 then
        System.throw(System.ArgumentOutOfRangeException("count", "Count cannot be negative."))
      end
      if start > this._position then
        System.throw(System.ArgumentOutOfRangeException("start", "Start is beyond current position."))
      end
      if start + count > this._position then
        System.throw(System.ArgumentOutOfRangeException("start", "End of substring is beyond current position."))
      end
      return this._buffer:ToString(start, count)
    end
    -- <summary>
    -- Reads the next character from the text reader and advances the character position by one character.
    -- </summary>
    -- The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.
    -- </returns>
    Read = function (this)
      ReadMoreIfAtEndOfBuffer(this)
      local default = this._position
      this._position = default + 1
      return (this._position >= this._buffer:getLength()) and - 1 or this._buffer:get(default)
    end
    -- <summary>
    -- Resets the buffer (clears everything up to the current position).
    -- </summary>
    ResetBuffer = function (this)
      -- only trim the buffer if enough space will be reclaimed to make it worthwhile
      local minimumTrimCount = 256
      -- TODO: make configurable?
      if this._position >= minimumTrimCount then
        this._buffer:Remove(0, this._position)
        this._position = 0
      end
    end
    -- <summary>
    -- Unreads one character (moving the current Position back one position).
    -- </summary>
    UnRead = function (this, c)
      if this._position == 0 then
        System.throw(System.InvalidOperationException("Unread called when nothing has been read."))
      end

      if c == - 1 then
        if this._position ~= this._buffer:getLength() then
          System.throw(System.InvalidOperationException("Unread called with -1 when position is not at the end of the buffer."))
        end
      else
        if this._buffer:get(this._position - 1) ~= c then
          System.throw(System.InvalidOperationException("Unread called with a character that does not match what is in the buffer."))
        end
        this._position = this._position - 1
      end
    end
    ReadMoreIfAtEndOfBuffer = function (this)
      if this._position >= this._buffer:getLength() then
        if this._reader ~= nil then
          local blockSize = 1024
          -- TODO: make configurable?
          local block = ArrayChar:new(blockSize)
          local actualCount = this._reader:ReadBlock(block, 0, blockSize)

          if actualCount > 0 then
            this._buffer:Append(block, 0, actualCount)
          end
        end
      end
    end
    return {
      _position = 0,
      getPosition = getPosition,
      setPosition = setPosition,
      GetSnippet = GetSnippet,
      GetSubstring = GetSubstring,
      Read = Read,
      ResetBuffer = ResetBuffer,
      UnRead = UnRead,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
