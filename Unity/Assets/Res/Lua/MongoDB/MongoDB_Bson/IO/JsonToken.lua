-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)

  -- <summary>
  -- Represents a JSON token.
  -- </summary>
  namespace.class("JsonToken", function (namespace)
    local getType, getLexeme, getDateTimeValue, getDoubleValue, getInt32Value, getInt64Value, getIsNumber, getObjectIdValue, 
    getRegularExpressionValue, getStringValue, __ctor__
    -- <summary>
    -- Initializes a new instance of the JsonToken class.
    -- </summary>
    -- <param name="lexeme">The lexeme.</param>
    __ctor__ = function (this, type, lexeme)
      this._type = type
      this._lexeme = lexeme
    end
    getType = function (this)
      return this._type
    end
    getLexeme = function (this)
      return this._lexeme
    end
    getDateTimeValue = function (this)
      System.throw(System.NotSupportedException())
    end
    getDoubleValue = function (this)
      System.throw(System.NotSupportedException())
    end
    getInt32Value = function (this)
      System.throw(System.NotSupportedException())
    end
    getInt64Value = function (this)
      System.throw(System.NotSupportedException())
    end
    getIsNumber = function (this)
      return false
    end
    getObjectIdValue = function (this)
      System.throw(System.NotSupportedException())
    end
    getRegularExpressionValue = function (this)
      System.throw(System.NotSupportedException())
    end
    getStringValue = function (this)
      System.throw(System.NotSupportedException())
    end
    return {
      _type = 0,
      getType = getType,
      getLexeme = getLexeme,
      getDateTimeValue = getDateTimeValue,
      getDoubleValue = getDoubleValue,
      getInt32Value = getInt32Value,
      getInt64Value = getInt64Value,
      getIsNumber = getIsNumber,
      getObjectIdValue = getObjectIdValue,
      getRegularExpressionValue = getRegularExpressionValue,
      getStringValue = getStringValue,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- Represents a DateTime JSON token.
  -- </summary>
  namespace.class("DateTimeJsonToken", function (namespace)
    local getDateTimeValue, __ctor__
    -- <summary>
    -- Initializes a new instance of the DateTimeJsonToken class.
    -- </summary>
    -- <param name="value">The DateTime value.</param>
    __ctor__ = function (this, lexeme, value)
      MongoDBBsonIO.JsonToken.__ctor__(this, 9 --[[JsonTokenType.DateTime]], lexeme)
      this._value = value
    end
    getDateTimeValue = function (this)
      return this._value
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.JsonToken
        }
      end,
      getDateTimeValue = getDateTimeValue,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- Represents a Double JSON token.
  -- </summary>
  namespace.class("DoubleJsonToken", function (namespace)
    local getDoubleValue, getInt32Value, getInt64Value, getIsNumber, __ctor__
    -- <summary>
    -- Initializes a new instance of the DoubleJsonToken class.
    -- </summary>
    -- <param name="value">The Double value.</param>
    __ctor__ = function (this, lexeme, value)
      MongoDBBsonIO.JsonToken.__ctor__(this, 10 --[[JsonTokenType.Double]], lexeme)
      this._value = value
    end
    getDoubleValue = function (this)
      return this._value
    end
    getInt32Value = function (this)
      return System.ToInt32(this._value)
    end
    getInt64Value = function (this)
      return System.ToInt64(this._value)
    end
    getIsNumber = function (this)
      return true
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.JsonToken
        }
      end,
      _value = 0,
      getDoubleValue = getDoubleValue,
      getInt32Value = getInt32Value,
      getInt64Value = getInt64Value,
      getIsNumber = getIsNumber,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- Represents an Int32 JSON token.
  -- </summary>
  namespace.class("Int32JsonToken", function (namespace)
    local getDoubleValue, getInt32Value, getInt64Value, getIsNumber, __ctor__
    -- <summary>
    -- Initializes a new instance of the Int32JsonToken class.
    -- </summary>
    -- <param name="value">The Int32 value.</param>
    __ctor__ = function (this, lexeme, value)
      MongoDBBsonIO.JsonToken.__ctor__(this, 11 --[[JsonTokenType.Int32]], lexeme)
      this._value = value
    end
    getDoubleValue = function (this)
      return this._value
    end
    getInt32Value = function (this)
      return this._value
    end
    getInt64Value = function (this)
      return this._value
    end
    getIsNumber = function (this)
      return true
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.JsonToken
        }
      end,
      _value = 0,
      getDoubleValue = getDoubleValue,
      getInt32Value = getInt32Value,
      getInt64Value = getInt64Value,
      getIsNumber = getIsNumber,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- Represents an Int64 JSON token.
  -- </summary>
  namespace.class("Int64JsonToken", function (namespace)
    local getDoubleValue, getInt32Value, getInt64Value, getIsNumber, __ctor__
    -- <summary>
    -- Initializes a new instance of the Int64JsonToken class.
    -- </summary>
    -- <param name="value">The Int64 value.</param>
    __ctor__ = function (this, lexeme, value)
      MongoDBBsonIO.JsonToken.__ctor__(this, 12 --[[JsonTokenType.Int64]], lexeme)
      this._value = value
    end
    getDoubleValue = function (this)
      return this._value
    end
    getInt32Value = function (this)
      return System.toInt32(this._value)
    end
    getInt64Value = function (this)
      return this._value
    end
    getIsNumber = function (this)
      return true
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.JsonToken
        }
      end,
      _value = 0,
      getDoubleValue = getDoubleValue,
      getInt32Value = getInt32Value,
      getInt64Value = getInt64Value,
      getIsNumber = getIsNumber,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- Represents an ObjectId JSON token.
  -- </summary>
  namespace.class("ObjectIdJsonToken", function (namespace)
    local getObjectIdValue, __ctor__
    -- <summary>
    -- Initializes a new instance of the ObjectIdJsonToken class.
    -- </summary>
    -- <param name="value">The ObjectId value.</param>
    __ctor__ = function (this, lexeme, value)
      this._value = System.default(MongoDBBson.ObjectId)
      MongoDBBsonIO.JsonToken.__ctor__(this, 13 --[[JsonTokenType.ObjectId]], lexeme)
      this._value = value:__clone__()
    end
    getObjectIdValue = function (this)
      return this._value:__clone__()
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.JsonToken
        }
      end,
      getObjectIdValue = getObjectIdValue,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- Represents a regular expression JSON token.
  -- </summary>
  namespace.class("RegularExpressionJsonToken", function (namespace)
    local getRegularExpressionValue, __ctor__
    -- <summary>
    -- Initializes a new instance of the RegularExpressionJsonToken class.
    -- </summary>
    -- <param name="value">The BsonRegularExpression value.</param>
    __ctor__ = function (this, lexeme, value)
      MongoDBBsonIO.JsonToken.__ctor__(this, 14 --[[JsonTokenType.RegularExpression]], lexeme)
      this._value = value
    end
    getRegularExpressionValue = function (this)
      return this._value
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.JsonToken
        }
      end,
      getRegularExpressionValue = getRegularExpressionValue,
      __ctor__ = __ctor__
    }
  end)

  -- <summary>
  -- Represents a String JSON token.
  -- </summary>
  namespace.class("StringJsonToken", function (namespace)
    local getStringValue, __ctor__
    -- <summary>
    -- Initializes a new instance of the StringJsonToken class.
    -- </summary>
    -- <param name="lexeme">The lexeme.</param>
    -- <param name="value">The String value.</param>
    __ctor__ = function (this, type, lexeme, value)
      MongoDBBsonIO.JsonToken.__ctor__(this, type, lexeme)
      this._value = value
    end
    getStringValue = function (this)
      return this._value
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.JsonToken
        }
      end,
      getStringValue = getStringValue,
      __ctor__ = __ctor__
    }
  end)
end)
