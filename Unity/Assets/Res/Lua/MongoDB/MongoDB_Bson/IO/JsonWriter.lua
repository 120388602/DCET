-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local SystemGlobalization = System.Globalization
local SystemRegularExpressions = System.Text.RegularExpressions
local ArrayString = System.Array(System.String)
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a BSON writer to a TextWriter (in JSON format).
  -- </summary>
  namespace.class("JsonWriter", function (namespace)
    local getBaseTextWriter, getPosition, getSettings1, Close, Flush, WriteBinaryData, WriteBoolean, WriteBytes, 
    WriteDateTime, WriteDecimal128, WriteDouble, WriteEndArray, WriteEndDocument, WriteInt32, WriteInt64, WriteJavaScript, 
    WriteJavaScriptWithScope, WriteMaxKey, WriteMinKey, WriteNull, WriteObjectId, WriteRegularExpression, WriteStartArray, WriteStartDocument, 
    WriteString, WriteSymbol, WriteTimestamp, WriteUndefined, Dispose1, EscapedString, GetNextState, GuidToString, 
    NeedsEscaping, WriteNameHelper, WriteQuotedString, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the JsonWriter class.
    -- </summary>
    __ctor1__ = function (this, writer)
      __ctor2__(this, writer, MongoDBBsonIO.JsonWriterSettings.getDefaults())
    end
    -- <summary>
    -- Initializes a new instance of the JsonWriter class.
    -- </summary>
    -- <param name="settings">Optional JsonWriter settings.</param>
    __ctor2__ = function (this, writer, settings)
      MongoDBBsonIO.BsonWriter.__ctor__(this, settings)
      if writer == nil then
        System.throw(System.ArgumentNullException("writer"))
      end

      this._textWriter = writer
      this._context = MongoDBBsonIO.JsonWriterContext(nil, 0 --[[ContextType.TopLevel]], "")
      this:setState(0 --[[BsonWriterState.Initial]])
    end
    getBaseTextWriter = function (this)
      return this._textWriter
    end
    getPosition = function (this)
      return 0
    end
    getSettings1 = function (this)
      return System.cast(MongoDBBsonIO.JsonWriterSettings, this.getSettings())
    end
    -- <summary>
    -- Closes the writer.
    -- </summary>
    Close = function (this)
      -- Close can be called on Disposed objects
      if this:getState() ~= 5 --[[BsonWriterState.Closed]] then
        this:Flush()
        this._context = nil
        this:setState(5 --[[BsonWriterState.Closed]])
      end
    end
    -- <summary>
    -- Flushes any pending data to the output destination.
    -- </summary>
    Flush = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      this._textWriter:Flush()
    end
    -- <summary>
    -- Writes BSON binary data to the writer.
    -- </summary>
    WriteBinaryData = function (this, binaryData)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteBinaryData", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      local subType = binaryData:getSubType()
      local bytes = binaryData:getBytes()
      local guidRepresentation = binaryData:getGuidRepresentation()

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{{ \"$binary\" : \"{0}\", \"$type\" : \"{1}\" }}", System.Convert.ToBase64String(bytes), subType:ToString("x2"))
          break
        else
          repeat
            local extern = subType
            if extern == 3 --[[BsonBinarySubType.UuidLegacy]] or extern == 4 --[[BsonBinarySubType.UuidStandard]] then
              this._textWriter:Write(GuidToString(this, subType, bytes, guidRepresentation))
              break
            else
              this._textWriter:Write("new BinData({0}, \"{1}\")", subType, System.Convert.ToBase64String(bytes))
              break
            end
          until 1
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Boolean to the writer.
    -- </summary>
    WriteBoolean = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteBoolean", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      this._textWriter:Write(value and "true" or "false")

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes BSON binary data to the writer.
    -- </summary>
    WriteBytes = function (this, bytes)
      this:WriteBinaryData(System.new(MongoDBBson.BsonBinaryData, 2, bytes, 0 --[[BsonBinarySubType.Binary]]))
    end
    -- <summary>
    -- Writes a BSON DateTime to the writer.
    -- </summary>
    WriteDateTime = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteDateTime", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{{ \"$date\" : {0} }}", value)
          break
        else
          if value >= MongoDBBson.BsonConstants.getDateTimeMinValueMillisecondsSinceEpoch() and value <= MongoDBBson.BsonConstants.getDateTimeMaxValueMillisecondsSinceEpoch() then
            local utcDateTime = MongoDBBson.BsonUtils.ToDateTimeFromMillisecondsSinceEpoch(value)
            this._textWriter:Write("ISODate(\"{0}\")", utcDateTime:ToString("yyyy-MM-ddTHH:mm:ss.FFFZ"))
          else
            this._textWriter:Write("new Date({0})", value)
          end
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    WriteDecimal128 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteDecimal128" --[[nameof(WriteDecimal128)]], System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 1 --[[JsonOutputMode.Shell]] then
          this._textWriter:Write("NumberDecimal(\"{0}\")", value:ToString())
          break
        else
          this._textWriter:Write("{{ \"$numberDecimal\" : \"{0}\" }}", value:ToString())
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Double to the writer.
    -- </summary>
    WriteDouble = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteDouble", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      -- if string representation looks like an integer add ".0" so that it looks like a double
      local stringRepresentation = MongoDBBsonIO.JsonConvert.ToString5(value)
      if SystemRegularExpressions.Regex.IsMatch(stringRepresentation, [[^[+-]?\d+$]]) then
        stringRepresentation = stringRepresentation .. ".0"
      end

      WriteNameHelper(this, this:getName())
      this._textWriter:Write(stringRepresentation)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the end of a BSON array to the writer.
    -- </summary>
    WriteEndArray = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] then
        this:ThrowInvalidState("WriteEndArray", System.Array(System.Int32)(2 --[[BsonWriterState.Value]]))
      end

      MongoDBBsonIO.BsonWriter.WriteEndArray(this)
      this._textWriter:Write("]")

      this._context = this._context:getParentContext()
      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the end of a BSON document to the writer.
    -- </summary>
    WriteEndDocument = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 1 --[[BsonWriterState.Name]] then
        this:ThrowInvalidState("WriteEndDocument", System.Array(System.Int32)(1 --[[BsonWriterState.Name]]))
      end

      MongoDBBsonIO.BsonWriter.WriteEndDocument(this)
      if getSettings1(this):getIndent() and this._context:getHasElements() then
        this._textWriter:Write(getSettings1(this):getNewLineChars())
        if this._context:getParentContext() ~= nil then
          this._textWriter:Write(this._context:getParentContext():getIndentation())
        end
        this._textWriter:Write("}")
      else
        this._textWriter:Write(" }")
      end

      if this._context:getContextType() == 4 --[[ContextType.ScopeDocument]] then
        this._context = this._context:getParentContext()
        this:WriteEndDocument()
      else
        this._context = this._context:getParentContext()
      end

      if this._context == nil then
        this:setState(4 --[[BsonWriterState.Done]])
      else
        this:setState(GetNextState(this))
      end
    end
    -- <summary>
    -- Writes a BSON Int32 to the writer.
    -- </summary>
    WriteInt32 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteInt32", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      this._textWriter:Write(value)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Int64 to the writer.
    -- </summary>
    WriteInt64 = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteInt64", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write(value)
          break
        else
          if value >= -2147483648 --[[Int32.MinValue]] and value <= 2147483647 --[[Int32.MaxValue]] then
            this._textWriter:Write("NumberLong({0})", value)
          else
            this._textWriter:Write("NumberLong(\"{0}\")", value)
          end
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON JavaScript to the writer.
    -- </summary>
    WriteJavaScript = function (this, code)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteJavaScript", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      this._textWriter:Write("{{ \"$code\" : \"{0}\" }}", EscapedString(this, code))

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON JavaScript to the writer (call WriteStartDocument to start writing the scope).
    -- </summary>
    WriteJavaScriptWithScope = function (this, code)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteJavaScriptWithScope", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      this:WriteStartDocument()
      this:WriteName("$code")
      this:WriteString(code)
      this:WriteName("$scope")

      this:setState(3 --[[BsonWriterState.ScopeDocument]])
    end
    -- <summary>
    -- Writes a BSON MaxKey to the writer.
    -- </summary>
    WriteMaxKey = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteMaxKey", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{ \"$maxKey\" : 1 }")
          break
        else
          this._textWriter:Write("MaxKey")
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON MinKey to the writer.
    -- </summary>
    WriteMinKey = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteMinKey", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{ \"$minKey\" : 1 }")
          break
        else
          this._textWriter:Write("MinKey")
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON null to the writer.
    -- </summary>
    WriteNull = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteNull", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      this._textWriter:Write("null")

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON ObjectId to the writer.
    -- </summary>
    WriteObjectId = function (this, objectId)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteObjectId", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{{ \"$oid\" : \"{0}\" }}", objectId:ToString())
          break
        else
          this._textWriter:Write("ObjectId(\"{0}\")", objectId:ToString())
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON regular expression to the writer.
    -- </summary>
    WriteRegularExpression = function (this, regex)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteRegularExpression", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      local pattern = regex:getPattern()
      local options = regex:getOptions()

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{{ \"$regex\" : \"{0}\", \"$options\" : \"{1}\" }}", EscapedString(this, pattern), EscapedString(this, options))
          break
        else
          local escapedPattern = (pattern == "") and "(?:)" or pattern:Replace("/", [[\/]])
          this._textWriter:Write("/{0}/{1}", escapedPattern, options)
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes the start of a BSON array to the writer.
    -- </summary>
    WriteStartArray = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteStartArray", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      MongoDBBsonIO.BsonWriter.WriteStartArray(this)
      WriteNameHelper(this, this:getName())
      this._textWriter:Write("[")

      this._context = MongoDBBsonIO.JsonWriterContext(this._context, 2 --[[ContextType.Array]], getSettings1(this):getIndentChars())
      this:setState(2 --[[BsonWriterState.Value]])
    end
    -- <summary>
    -- Writes the start of a BSON document to the writer.
    -- </summary>
    WriteStartDocument = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] and this:getState() ~= 3 --[[BsonWriterState.ScopeDocument]] then
        this:ThrowInvalidState("WriteStartDocument", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]], 3 --[[BsonWriterState.ScopeDocument]]))
      end

      MongoDBBsonIO.BsonWriter.WriteStartDocument(this)
      if this:getState() == 2 --[[BsonWriterState.Value]] or this:getState() == 3 --[[BsonWriterState.ScopeDocument]] then
        WriteNameHelper(this, this:getName())
      end
      this._textWriter:Write("{")

      local contextType = (this:getState() == 3 --[[BsonWriterState.ScopeDocument]]) and 4 --[[ContextType.ScopeDocument]] or 1 --[[ContextType.Document]]
      this._context = MongoDBBsonIO.JsonWriterContext(this._context, contextType, getSettings1(this):getIndentChars())
      this:setState(1 --[[BsonWriterState.Name]])
    end
    -- <summary>
    -- Writes a BSON String to the writer.
    -- </summary>
    WriteString = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteString", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      WriteQuotedString(this, value)

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON Symbol to the writer.
    -- </summary>
    WriteSymbol = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteSymbol", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      this._textWriter:Write("{{ \"$symbol\" : \"{0}\" }}", EscapedString(this, value))

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON timestamp to the writer.
    -- </summary>
    WriteTimestamp = function (this, value)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteTimestamp", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      local secondsSinceEpoch = System.toInt32(System.band((System.sr(value, 32)), 0xffffffff))
      local increment = System.toInt32(System.band(value, 0xffffffff))

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{{ \"$timestamp\" : {{ \"t\" : {0}, \"i\" : {1} }} }}", secondsSinceEpoch, increment)
          break
        else
          this._textWriter:Write("Timestamp({0}, {1})", secondsSinceEpoch, increment)
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Writes a BSON undefined to the writer.
    -- </summary>
    WriteUndefined = function (this)
      if this:getDisposed() then
        System.throw(System.ObjectDisposedException("JsonWriter"))
      end
      if this:getState() ~= 2 --[[BsonWriterState.Value]] and this:getState() ~= 0 --[[BsonWriterState.Initial]] then
        this:ThrowInvalidState("WriteUndefined", System.Array(System.Int32)(2 --[[BsonWriterState.Value]], 0 --[[BsonWriterState.Initial]]))
      end

      WriteNameHelper(this, this:getName())
      repeat
        local default = getSettings1(this):getOutputMode()
        if default == 0 --[[JsonOutputMode.Strict]] then
          this._textWriter:Write("{ \"$undefined\" : true }")
          break
        else
          this._textWriter:Write("undefined")
          break
        end
      until 1

      this:setState(GetNextState(this))
    end
    -- <summary>
    -- Disposes of any resources used by the writer.
    -- </summary>
    Dispose1 = function (this, disposing)
      if disposing then
        System.try(function ()
          this:Close()
        end, function (default)
        end)
        -- ignore exceptions
      end
      MongoDBBsonIO.BsonWriter.Dispose1(this, disposing)
    end
    EscapedString = function (this, value)
      if Linq.All(value, function (c)
        return not NeedsEscaping(this, c)
      end) then
        return value
      end

      local sb = System.StringBuilder(#value)

      for _, c in System.each(value) do
        repeat
          local default = c
          if default == 34 --[['"']] then
            sb:Append("\\\"")
            break
          elseif default == 92 --[['\\']] then
            sb:Append("\\\\")
            break
          elseif default == 8 --[['\b']] then
            sb:Append("\\b")
            break
          elseif default == 12 --[['\f']] then
            sb:Append("\\f")
            break
          elseif default == 10 --[['\n']] then
            sb:Append("\\n")
            break
          elseif default == 13 --[['\r']] then
            sb:Append("\\r")
            break
          elseif default == 9 --[['\t']] then
            sb:Append("\\t")
            break
          else
            repeat
              local extern = SystemGlobalization.CharUnicodeInfo.GetUnicodeCategory(c)
              if extern == 0 --[[UnicodeCategory.UppercaseLetter]] or extern == 1 --[[UnicodeCategory.LowercaseLetter]] or extern == 2 --[[UnicodeCategory.TitlecaseLetter]] or extern == 4 --[[UnicodeCategory.OtherLetter]] or extern == 8 --[[UnicodeCategory.DecimalDigitNumber]] or extern == 9 --[[UnicodeCategory.LetterNumber]] or extern == 10 --[[UnicodeCategory.OtherNumber]] or extern == 11 --[[UnicodeCategory.SpaceSeparator]] or extern == 18 --[[UnicodeCategory.ConnectorPunctuation]] or extern == 19 --[[UnicodeCategory.DashPunctuation]] or extern == 20 --[[UnicodeCategory.OpenPunctuation]] or extern == 21 --[[UnicodeCategory.ClosePunctuation]] or extern == 22 --[[UnicodeCategory.InitialQuotePunctuation]] or extern == 23 --[[UnicodeCategory.FinalQuotePunctuation]] or extern == 24 --[[UnicodeCategory.OtherPunctuation]] or extern == 25 --[[UnicodeCategory.MathSymbol]] or extern == 26 --[[UnicodeCategory.CurrencySymbol]] or extern == 27 --[[UnicodeCategory.ModifierSymbol]] or extern == 28 --[[UnicodeCategory.OtherSymbol]] then
                sb:AppendChar(c)
                break
              else
                sb:AppendFormat("\\u{0:x4}", c)
                break
              end
            until 1
            break
          end
        until 1
      end

      return sb:ToString()
    end
    GetNextState = function (this)
      if this._context:getContextType() == 2 --[[ContextType.Array]] or this._context:getContextType() == 0 --[[ContextType.TopLevel]] then
        return 2 --[[BsonWriterState.Value]]
      else
        return 1 --[[BsonWriterState.Name]]
      end
    end
    GuidToString = function (this, subType, bytes, guidRepresentation)
      if #bytes ~= 16 then
        local message = System.String.Format("Length of binary subtype {0} must be 16, not {1}.", subType, #bytes)
        System.throw(System.ArgumentException(message))
      end
      if subType == 3 --[[BsonBinarySubType.UuidLegacy]] and guidRepresentation == 1 --[[GuidRepresentation.Standard]] then
        System.throw(System.ArgumentException("GuidRepresentation for binary subtype UuidLegacy must not be Standard."))
      end
      if subType == 4 --[[BsonBinarySubType.UuidStandard]] and guidRepresentation ~= 1 --[[GuidRepresentation.Standard]] then
        local message = System.String.Format("GuidRepresentation for binary subtype UuidStandard must be Standard, not {0}.", guidRepresentation)
        System.throw(System.ArgumentException(message))
      end

      if guidRepresentation == 0 --[[GuidRepresentation.Unspecified]] then
        local s = MongoDBBson.BsonUtils.ToHexString(bytes)
        local parts = ArrayString(s:Substring(0, 8), s:Substring(8, 4), s:Substring(12, 4), s:Substring(16, 4), s:Substring(20, 12))
        return System.String.Format("HexData({0}, \"{1}\")", subType, System.String.JoinParams("-", parts))
      else
        local uuidConstructorName
        repeat
          local default = guidRepresentation
          if default == 2 --[[GuidRepresentation.CSharpLegacy]] then
            uuidConstructorName = "CSUUID"
            break
          elseif default == 3 --[[GuidRepresentation.JavaLegacy]] then
            uuidConstructorName = "JUUID"
            break
          elseif default == 4 --[[GuidRepresentation.PythonLegacy]] then
            uuidConstructorName = "PYUUID"
            break
          elseif default == 1 --[[GuidRepresentation.Standard]] then
            uuidConstructorName = "UUID"
            break
          else
            System.throw(System.new(MongoDBBson.BsonInternalException, 2, "Unexpected GuidRepresentation"))
          end
        until 1
        local guid = MongoDBBson.GuidConverter.FromBytes(bytes, guidRepresentation)
        return System.String.Format("{0}(\"{1}\")", uuidConstructorName, guid:ToString())
      end
    end
    NeedsEscaping = function (this, c)
      repeat
        local default = c
        if default == 34 --[['"']] or default == 92 --[['\\']] or default == 8 --[['\b']] or default == 12 --[['\f']] or default == 10 --[['\n']] or default == 13 --[['\r']] or default == 9 --[['\t']] then
          return true
        else
          repeat
            local extern = SystemGlobalization.CharUnicodeInfo.GetUnicodeCategory(c)
            if extern == 0 --[[UnicodeCategory.UppercaseLetter]] or extern == 1 --[[UnicodeCategory.LowercaseLetter]] or extern == 2 --[[UnicodeCategory.TitlecaseLetter]] or extern == 4 --[[UnicodeCategory.OtherLetter]] or extern == 8 --[[UnicodeCategory.DecimalDigitNumber]] or extern == 9 --[[UnicodeCategory.LetterNumber]] or extern == 10 --[[UnicodeCategory.OtherNumber]] or extern == 11 --[[UnicodeCategory.SpaceSeparator]] or extern == 18 --[[UnicodeCategory.ConnectorPunctuation]] or extern == 19 --[[UnicodeCategory.DashPunctuation]] or extern == 20 --[[UnicodeCategory.OpenPunctuation]] or extern == 21 --[[UnicodeCategory.ClosePunctuation]] or extern == 22 --[[UnicodeCategory.InitialQuotePunctuation]] or extern == 23 --[[UnicodeCategory.FinalQuotePunctuation]] or extern == 24 --[[UnicodeCategory.OtherPunctuation]] or extern == 25 --[[UnicodeCategory.MathSymbol]] or extern == 26 --[[UnicodeCategory.CurrencySymbol]] or extern == 27 --[[UnicodeCategory.ModifierSymbol]] or extern == 28 --[[UnicodeCategory.OtherSymbol]] then
              return false
            else
              return true
            end
          until 1
        end
      until 1
    end
    WriteNameHelper = function (this, name)
      repeat
        local default = this._context:getContextType()
        if default == 2 --[[ContextType.Array]] then
          if this._context:getHasElements() then
            this._textWriter:Write(", ")
          end
          break
        elseif default == 1 --[[ContextType.Document]] or default == 4 --[[ContextType.ScopeDocument]] then
          if this._context:getHasElements() then
            this._textWriter:Write(",")
          end
          if getSettings1(this):getIndent() then
            this._textWriter:Write(getSettings1(this):getNewLineChars())
            this._textWriter:Write(this._context:getIndentation())
          else
            this._textWriter:Write(" ")
          end
          WriteQuotedString(this, name)
          this._textWriter:Write(" : ")
          break
        elseif default == 0 --[[ContextType.TopLevel]] then
          break
        else
          System.throw(System.new(MongoDBBson.BsonInternalException, 2, "Invalid ContextType."))
        end
      until 1

      this._context:setHasElements(true)
    end
    WriteQuotedString = function (this, value)
      this._textWriter:Write("\"")
      this._textWriter:Write(EscapedString(this, value))
      this._textWriter:Write("\"")
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.BsonWriter
        }
      end,
      getBaseTextWriter = getBaseTextWriter,
      getPosition = getPosition,
      getSettings1 = getSettings1,
      Close = Close,
      Flush = Flush,
      WriteBinaryData = WriteBinaryData,
      WriteBoolean = WriteBoolean,
      WriteBytes = WriteBytes,
      WriteDateTime = WriteDateTime,
      WriteDecimal128 = WriteDecimal128,
      WriteDouble = WriteDouble,
      WriteEndArray = WriteEndArray,
      WriteEndDocument = WriteEndDocument,
      WriteInt32 = WriteInt32,
      WriteInt64 = WriteInt64,
      WriteJavaScript = WriteJavaScript,
      WriteJavaScriptWithScope = WriteJavaScriptWithScope,
      WriteMaxKey = WriteMaxKey,
      WriteMinKey = WriteMinKey,
      WriteNull = WriteNull,
      WriteObjectId = WriteObjectId,
      WriteRegularExpression = WriteRegularExpression,
      WriteStartArray = WriteStartArray,
      WriteStartDocument = WriteStartDocument,
      WriteString = WriteString,
      WriteSymbol = WriteSymbol,
      WriteTimestamp = WriteTimestamp,
      WriteUndefined = WriteUndefined,
      Dispose1 = Dispose1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
