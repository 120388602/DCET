-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local SystemIO = System.IO
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a BSON reader for some external format (see subclasses).
  -- </summary>
  namespace.class("BsonReader", function (namespace)
    local getCurrentBsonType, setCurrentBsonType, getSettings, getState, setState, getCurrentName, setCurrentName, getDisposed, 
    Dispose, GetCurrentBsonType, ReadName1, ReadRawBsonArray, ReadRawBsonDocument, Dispose1, ThrowInvalidContextType, ThrowInvalidState, 
    ThrowObjectDisposedException, VerifyBsonType, __ctor__
    -- <summary>
    -- Initializes a new instance of the BsonReader class.
    -- </summary>
    __ctor__ = function (this, settings)
      if settings == nil then
        System.throw(System.ArgumentNullException("settings"))
      end

      this._settings = settings:FrozenCopy()
      this._state = 0 --[[BsonReaderState.Initial]]
    end
    getCurrentBsonType = function (this)
      return this._currentBsonType
    end
    setCurrentBsonType = function (this, value)
      this._currentBsonType = value
    end
    getSettings = function (this)
      return this._settings
    end
    getState = function (this)
      return this._state
    end
    setState = function (this, value)
      this._state = value
    end
    getCurrentName = function (this)
      return this._currentName
    end
    setCurrentName = function (this, value)
      this._currentName = value
    end
    getDisposed = function (this)
      return this._disposed
    end
    -- <summary>
    -- Disposes of any resources used by the reader.
    -- </summary>
    Dispose = function (this)
      if not this._disposed then
        this:Dispose1(true)
        this._disposed = true
      end
    end
    -- <summary>
    -- Gets the current BsonType (calls ReadBsonType if necessary).
    -- </summary>
    GetCurrentBsonType = function (this)
      if this._state == 0 --[[BsonReaderState.Initial]] or this._state == 4 --[[BsonReaderState.ScopeDocument]] or this._state == 1 --[[BsonReaderState.Type]] then
        this:ReadBsonType()
      end
      if this._state ~= 3 --[[BsonReaderState.Value]] then
        ThrowInvalidState(this, "GetCurrentBsonType", System.Array(System.Int32)(3 --[[BsonReaderState.Value]]))
      end
      return this._currentBsonType
    end
    -- <summary>
    -- Reads the name of an element from the reader.
    -- </summary>
    ReadName1 = function (this)
      return this:ReadName(MongoDBBsonIO.Utf8NameDecoder.getInstance())
    end
    -- <summary>
    -- Reads a raw BSON array.
    -- </summary>
    ReadRawBsonArray = function (this)
      -- overridden in BsonBinaryReader to read the raw bytes from the stream
      -- for all other streams, deserialize the array and reserialize it using a BsonBinaryWriter to get the raw bytes

      local deserializationContext = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(this)
      local array = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonArraySerializer.getInstance(), deserializationContext, MongoDBBson.BsonArray)

      local default, extern = System.using(SystemIO.MemoryStream(), function (memoryStream)
        local default, extern = System.using(System.new(MongoDBBsonIO.BsonBinaryWriter, 2, memoryStream, MongoDBBsonIO.BsonBinaryWriterSettings.getDefaults()), function (bsonWriter)
          local serializationContext = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(bsonWriter)
          bsonWriter:WriteStartDocument()
          local startPosition = memoryStream:getPosition() + 3
          -- just past BsonType, "x" and null byte
          bsonWriter:WriteName("x")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonArraySerializer.getInstance(), serializationContext, array, MongoDBBson.BsonArray)
          local endPosition = memoryStream:getPosition()
          bsonWriter:WriteEndDocument()

          local memoryStreamBuffer
          memoryStreamBuffer = memoryStream:GetBuffer()

          local buffer = System.new(MongoDBBsonIO.ByteArrayBuffer, 2, memoryStreamBuffer, System.toInt32(memoryStream:getLength()), true)
          return true, MongoDBBsonIO.ByteBufferSlice(buffer, System.toInt32(startPosition), System.toInt32(endPosition - startPosition))
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Reads a raw BSON document.
    -- </summary>
    ReadRawBsonDocument = function (this)
      -- overridden in BsonBinaryReader to read the raw bytes from the stream
      -- for all other streams, deserialize the document and use ToBson to get the raw bytes

      local deserializationContext = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(this)
      local document = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonDocumentSerializer.getInstance(), deserializationContext, MongoDBBson.BsonDocument)
      local bytes = MongoDBBson.BsonExtensionMethods.ToBson(document, nil, nil, nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs), MongoDBBson.BsonDocument)
      return MongoDBBsonIO.ByteArrayBuffer(bytes, true)
    end
    -- <summary>
    -- Disposes of any resources used by the reader.
    -- </summary>
    Dispose1 = function (this, disposing)
    end
    -- <summary>
    -- Throws an InvalidOperationException when the method called is not valid for the current ContextType.
    -- </summary>
    -- <param name="actualContextType">The actual ContextType.</param>
    -- <param name="validContextTypes">The valid ContextTypes.</param>
    ThrowInvalidContextType = function (this, methodName, actualContextType, validContextTypes)
      local validContextTypesString = System.String.JoinParams(" or ", Linq.ToArray(Linq.Select(validContextTypes, function (c)
        return c:EnumToString(MongoDBBsonIO.ContextType)
      end, System.String)))
      local message = System.String.Format("{0} can only be called when ContextType is {1}, not when ContextType is {2}.", methodName, validContextTypesString, actualContextType)
      System.throw(System.InvalidOperationException(message))
    end
    -- <summary>
    -- Throws an InvalidOperationException when the method called is not valid for the current state.
    -- </summary>
    -- <param name="validStates">The valid states.</param>
    ThrowInvalidState = function (this, methodName, validStates)
      local validStatesString = System.String.JoinParams(" or ", Linq.ToArray(Linq.Select(validStates, function (s)
        return s:EnumToString(MongoDBBsonIO.BsonReaderState)
      end, System.String)))
      local message = System.String.Format("{0} can only be called when State is {1}, not when State is {2}.", methodName, validStatesString, this._state)
      System.throw(System.InvalidOperationException(message))
    end
    -- <summary>
    -- Throws an ObjectDisposedException.
    -- </summary>
    ThrowObjectDisposedException = function (this)
      System.throw(System.ObjectDisposedException(this:GetType():getName()))
    end
    -- <summary>
    -- Verifies the current state and BsonType of the reader.
    -- </summary>
    -- <param name="requiredBsonType">The required BSON type.</param>
    VerifyBsonType = function (this, methodName, requiredBsonType)
      if this._state == 0 --[[BsonReaderState.Initial]] or this._state == 4 --[[BsonReaderState.ScopeDocument]] or this._state == 1 --[[BsonReaderState.Type]] then
        this:ReadBsonType()
      end
      if this._state == 2 --[[BsonReaderState.Name]] then
        -- ignore name
        this:SkipName()
      end
      if this._state ~= 3 --[[BsonReaderState.Value]] then
        ThrowInvalidState(this, methodName, System.Array(System.Int32)(3 --[[BsonReaderState.Value]]))
      end
      if this._currentBsonType ~= requiredBsonType then
        local message = System.String.Format("{0} can only be called when CurrentBsonType is {1}, not when CurrentBsonType is {2}.", methodName, requiredBsonType, this._currentBsonType)
        System.throw(System.InvalidOperationException(message))
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.IBsonReader
        }
      end,
      _disposed = false,
      _state = 0,
      _currentBsonType = 0,
      getCurrentBsonType = getCurrentBsonType,
      setCurrentBsonType = setCurrentBsonType,
      getSettings = getSettings,
      getState = getState,
      setState = setState,
      getCurrentName = getCurrentName,
      setCurrentName = setCurrentName,
      getDisposed = getDisposed,
      Dispose = Dispose,
      GetCurrentBsonType = GetCurrentBsonType,
      ReadName1 = ReadName1,
      ReadRawBsonArray = ReadRawBsonArray,
      ReadRawBsonDocument = ReadRawBsonDocument,
      Dispose1 = Dispose1,
      ThrowInvalidContextType = ThrowInvalidContextType,
      ThrowInvalidState = ThrowInvalidState,
      ThrowObjectDisposedException = ThrowObjectDisposedException,
      VerifyBsonType = VerifyBsonType,
      __ctor__ = __ctor__
    }
  end)
end)
