-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a Trie-based name decoder that also provides a value.
  -- </summary>
  namespace.class("TrieNameDecoder_1", function (namespace)
    return function (TValue)
      local getFound, getValue, Decode, Inform, __ctor__
      -- <summary>
      -- Initializes a new instance of the <see cref="TrieNameDecoder{TValue}"/> class.
      -- </summary>
      __ctor__ = function (this, trie)
        this._value = System.default(TValue)
        this._trie = trie
      end
      getFound = function (this)
        return this._found
      end
      getValue = function (this)
        return this._value
      end
      -- <summary>
      -- Reads the name.
      -- </summary>
      -- <param name="encoding">The encoding.</param>
      -- <returns>
      -- The name.
      -- </returns>
      Decode = function (this, stream, encoding)
        local node
        local oldPosition = stream:getPosition()
        local default
        default, node = this._trie:TryGetNode1(stream)
        if default then
          if node:getHasValue() then
            this._found = true
            this._value = node:getValue()
            return node:getElementName()
          end

          stream:setPosition(oldPosition)
        end

        return stream:ReadCString(encoding)
      end
      -- <summary>
      -- Informs the decoder of an already decoded name (so the decoder can change state if necessary).
      -- </summary>
      Inform = function (this, name)
        local default
        default, this._value = this._trie:TryGetValue1(name)
        this._found = default
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.IO.INameDecoder
          }
        end,
        _found = false,
        getFound = getFound,
        getValue = getValue,
        Decode = Decode,
        Inform = Inform,
        __ctor__ = __ctor__
      }
    end
  end)
end)
