-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents settings for a BsonBinaryReader.
  -- </summary>
  namespace.class("BsonBinaryReaderSettings", function (namespace)
    local __defaults, getDefaults, setDefaults, getEncoding, setEncoding, getFixOldBinarySubTypeOnInput, setFixOldBinarySubTypeOnInput, getFixOldDateTimeMaxValueOnInput, 
    setFixOldDateTimeMaxValueOnInput, getMaxDocumentSize, setMaxDocumentSize, Clone1, CloneImplementation, class, __ctor__
    -- <summary>
    -- Initializes a new instance of the BsonBinaryReaderSettings class.
    -- </summary>
    __ctor__ = function (this)
      this._encoding = MongoDBBsonIO.Utf8Encodings.getStrict()
      this._maxDocumentSize = MongoDBBson.BsonDefaults.getMaxDocumentSize()
      MongoDBBsonIO.BsonReaderSettings.__ctor__[1](this)
    end
    getDefaults = function ()
      if __defaults == nil then
        __defaults = class()
      end
      return __defaults
    end
    setDefaults = function (value)
      __defaults = value
    end
    getEncoding = function (this)
      return this._encoding
    end
    setEncoding = function (this, value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end
      if this:getIsFrozen() then
        System.throw(System.InvalidOperationException("BsonBinaryReaderSettings is frozen."))
      end
      this._encoding = value
    end
    getFixOldBinarySubTypeOnInput = function (this)
      return this._fixOldBinarySubTypeOnInput
    end
    setFixOldBinarySubTypeOnInput = function (this, value)
      if this:getIsFrozen() then
        System.throw(System.InvalidOperationException("BsonBinaryReaderSettings is frozen."))
      end
      this._fixOldBinarySubTypeOnInput = value
    end
    getFixOldDateTimeMaxValueOnInput = function (this)
      return this._fixOldDateTimeMaxValueOnInput
    end
    setFixOldDateTimeMaxValueOnInput = function (this, value)
      if this:getIsFrozen() then
        System.throw(System.InvalidOperationException("BsonBinaryReaderSettings is frozen."))
      end
      this._fixOldDateTimeMaxValueOnInput = value
    end
    getMaxDocumentSize = function (this)
      return this._maxDocumentSize
    end
    setMaxDocumentSize = function (this, value)
      if this:getIsFrozen() then
        System.throw(System.InvalidOperationException("BsonBinaryReaderSettings is frozen."))
      end
      this._maxDocumentSize = value
    end
    -- <summary>
    -- Creates a clone of the settings.
    -- </summary>
    Clone1 = function (this)
      return System.cast(class, this:CloneImplementation())
    end
    -- <summary>
    -- Creates a clone of the settings.
    -- </summary>
    CloneImplementation = function (this)
      local default = class()
      setEncoding(default, this._encoding)
      setFixOldBinarySubTypeOnInput(default, this._fixOldBinarySubTypeOnInput)
      setFixOldDateTimeMaxValueOnInput(default, this._fixOldDateTimeMaxValueOnInput)
      default:setGuidRepresentation(this:getGuidRepresentation())
      setMaxDocumentSize(default, this._maxDocumentSize)
      local clone = default
      return clone
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.BsonReaderSettings
        }
      end,
      _fixOldBinarySubTypeOnInput = true,
      _fixOldDateTimeMaxValueOnInput = true,
      getDefaults = getDefaults,
      setDefaults = setDefaults,
      getEncoding = getEncoding,
      setEncoding = setEncoding,
      getFixOldBinarySubTypeOnInput = getFixOldBinarySubTypeOnInput,
      setFixOldBinarySubTypeOnInput = setFixOldBinarySubTypeOnInput,
      getFixOldDateTimeMaxValueOnInput = getFixOldDateTimeMaxValueOnInput,
      setFixOldDateTimeMaxValueOnInput = setFixOldDateTimeMaxValueOnInput,
      getMaxDocumentSize = getMaxDocumentSize,
      setMaxDocumentSize = setMaxDocumentSize,
      Clone1 = Clone1,
      CloneImplementation = CloneImplementation,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "__defaults", 0x9, class },
            { "_encoding", 0x1, System.Text.UTF8Encoding },
            { "_fixOldBinarySubTypeOnInput", 0x1, System.Boolean },
            { "_fixOldDateTimeMaxValueOnInput", 0x1, System.Boolean },
            { "_maxDocumentSize", 0x1, System.Int32 }
          },
          properties = {
            { "Defaults", 0x10E, class, getDefaults, setDefaults },
            { "Encoding", 0x106, System.Text.UTF8Encoding, getEncoding, setEncoding },
            { "FixOldBinarySubTypeOnInput", 0x106, System.Boolean, getFixOldBinarySubTypeOnInput, setFixOldBinarySubTypeOnInput },
            { "FixOldDateTimeMaxValueOnInput", 0x106, System.Boolean, getFixOldDateTimeMaxValueOnInput, setFixOldDateTimeMaxValueOnInput },
            { "MaxDocumentSize", 0x106, System.Int32, getMaxDocumentSize, setMaxDocumentSize }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
