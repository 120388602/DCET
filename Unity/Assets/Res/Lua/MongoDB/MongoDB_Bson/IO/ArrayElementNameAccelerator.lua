-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ArrayByte = System.Array(System.Byte)
local ArrayArrayByte = System.Array(ArrayByte)
local MongoDBBsonIO
System.import(function (out)
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a fast converter from integer indexes to UTF8 BSON array element names.
  -- </summary>
  namespace.interface("IArrayElementNameAccelerator", function ()
    return {}
  end)

  -- <summary>
  -- Represents a fast converter from integer indexes to UTF8 BSON array element names.
  -- </summary>
  namespace.class("ArrayElementNameAccelerator", function (namespace)
    local __default, getDefault, setDefault, CreateElementNameBytes, GetElementNameBytes, class, static, __ctor__
    static = function (this)
      __default = class(1000)
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="ArrayElementNameAccelerator"/> class.
    -- </summary>
    __ctor__ = function (this, numberOfCachedElementNames)
      this._cachedElementNames = ArrayArrayByte:new(numberOfCachedElementNames)
      for index = 0, numberOfCachedElementNames - 1 do
        this._cachedElementNames:set(index, CreateElementNameBytes(this, index))
      end
    end
    getDefault = function ()
      return __default
    end
    setDefault = function (value)
      __default = value
    end
    CreateElementNameBytes = function (this, index)
      -- unrolled loop optimized for index values >= 1000 and < 10,000


      local n = index
      local a = System.toByte(48 --[[asciiZero]] + System.mod(n, 10))
      n = System.div(n, 10)
      local b = System.toByte(48 --[[asciiZero]] + System.mod(n, 10))
      n = System.div(n, 10)
      local c = System.toByte(48 --[[asciiZero]] + System.mod(n, 10))
      n = System.div(n, 10)
      local d = System.toByte(48 --[[asciiZero]] + System.mod(n, 10))
      n = System.div(n, 10)

      if n == 0 then
        if d ~= 48 --[[(byte)asciiZero]] then
          return ArrayByte(d, c, b, a)
        end
        if c ~= 48 --[[(byte)asciiZero]] then
          return ArrayByte(c, b, a)
        end
        if b ~= 48 --[[(byte)asciiZero]] then
          return ArrayByte(b, a)
        end
        return ArrayByte(a)
      end

      local e = System.toByte(48 --[[asciiZero]] + System.mod(n, 10))
      n = System.div(n, 10)
      if n == 0 then
        return ArrayByte(e, d, c, b, a)
      end

      -- really large indexes should be extremely rare and not worth optimizing further
      return MongoDBBsonIO.Utf8Encodings.getStrict():GetBytes(index:ToString())
    end
    -- <summary>
    -- Gets the element name bytes.
    -- </summary>
    -- <returns>
    -- The element name bytes.
    -- </returns>
    GetElementNameBytes = function (this, index)
      if index < 0 then
        System.throw(System.ArgumentOutOfRangeException("index", "index is negative."))
      end

      if index < #this._cachedElementNames then
        return this._cachedElementNames:get(index)
      end

      return CreateElementNameBytes(this, index)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.IArrayElementNameAccelerator
        }
      end,
      getDefault = getDefault,
      setDefault = setDefault,
      GetElementNameBytes = GetElementNameBytes,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
