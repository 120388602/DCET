-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Contains extension methods for IBsonWriter.
  -- </summary>
  namespace.class("IBsonWriterExtensions", function (namespace)
    local WriteBinaryData, WriteBoolean, WriteBytes, WriteDateTime, WriteDecimal128, WriteDouble, WriteInt32, WriteInt64, 
    WriteJavaScript, WriteJavaScriptWithScope, WriteMaxKey, WriteMinKey, WriteNull, WriteObjectId, WriteRawBsonArray, WriteRawBsonDocument, 
    WriteRegularExpression, WriteStartArray, WriteStartDocument, WriteString, WriteSymbol, WriteTimestamp, WriteUndefined
    -- <summary>
    -- Writes a BSON binary data element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="binaryData">The binary data.</param>
    WriteBinaryData = function (writer, name, binaryData)
      writer:WriteName(name)
      writer:WriteBinaryData(binaryData)
    end
    -- <summary>
    -- Writes a BSON Boolean element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The Boolean value.</param>
    WriteBoolean = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteBoolean(value)
    end
    -- <summary>
    -- Writes a BSON binary data element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="bytes">The bytes.</param>
    WriteBytes = function (writer, name, bytes)
      writer:WriteName(name)
      writer:WriteBytes(bytes)
    end
    -- <summary>
    -- Writes a BSON DateTime element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The number of milliseconds since the Unix epoch.</param>
    WriteDateTime = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteDateTime(value)
    end
    -- <summary>
    -- Writes a BSON Decimal128 element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The <see cref="Decimal128"/> value.</param>
    WriteDecimal128 = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteDecimal128(value:__clone__())
    end
    -- <summary>
    -- Writes a BSON Double element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The Double value.</param>
    WriteDouble = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteDouble(value)
    end
    -- <summary>
    -- Writes a BSON Int32 element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The Int32 value.</param>
    WriteInt32 = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteInt32(value)
    end
    -- <summary>
    -- Writes a BSON Int64 element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The Int64 value.</param>
    WriteInt64 = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteInt64(value)
    end
    -- <summary>
    -- Writes a BSON JavaScript element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="code">The JavaScript code.</param>
    WriteJavaScript = function (writer, name, code)
      writer:WriteName(name)
      writer:WriteJavaScript(code)
    end
    -- <summary>
    -- Writes a BSON JavaScript element to the writer (call WriteStartDocument to start writing the scope).
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="code">The JavaScript code.</param>
    WriteJavaScriptWithScope = function (writer, name, code)
      writer:WriteName(name)
      writer:WriteJavaScriptWithScope(code)
    end
    -- <summary>
    -- Writes a BSON MaxKey element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    WriteMaxKey = function (writer, name)
      writer:WriteName(name)
      writer:WriteMaxKey()
    end
    -- <summary>
    -- Writes a BSON MinKey element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    WriteMinKey = function (writer, name)
      writer:WriteName(name)
      writer:WriteMinKey()
    end
    -- <summary>
    -- Writes a BSON null element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    WriteNull = function (writer, name)
      writer:WriteName(name)
      writer:WriteNull()
    end
    -- <summary>
    -- Writes a BSON ObjectId element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="objectId">The ObjectId.</param>
    WriteObjectId = function (writer, name, objectId)
      writer:WriteName(name)
      writer:WriteObjectId(objectId:__clone__())
    end
    -- <summary>
    -- Writes a raw BSON array.
    -- </summary>
    -- <param name="name">The name.</param>
    -- <param name="slice">The byte buffer containing the raw BSON array.</param>
    WriteRawBsonArray = function (writer, name, slice)
      writer:WriteName(name)
      writer:WriteRawBsonArray(slice)
    end
    -- <summary>
    -- Writes a raw BSON document.
    -- </summary>
    -- <param name="name">The name.</param>
    -- <param name="slice">The byte buffer containing the raw BSON document.</param>
    WriteRawBsonDocument = function (writer, name, slice)
      writer:WriteName(name)
      writer:WriteRawBsonDocument(slice)
    end
    -- <summary>
    -- Writes a BSON regular expression element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="regex">A BsonRegularExpression.</param>
    WriteRegularExpression = function (writer, name, regex)
      writer:WriteName(name)
      writer:WriteRegularExpression(regex)
    end
    -- <summary>
    -- Writes the start of a BSON array element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    WriteStartArray = function (writer, name)
      writer:WriteName(name)
      writer:WriteStartArray()
    end
    -- <summary>
    -- Writes the start of a BSON document element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    WriteStartDocument = function (writer, name)
      writer:WriteName(name)
      writer:WriteStartDocument()
    end
    -- <summary>
    -- Writes a BSON String element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The String value.</param>
    WriteString = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteString(value)
    end
    -- <summary>
    -- Writes a BSON Symbol element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The symbol.</param>
    WriteSymbol = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteSymbol(value)
    end
    -- <summary>
    -- Writes a BSON timestamp element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    -- <param name="value">The combined timestamp/increment value.</param>
    WriteTimestamp = function (writer, name, value)
      writer:WriteName(name)
      writer:WriteTimestamp(value)
    end
    -- <summary>
    -- Writes a BSON undefined element to the writer.
    -- </summary>
    -- <param name="name">The name of the element.</param>
    WriteUndefined = function (writer, name)
      writer:WriteName(name)
      writer:WriteUndefined()
    end
    return {
      WriteBinaryData = WriteBinaryData,
      WriteBoolean = WriteBoolean,
      WriteBytes = WriteBytes,
      WriteDateTime = WriteDateTime,
      WriteDecimal128 = WriteDecimal128,
      WriteDouble = WriteDouble,
      WriteInt32 = WriteInt32,
      WriteInt64 = WriteInt64,
      WriteJavaScript = WriteJavaScript,
      WriteJavaScriptWithScope = WriteJavaScriptWithScope,
      WriteMaxKey = WriteMaxKey,
      WriteMinKey = WriteMinKey,
      WriteNull = WriteNull,
      WriteObjectId = WriteObjectId,
      WriteRawBsonArray = WriteRawBsonArray,
      WriteRawBsonDocument = WriteRawBsonDocument,
      WriteRegularExpression = WriteRegularExpression,
      WriteStartArray = WriteStartArray,
      WriteStartDocument = WriteStartDocument,
      WriteString = WriteString,
      WriteSymbol = WriteSymbol,
      WriteTimestamp = WriteTimestamp,
      WriteUndefined = WriteUndefined
    }
  end)
end)
