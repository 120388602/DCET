-- Generated by CSharp.lua Compiler
--[[ Copyright 2017-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- An abstract base class for an IBsonWriter that wraps another IBsonWriter.
  -- </summary>
  namespace.class("WrappingBsonWriter", function (namespace)
    local getPosition, getSerializationDepth, getSettings, getState, getWrapped, Close, Dispose, Flush, 
    PopElementNameValidator, PopSettings, PushElementNameValidator, PushSettings, WriteBinaryData, WriteBoolean, WriteBytes, WriteDateTime, 
    WriteDecimal128, WriteDouble, WriteEndArray, WriteEndDocument, WriteInt32, WriteInt64, WriteJavaScript, WriteJavaScriptWithScope, 
    WriteMaxKey, WriteMinKey, WriteName, WriteNull, WriteObjectId, WriteRawBsonArray, WriteRawBsonDocument, WriteRegularExpression, 
    WriteStartArray, WriteStartDocument, WriteString, WriteSymbol, WriteTimestamp, WriteUndefined, Dispose1, ThrowIfDisposed, 
    __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="WrappingBsonWriter"/> class.
    -- </summary>
    __ctor__ = function (this, wrapped)
      if wrapped == nil then
        System.throw(System.ArgumentNullException("wrapped" --[[nameof(wrapped)]]))
      end
      this._wrapped = wrapped
    end
    getPosition = function (this)
      ThrowIfDisposed(this)
      return this._wrapped:getPosition()
    end
    getSerializationDepth = function (this)
      ThrowIfDisposed(this)
      return this._wrapped:getSerializationDepth()
    end
    getSettings = function (this)
      ThrowIfDisposed(this)
      return this._wrapped:getSettings()
    end
    getState = function (this)
      ThrowIfDisposed(this)
      return this._wrapped:getState()
    end
    getWrapped = function (this)
      ThrowIfDisposed(this)
      return this._wrapped
    end
    Close = function (this)
      -- let subclass decide whether to throw or not if Dispose has been called
      this._wrapped:Close()
    end
    Dispose = function (this)
      this:Dispose1(true)
      System.GC.SuppressFinalize(this)
    end
    Flush = function (this)
      ThrowIfDisposed(this)
      this._wrapped:Flush()
    end
    PopElementNameValidator = function (this)
      ThrowIfDisposed(this)
      this._wrapped:PopElementNameValidator()
    end
    PopSettings = function (this)
      ThrowIfDisposed(this)
      this._wrapped:PopSettings()
    end
    PushElementNameValidator = function (this, validator)
      ThrowIfDisposed(this)
      this._wrapped:PushElementNameValidator(validator)
    end
    PushSettings = function (this, configurator)
      ThrowIfDisposed(this)
      this._wrapped:PushSettings(configurator)
    end
    WriteBinaryData = function (this, binaryData)
      ThrowIfDisposed(this)
      this._wrapped:WriteBinaryData(binaryData)
    end
    WriteBoolean = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteBoolean(value)
    end
    WriteBytes = function (this, bytes)
      ThrowIfDisposed(this)
      this._wrapped:WriteBytes(bytes)
    end
    WriteDateTime = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteDateTime(value)
    end
    WriteDecimal128 = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteDecimal128(value:__clone__())
    end
    WriteDouble = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteDouble(value)
    end
    WriteEndArray = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteEndArray()
    end
    WriteEndDocument = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteEndDocument()
    end
    WriteInt32 = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteInt32(value)
    end
    WriteInt64 = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteInt64(value)
    end
    WriteJavaScript = function (this, code)
      ThrowIfDisposed(this)
      this._wrapped:WriteJavaScript(code)
    end
    WriteJavaScriptWithScope = function (this, code)
      ThrowIfDisposed(this)
      this._wrapped:WriteJavaScriptWithScope(code)
    end
    WriteMaxKey = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteMaxKey()
    end
    WriteMinKey = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteMinKey()
    end
    WriteName = function (this, name)
      ThrowIfDisposed(this)
      this._wrapped:WriteName(name)
    end
    WriteNull = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteNull()
    end
    WriteObjectId = function (this, objectId)
      ThrowIfDisposed(this)
      this._wrapped:WriteObjectId(objectId:__clone__())
    end
    WriteRawBsonArray = function (this, slice)
      ThrowIfDisposed(this)
      this._wrapped:WriteRawBsonArray(slice)
    end
    WriteRawBsonDocument = function (this, slice)
      ThrowIfDisposed(this)
      this._wrapped:WriteRawBsonDocument(slice)
    end
    WriteRegularExpression = function (this, regex)
      ThrowIfDisposed(this)
      this._wrapped:WriteRegularExpression(regex)
    end
    WriteStartArray = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteStartArray()
    end
    WriteStartDocument = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteStartDocument()
    end
    WriteString = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteString(value)
    end
    WriteSymbol = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteSymbol(value)
    end
    WriteTimestamp = function (this, value)
      ThrowIfDisposed(this)
      this._wrapped:WriteTimestamp(value)
    end
    WriteUndefined = function (this)
      ThrowIfDisposed(this)
      this._wrapped:WriteUndefined()
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      if not this._disposed then
        if disposing then
          this._wrapped:Dispose()
        end
        this._disposed = true
      end
    end
    -- <summary>
    -- Throws if disposed.
    -- </summary>
    ThrowIfDisposed = function (this)
      if this._disposed then
        System.throw(System.ObjectDisposedException(this:GetType():getFullName()))
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.IO.IBsonWriter
        }
      end,
      _disposed = false,
      getPosition = getPosition,
      getSerializationDepth = getSerializationDepth,
      getSettings = getSettings,
      getState = getState,
      getWrapped = getWrapped,
      Close = Close,
      Dispose = Dispose,
      Flush = Flush,
      PopElementNameValidator = PopElementNameValidator,
      PopSettings = PopSettings,
      PushElementNameValidator = PushElementNameValidator,
      PushSettings = PushSettings,
      WriteBinaryData = WriteBinaryData,
      WriteBoolean = WriteBoolean,
      WriteBytes = WriteBytes,
      WriteDateTime = WriteDateTime,
      WriteDecimal128 = WriteDecimal128,
      WriteDouble = WriteDouble,
      WriteEndArray = WriteEndArray,
      WriteEndDocument = WriteEndDocument,
      WriteInt32 = WriteInt32,
      WriteInt64 = WriteInt64,
      WriteJavaScript = WriteJavaScript,
      WriteJavaScriptWithScope = WriteJavaScriptWithScope,
      WriteMaxKey = WriteMaxKey,
      WriteMinKey = WriteMinKey,
      WriteName = WriteName,
      WriteNull = WriteNull,
      WriteObjectId = WriteObjectId,
      WriteRawBsonArray = WriteRawBsonArray,
      WriteRawBsonDocument = WriteRawBsonDocument,
      WriteRegularExpression = WriteRegularExpression,
      WriteStartArray = WriteStartArray,
      WriteStartDocument = WriteStartDocument,
      WriteString = WriteString,
      WriteSymbol = WriteSymbol,
      WriteTimestamp = WriteTimestamp,
      WriteUndefined = WriteUndefined,
      Dispose1 = Dispose1,
      ThrowIfDisposed = ThrowIfDisposed,
      __ctor__ = __ctor__
    }
  end)
end)
