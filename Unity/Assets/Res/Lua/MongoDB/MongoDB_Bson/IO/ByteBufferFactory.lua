-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBsonIO
local ListIBsonChunk
System.import(function (out)
  MongoDBBsonIO = MongoDB.Bson.IO
  ListIBsonChunk = System.List(MongoDBBsonIO.IBsonChunk)
end)
System.namespace("MongoDB.Bson.IO", function (namespace)
  -- <summary>
  -- Represents a factory for IBsonBuffers.
  -- </summary>
  namespace.class("ByteBufferFactory", function (namespace)
    local Create
    -- <summary>
    -- Creates a buffer of the specified length. Depending on the length, either a SingleChunkBuffer or a MultiChunkBuffer will be created.
    -- </summary>
    -- <param name="minimumCapacity">The minimum capacity.</param>
    -- <returns>A buffer with at least the minimum capacity.</returns>
    Create = function (chunkSource, minimumCapacity)
      if chunkSource == nil then
        System.throw(System.ArgumentNullException("chunkSource"))
      end
      if minimumCapacity <= 0 then
        System.throw(System.ArgumentOutOfRangeException("minimumCapacity"))
      end

      local capacity = 0
      local chunks = ListIBsonChunk()
      while capacity < minimumCapacity do
        local chunk = chunkSource:GetChunk(minimumCapacity - capacity)
        chunks:Add(chunk)
        capacity = capacity + chunk:getBytes():getCount()
      end

      if #chunks == 1 then
        local chunk = chunks:get(0)

        local byteArrayChunk
        byteArrayChunk = System.as(chunk, MongoDBBsonIO.ByteArrayChunk)
        if byteArrayChunk ~= nil then
          local segment = byteArrayChunk:getBytes()
          if segment:getOffset() == 0 then
            return System.new(MongoDBBsonIO.ByteArrayBuffer, 2, segment:getArray(), segment:getCount(), false)
          end
        end

        return MongoDBBsonIO.SingleChunkBuffer(chunk, 0, false)
      else
        return System.new(MongoDBBsonIO.MultiChunkBuffer, 2, chunks, 0, false)
      end
    end
    return {
      Create = Create
    }
  end)
end)
