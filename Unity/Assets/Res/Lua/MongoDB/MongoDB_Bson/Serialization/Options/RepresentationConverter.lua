-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization.Options", function (namespace)
  -- <summary>
  -- Represents the external representation of a field or property.
  -- </summary>
  namespace.class("RepresentationConverter", function (namespace)
    local getAllowOverflow, getAllowTruncation, ToDecimal, ToDecimal1, ToDecimal2, ToDecimal3, ToDecimal128, ToDecimal1281, 
    ToDecimal1282, ToDecimal1283, ToDecimal1284, ToDouble, ToDouble1, ToDouble2, ToDouble3, ToDouble4, 
    ToDouble5, ToDouble6, ToDouble7, ToDouble8, ToDouble9, ToInt16, ToInt161, ToInt162, 
    ToInt163, ToInt32, ToInt321, ToInt322, ToInt323, ToInt324, ToInt325, ToInt326, 
    ToInt327, ToInt328, ToInt329, ToInt64, ToInt641, ToInt642, ToInt643, ToInt644, 
    ToInt645, ToInt646, ToInt647, ToInt648, ToInt649, ToSingle, ToSingle1, ToSingle2, 
    ToSingle3, ToUInt16, ToUInt161, ToUInt162, ToUInt163, ToUInt32, ToUInt321, ToUInt322, 
    ToUInt323, ToUInt64, ToUInt641, ToUInt642, ToUInt643, __ctor__
    -- <summary>
    -- Initializes a new instance of the RepresentationConverter class.
    -- </summary>
    -- <param name="allowTruncation">Whether to allow truncation.</param>
    __ctor__ = function (this, allowOverflow, allowTruncation)
      this._allowOverflow = allowOverflow
      this._allowTruncation = allowTruncation
    end
    getAllowOverflow = function (this)
      return this._allowOverflow
    end
    getAllowTruncation = function (this)
      return this._allowTruncation
    end
    -- <summary>
    -- Converts a Decimal128 to a Decimal.
    -- </summary>
    -- <returns>A Decimal.</returns>
    ToDecimal = function (this, value)
      if MongoDBBson.Decimal128.op_Equality(value, MongoDBBson.Decimal128.getMaxValue()) then
        return 79228162514264337593543950335 --[[Decimal.MaxValue]]
      elseif MongoDBBson.Decimal128.op_Equality(value, MongoDBBson.Decimal128.getMinValue()) then
        return -79228162514264337593543950335 --[[Decimal.MinValue]]
      elseif MongoDBBson.Decimal128.IsInfinity(value:__clone__()) or MongoDBBson.Decimal128.IsNaN(value:__clone__()) then
        System.throw(System.OverflowException())
      end

      local decimalValue
      if this._allowOverflow then
        System.try(function ()
          decimalValue = MongoDBBson.Decimal128.op_Explicit2(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            decimalValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and -79228162514264337593543950335 --[[Decimal.MinValue]] or 79228162514264337593543950335 --[[Decimal.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        decimalValue = MongoDBBson.Decimal128.op_Explicit2(value)
      end

      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Implicit1(decimalValue)) then
        System.throw(MongoDBBson.TruncationException())
      end

      return decimalValue
    end
    -- <summary>
    -- Converts a Double to a Decimal.
    -- </summary>
    -- <returns>A Decimal.</returns>
    ToDecimal1 = function (this, value)
      if value == -1.7976931348623157E+308 --[[Double.MinValue]] then
        return -79228162514264337593543950335 --[[Decimal.MinValue]]
      elseif value == 1.7976931348623157E+308 --[[Double.MaxValue]] then
        return 79228162514264337593543950335 --[[Decimal.MaxValue]]
      end

      local decimalValue = System.cast(System.Double, value)
      if value < -7.9228162514264338E+28 --[[(double)decimal.MinValue]] or value > 7.9228162514264338E+28 --[[(double)decimal.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= System.cast(System.Double, decimalValue) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return decimalValue
    end
    -- <summary>
    -- Converts an Int32 to a Decimal.
    -- </summary>
    -- <returns>A Decimal.</returns>
    ToDecimal2 = function (this, value)
      return System.cast(System.Double, value)
    end
    -- <summary>
    -- Converts an Int64 to a Decimal.
    -- </summary>
    -- <returns>A Decimal.</returns>
    ToDecimal3 = function (this, value)
      return System.cast(System.Double, value)
    end
    -- <summary>
    -- Converts a decimal to a Decimal128.
    -- </summary>
    -- <returns>A Decimal128.</returns>
    ToDecimal128 = function (this, value)
      if value == 79228162514264337593543950335 --[[Decimal.MaxValue]] then
        return MongoDBBson.Decimal128.getMaxValue()
      elseif value == -79228162514264337593543950335 --[[Decimal.MinValue]] then
        return MongoDBBson.Decimal128.getMinValue()
      end

      -- conversion from decimal to Decimal128 is lossless so need to check for overflow or truncation
      return MongoDBBson.Decimal128.op_Implicit1(value)
    end
    -- <summary>
    -- Converts a Double to a Decimal128.
    -- </summary>
    -- <returns>A Decimal128.</returns>
    ToDecimal1281 = function (this, value)
      if value == 1.7976931348623157E+308 --[[Double.MaxValue]] then
        return MongoDBBson.Decimal128.getMaxValue()
      elseif value == -1.7976931348623157E+308 --[[Double.MinValue]] then
        return MongoDBBson.Decimal128.getMinValue()
      elseif System.Double.IsPositiveInfinity(value) then
        return MongoDBBson.Decimal128.getPositiveInfinity()
      elseif System.Double.IsNegativeInfinity(value) then
        return MongoDBBson.Decimal128.getNegativeInfinity()
      elseif System.Double.IsNaN(value) then
        return MongoDBBson.Decimal128.getQNaN()
      end

      local decimal128Value = MongoDBBson.Decimal128.op_Explicit3(value)
      if not this._allowTruncation and value ~= MongoDBBson.Decimal128.op_Explicit5(decimal128Value) then
        System.throw(MongoDBBson.TruncationException())
      end
      return decimal128Value:__clone__()
    end
    -- <summary>
    -- Converts an Int32 to a Decimal128.
    -- </summary>
    -- <returns>A Decimal128.</returns>
    ToDecimal1282 = function (this, value)
      return MongoDBBson.Decimal128.op_Implicit2(value)
    end
    -- <summary>
    -- Converts an Int64 to a Decimal128.
    -- </summary>
    -- <returns>A Decimal128.</returns>
    ToDecimal1283 = function (this, value)
      return MongoDBBson.Decimal128.op_Implicit3(value)
    end
    -- <summary>
    -- Converts a UInt64 to a Decimal128.
    -- </summary>
    -- <returns>A Decimal128.</returns>
    ToDecimal1284 = function (this, value)
      return MongoDBBson.Decimal128.op_Implicit8(value)
    end
    -- <summary>
    -- Converts a Decimal to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble = function (this, value)
      if value == -79228162514264337593543950335 --[[Decimal.MinValue]] then
        return -1.7976931348623157E+308 --[[Double.MinValue]]
      elseif value == 79228162514264337593543950335 --[[Decimal.MaxValue]] then
        return 1.7976931348623157E+308 --[[Double.MaxValue]]
      end

      local doubleValue = System.cast(System.Double, value)
      if value ~= System.cast(System.Double, doubleValue) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return doubleValue
    end
    -- <summary>
    -- Converts a Decimal128 to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble1 = function (this, value)
      if MongoDBBson.Decimal128.op_Equality(value, MongoDBBson.Decimal128.getMaxValue()) then
        return 1.7976931348623157E+308 --[[Double.MaxValue]]
      elseif MongoDBBson.Decimal128.op_Equality(value, MongoDBBson.Decimal128.getMinValue()) then
        return -1.7976931348623157E+308 --[[Double.MinValue]]
      elseif MongoDBBson.Decimal128.IsPositiveInfinity(value:__clone__()) then
        return System.Double.PositiveInfinity
      elseif MongoDBBson.Decimal128.IsNegativeInfinity(value:__clone__()) then
        return System.Double.NegativeInfinity
      elseif MongoDBBson.Decimal128.IsNaN(value:__clone__()) then
        return System.Double.NaN
      end

      local doubleValue
      if this._allowOverflow then
        System.try(function ()
          doubleValue = MongoDBBson.Decimal128.op_Explicit5(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            doubleValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and -1.7976931348623157E+308 --[[Double.MinValue]] or 1.7976931348623157E+308 --[[Double.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        doubleValue = MongoDBBson.Decimal128.op_Explicit5(value)
      end

      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Explicit3(doubleValue)) then
        System.throw(MongoDBBson.TruncationException())
      end

      return doubleValue
    end
    -- <summary>
    -- Converts a Double to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble2 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a Single to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble3 = function (this, value)
      if value == -3.40282347E+38 --[[Single.MinValue]] then
        return -1.7976931348623157E+308 --[[Double.MinValue]]
      elseif value == 3.40282347E+38 --[[Single.MaxValue]] then
        return 1.7976931348623157E+308 --[[Double.MaxValue]]
      elseif System.Single.IsNegativeInfinity(value) then
        return System.Double.NegativeInfinity
      elseif System.Single.IsPositiveInfinity(value) then
        return System.Double.PositiveInfinity
      elseif System.Single.IsNaN(value) then
        return System.Double.NaN
      end
      return value
    end
    -- <summary>
    -- Converts an Int32 to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble4 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts an Int64 to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble5 = function (this, value)
      local doubleValue = value
      if value ~= System.ToInt64(doubleValue) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return doubleValue
    end
    -- <summary>
    -- Converts an Int16 to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble6 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a UInt32 to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble7 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a UInt64 to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble8 = function (this, value)
      local doubleValue = value
      if value ~= System.ToUInt64(doubleValue) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return doubleValue
    end
    -- <summary>
    -- Converts a UInt16 to a Double.
    -- </summary>
    -- <returns>A Double.</returns>
    ToDouble9 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a Decimal128 to an Int16.
    -- </summary>
    -- <returns>An Int16.</returns>
    ToInt16 = function (this, value)
      local shortValue
      if this._allowOverflow then
        System.try(function ()
          shortValue = MongoDBBson.Decimal128.op_Explicit10(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            shortValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and -32768 --[[Int16.MinValue]] or 32767 --[[Int16.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        shortValue = MongoDBBson.Decimal128.op_Explicit10(value)
      end

      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Implicit5(shortValue)) then
        System.throw(MongoDBBson.TruncationException())
      end

      return shortValue
    end
    -- <summary>
    -- Converts a Double to an Int16.
    -- </summary>
    -- <returns>An Int16.</returns>
    ToInt161 = function (this, value)
      local int16Value = System.ToInt16(value)
      if value < -32768 --[[Int16.MinValue]] or value > 32767 --[[Int16.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= int16Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return int16Value
    end
    -- <summary>
    -- Converts an Int32 to an Int16.
    -- </summary>
    -- <returns>An Int16.</returns>
    ToInt162 = function (this, value)
      if value < -32768 --[[Int16.MinValue]] or value > 32767 --[[Int16.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toInt16(value)
    end
    -- <summary>
    -- Converts an Int64 to an Int16.
    -- </summary>
    -- <returns>An Int16.</returns>
    ToInt163 = function (this, value)
      if value < -32768 --[[Int16.MinValue]] or value > 32767 --[[Int16.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toInt16(value)
    end
    -- <summary>
    -- Converts a Decimal to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt32 = function (this, value)
      if value == -79228162514264337593543950335 --[[Decimal.MinValue]] then
        return -2147483648 --[[Int32.MinValue]]
      elseif value == 79228162514264337593543950335 --[[Decimal.MaxValue]] then
        return 2147483647 --[[Int32.MaxValue]]
      end

      local int32Value = System.cast(System.Int32, value)
      if value < -2147483648 --[[Int32.MinValue]] or value > 2147483647 --[[Int32.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= System.cast(System.Double, int32Value) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return int32Value
    end
    -- <summary>
    -- Converts a Decimal128 to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt321 = function (this, value)
      local intValue
      if this._allowOverflow then
        System.try(function ()
          intValue = MongoDBBson.Decimal128.op_Explicit7(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            intValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and -2147483648 --[[Int32.MinValue]] or 2147483647 --[[Int32.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        intValue = MongoDBBson.Decimal128.op_Explicit7(value)
      end
      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Implicit2(intValue)) then
        System.throw(MongoDBBson.TruncationException())
      end
      return intValue
    end
    -- <summary>
    -- Converts a Double to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt322 = function (this, value)
      local int32Value = System.ToInt32(value)
      if value < -2147483648 --[[Int32.MinValue]] or value > 2147483647 --[[Int32.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= int32Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return int32Value
    end
    -- <summary>
    -- Converts a Single to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt323 = function (this, value)
      local int32Value = System.ToInt32(value)
      if value < -2147483648 --[[Int32.MinValue]] or value > 2147483647 --[[Int32.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= int32Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return int32Value
    end
    -- <summary>
    -- Converts an Int32 to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt324 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts an Int64 to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt325 = function (this, value)
      if value < -2147483648 --[[Int32.MinValue]] or value > 2147483647 --[[Int32.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toInt32(value)
    end
    -- <summary>
    -- Converts an Int16 to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt326 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a UInt32 to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt327 = function (this, value)
      if value > 2147483647 --[[(uint)int.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toInt32(value)
    end
    -- <summary>
    -- Converts a UInt64 to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt328 = function (this, value)
      if value > 2147483647 --[[(ulong)int.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toInt32(value)
    end
    -- <summary>
    -- Converts a UInt16 to an Int32.
    -- </summary>
    -- <returns>An Int32.</returns>
    ToInt329 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a Decimal to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt64 = function (this, value)
      if value == -79228162514264337593543950335 --[[Decimal.MinValue]] then
        return -9223372036854775808 --[[Int64.MinValue]]
      elseif value == 79228162514264337593543950335 --[[Decimal.MaxValue]] then
        return 9223372036854775807 --[[Int64.MaxValue]]
      end

      local int64Value = System.cast(System.Int64, value)
      if value < -9223372036854775808 --[[Int64.MinValue]] or value > 9223372036854775807 --[[Int64.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= System.cast(System.Double, int64Value) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return int64Value
    end
    -- <summary>
    -- Converts a Decimal128 to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt641 = function (this, value)
      local longValue
      if this._allowOverflow then
        System.try(function ()
          longValue = MongoDBBson.Decimal128.op_Explicit8(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            longValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and -9223372036854775808 --[[Int64.MinValue]] or 9223372036854775807 --[[Int64.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        longValue = MongoDBBson.Decimal128.op_Explicit8(value)
      end
      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Implicit3(longValue)) then
        System.throw(MongoDBBson.TruncationException())
      end
      return longValue
    end
    -- <summary>
    -- Converts a Double to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt642 = function (this, value)
      local int64Value = System.ToInt64(value)
      if value < -9223372036854775808 --[[Int64.MinValue]] or value > 9223372036854775807 --[[Int64.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= int64Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return int64Value
    end
    -- <summary>
    -- Converts a Single to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt643 = function (this, value)
      local int64Value = System.ToInt64(value)
      if value < -9223372036854775808 --[[Int64.MinValue]] or value > 9223372036854775807 --[[Int64.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= int64Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return int64Value
    end
    -- <summary>
    -- Converts an Int32 to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt644 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts an Int64 to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt645 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts an Int16 to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt646 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a UInt32 to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt647 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a UInt64 to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt648 = function (this, value)
      if value > 9223372036854775807 --[[(ulong)long.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toInt64(value)
    end
    -- <summary>
    -- Converts a UInt16 to an Int64.
    -- </summary>
    -- <returns>An Int64.</returns>
    ToInt649 = function (this, value)
      return value
    end
    -- <summary>
    -- Converts a Decimal128 to a Single.
    -- </summary>
    -- <returns>A Single.</returns>
    ToSingle = function (this, value)
      if MongoDBBson.Decimal128.op_Equality(value, MongoDBBson.Decimal128.getMaxValue()) then
        return 3.40282347E+38 --[[Single.MaxValue]]
      elseif MongoDBBson.Decimal128.op_Equality(value, MongoDBBson.Decimal128.getMinValue()) then
        return -3.40282347E+38 --[[Single.MinValue]]
      elseif MongoDBBson.Decimal128.IsPositiveInfinity(value:__clone__()) then
        return System.Single.PositiveInfinity
      elseif MongoDBBson.Decimal128.IsNegativeInfinity(value:__clone__()) then
        return System.Single.NegativeInfinity
      elseif MongoDBBson.Decimal128.IsNaN(value:__clone__()) then
        return System.Single.NaN
      end

      local floatValue
      if this._allowOverflow then
        System.try(function ()
          floatValue = MongoDBBson.Decimal128.op_Explicit6(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            floatValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and -3.40282347E+38 --[[Single.MinValue]] or 3.40282347E+38 --[[Single.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        floatValue = MongoDBBson.Decimal128.op_Explicit6(value)
      end

      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Explicit4(floatValue)) then
        System.throw(MongoDBBson.TruncationException())
      end

      return floatValue
    end
    -- <summary>
    -- Converts a Double to a Single.
    -- </summary>
    -- <returns>A Single.</returns>
    ToSingle1 = function (this, value)
      if value == -1.7976931348623157E+308 --[[Double.MinValue]] then
        return -3.40282347E+38 --[[Single.MinValue]]
      elseif value == 1.7976931348623157E+308 --[[Double.MaxValue]] then
        return 3.40282347E+38 --[[Single.MaxValue]]
      elseif System.Double.IsNegativeInfinity(value) then
        return System.Single.NegativeInfinity
      elseif System.Double.IsPositiveInfinity(value) then
        return System.Single.PositiveInfinity
      elseif System.Double.IsNaN(value) then
        return System.Single.NaN
      end

      local floatValue = System.ToSingle(value)
      if value < -3.40282347E+38 --[[Single.MinValue]] or value > 3.40282347E+38 --[[Single.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= System.cast(System.Double, floatValue) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return floatValue
    end
    -- <summary>
    -- Converts an Int32 to a Single.
    -- </summary>
    -- <returns>A Single.</returns>
    ToSingle2 = function (this, value)
      local floatValue = value
      if value ~= System.ToInt32(floatValue) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return floatValue
    end
    -- <summary>
    -- Converts an Int64 to a Single.
    -- </summary>
    -- <returns>A Single.</returns>
    ToSingle3 = function (this, value)
      local floatValue = value
      if value ~= System.ToInt64(floatValue) then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return floatValue
    end
    -- <summary>
    -- Converts a Decimal128 to a UInt16.
    -- </summary>
    -- <returns>A UInt16.</returns>
    ToUInt16 = function (this, value)
      local ushortValue
      if this._allowOverflow then
        System.try(function ()
          ushortValue = MongoDBBson.Decimal128.op_Explicit13(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            ushortValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and 0 --[[UInt16.MinValue]] or 65535 --[[UInt16.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        ushortValue = MongoDBBson.Decimal128.op_Explicit13(value)
      end

      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Implicit7(ushortValue)) then
        System.throw(MongoDBBson.TruncationException())
      end

      return ushortValue
    end
    -- <summary>
    -- Converts a Double to a UInt16.
    -- </summary>
    -- <returns>A UInt16.</returns>
    ToUInt161 = function (this, value)
      local uint16Value = System.ToUInt16(value)
      if value < 0 --[[UInt16.MinValue]] or value > 65535 --[[UInt16.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= uint16Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return uint16Value
    end
    -- <summary>
    -- Converts an Int32 to a UInt16.
    -- </summary>
    -- <returns>A UInt16.</returns>
    ToUInt162 = function (this, value)
      if value < 0 --[[UInt16.MinValue]] or value > 65535 --[[UInt16.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toUInt16(value)
    end
    -- <summary>
    -- Converts an Int64 to a UInt16.
    -- </summary>
    -- <returns>A UInt16.</returns>
    ToUInt163 = function (this, value)
      if value < 0 --[[UInt16.MinValue]] or value > 65535 --[[UInt16.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toUInt16(value)
    end
    -- <summary>
    -- Converts a Decimal128 to a UInt32.
    -- </summary>
    -- <returns>A UInt32.</returns>
    ToUInt32 = function (this, value)
      local uintValue
      if this._allowOverflow then
        System.try(function ()
          uintValue = MongoDBBson.Decimal128.op_Explicit11(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            uintValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and 0 --[[UInt32.MinValue]] or 4294967295 --[[UInt32.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        uintValue = MongoDBBson.Decimal128.op_Explicit11(value)
      end

      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Implicit6(uintValue)) then
        System.throw(MongoDBBson.TruncationException())
      end

      return uintValue
    end
    -- <summary>
    -- Converts a Double to a UInt32.
    -- </summary>
    -- <returns>A UInt32.</returns>
    ToUInt321 = function (this, value)
      local uint32Value = System.ToUInt32(value)
      if value < 0 --[[UInt32.MinValue]] or value > 4294967295 --[[UInt32.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= uint32Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return uint32Value
    end
    -- <summary>
    -- Converts an Int32 to a UInt32.
    -- </summary>
    -- <returns>A UInt32.</returns>
    ToUInt322 = function (this, value)
      if value < 0 --[[UInt32.MinValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toUInt32(value)
    end
    -- <summary>
    -- Converts an Int64 to a UInt32.
    -- </summary>
    -- <returns>A UInt32.</returns>
    ToUInt323 = function (this, value)
      if value < 0 --[[UInt32.MinValue]] or value > 4294967295 --[[UInt32.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toUInt32(value)
    end
    -- <summary>
    -- Converts a Decimal128 to a UInt64.
    -- </summary>
    -- <returns>A UInt64.</returns>
    ToUInt64 = function (this, value)
      local ulongValue
      if this._allowOverflow then
        System.try(function ()
          ulongValue = MongoDBBson.Decimal128.op_Explicit12(value)
        end, function (default)
          if System.is(default, System.OverflowException) then
            ulongValue = MongoDBBson.Decimal128.IsNegative(value:__clone__()) and 0 --[[UInt64.MinValue]] or 18446744073709551615 --[[UInt64.MaxValue]]
          else
            return 1, default
          end
        end)
      else
        ulongValue = MongoDBBson.Decimal128.op_Explicit12(value)
      end

      if not this._allowTruncation and MongoDBBson.Decimal128.op_Inequality(value, MongoDBBson.Decimal128.op_Implicit8(ulongValue)) then
        System.throw(MongoDBBson.TruncationException())
      end

      return ulongValue
    end
    -- <summary>
    -- Converts a Double to a UInt64.
    -- </summary>
    -- <returns>A UInt64.</returns>
    ToUInt641 = function (this, value)
      local uint64Value = System.ToUInt64(value)
      if value < 0 --[[UInt64.MinValue]] or value > 18446744073709551615 --[[UInt64.MaxValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      elseif value ~= uint64Value then
        if not this._allowTruncation then
          System.throw(MongoDBBson.TruncationException())
        end
      end
      return uint64Value
    end
    -- <summary>
    -- Converts an Int32 to a UInt64.
    -- </summary>
    -- <returns>A UInt64.</returns>
    ToUInt642 = function (this, value)
      if value < 0 --[[(int)ulong.MinValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return value
    end
    -- <summary>
    -- Converts an Int64 to a UInt64.
    -- </summary>
    -- <returns>A UInt64.</returns>
    ToUInt643 = function (this, value)
      if value < 0 --[[(int)ulong.MinValue]] then
        if not this._allowOverflow then
          System.throw(System.OverflowException())
        end
      end
      return System.toUInt64(value)
    end
    return {
      _allowOverflow = false,
      _allowTruncation = false,
      getAllowOverflow = getAllowOverflow,
      getAllowTruncation = getAllowTruncation,
      ToDecimal = ToDecimal,
      ToDecimal1 = ToDecimal1,
      ToDecimal2 = ToDecimal2,
      ToDecimal3 = ToDecimal3,
      ToDecimal128 = ToDecimal128,
      ToDecimal1281 = ToDecimal1281,
      ToDecimal1282 = ToDecimal1282,
      ToDecimal1283 = ToDecimal1283,
      ToDecimal1284 = ToDecimal1284,
      ToDouble = ToDouble,
      ToDouble1 = ToDouble1,
      ToDouble2 = ToDouble2,
      ToDouble3 = ToDouble3,
      ToDouble4 = ToDouble4,
      ToDouble5 = ToDouble5,
      ToDouble6 = ToDouble6,
      ToDouble7 = ToDouble7,
      ToDouble8 = ToDouble8,
      ToDouble9 = ToDouble9,
      ToInt16 = ToInt16,
      ToInt161 = ToInt161,
      ToInt162 = ToInt162,
      ToInt163 = ToInt163,
      ToInt32 = ToInt32,
      ToInt321 = ToInt321,
      ToInt322 = ToInt322,
      ToInt323 = ToInt323,
      ToInt324 = ToInt324,
      ToInt325 = ToInt325,
      ToInt326 = ToInt326,
      ToInt327 = ToInt327,
      ToInt328 = ToInt328,
      ToInt329 = ToInt329,
      ToInt64 = ToInt64,
      ToInt641 = ToInt641,
      ToInt642 = ToInt642,
      ToInt643 = ToInt643,
      ToInt644 = ToInt644,
      ToInt645 = ToInt645,
      ToInt646 = ToInt646,
      ToInt647 = ToInt647,
      ToInt648 = ToInt648,
      ToInt649 = ToInt649,
      ToSingle = ToSingle,
      ToSingle1 = ToSingle1,
      ToSingle2 = ToSingle2,
      ToSingle3 = ToSingle3,
      ToUInt16 = ToUInt16,
      ToUInt161 = ToUInt161,
      ToUInt162 = ToUInt162,
      ToUInt163 = ToUInt163,
      ToUInt32 = ToUInt32,
      ToUInt321 = ToUInt321,
      ToUInt322 = ToUInt322,
      ToUInt323 = ToUInt323,
      ToUInt64 = ToUInt64,
      ToUInt641 = ToUInt641,
      ToUInt642 = ToUInt642,
      ToUInt643 = ToUInt643,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          methods = {
            { "ToDecimal128", 0x186, ToDecimal1284, System.UInt64, out.MongoDB.Bson.Decimal128, System.CLSCompliantAttribute(false) },
            { "ToDouble", 0x186, ToDouble7, System.UInt32, System.Double, System.CLSCompliantAttribute(false) },
            { "ToDouble", 0x186, ToDouble8, System.UInt64, System.Double, System.CLSCompliantAttribute(false) },
            { "ToDouble", 0x186, ToDouble9, System.UInt16, System.Double, System.CLSCompliantAttribute(false) },
            { "ToInt32", 0x186, ToInt327, System.UInt32, System.Int32, System.CLSCompliantAttribute(false) },
            { "ToInt32", 0x186, ToInt328, System.UInt64, System.Int32, System.CLSCompliantAttribute(false) },
            { "ToInt32", 0x186, ToInt329, System.UInt16, System.Int32, System.CLSCompliantAttribute(false) },
            { "ToInt64", 0x186, ToInt647, System.UInt32, System.Int64, System.CLSCompliantAttribute(false) },
            { "ToInt64", 0x186, ToInt648, System.UInt64, System.Int64, System.CLSCompliantAttribute(false) },
            { "ToInt64", 0x186, ToInt649, System.UInt16, System.Int64, System.CLSCompliantAttribute(false) },
            { "ToUInt16", 0x186, ToUInt163, System.Int64, System.UInt16, System.CLSCompliantAttribute(false) },
            { "ToUInt16", 0x186, ToUInt162, System.Int32, System.UInt16, System.CLSCompliantAttribute(false) },
            { "ToUInt16", 0x186, ToUInt16, out.MongoDB.Bson.Decimal128, System.UInt16, System.CLSCompliantAttribute(false) },
            { "ToUInt16", 0x186, ToUInt161, System.Double, System.UInt16, System.CLSCompliantAttribute(false) },
            { "ToUInt32", 0x186, ToUInt32, out.MongoDB.Bson.Decimal128, System.UInt32, System.CLSCompliantAttribute(false) },
            { "ToUInt32", 0x186, ToUInt321, System.Double, System.UInt32, System.CLSCompliantAttribute(false) },
            { "ToUInt32", 0x186, ToUInt322, System.Int32, System.UInt32, System.CLSCompliantAttribute(false) },
            { "ToUInt32", 0x186, ToUInt323, System.Int64, System.UInt32, System.CLSCompliantAttribute(false) },
            { "ToUInt64", 0x186, ToUInt642, System.Int32, System.UInt64, System.CLSCompliantAttribute(false) },
            { "ToUInt64", 0x186, ToUInt64, out.MongoDB.Bson.Decimal128, System.UInt64, System.CLSCompliantAttribute(false) },
            { "ToUInt64", 0x186, ToUInt641, System.Double, System.UInt64, System.CLSCompliantAttribute(false) },
            { "ToUInt64", 0x186, ToUInt643, System.Int64, System.UInt64, System.CLSCompliantAttribute(false) }
          }
        }
      end
    }
  end)
end)
