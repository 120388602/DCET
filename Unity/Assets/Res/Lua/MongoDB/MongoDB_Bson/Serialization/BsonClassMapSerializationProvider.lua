-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBBson
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- Represents the class map serialization provider.
  -- </summary>
  namespace.class("BsonClassMapSerializationProvider", function (namespace)
    local GetSerializer1
    GetSerializer1 = function (this, type, serializerRegistry)
      if type == nil then
        System.throw(System.ArgumentNullException("type"))
      end
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      if typeInfo:getIsGenericType() and typeInfo:getContainsGenericParameters() then
        local message = System.String.Format("Generic type {0} has unassigned type parameters.", MongoDBBson.BsonUtils.GetFriendlyTypeName(type))
        System.throw(System.ArgumentException(message, "type"))
      end

      if (typeInfo:getIsClass() or (typeInfo:getIsValueType() and not typeInfo:getIsPrimitive())) and not SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(System.Array)):IsAssignableFrom(type) and not SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(System.Enum)):IsAssignableFrom(type) then
        local classMap = MongoDBBsonSerialization.BsonClassMap.LookupClassMap(type)
        local classMapSerializerDefinition = System.typeof(MongoDBBsonSerialization.BsonClassMapSerializer_1)
        local classMapSerializerType = classMapSerializerDefinition:MakeGenericType(type)
        return System.cast(MongoDBBsonSerialization.IBsonSerializer, System.Activator.CreateInstance(classMapSerializerType, classMap))
      end

      return nil
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.BsonSerializationProviderBase
        }
      end,
      GetSerializer1 = GetSerializer1
    }
  end)
end)
