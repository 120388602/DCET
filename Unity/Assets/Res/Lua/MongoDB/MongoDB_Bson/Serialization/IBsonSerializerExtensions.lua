-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- Extensions methods for IBsonSerializer.
  -- </summary>
  namespace.class("IBsonSerializerExtensions", function (namespace)
    local Deserialize, Deserialize1, Serialize, Serialize1, ToBsonValue, ToBsonValue1
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="context">The deserialization context.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize = function (serializer, context)
      local default = MongoDBBsonSerialization.BsonDeserializationArgs()
      default:setNominalType(serializer:getValueType())
      local args = default
      return serializer:Deserialize1(context, args:__clone__())
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="serializer">The serializer.</param>
    -- <param name="context">The deserialization context.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize1 = function (serializer, context, TValue)
      local default = MongoDBBsonSerialization.BsonDeserializationArgs()
      default:setNominalType(serializer:getValueType())
      local args = default
      return serializer:Deserialize(context, args:__clone__())
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="context">The serialization context.</param>
    -- <param name="value">The value.</param>
    Serialize = function (serializer, context, value)
      local default = MongoDBBsonSerialization.BsonSerializationArgs()
      default:setNominalType(serializer:getValueType())
      local args = default
      serializer:Serialize1(context, args:__clone__(), value)
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="serializer">The serializer.</param>
    -- <param name="context">The serialization context.</param>
    -- <param name="value">The value.</param>
    Serialize1 = function (serializer, context, value, TValue)
      local default = MongoDBBsonSerialization.BsonSerializationArgs()
      default:setNominalType(serializer:getValueType())
      local args = default
      serializer:Serialize(context, args:__clone__(), value)
    end
    -- <summary>
    -- Converts a value to a BsonValue by serializing it.
    -- </summary>
    -- <param name="value">The value.</param>
    -- <returns>The serialized value.</returns>
    ToBsonValue = function (serializer, value)
      local document = MongoDBBson.BsonDocument()
      System.using(MongoDBBsonIO.BsonDocumentWriter(document), function (writer)
        local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(writer)
        writer:WriteStartDocument()
        writer:WriteName("x")
        Serialize(serializer, context, value)
        writer:WriteEndDocument()
      end)
      return document:get(0)
    end
    -- <summary>
    -- Converts a value to a BsonValue by serializing it.
    -- </summary>
    -- <param name="serializer">The serializer.</param>
    -- <param name="value">The value.</param>
    -- <returns>The serialized value.</returns>
    ToBsonValue1 = function (serializer, value, TValue)
      local document = MongoDBBson.BsonDocument()
      System.using(MongoDBBsonIO.BsonDocumentWriter(document), function (writer)
        local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(writer)
        writer:WriteStartDocument()
        writer:WriteName("x")
        Serialize1(serializer, context, value, TValue)
        writer:WriteEndDocument()
      end)
      return document:get(0)
    end
    return {
      Deserialize = Deserialize,
      Deserialize1 = Deserialize1,
      Serialize = Serialize,
      Serialize1 = Serialize1,
      ToBsonValue = ToBsonValue,
      ToBsonValue1 = ToBsonValue1
    }
  end)
end)
