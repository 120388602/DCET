-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local ArrayType = System.Array(System.Type)
local ArrayObject = System.Array(System.Object)
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- Base class for serialization providers.
  -- </summary>
  namespace.class("BsonSerializationProviderBase", function (namespace)
    local GetSerializer, CreateGenericSerializer, CreateGenericSerializer1, CreateSerializer, CreateSerializer1
    GetSerializer = function (this, type)
      return this:GetSerializer1(type, MongoDBBsonSerialization.BsonSerializer.getSerializerRegistry())
    end
    -- <summary>
    -- Creates the serializer from a serializer type definition and type arguments.
    -- </summary>
    -- <param name="typeArguments">The type arguments.</param>
    -- <returns>A serializer.</returns>
    CreateGenericSerializer = function (this, serializerTypeDefinition, typeArguments)
      return this:CreateGenericSerializer1(serializerTypeDefinition, typeArguments, MongoDBBsonSerialization.BsonSerializer.getSerializerRegistry())
    end
    -- <summary>
    -- Creates the serializer from a serializer type definition and type arguments.
    -- </summary>
    -- <param name="typeArguments">The type arguments.</param>
    -- <param name="serializerRegistry">The serializer registry.</param>
    -- <returns>
    -- A serializer.
    -- </returns>
    CreateGenericSerializer1 = function (this, serializerTypeDefinition, typeArguments, serializerRegistry)
      local serializerType = serializerTypeDefinition:MakeGenericType(typeArguments)
      return this:CreateSerializer1(serializerType, serializerRegistry)
    end
    -- <summary>
    -- Creates the serializer.
    -- </summary>
    -- <returns>A serializer.</returns>
    CreateSerializer = function (this, serializerType)
      return this:CreateSerializer1(serializerType, MongoDBBsonSerialization.BsonSerializer.getSerializerRegistry())
    end
    -- <summary>
    -- Creates the serializer.
    -- </summary>
    -- <param name="serializerRegistry">The serializer registry.</param>
    -- <returns>
    -- A serializer.
    -- </returns>
    CreateSerializer1 = function (this, serializerType, serializerRegistry)
      local serializerTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(serializerType)
      local constructorInfo = serializerTypeInfo:GetConstructor(ArrayType(System.typeof(MongoDBBsonSerialization.IBsonSerializerRegistry)))
      if SystemReflection.ConstructorInfo.op_Inequality(constructorInfo, nil) then
        return System.cast(MongoDBBsonSerialization.IBsonSerializer, constructorInfo:Invoke(ArrayObject(serializerRegistry)))
      end

      constructorInfo = serializerTypeInfo:GetConstructor(ArrayType:new(0))
      if SystemReflection.ConstructorInfo.op_Inequality(constructorInfo, nil) then
        return System.cast(MongoDBBsonSerialization.IBsonSerializer, constructorInfo:Invoke(ArrayObject:new(0)))
      end

      System.throw(System.MissingMethodException(System.String.Format("No suitable constructor found for serializer type: '{0}'.", serializerType:getFullName())))
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.IRegistryAwareBsonSerializationProvider
        }
      end,
      GetSerializer = GetSerializer,
      CreateGenericSerializer = CreateGenericSerializer,
      CreateGenericSerializer1 = CreateGenericSerializer1,
      CreateSerializer = CreateSerializer,
      CreateSerializer1 = CreateSerializer1
    }
  end)
end)
