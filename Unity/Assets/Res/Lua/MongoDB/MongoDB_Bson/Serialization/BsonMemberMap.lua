-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBBson
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- Represents the mapping between a field or property and a BSON element.
  -- </summary>
  namespace.class("BsonMemberMap", function (namespace)
    local getClassMap, getMemberName, getMemberType, getMemberTypeIsBsonValue, getElementName, getOrder, getMemberInfo, getGetter, 
    getSetter, getIdGenerator, getIsDefaultValueSpecified, getIsRequired, getShouldSerializeMethod, getIgnoreIfDefault, getIgnoreIfNull, getDefaultValue, 
    getIsReadOnly, ApplyDefaultValue, Freeze, GetSerializer, Reset, SetDefaultValue, SetDefaultValue1, SetElementName, 
    SetIdGenerator, SetIgnoreIfDefault, SetIgnoreIfNull, SetIsRequired, SetOrder, SetSerializer, SetShouldSerializeMethod, ShouldSerialize, 
    GetDefaultValue, GetFieldSetter, GetGetter, GetPropertySetter, ThrowFrozenException, __ctor__
    -- <summary>
    -- Initializes a new instance of the BsonMemberMap class.
    -- </summary>
    -- <param name="memberInfo">The member info.</param>
    __ctor__ = function (this, classMap, memberInfo)
      this._classMap = classMap
      this._memberInfo = memberInfo
      this._memberType = MongoDBBsonSerialization.BsonClassMap.GetMemberInfoType(memberInfo)
      this._memberTypeIsBsonValue = SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(MongoDBBson.BsonValue)):IsAssignableFrom(this._memberType)

      Reset(this)
    end
    getClassMap = function (this)
      return this._classMap
    end
    getMemberName = function (this)
      return this._memberInfo:getName()
    end
    getMemberType = function (this)
      return this._memberType
    end
    getMemberTypeIsBsonValue = function (this)
      return this._memberTypeIsBsonValue
    end
    getElementName = function (this)
      return this._elementName
    end
    getOrder = function (this)
      return this._order
    end
    getMemberInfo = function (this)
      return this._memberInfo
    end
    getGetter = function (this)
      if this._getter == nil then
        this._getter = GetGetter(this)
      end
      return this._getter
    end
    getSetter = function (this)
      if this._setter == nil then
        if System.is(this._memberInfo, SystemReflection.FieldInfo) then
          this._setter = GetFieldSetter(this)
        else
          this._setter = GetPropertySetter(this)
        end
      end
      return this._setter
    end
    getIdGenerator = function (this)
      return this._idGenerator
    end
    getIsDefaultValueSpecified = function (this)
      return this._defaultValueSpecified
    end
    getIsRequired = function (this)
      return this._isRequired
    end
    getShouldSerializeMethod = function (this)
      return this._shouldSerializeMethod
    end
    getIgnoreIfDefault = function (this)
      return this._ignoreIfDefault
    end
    getIgnoreIfNull = function (this)
      return this._ignoreIfNull
    end
    getDefaultValue = function (this)
      local default
      if this._defaultValueCreator ~= nil then
        default = this._defaultValueCreator()
      else
        default = this._defaultValue
      end
      return default
    end
    getIsReadOnly = function (this)
      if System.is(this._memberInfo, SystemReflection.FieldInfo) then
        local field = System.cast(SystemReflection.FieldInfo, this._memberInfo)
        return field:getIsInitOnly() or field:getIsLiteral()
      elseif System.is(this._memberInfo, SystemReflection.PropertyInfo) then
        local property = System.cast(SystemReflection.PropertyInfo, this._memberInfo)
        return not property:getCanWrite()
      else
        System.throw(System.NotSupportedException(System.String.Format("Only fields and properties are supported by BsonMemberMap. The member {0} of class {1} is a {2}.", this._memberInfo:getName(), this._memberInfo:getDeclaringType():getName(), System.is(this._memberInfo, SystemReflection.FieldInfo) and "field" or "property")))
      end
    end
    -- <summary>
    -- Applies the default value to the member of an object.
    -- </summary>
    ApplyDefaultValue = function (this, obj)
      if this._defaultValueSpecified then
        getSetter(this)(obj, getDefaultValue(this))
      end
    end
    -- <summary>
    -- Freezes this instance.
    -- </summary>
    Freeze = function (this)
      this._frozen = true
    end
    -- <summary>
    -- Gets the serializer.
    -- </summary>
    GetSerializer = function (this)
      if this._serializer == nil then
        -- return special serializer for BsonValue members that handles the _csharpnull representation
        if this._memberTypeIsBsonValue then
          local wrappedSerializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(this._memberType)
          local isBsonArraySerializer = System.is(wrappedSerializer, MongoDBBsonSerialization.IBsonArraySerializer)
          local isBsonDocumentSerializer = System.is(wrappedSerializer, MongoDBBsonSerialization.IBsonDocumentSerializer)

          local csharpNullSerializerDefinition
          if isBsonArraySerializer and isBsonDocumentSerializer then
            csharpNullSerializerDefinition = System.typeof(MongoDBSerializers.BsonValueCSharpNullArrayAndDocumentSerializer_1)
          elseif isBsonArraySerializer then
            csharpNullSerializerDefinition = System.typeof(MongoDBSerializers.BsonValueCSharpNullArraySerializer_1)
          elseif isBsonDocumentSerializer then
            csharpNullSerializerDefinition = System.typeof(MongoDBSerializers.BsonValueCSharpNullDocumentSerializer_1)
          else
            csharpNullSerializerDefinition = System.typeof(MongoDBSerializers.BsonValueCSharpNullSerializer_1)
          end

          local csharpNullSerializerType = csharpNullSerializerDefinition:MakeGenericType(this._memberType)
          local csharpNullSerializer = System.cast(MongoDBBsonSerialization.IBsonSerializer, System.Activator.CreateInstance(csharpNullSerializerType, wrappedSerializer))
          this._serializer = csharpNullSerializer
        else
          this._serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(this._memberType)
        end
      end
      return this._serializer
    end
    -- <summary>
    -- Resets the member map back to its initial state.
    -- </summary>
    Reset = function (this)
      if this._frozen then
        ThrowFrozenException(this)
      end

      this._defaultValue = GetDefaultValue(this._memberType)
      this._defaultValueCreator = nil
      this._defaultValueSpecified = false
      this._elementName = this._memberInfo:getName()
      this._idGenerator = nil
      this._ignoreIfDefault = false
      this._ignoreIfNull = false
      this._isRequired = false
      this._order = 2147483647 --[[Int32.MaxValue]]
      this._serializer = nil
      this._shouldSerializeMethod = nil

      return this
    end
    -- <summary>
    -- Sets the default value creator.
    -- </summary>
    -- <returns>The member map.</returns>
    SetDefaultValue = function (this, defaultValueCreator)
      if defaultValueCreator == nil then
        System.throw(System.ArgumentNullException("defaultValueCreator"))
      end
      if this._frozen then
        ThrowFrozenException(this)
      end
      this._defaultValue = defaultValueCreator()
      -- need an instance to compare against
      this._defaultValueCreator = defaultValueCreator
      this._defaultValueSpecified = true
      return this
    end
    -- <summary>
    -- Sets the default value.
    -- </summary>
    -- <returns>The member map.</returns>
    SetDefaultValue1 = function (this, defaultValue)
      if this._frozen then
        ThrowFrozenException(this)
      end
      this._defaultValue = defaultValue
      this._defaultValueCreator = nil
      this._defaultValueSpecified = true
      return this
    end
    -- <summary>
    -- Sets the name of the element.
    -- </summary>
    -- <returns>The member map.</returns>
    SetElementName = function (this, elementName)
      if elementName == nil then
        System.throw(System.ArgumentNullException("elementName"))
      end
      if elementName:IndexOf(0 --[['\0']]) ~= - 1 then
        System.throw(System.ArgumentException("Element names cannot contain nulls.", "elementName"))
      end
      if this._frozen then
        ThrowFrozenException(this)
      end

      this._elementName = elementName
      return this
    end
    -- <summary>
    -- Sets the Id generator.
    -- </summary>
    -- <returns>The member map.</returns>
    SetIdGenerator = function (this, idGenerator)
      if this._frozen then
        ThrowFrozenException(this)
      end
      this._idGenerator = idGenerator
      return this
    end
    -- <summary>
    -- Sets whether default values should be ignored when serialized.
    -- </summary>
    -- <returns>The member map.</returns>
    SetIgnoreIfDefault = function (this, ignoreIfDefault)
      if this._frozen then
        ThrowFrozenException(this)
      end
      if ignoreIfDefault and this._ignoreIfNull then
        System.throw(System.InvalidOperationException("IgnoreIfDefault and IgnoreIfNull are mutually exclusive. Choose one or the other."))
      end

      this._ignoreIfDefault = ignoreIfDefault
      return this
    end
    -- <summary>
    -- Sets whether null values should be ignored when serialized.
    -- </summary>
    -- <returns>The member map.</returns>
    SetIgnoreIfNull = function (this, ignoreIfNull)
      if this._frozen then
        ThrowFrozenException(this)
      end

      if ignoreIfNull and this._ignoreIfDefault then
        System.throw(System.InvalidOperationException("IgnoreIfDefault and IgnoreIfNull are mutually exclusive. Choose one or the other."))
      end
      this._ignoreIfNull = ignoreIfNull
      return this
    end
    -- <summary>
    -- Sets whether an element is required for this member when deserialized
    -- </summary>
    -- <returns>The member map.</returns>
    SetIsRequired = function (this, isRequired)
      if this._frozen then
        ThrowFrozenException(this)
      end
      this._isRequired = isRequired
      return this
    end
    -- <summary>
    -- Sets the serialization order.
    -- </summary>
    -- <returns>The member map.</returns>
    SetOrder = function (this, order)
      if this._frozen then
        ThrowFrozenException(this)
      end
      this._order = order
      return this
    end
    -- <summary>
    -- Sets the serializer.
    -- </summary>
    -- <returns>
    -- The member map.
    -- </returns>
    -- <exception cref="System.ArgumentNullException">serializer</exception>
    -- <exception cref="System.ArgumentException">serializer</exception>
    SetSerializer = function (this, serializer)
      if serializer == nil then
        System.throw(System.ArgumentNullException("serializer"))
      end
      if serializer:getValueType() ~= this._memberType then
        local message = System.String.Format("Value type of serializer is {0} and does not match member type {1}.", serializer:getValueType():getFullName(), this._memberType:getFullName())
        System.throw(System.ArgumentException(message, "serializer"))
      end

      if this._frozen then
        ThrowFrozenException(this)
      end
      this._serializer = serializer
      return this
    end
    -- <summary>
    -- Sets the method that will be called to determine whether the member should be serialized.
    -- </summary>
    -- <returns>The member map.</returns>
    SetShouldSerializeMethod = function (this, shouldSerializeMethod)
      if this._frozen then
        ThrowFrozenException(this)
      end
      this._shouldSerializeMethod = shouldSerializeMethod
      return this
    end
    -- <summary>
    -- Determines whether a value should be serialized
    -- </summary>
    -- <param name="value">The value.</param>
    -- <returns>True if the value should be serialized.</returns>
    ShouldSerialize = function (this, obj, value)
      if this._ignoreIfNull then
        if value == nil then
          return false
          -- don't serialize null
        end
      end

      if this._ignoreIfDefault then
        if System.Object.EqualsStatic(this._defaultValue, value) then
          return false
          -- don't serialize default value
        end
      end

      if this._shouldSerializeMethod ~= nil and not this._shouldSerializeMethod(obj) then
        -- the _shouldSerializeMethod determined that the member shouldn't be serialized
        return false
      end

      return true
    end
    GetDefaultValue = function (type)
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      if typeInfo:getIsEnum() then
        return System.Enum.ToObject(type, 0)
      end

      repeat
        local default = System.Type.GetTypeCode(type)
        if default == 0 --[[TypeCode.Empty]] or default == 2 --[[TypeCode.DBNull]] or default == 18 --[[TypeCode.String]] then
          break
        elseif default == 1 --[[TypeCode.Object]] then
          if typeInfo:getIsValueType() then
            return System.Activator.CreateInstance(type)
          end
          break
        elseif default == 3 --[[TypeCode.Boolean]] then
          return false
        elseif default == 4 --[[TypeCode.Char]] then
          return 0 --[['\0']]
        elseif default == 5 --[[TypeCode.SByte]] then
          return 0 --[[(sbyte)0]]
        elseif default == 6 --[[TypeCode.Byte]] then
          return 0 --[[(byte)0]]
        elseif default == 7 --[[TypeCode.Int16]] then
          return 0 --[[(short)0]]
        elseif default == 8 --[[TypeCode.UInt16]] then
          return 0 --[[(ushort)0]]
        elseif default == 9 --[[TypeCode.Int32]] then
          return 0
        elseif default == 10 --[[TypeCode.UInt32]] then
          return 0
        elseif default == 11 --[[TypeCode.Int64]] then
          return 0
        elseif default == 12 --[[TypeCode.UInt64]] then
          return 0
        elseif default == 13 --[[TypeCode.Single]] then
          return 0
        elseif default == 14 --[[TypeCode.Double]] then
          return 0
        elseif default == 15 --[[TypeCode.Decimal]] then
          return 0
        elseif default == 16 --[[TypeCode.DateTime]] then
          return System.DateTime.MinValue
        end
      until 1
      return nil
    end
    GetFieldSetter = function (this)
      local fieldInfo = System.cast(SystemReflection.FieldInfo, this._memberInfo)

      if getIsReadOnly(this) then
        local message = "The field '" .. fieldInfo:getFieldType():getFullName() .. " " .. fieldInfo:getName() .. "' of class '" .. fieldInfo:getDeclaringType():getFullName() .. "' is readonly. To avoid this exception, call IsReadOnly to ensure that setting a value is allowed."
        System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
      end

      return function (obj, value)
        fieldInfo:SetValue(obj, value)
      end
    end
    GetGetter = function (this)
      local propertyInfo = System.as(this._memberInfo, SystemReflection.PropertyInfo)
      if propertyInfo ~= nil then
        local getMethodInfo = propertyInfo:getGetMethod()
        if getMethodInfo == nil then
          local message = "The property '" .. propertyInfo:getPropertyType():getFullName() .. " " .. propertyInfo:getName() .. "' of class '" .. propertyInfo:getDeclaringType():getFullName() .. "' has no 'get' accessor."
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end

        return function (obj)
          return propertyInfo:GetValue(obj)
        end
      end

      local fieldInfo = System.as(this._memberInfo, SystemReflection.FieldInfo)
      return function (obj)
        return fieldInfo:GetValue(obj)
      end
    end
    GetPropertySetter = function (this)
      local propertyInfo = System.cast(SystemReflection.PropertyInfo, this._memberInfo)
      return function (obj, value)
        propertyInfo:SetValue(obj, value)
      end
    end
    ThrowFrozenException = function (this)
      local message = System.String.Format("Member map for {0}.{1} has been frozen and no further changes are allowed.", this._classMap:getClassType():getFullName(), this._memberInfo:getName())
      System.throw(System.InvalidOperationException(message))
    end
    return {
      _memberTypeIsBsonValue = false,
      _frozen = false,
      _order = 0,
      _isRequired = false,
      _ignoreIfDefault = false,
      _ignoreIfNull = false,
      _defaultValueSpecified = false,
      getClassMap = getClassMap,
      getMemberName = getMemberName,
      getMemberType = getMemberType,
      getMemberTypeIsBsonValue = getMemberTypeIsBsonValue,
      getElementName = getElementName,
      getOrder = getOrder,
      getMemberInfo = getMemberInfo,
      getGetter = getGetter,
      getSetter = getSetter,
      getIdGenerator = getIdGenerator,
      getIsDefaultValueSpecified = getIsDefaultValueSpecified,
      getIsRequired = getIsRequired,
      getShouldSerializeMethod = getShouldSerializeMethod,
      getIgnoreIfDefault = getIgnoreIfDefault,
      getIgnoreIfNull = getIgnoreIfNull,
      getDefaultValue = getDefaultValue,
      getIsReadOnly = getIsReadOnly,
      ApplyDefaultValue = ApplyDefaultValue,
      Freeze = Freeze,
      GetSerializer = GetSerializer,
      Reset = Reset,
      SetDefaultValue = SetDefaultValue,
      SetDefaultValue1 = SetDefaultValue1,
      SetElementName = SetElementName,
      SetIdGenerator = SetIdGenerator,
      SetIgnoreIfDefault = SetIgnoreIfDefault,
      SetIgnoreIfNull = SetIgnoreIfNull,
      SetIsRequired = SetIsRequired,
      SetOrder = SetOrder,
      SetSerializer = SetSerializer,
      SetShouldSerializeMethod = SetShouldSerializeMethod,
      ShouldSerialize = ShouldSerialize,
      __ctor__ = __ctor__
    }
  end)
end)
