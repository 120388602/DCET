-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
local MongoDBSerializerHelper
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  MongoDBSerializerHelper = MongoDB.Bson.Serialization.Serializers.SerializerHelper
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for dictionaries.
  -- </summary>
  namespace.class("DictionarySerializerBase_1", function (namespace)
    namespace.class("Flags", function (namespace)
      return function (TDictionary)
        return {}
      end
    end)
    return function (TDictionary)
      local getDictionaryRepresentation, getKeySerializer, getValueSerializer, TryGetMemberSerializationInfo, DeserializeValue, SerializeValue, DeserializeArrayRepresentation, DeserializeDocumentRepresentation, 
      DeserializeKeyString, SerializeArrayOfArraysRepresentation, SerializeArrayOfDocumentsRepresentation, SerializeDocumentRepresentation, SerializeKeyString, __ctor1__, __ctor2__, __ctor3__
      -- <summary>
      -- Initializes a new instance of the <see cref="DictionarySerializerBase{TDictionary}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        __ctor2__(this, 0 --[[DictionaryRepresentation.Document]])
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="DictionarySerializerBase{TDictionary}"/> class.
      -- </summary>
      __ctor2__ = function (this, dictionaryRepresentation)
        __ctor3__(this, dictionaryRepresentation, MongoDBSerializers.ObjectSerializer(), MongoDBSerializers.ObjectSerializer())
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="DictionarySerializerBase{TDictionary}"/> class.
      -- </summary>
      -- <param name="keySerializer">The key serializer.</param>
      -- <param name="valueSerializer">The value serializer.</param>
      __ctor3__ = function (this, dictionaryRepresentation, keySerializer, valueSerializer)
        this._dictionaryRepresentation = dictionaryRepresentation
        this._keySerializer = keySerializer
        this._valueSerializer = valueSerializer

        this._helper = MongoDBSerializers.SerializerHelper(System.Array(MongoDBSerializerHelper.Member)(MongoDBSerializerHelper.Member("k", 1 --[[Flags.Key]], false), MongoDBSerializerHelper.Member("v", 2 --[[Flags.Value]], false)))
      end
      getDictionaryRepresentation = function (this)
        return this._dictionaryRepresentation
      end
      getKeySerializer = function (this)
        return this._keySerializer
      end
      getValueSerializer = function (this)
        return this._valueSerializer
      end
      TryGetMemberSerializationInfo = function (this, memberName, serializationInfo)
        if this._dictionaryRepresentation ~= 0 --[[DictionaryRepresentation.Document]] then
          serializationInfo = nil
          return false, serializationInfo
        end

        serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(memberName, this._valueSerializer, this._valueSerializer:getValueType())
        return true, serializationInfo
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      DeserializeValue = function (this, context, args)
        local bsonReader = context:getReader()
        local bsonType = bsonReader:GetCurrentBsonType()
        repeat
          local default = bsonType
          if default == 4 --[[BsonType.Array]] then
            return DeserializeArrayRepresentation(this, context)
          elseif default == 3 --[[BsonType.Document]] then
            return DeserializeDocumentRepresentation(this, context)
          else
            System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
          end
        until 1
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      SerializeValue = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        repeat
          local default = this._dictionaryRepresentation
          if default == 0 --[[DictionaryRepresentation.Document]] then
            SerializeDocumentRepresentation(this, context, value)
            break
          elseif default == 1 --[[DictionaryRepresentation.ArrayOfArrays]] then
            SerializeArrayOfArraysRepresentation(this, context, value)
            break
          elseif default == 2 --[[DictionaryRepresentation.ArrayOfDocuments]] then
            SerializeArrayOfDocumentsRepresentation(this, context, value)
            break
          else
            local message = System.String.Format("'{0}' is not a valid IDictionary representation.", this._dictionaryRepresentation)
            System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
          end
        until 1
      end
      DeserializeArrayRepresentation = function (this, context)
        local dictionary = this:CreateInstance()

        local bsonReader = context:getReader()
        bsonReader:ReadStartArray()
        while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
          local key
          local value

          local bsonType = bsonReader:GetCurrentBsonType()
          repeat
            local default = bsonType
            if default == 4 --[[BsonType.Array]] then
              bsonReader:ReadStartArray()
              key = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(this._keySerializer, context)
              value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(this._valueSerializer, context)
              bsonReader:ReadEndArray()
              break
            elseif default == 3 --[[BsonType.Document]] then
              key = nil
              value = nil
              this._helper:DeserializeMembers(context, function (elementName, flag)
                repeat
                  local default = flag
                  if default == 1 --[[Flags.Key]] then
                    key = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(this._keySerializer, context)
                    break
                  elseif default == 2 --[[Flags.Value]] then
                    value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(this._valueSerializer, context)
                    break
                  end
                until 1
              end)
              break
            else
              System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
            end
          until 1

          dictionary:Add(key, value)
        end
        bsonReader:ReadEndArray()

        return dictionary
      end
      DeserializeDocumentRepresentation = function (this, context)
        local dictionary = this:CreateInstance()
        local bsonReader = context:getReader()
        bsonReader:ReadStartDocument()
        while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
          local key = DeserializeKeyString(this, MongoDBBsonIO.IBsonReaderExtensions.ReadName(bsonReader))
          local value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(this._valueSerializer, context)
          dictionary:Add(key, value)
        end
        bsonReader:ReadEndDocument()
        return dictionary
      end
      DeserializeKeyString = function (this, keyString)
        local keyDocument = System.new(MongoDBBson.BsonDocument, 12, "k", MongoDBBson.BsonValue.op_Implicit21(keyString))
        local default, extern = System.using(MongoDBBsonIO.BsonDocumentReader(keyDocument), function (keyReader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(keyReader)
          keyReader:ReadStartDocument()
          MongoDBBsonIO.IBsonReaderExtensions.ReadName1(keyReader, "k")
          local key = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(this._keySerializer, context)
          keyReader:ReadEndDocument()
          return true, key
        end)
        if default then
          return extern
        end
      end
      SerializeArrayOfArraysRepresentation = function (this, context, value)
        local bsonWriter = context:getWriter()
        bsonWriter:WriteStartArray()
        for _, dictionaryEntry in System.each(value) do
          dictionaryEntry = System.cast(System.DictionaryEntry, dictionaryEntry)
          bsonWriter:WriteStartArray()
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._keySerializer, context, dictionaryEntry:getKey())
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._valueSerializer, context, dictionaryEntry:getValue())
          bsonWriter:WriteEndArray()
        end
        bsonWriter:WriteEndArray()
      end
      SerializeArrayOfDocumentsRepresentation = function (this, context, value)
        local bsonWriter = context:getWriter()
        bsonWriter:WriteStartArray()
        for _, dictionaryEntry in System.each(value) do
          dictionaryEntry = System.cast(System.DictionaryEntry, dictionaryEntry)
          bsonWriter:WriteStartDocument()
          bsonWriter:WriteName("k")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._keySerializer, context, dictionaryEntry:getKey())
          bsonWriter:WriteName("v")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._valueSerializer, context, dictionaryEntry:getValue())
          bsonWriter:WriteEndDocument()
        end
        bsonWriter:WriteEndArray()
      end
      SerializeDocumentRepresentation = function (this, context, value)
        local bsonWriter = context:getWriter()
        bsonWriter:WriteStartDocument()
        for _, dictionaryEntry in System.each(value) do
          dictionaryEntry = System.cast(System.DictionaryEntry, dictionaryEntry)
          bsonWriter:WriteName(SerializeKeyString(this, dictionaryEntry:getKey()))
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._valueSerializer, context, dictionaryEntry:getValue())
        end
        bsonWriter:WriteEndDocument()
      end
      SerializeKeyString = function (this, key)
        local keyDocument = MongoDBBson.BsonDocument()
        System.using(MongoDBBsonIO.BsonDocumentWriter(keyDocument), function (keyWriter)
          local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(keyWriter)
          keyWriter:WriteStartDocument()
          keyWriter:WriteName("k")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._keySerializer, context, key)
          keyWriter:WriteEndDocument()
        end)

        local keyValue = keyDocument:get1("k")
        if keyValue:getBsonType() ~= 2 --[[BsonType.String]] then
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, "When using DictionaryRepresentation.Document key values must serialize as strings."))
        end

        return MongoDBBson.BsonValue.op_Explicit20(keyValue)
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.ClassSerializerBase_1(TDictionary),
            out.MongoDB.Bson.Serialization.IBsonDocumentSerializer,
            out.MongoDB.Bson.Serialization.IBsonDictionarySerializer
          }
        end,
        _dictionaryRepresentation = 0,
        getDictionaryRepresentation = getDictionaryRepresentation,
        getKeySerializer = getKeySerializer,
        getValueSerializer = getValueSerializer,
        TryGetMemberSerializationInfo = TryGetMemberSerializationInfo,
        DeserializeValue = DeserializeValue,
        SerializeValue = SerializeValue,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__
        }
      }
    end
  end)

  -- <summary>
  -- Represents a serializer for dictionaries.
  -- </summary>
  -- <typeparam name="TKey">The type of the keys.</typeparam>
  -- <typeparam name="TValue">The type of the values.</typeparam>
  namespace.class("DictionarySerializerBase_3", function (namespace)
    namespace.class("Flags", function (namespace)
      return function (TDictionary, TKey, TValue)
        return {}
      end
    end)
    return function (TDictionary, TKey, TValue)
      local getDictionaryRepresentation, getKeySerializer1, getValueSerializer1, TryGetItemSerializationInfo, TryGetMemberSerializationInfo, DeserializeValue, SerializeValue, CreateAccumulator, 
      CreateInstance, FinalizeAccumulator, DeserializeArrayRepresentation, DeserializeDocumentRepresentation, DeserializeKeyString, SerializeArrayOfArraysRepresentation, SerializeArrayOfDocumentsRepresentation, SerializeDocumentRepresentation, 
      SerializeKeyString, getKeySerializer, getValueSerializer, __ctor1__, __ctor2__, __ctor3__, __ctor4__, __ctor5__
      local IBsonSerializer_1TKey = MongoDB.Bson.Serialization.IBsonSerializer_1(TKey)
      local KeyValuePairTKeyTValue = System.KeyValuePair(TKey, TValue)
      local IBsonSerializer_1TValue = MongoDB.Bson.Serialization.IBsonSerializer_1(TValue)
      local LazyIBsonSerializer_1TKey = System.Lazy(IBsonSerializer_1TKey)
      local LazyIBsonSerializer_1TValue = System.Lazy(IBsonSerializer_1TValue)
      local KeyValuePairSerializer_2TKeyTValue = MongoDB.Bson.Serialization.Serializers.KeyValuePairSerializer_2(TKey, TValue)
      local ICollection_1KeyValuePairTKeyTValue = System.ICollection_1(KeyValuePairTKeyTValue)
      -- <summary>
      -- Initializes a new instance of the <see cref="DictionarySerializerBase{TDictionary, TKey, TValue}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        __ctor2__(this, 0 --[[DictionaryRepresentation.Document]])
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="DictionarySerializerBase{TDictionary, TKey, TValue}" /> class.
      -- </summary>
      __ctor2__ = function (this, dictionaryRepresentation)
        __ctor4__(this, dictionaryRepresentation, MongoDBBsonSerialization.BsonSerializer.getSerializerRegistry())
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="DictionarySerializerBase{TDictionary, TKey, TValue}" /> class.
      -- </summary>
      -- <param name="keySerializer">The key serializer.</param>
      -- <param name="valueSerializer">The value serializer.</param>
      __ctor3__ = function (this, dictionaryRepresentation, keySerializer, valueSerializer)
        __ctor5__(this, dictionaryRepresentation, LazyIBsonSerializer_1TKey(function ()
          return keySerializer
        end), LazyIBsonSerializer_1TValue(function ()
          return valueSerializer
        end))
        if keySerializer == nil then
          System.throw(System.ArgumentNullException("keySerializer"))
        end
        if valueSerializer == nil then
          System.throw(System.ArgumentNullException("valueSerializer"))
        end
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="DictionarySerializerBase{TDictionary, TKey, TValue}" /> class.
      -- </summary>
      -- <param name="serializerRegistry">The serializer registry.</param>
      __ctor4__ = function (this, dictionaryRepresentation, serializerRegistry)
        __ctor5__(this, dictionaryRepresentation, LazyIBsonSerializer_1TKey(function ()
          return serializerRegistry:GetSerializer1(TKey)
        end), LazyIBsonSerializer_1TValue(function ()
          return serializerRegistry:GetSerializer1(TValue)
        end))
        if serializerRegistry == nil then
          System.throw(System.ArgumentNullException("serializerRegistry"))
        end
      end
      __ctor5__ = function (this, dictionaryRepresentation, lazyKeySerializer, lazyValueSerializer)
        this._dictionaryRepresentation = dictionaryRepresentation
        this._lazyKeySerializer = lazyKeySerializer
        this._lazyValueSerializer = lazyValueSerializer

        this._helper = MongoDBSerializers.SerializerHelper(System.Array(MongoDBSerializerHelper.Member)(MongoDBSerializerHelper.Member("k", 1 --[[Flags.Key]], false), MongoDBSerializerHelper.Member("v", 2 --[[Flags.Value]], false)))
      end
      getDictionaryRepresentation = function (this)
        return this._dictionaryRepresentation
      end
      getKeySerializer1 = function (this)
        return this._lazyKeySerializer:getValue()
      end
      getValueSerializer1 = function (this)
        return this._lazyValueSerializer:getValue()
      end
      TryGetItemSerializationInfo = function (this, serializationInfo)
        if this._dictionaryRepresentation ~= 2 --[[DictionaryRepresentation.ArrayOfDocuments]] then
          serializationInfo = nil
          return false, serializationInfo
        end

        local serializer = System.new(KeyValuePairSerializer_2TKeyTValue, 3, 3 --[[BsonType.Document]], this._lazyKeySerializer:getValue(), this._lazyValueSerializer:getValue())
        serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(nil, serializer, serializer:getValueType())
        return true, serializationInfo
      end
      TryGetMemberSerializationInfo = function (this, memberName, serializationInfo)
        if this._dictionaryRepresentation ~= 0 --[[DictionaryRepresentation.Document]] then
          serializationInfo = nil
          return false, serializationInfo
        end

        serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(memberName, this._lazyValueSerializer:getValue(), this._lazyValueSerializer:getValue():getValueType())
        return true, serializationInfo
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      DeserializeValue = function (this, context, args)
        local bsonReader = context:getReader()

        local bsonType = bsonReader:GetCurrentBsonType()
        repeat
          local default = bsonType
          if default == 4 --[[BsonType.Array]] then
            return DeserializeArrayRepresentation(this, context)
          elseif default == 3 --[[BsonType.Document]] then
            return DeserializeDocumentRepresentation(this, context)
          else
            System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
          end
        until 1
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      SerializeValue = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        repeat
          local default = this._dictionaryRepresentation
          if default == 0 --[[DictionaryRepresentation.Document]] then
            SerializeDocumentRepresentation(this, context, value)
            break
          elseif default == 1 --[[DictionaryRepresentation.ArrayOfArrays]] then
            SerializeArrayOfArraysRepresentation(this, context, value)
            break
          elseif default == 2 --[[DictionaryRepresentation.ArrayOfDocuments]] then
            SerializeArrayOfDocumentsRepresentation(this, context, value)
            break
          else
            local message = System.String.Format("'{0}' is not a valid IDictionary<{1}, {2}> representation.", this._dictionaryRepresentation, MongoDBBson.BsonUtils.GetFriendlyTypeName(System.typeof(TKey)), MongoDBBson.BsonUtils.GetFriendlyTypeName(System.typeof(TValue)))
            System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
          end
        until 1
      end
      -- <summary>
      -- Creates an accumulator.
      -- </summary>
      CreateAccumulator = function (this)
        return System.cast(ICollection_1KeyValuePairTKeyTValue, this:CreateInstance())
      end
      -- <summary>
      -- Creates the instance.
      -- </summary>
      CreateInstance = function (this)
        System.throw(System.NotImplementedException())
      end
      -- <summary>
      -- Finalizes an accumulator.
      -- </summary>
      -- <returns>The instance.</returns>
      FinalizeAccumulator = function (this, accumulator)
        return System.cast(TDictionary, accumulator)
      end
      DeserializeArrayRepresentation = function (this, context)
        local accumulator = this:CreateAccumulator()
        local bsonReader = context:getReader()
        bsonReader:ReadStartArray()
        while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
          local key
          local value

          local bsonType = bsonReader:GetCurrentBsonType()
          repeat
            local default = bsonType
            if default == 4 --[[BsonType.Array]] then
              bsonReader:ReadStartArray()
              key = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._lazyKeySerializer:getValue(), context, TKey)
              value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._lazyValueSerializer:getValue(), context, TValue)
              bsonReader:ReadEndArray()
              break
            elseif default == 3 --[[BsonType.Document]] then
              key = System.default(TKey)
              value = System.default(TValue)
              this._helper:DeserializeMembers(context, function (elementName, flag)
                repeat
                  local default = flag
                  if default == 1 --[[Flags.Key]] then
                    key = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._lazyKeySerializer:getValue(), context, TKey)
                    break
                  elseif default == 2 --[[Flags.Value]] then
                    value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._lazyValueSerializer:getValue(), context, TValue)
                    break
                  end
                until 1
              end)
              break
            else
              System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
            end
          until 1

          accumulator:Add(KeyValuePairTKeyTValue(key, value))
        end
        bsonReader:ReadEndArray()

        return this:FinalizeAccumulator(accumulator)
      end
      DeserializeDocumentRepresentation = function (this, context)
        local accumulator = this:CreateAccumulator()

        local bsonReader = context:getReader()
        bsonReader:ReadStartDocument()
        while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
          local key = DeserializeKeyString(this, MongoDBBsonIO.IBsonReaderExtensions.ReadName(bsonReader))
          local value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._lazyValueSerializer:getValue(), context, TValue)
          accumulator:Add(KeyValuePairTKeyTValue(key, value))
        end
        bsonReader:ReadEndDocument()

        return this:FinalizeAccumulator(accumulator)
      end
      DeserializeKeyString = function (this, keyString)
        local keyDocument = System.new(MongoDBBson.BsonDocument, 12, "k", MongoDBBson.BsonValue.op_Implicit21(keyString))
        local default, extern = System.using(MongoDBBsonIO.BsonDocumentReader(keyDocument), function (keyReader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(keyReader)
          keyReader:ReadStartDocument()
          MongoDBBsonIO.IBsonReaderExtensions.ReadName1(keyReader, "k")
          local key = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._lazyKeySerializer:getValue(), context, TKey)
          keyReader:ReadEndDocument()
          return true, key
        end)
        if default then
          return extern
        end
      end
      SerializeArrayOfArraysRepresentation = function (this, context, value)
        local bsonWriter = context:getWriter()
        bsonWriter:WriteStartArray()
        for _, keyValuePair in System.each(value) do
          keyValuePair = System.cast(KeyValuePairTKeyTValue, keyValuePair)
          bsonWriter:WriteStartArray()
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._lazyKeySerializer:getValue(), context, keyValuePair.Key, TKey)
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._lazyValueSerializer:getValue(), context, keyValuePair.Value, TValue)
          bsonWriter:WriteEndArray()
        end
        bsonWriter:WriteEndArray()
      end
      SerializeArrayOfDocumentsRepresentation = function (this, context, value)
        local bsonWriter = context:getWriter()
        bsonWriter:WriteStartArray()
        for _, keyValuePair in System.each(value) do
          keyValuePair = System.cast(KeyValuePairTKeyTValue, keyValuePair)
          bsonWriter:WriteStartDocument()
          bsonWriter:WriteName("k")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._lazyKeySerializer:getValue(), context, keyValuePair.Key, TKey)
          bsonWriter:WriteName("v")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._lazyValueSerializer:getValue(), context, keyValuePair.Value, TValue)
          bsonWriter:WriteEndDocument()
        end
        bsonWriter:WriteEndArray()
      end
      SerializeDocumentRepresentation = function (this, context, value)
        local bsonWriter = context:getWriter()
        bsonWriter:WriteStartDocument()
        for _, keyValuePair in System.each(value) do
          keyValuePair = System.cast(KeyValuePairTKeyTValue, keyValuePair)
          bsonWriter:WriteName(SerializeKeyString(this, keyValuePair.Key))
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._lazyValueSerializer:getValue(), context, keyValuePair.Value, TValue)
        end
        bsonWriter:WriteEndDocument()
      end
      SerializeKeyString = function (this, key)
        local keyDocument = MongoDBBson.BsonDocument()
        System.using(MongoDBBsonIO.BsonDocumentWriter(keyDocument), function (keyWriter)
          local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(keyWriter)
          keyWriter:WriteStartDocument()
          keyWriter:WriteName("k")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._lazyKeySerializer:getValue(), context, key, TKey)
          keyWriter:WriteEndDocument()
        end)

        local keyValue = keyDocument:get1("k")
        if keyValue:getBsonType() ~= 2 --[[BsonType.String]] then
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, "When using DictionaryRepresentation.Document key values must serialize as strings."))
        end

        return MongoDBBson.BsonValue.op_Explicit20(keyValue)
      end
      getKeySerializer = function (this)
        return getKeySerializer1(this)
      end
      getValueSerializer = function (this)
        return getValueSerializer1(this)
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.ClassSerializerBase_1(TDictionary),
            out.MongoDB.Bson.Serialization.IBsonArraySerializer,
            out.MongoDB.Bson.Serialization.IBsonDocumentSerializer,
            out.MongoDB.Bson.Serialization.IBsonDictionarySerializer
          }
        end,
        _dictionaryRepresentation = 0,
        getDictionaryRepresentation = getDictionaryRepresentation,
        getKeySerializer1 = getKeySerializer1,
        getValueSerializer1 = getValueSerializer1,
        TryGetItemSerializationInfo = TryGetItemSerializationInfo,
        TryGetMemberSerializationInfo = TryGetMemberSerializationInfo,
        DeserializeValue = DeserializeValue,
        SerializeValue = SerializeValue,
        CreateAccumulator = CreateAccumulator,
        CreateInstance = CreateInstance,
        FinalizeAccumulator = FinalizeAccumulator,
        getKeySerializer = getKeySerializer,
        getValueSerializer = getValueSerializer,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__,
          __ctor4__,
          __ctor5__
        },
        __metadata__ = function (out)
          return {
            methods = {
              { "CreateInstance", 0x83, CreateInstance, TDictionary, System.ObsoleteAttribute("CreateInstance is deprecated. Please use CreateAccumulator instead.") }
            }
          }
        end
      }
    end
  end)
end)
