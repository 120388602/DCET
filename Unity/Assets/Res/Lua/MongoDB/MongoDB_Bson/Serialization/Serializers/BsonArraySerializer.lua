-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonSerialization
local MongoDBSerializers
local BsonValueSerializerBase_1BsonArray
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  BsonValueSerializerBase_1BsonArray = MongoDBSerializers.BsonValueSerializerBase_1(MongoDBBson.BsonArray)
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for BsonArrays.
  -- </summary>
  namespace.class("BsonArraySerializer", function (namespace)
    local __instance, getInstance, DeserializeValue, TryGetItemSerializationInfo, SerializeValue, class, static, __ctor__
    static = function (this)
      __instance = class()
    end
    -- <summary>
    -- Initializes a new instance of the BsonArraySerializer class.
    -- </summary>
    __ctor__ = function (this)
      BsonValueSerializerBase_1BsonArray.__ctor__(this, 4 --[[BsonType.Array]])
    end
    getInstance = function ()
      return __instance
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    DeserializeValue = function (this, context, args)
      local bsonReader = context:getReader()

      bsonReader:ReadStartArray()
      local array = MongoDBBson.BsonArray()
      while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
        local item = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, MongoDBBson.BsonValue)
        array:Add1(item)
      end
      bsonReader:ReadEndArray()

      return array
    end
    -- <summary>
    -- Tries to get the serialization info for the individual items of the array.
    -- </summary>
    -- <returns>
    -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
    -- </returns>
    TryGetItemSerializationInfo = function (this, serializationInfo)
      serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(nil, MongoDBSerializers.BsonValueSerializer.getInstance(), System.typeof(MongoDBBson.BsonValue))
      return true, serializationInfo
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    SerializeValue = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      bsonWriter:WriteStartArray()
      for i = 0, value:getCount() - 1 do
        MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, value:get(i), MongoDBBson.BsonValue)
      end
      bsonWriter:WriteEndArray()
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.BsonValueSerializerBase_1(out.MongoDB.Bson.BsonArray),
          out.MongoDB.Bson.Serialization.IBsonArraySerializer
        }
      end,
      getInstance = getInstance,
      DeserializeValue = DeserializeValue,
      TryGetItemSerializationInfo = TryGetItemSerializationInfo,
      SerializeValue = SerializeValue,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
