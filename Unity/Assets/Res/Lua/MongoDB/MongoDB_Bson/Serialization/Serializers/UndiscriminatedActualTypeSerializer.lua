-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for interfaces and base classes that delegates to the actual type interface without writing a discriminator.
  -- </summary>
  namespace.class("UndiscriminatedActualTypeSerializer_1", function (namespace)
    return function (TValue)
      local __instance, getInstance, Serialize, class, static
      static = function (this)
        __instance = class()
      end
      getInstance = function ()
        return __instance
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The document.</param>
      Serialize = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        if value == nil then
          bsonWriter:WriteNull()
        else
          local actualType = value:GetType()
          local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(actualType)
          args:setNominalType(actualType)
          serializer:Serialize1(context, args:__clone__(), value)
        end
      end
      class = {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TValue)
          }
        end,
        getInstance = getInstance,
        Serialize = Serialize,
        static = static
      }
      return class
    end
  end)
end)
