-- Generated by CSharp.lua Compiler
local System = System
local SystemReflection = System.Reflection
local ListPropertyInfo = System.List(SystemReflection.PropertyInfo)
local MongoDBBsonIO
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- 
  -- </summary>
  namespace.class("StructBsonSerialize_1", function (namespace)
    return function (TValue)
      local Serialize, Deserialize, __ctor__
      __ctor__ = function (this)
        this.propertyInfo = ListPropertyInfo()
      end
      -- <summary>
      -- 
      -- </summary>
      -- <param name="args"></param>
      -- <param name="value"></param>
      Serialize = function (this, context, args, value)
        local nominalType = args:getNominalType()
        local fields = nominalType:GetFields(20 --[[BindingFlags.Instance | BindingFlags.Public]])
        local propsAll = nominalType:GetProperties(20 --[[BindingFlags.Instance | BindingFlags.Public]])

        this.propertyInfo:Clear()
        for _, prop in System.each(propsAll) do
          if prop:getCanWrite() then
            this.propertyInfo:Add(prop)
          end
        end

        local bsonWriter = context:getWriter()

        bsonWriter:WriteStartDocument()

        for _, field in System.each(fields) do
          bsonWriter:WriteName(field:getName())
          MongoDBBsonSerialization.BsonSerializer.Serialize1(bsonWriter, field:getFieldType(), field:GetValue(value), nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs))
        end
        for _, prop in System.each(this.propertyInfo) do
          bsonWriter:WriteName(prop:getName())
          MongoDBBsonSerialization.BsonSerializer.Serialize1(bsonWriter, prop:getPropertyType(), prop:GetValue(value, nil), nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs))
        end

        bsonWriter:WriteEndDocument()
      end
      -- <summary>
      -- 
      -- </summary>
      -- <param name="args"></param>
      -- <returns></returns>
      Deserialize = function (this, context, args)
        --boxing is required for SetValue to work
        local obj = (TValue())
        local actualType = args:getNominalType()
        local bsonReader = context:getReader()

        bsonReader:ReadStartDocument()

        while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
          local name = bsonReader:ReadName(MongoDBBsonIO.Utf8NameDecoder.getInstance())

          local field = actualType:GetField(name)
          if field ~= nil then
            local value = MongoDBBsonSerialization.BsonSerializer.Deserialize7(bsonReader, field:getFieldType())
            field:SetValue(obj, value)
          end

          local prop = actualType:GetProperty(name)
          if prop ~= nil then
            local value = MongoDBBsonSerialization.BsonSerializer.Deserialize7(bsonReader, prop:getPropertyType())
            prop:SetValue(obj, value, nil)
          end
        end

        bsonReader:ReadEndDocument()

        return System.cast(TValue, obj)
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.StructSerializerBase_1(TValue)
          }
        end,
        Serialize = Serialize,
        Deserialize = Deserialize,
        __ctor__ = __ctor__
      }
    end
  end)
end)
