-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemNet = System.Net
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for IPAddresses.
  -- </summary>
  namespace.class("IPAddressSerializer", function (namespace)
    local DeserializeValue, SerializeValue
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    DeserializeValue = function (this, context, args)
      local bsonReader = context:getReader()
      this:EnsureBsonTypeEquals(bsonReader, 2 --[[BsonType.String]])

      local stringValue = bsonReader:ReadString()
      local address
      local default
      default, address = SystemNet.IPAddress.TryParse(stringValue, nil)
      if default then
        return address
      end

      local message = System.String.Format("Invalid IPAddress value '{0}'.", stringValue)
      System.throw(System.FormatException(message))
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    SerializeValue = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      local stringValue
      if value:getAddressFamily() == 2 --[[AddressFamily.InterNetwork]] then
        stringValue = value:ToString()
      else
        stringValue = System.String.Format("[{0}]", value)
      end
      bsonWriter:WriteString(stringValue)
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.ClassSerializerBase_1(System.Net.IPAddress)
        }
      end,
      DeserializeValue = DeserializeValue,
      SerializeValue = SerializeValue
    }
  end)
end)
