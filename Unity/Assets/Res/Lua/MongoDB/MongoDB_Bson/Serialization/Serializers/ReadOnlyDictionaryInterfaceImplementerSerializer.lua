-- Generated by CSharp.lua Compiler
--[[ Copyright 2018-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ArrayObject = System.Array(System.Object)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for a class that implements <see cref="IDictionary{TKey, TValue}"/>.
  -- </summary>
  -- <typeparam name="TKey">The type of the key.</typeparam>
  -- <typeparam name="TValue">The type of the value.</typeparam>
  namespace.class("ReadOnlyDictionaryInterfaceImplementerSerializer_3", function (namespace)
    return function (TDictionary, TKey, TValue)
      local WithDictionaryRepresentation, WithDictionaryRepresentation1, WithKeySerializer, WithValueSerializer, getChildSerializer, WithChildSerializer, WithDictionaryRepresentation3, CreateAccumulator, 
      FinalizeAccumulator, class, __ctor1__, __ctor2__, __ctor3__
      local DictTKeyTValue = System.Dictionary(TKey, TValue)
      local IBsonSerializer_1TValue = MongoDB.Bson.Serialization.IBsonSerializer_1(TValue)
      local DictionarySerializerBase_3TDictionaryTKeyTValue = MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase_3(TDictionary, TKey, TValue)
      -- <summary>
      -- Initializes a new instance of the <see cref="ReadOnlyDictionaryInterfaceImplementerSerializer{TDictionary, TKey, TValue}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        DictionarySerializerBase_3TDictionaryTKeyTValue.__ctor__[1](this)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="ReadOnlyDictionaryInterfaceImplementerSerializer{TDictionary, TKey, TValue}"/> class.
      -- </summary>
      __ctor2__ = function (this, dictionaryRepresentation)
        DictionarySerializerBase_3TDictionaryTKeyTValue.__ctor__[2](this, dictionaryRepresentation)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="ReadOnlyDictionaryInterfaceImplementerSerializer{TDictionary, TKey, TValue}"/> class.
      -- </summary>
      -- <param name="keySerializer">The key serializer.</param>
      -- <param name="valueSerializer">The value serializer.</param>
      __ctor3__ = function (this, dictionaryRepresentation, keySerializer, valueSerializer)
        DictionarySerializerBase_3TDictionaryTKeyTValue.__ctor__[3](this, dictionaryRepresentation, keySerializer, valueSerializer)
      end
      -- <summary>
      -- Returns a serializer that has been reconfigured with the specified dictionary representation.
      -- </summary>
      -- <returns>The reconfigured serializer.</returns>
      WithDictionaryRepresentation = function (this, dictionaryRepresentation)
        local default
        if dictionaryRepresentation == this:getDictionaryRepresentation() then
          default = this
        else
          default = System.new(class, 3, dictionaryRepresentation, this:getKeySerializer1(), this:getValueSerializer1())
        end
        return default
      end
      -- <summary>
      -- Returns a serializer that has been reconfigured with the specified dictionary representation and key value serializers.
      -- </summary>
      -- <param name="keySerializer">The key serializer.</param>
      -- <param name="valueSerializer">The value serializer.</param>
      -- <returns>The reconfigured serializer.</returns>
      WithDictionaryRepresentation1 = function (this, dictionaryRepresentation, keySerializer, valueSerializer)
        local default
        if dictionaryRepresentation == this:getDictionaryRepresentation() and keySerializer == this:getKeySerializer1() and valueSerializer == this:getValueSerializer1() then
          default = this
        else
          default = System.new(class, 3, dictionaryRepresentation, keySerializer, valueSerializer)
        end
        return default
      end
      -- <summary>
      -- Returns a serializer that has been reconfigured with the specified key serializer.
      -- </summary>
      -- <returns>The reconfigured serializer.</returns>
      WithKeySerializer = function (this, keySerializer)
        local default
        if keySerializer == this:getKeySerializer1() then
          default = this
        else
          default = System.new(class, 3, this:getDictionaryRepresentation(), keySerializer, this:getValueSerializer1())
        end
        return default
      end
      -- <summary>
      -- Returns a serializer that has been reconfigured with the specified value serializer.
      -- </summary>
      -- <returns>The reconfigured serializer.</returns>
      WithValueSerializer = function (this, valueSerializer)
        local default
        if valueSerializer == this:getValueSerializer1() then
          default = this
        else
          default = System.new(class, 3, this:getDictionaryRepresentation(), this:getKeySerializer1(), valueSerializer)
        end
        return default
      end
      getChildSerializer = function (this)
        return this:getValueSerializer1()
      end
      WithChildSerializer = function (this, childSerializer)
        return WithValueSerializer(this, System.cast(IBsonSerializer_1TValue, childSerializer))
      end
      WithDictionaryRepresentation3 = function (this, dictionaryRepresentation)
        return WithDictionaryRepresentation(this, dictionaryRepresentation)
      end
      CreateAccumulator = function (this)
        return DictTKeyTValue()
      end
      FinalizeAccumulator = function (this, accumulator)
        local default, extern = System.try(function ()
          return true, System.cast(TDictionary, System.Activator.CreateInstance(System.typeof(TDictionary), ArrayObject(accumulator)))
        end, function (default)
          if System.is(default, System.MissingMethodException) then
            local exception = default
            System.throw(System.MissingMethodException("No suitable constructor found for IReadOnlyDictionary type: '" .. System.typeof(TDictionary):getFullName() .. "'.", exception))
          else
            return 1, default
          end
        end)
        if default then
          return extern
        end
      end
      class = {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase_3(TDictionary, TKey, TValue),
            out.MongoDB.Bson.Serialization.IChildSerializerConfigurable,
            out.MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable_1(out.MongoDB.Bson.Serialization.Serializers.ReadOnlyDictionaryInterfaceImplementerSerializer_3(TDictionary, TKey, TValue))
          }
        end,
        WithDictionaryRepresentation = WithDictionaryRepresentation,
        WithDictionaryRepresentation1 = WithDictionaryRepresentation1,
        WithKeySerializer = WithKeySerializer,
        WithValueSerializer = WithValueSerializer,
        getChildSerializer = getChildSerializer,
        WithChildSerializer = WithChildSerializer,
        WithDictionaryRepresentation3 = WithDictionaryRepresentation3,
        CreateAccumulator = CreateAccumulator,
        FinalizeAccumulator = FinalizeAccumulator,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__
        }
      }
      return class
    end
  end)
end)
