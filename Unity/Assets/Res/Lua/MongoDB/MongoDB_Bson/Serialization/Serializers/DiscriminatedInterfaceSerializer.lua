-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for Interfaces.
  -- </summary>
  namespace.class("DiscriminatedInterfaceSerializer_1", function (namespace)
    return function (TInterface)
      local Deserialize, Serialize, __ctor1__, __ctor2__
      -- <summary>
      -- Initializes a new instance of the <see cref="DiscriminatedInterfaceSerializer{TInterface}" /> class.
      -- </summary>
      __ctor1__ = function (this)
        __ctor2__(this, MongoDBBsonSerialization.BsonSerializer.LookupDiscriminatorConvention(System.typeof(TInterface)))
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="DiscriminatedInterfaceSerializer{TInterface}" /> class.
      -- </summary>
      -- <exception cref="System.ArgumentException">interfaceType</exception>
      -- <exception cref="System.ArgumentNullException">interfaceType</exception>
      __ctor2__ = function (this, discriminatorConvention)
        local interfaceTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(TInterface))
        if not interfaceTypeInfo:getIsInterface() then
          local message = System.String.Format("{0} is not an interface.", System.typeof(TInterface):getFullName())
          System.throw(System.ArgumentException(message, "<TInterface>"))
        end

        this._interfaceType = System.typeof(TInterface)
        this._discriminatorConvention = discriminatorConvention
        this._objectSerializer = System.new(MongoDBSerializers.ObjectSerializer, 2, this._discriminatorConvention)
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      -- <exception cref="System.FormatException"></exception>
      Deserialize = function (this, context, args)
        local bsonReader = context:getReader()

        if bsonReader:GetCurrentBsonType() == 10 --[[BsonType.Null]] then
          bsonReader:ReadNull()
          return System.default(TInterface)
        else
          local actualType = this._discriminatorConvention:GetActualType(bsonReader, System.typeof(TInterface))
          if actualType == this._interfaceType then
            local message = System.String.Format("Unable to determine actual type of object to deserialize for interface type {0}.", this._interfaceType:getFullName())
            System.throw(System.FormatException(message))
          end

          local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(actualType)
          return System.cast(TInterface, serializer:Deserialize1(context, args:__clone__()))
        end
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The document.</param>
      Serialize = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        if value == nil then
          bsonWriter:WriteNull()
        else
          args:setNominalType(System.typeof(System.Object))
          this._objectSerializer:Serialize(context, args:__clone__(), value)
        end
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TInterface)
          }
        end,
        Deserialize = Deserialize,
        Serialize = Serialize,
        __ctor__ = {
          __ctor1__,
          __ctor2__
        }
      }
    end
  end)
end)
