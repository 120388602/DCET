-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ArrayByte = System.Array(System.Byte)
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
local MongoDBSerializerHelper
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  MongoDBSerializerHelper = MongoDB.Bson.Serialization.Serializers.SerializerHelper
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for BitArrays.
  -- </summary>
  namespace.class("BitArraySerializer", function (namespace)
    local getRepresentation, DeserializeValue, SerializeValue, WithRepresentation, GetBytes, WithRepresentation1, class, internal, 
    __ctor1__, __ctor2__
    namespace.class("Flags", function (namespace)
      return {}
    end)
    internal = function (this)
      this._int32Serializer = MongoDBSerializers.Int32Serializer()
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="BitArraySerializer"/> class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor2__(this, 5 --[[BsonType.Binary]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="BitArraySerializer"/> class.
    -- </summary>
    __ctor2__ = function (this, representation)
      internal(this)
      repeat
        local default = representation
        if default == 5 --[[BsonType.Binary]] or default == 2 --[[BsonType.String]] then
          break
        else
          local message = System.String.Format("{0} is not a valid representation for a BitArraySerializer.", representation)
          System.throw(System.ArgumentException(message))
        end
      until 1

      this._representation = representation

      this._helper = MongoDBSerializers.SerializerHelper(System.Array(MongoDBSerializerHelper.Member)(MongoDBSerializerHelper.Member("Length", 1 --[[Flags.Length]], false), MongoDBSerializerHelper.Member("Bytes", 2 --[[Flags.Bytes]], false)))
    end
    getRepresentation = function (this)
      return this._representation
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    DeserializeValue = function (this, context, args)
      local bsonReader = context:getReader()
      local bitArray

      local bsonType = bsonReader:GetCurrentBsonType()
      repeat
        local default = bsonType
        if default == 5 --[[BsonType.Binary]] then
          return System.BitArray(bsonReader:ReadBytes())
        elseif default == 3 --[[BsonType.Document]] then
          local length = 0
          local bytes = nil
          this._helper:DeserializeMembers(context, function (elementName, flag)
            repeat
              local default = flag
              if default == 1 --[[Flags.Length]] then
                length = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._int32Serializer, context, System.Int32)
                break
              elseif default == 2 --[[Flags.Bytes]] then
                bytes = bsonReader:ReadBytes()
                break
              end
            until 1
          end)
          bitArray = System.BitArray(bytes)
          bitArray:setLength(length)
          return bitArray
        elseif default == 2 --[[BsonType.String]] then
          local s = bsonReader:ReadString()
          bitArray = System.BitArray(#s)
          for i = 0, #s - 1 do
            local c = s:get(i)
            repeat
              local extern = c
              if extern == 48 --[['0']] then
                break
              elseif extern == 49 --[['1']] then
                bitArray:set(i, true)
                break
              else
                System.throw(System.FormatException("String value is not a valid BitArray."))
              end
            until 1
          end
          return bitArray
        else
          System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
        end
      until 1
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The value.</param>
    SerializeValue = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      repeat
        local default = this._representation
        if default == 5 --[[BsonType.Binary]] then
          if (System.mod(value:getLength(), 8)) == 0 then
            bsonWriter:WriteBytes(GetBytes(this, value))
          else
            bsonWriter:WriteStartDocument()
            MongoDBBsonIO.IBsonWriterExtensions.WriteInt32(bsonWriter, "Length", value:getLength())
            MongoDBBsonIO.IBsonWriterExtensions.WriteBytes(bsonWriter, "Bytes", GetBytes(this, value))
            bsonWriter:WriteEndDocument()
          end
          break
        elseif default == 2 --[[BsonType.String]] then
          local sb = System.StringBuilder(value:getLength())
          for i = 0, value:getLength() - 1 do
            sb:AppendChar(value:get(i) and 49 --[['1']] or 48 --[['0']])
          end
          bsonWriter:WriteString(sb:ToString())
          break
        else
          local message = System.String.Format("'{0}' is not a valid BitArray representation.", this._representation)
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end
      until 1
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified representation.
    -- </summary>
    -- <returns>The reconfigured serializer.</returns>
    WithRepresentation = function (this, representation)
      if representation == this._representation then
        return this
      else
        return System.new(class, 2, representation)
      end
    end
    GetBytes = function (this, bitArray)
      -- TODO: is there a more efficient way to do this?
      local bytes = ArrayByte:new(System.div((bitArray:getLength() + 7), 8))
      local i = 0
      for _, value in System.each(bitArray) do
        value = System.cast(System.Boolean, value)
        if value then
          local index = System.div(i, 8)
          local bit = System.mod(i, 8)
          bytes:set(index, System.bor(bytes:get(index), System.toByte(System.sl(1, bit))))
        end
        i = i + 1
      end
      return bytes
    end
    WithRepresentation1 = function (this, representation)
      return WithRepresentation(this, representation)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.SealedClassSerializerBase_1(System.BitArray),
          out.MongoDB.Bson.Serialization.IRepresentationConfigurable_1(out.MongoDB.Bson.Serialization.Serializers.BitArraySerializer)
        }
      end,
      _representation = 0,
      getRepresentation = getRepresentation,
      DeserializeValue = DeserializeValue,
      SerializeValue = SerializeValue,
      WithRepresentation = WithRepresentation,
      WithRepresentation1 = WithRepresentation1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
