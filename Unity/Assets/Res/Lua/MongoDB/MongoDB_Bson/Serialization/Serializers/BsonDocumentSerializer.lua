-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBIdGenerators
local MongoDBSerializers
local BsonValueSerializerBase_1BsonDocument
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBIdGenerators = MongoDB.Bson.Serialization.IdGenerators
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  BsonValueSerializerBase_1BsonDocument = MongoDBSerializers.BsonValueSerializerBase_1(MongoDBBson.BsonDocument)
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for BsonDocuments.
  -- </summary>
  namespace.class("BsonDocumentSerializer", function (namespace)
    local __instance, getInstance, DeserializeValue, GetDocumentId, TryGetMemberSerializationInfo, SerializeValue, SetDocumentId, class, 
    static, __ctor__
    static = function (this)
      __instance = class()
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocumentSerializer class.
    -- </summary>
    __ctor__ = function (this)
      BsonValueSerializerBase_1BsonDocument.__ctor__(this, 3 --[[BsonType.Document]])
    end
    getInstance = function ()
      return __instance
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    DeserializeValue = function (this, context, args)
      local bsonReader = context:getReader()

      bsonReader:ReadStartDocument()
      local document = System.new(MongoDBBson.BsonDocument, 2, context:getAllowDuplicateElementNames())
      while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
        local name = MongoDBBsonIO.IBsonReaderExtensions.ReadName(bsonReader)
        local value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, MongoDBBson.BsonValue)
        document:Add9(name, value)
      end
      bsonReader:ReadEndDocument()

      return document
    end
    -- <summary>
    -- Gets the document Id.
    -- </summary>
    -- <param name="id">The Id.</param>
    -- <param name="idNominalType">The nominal type of the Id.</param>
    -- <param name="idGenerator">The IdGenerator for the Id type.</param>
    -- <returns>True if the document has an Id.</returns>
    GetDocumentId = function (this, document, id, idNominalType, idGenerator)
      local bsonDocument = System.cast(MongoDBBson.BsonDocument, document)

      local idBsonValue
      local default
      default, idBsonValue = bsonDocument:TryGetValue("_id")
      if default then
        id = idBsonValue
        idGenerator = MongoDBBsonSerialization.BsonSerializer.LookupIdGenerator(id:GetType())

        if idGenerator == nil then
          local idBinaryData = System.as(id, MongoDBBson.BsonBinaryData)
          if MongoDBBson.BsonBinaryData.op_Inequality1(idBinaryData, nil) and (idBinaryData:getSubType() == 3 --[[BsonBinarySubType.UuidLegacy]] or idBinaryData:getSubType() == 4 --[[BsonBinarySubType.UuidStandard]]) then
            idGenerator = MongoDBIdGenerators.BsonBinaryDataGuidGenerator.GetInstance(idBinaryData:getGuidRepresentation())
          end
        end
      else
        id = nil
        idGenerator = MongoDBIdGenerators.BsonObjectIdGenerator.getInstance()
      end

      idNominalType = System.typeof(MongoDBBson.BsonValue)
      return true, id, idNominalType, idGenerator
    end
    -- <summary>
    -- Tries to get the serialization info for a member.
    -- </summary>
    -- <param name="serializationInfo">The serialization information.</param>
    -- <returns>
    -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
    -- </returns>
    TryGetMemberSerializationInfo = function (this, memberName, serializationInfo)
      serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(memberName, MongoDBSerializers.BsonValueSerializer.getInstance(), System.typeof(MongoDBBson.BsonValue))
      return true, serializationInfo
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    SerializeValue = function (this, context, args, value)
      local bsonWriter = context:getWriter()
      bsonWriter:WriteStartDocument()

      local alreadySerializedIndex = - 1
      if args:getSerializeIdFirst() then
        local idIndex = value:IndexOfName("_id")
        if idIndex ~= - 1 then
          bsonWriter:WriteName("_id")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, value:get(idIndex), MongoDBBson.BsonValue)
          alreadySerializedIndex = idIndex
        end
      end

      local elementCount = value:getElementCount()
      for index = 0, elementCount - 1 do
        local continue
        repeat
          if index == alreadySerializedIndex then
            continue = true
            break
          end

          local element = value:GetElement(index)
          bsonWriter:WriteName(element:getName())
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, element:getValue(), MongoDBBson.BsonValue)
          continue = true
        until 1
        if not continue then
          break
        end
      end

      bsonWriter:WriteEndDocument()
    end
    -- <summary>
    -- Sets the document Id.
    -- </summary>
    -- <param name="id">The Id.</param>
    SetDocumentId = function (this, document, id)
      if document == nil then
        System.throw(System.ArgumentNullException("document"))
      end
      if id == nil then
        System.throw(System.ArgumentNullException("id"))
      end

      local bsonDocument = System.cast(MongoDBBson.BsonDocument, document)
      local idBsonValue = System.as(id, MongoDBBson.BsonValue)
      if MongoDBBson.BsonValue.op_Equality(idBsonValue, nil) then
        idBsonValue = MongoDBBson.BsonValue.Create(id)
        -- be helpful and provide automatic conversion to BsonValue if necessary
      end

      local idIndex = bsonDocument:IndexOfName("_id")
      if idIndex ~= - 1 then
        bsonDocument:set(idIndex, idBsonValue)
      else
        bsonDocument:InsertAt(0, System.new(MongoDBBson.BsonElement, 2, "_id", idBsonValue))
      end
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.BsonValueSerializerBase_1(out.MongoDB.Bson.BsonDocument),
          out.MongoDB.Bson.Serialization.IBsonDocumentSerializer,
          out.MongoDB.Bson.Serialization.IBsonIdProvider
        }
      end,
      getInstance = getInstance,
      DeserializeValue = DeserializeValue,
      GetDocumentId = GetDocumentId,
      TryGetMemberSerializationInfo = TryGetMemberSerializationInfo,
      SerializeValue = SerializeValue,
      SetDocumentId = SetDocumentId,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
