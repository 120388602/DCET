-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a base class for BsonValue serializers.
  -- </summary>
  namespace.class("BsonValueSerializerBase_1", function (namespace)
    return function (TBsonValue)
      local Deserialize, Serialize, __ctor__
      -- <summary>
      -- Initializes a new instance of the <see cref="BsonValueSerializerBase{TBsonValue}"/> class.
      -- </summary>
      __ctor__ = function (this, bsonType)
        this._bsonType = System.Nullable.clone(bsonType)
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      Deserialize = function (this, context, args)
        if (this._bsonType ~= nil) then
          this:EnsureBsonTypeEquals(context:getReader(), System.Nullable.Value(this._bsonType))
        end
        return this:DeserializeValue(context, args:__clone__())
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      Serialize = function (this, context, args, value)
        if MongoDBBson.BsonValue.op_Equality(value, nil) then
          local message = System.String.Format("C# null values of type '{0}' cannot be serialized using a serializer of type '{1}'.", MongoDBBson.BsonUtils.GetFriendlyTypeName(this:getValueType()), MongoDBBson.BsonUtils.GetFriendlyTypeName(this:GetType()))
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end

        local actualType = value:GetType()
        if actualType ~= this:getValueType() and not args:getSerializeAsNominalType() then
          local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(actualType)
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(serializer, context, value)
          return
        end

        this:SerializeValue(context, args:__clone__(), value)
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TBsonValue)
          }
        end,
        Deserialize = Deserialize,
        Serialize = Serialize,
        __ctor__ = __ctor__
      }
    end
  end)
end)
