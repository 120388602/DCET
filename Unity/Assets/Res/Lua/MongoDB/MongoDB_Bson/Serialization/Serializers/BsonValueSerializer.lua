-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonSerialization
local MongoDBSerializers
local BsonValueSerializerBase_1BsonValue
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  BsonValueSerializerBase_1BsonValue = MongoDBSerializers.BsonValueSerializerBase_1(MongoDBBson.BsonValue)
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for BsonValues.
  -- </summary>
  namespace.class("BsonValueSerializer", function (namespace)
    local __instance, getInstance, DeserializeValue, TryGetMemberSerializationInfo, TryGetItemSerializationInfo, SerializeValue, class, static, 
    __ctor__
    static = function (this)
      __instance = class()
    end
    -- <summary>
    -- Initializes a new instance of the BsonValueSerializer class.
    -- </summary>
    __ctor__ = function (this)
      BsonValueSerializerBase_1BsonValue.__ctor__(this)
    end
    getInstance = function ()
      return __instance
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    DeserializeValue = function (this, context, args)
      local bsonReader = context:getReader()

      local bsonType = bsonReader:GetCurrentBsonType()
      repeat
        local default = bsonType
        if default == 4 --[[BsonType.Array]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonArraySerializer.getInstance(), context, MongoDBBson.BsonArray)
        elseif default == 5 --[[BsonType.Binary]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonBinaryDataSerializer.getInstance(), context, MongoDBBson.BsonBinaryData)
        elseif default == 8 --[[BsonType.Boolean]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonBooleanSerializer.getInstance(), context, MongoDBBson.BsonBoolean)
        elseif default == 9 --[[BsonType.DateTime]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonDateTimeSerializer.getInstance(), context, MongoDBBson.BsonDateTime)
        elseif default == 19 --[[BsonType.Decimal128]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonDecimal128Serializer.getInstance(), context, MongoDBBson.BsonDecimal128)
        elseif default == 3 --[[BsonType.Document]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonDocumentSerializer.getInstance(), context, MongoDBBson.BsonDocument)
        elseif default == 1 --[[BsonType.Double]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonDoubleSerializer.getInstance(), context, MongoDBBson.BsonDouble)
        elseif default == 16 --[[BsonType.Int32]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonInt32Serializer.getInstance(), context, MongoDBBson.BsonInt32)
        elseif default == 18 --[[BsonType.Int64]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonInt64Serializer.getInstance(), context, MongoDBBson.BsonInt64)
        elseif default == 13 --[[BsonType.JavaScript]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonJavaScriptSerializer.getInstance(), context, MongoDBBson.BsonJavaScript)
        elseif default == 15 --[[BsonType.JavaScriptWithScope]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonJavaScriptWithScopeSerializer.getInstance(), context, MongoDBBson.BsonJavaScriptWithScope)
        elseif default == 127 --[[BsonType.MaxKey]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonMaxKeySerializer.getInstance(), context, MongoDBBson.BsonMaxKey)
        elseif default == 255 --[[BsonType.MinKey]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonMinKeySerializer.getInstance(), context, MongoDBBson.BsonMinKey)
        elseif default == 10 --[[BsonType.Null]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonNullSerializer.getInstance(), context, MongoDBBson.BsonNull)
        elseif default == 7 --[[BsonType.ObjectId]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonObjectIdSerializer.getInstance(), context, MongoDBBson.BsonObjectId)
        elseif default == 11 --[[BsonType.RegularExpression]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonRegularExpressionSerializer.getInstance(), context, MongoDBBson.BsonRegularExpression)
        elseif default == 2 --[[BsonType.String]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonStringSerializer.getInstance(), context, MongoDBBson.BsonString)
        elseif default == 14 --[[BsonType.Symbol]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonSymbolSerializer.getInstance(), context, MongoDBBson.BsonSymbol)
        elseif default == 17 --[[BsonType.Timestamp]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonTimestampSerializer.getInstance(), context, MongoDBBson.BsonTimestamp)
        elseif default == 6 --[[BsonType.Undefined]] then
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonUndefinedSerializer.getInstance(), context, MongoDBBson.BsonUndefined)
        else
          local message = System.String.Format("Invalid BsonType {0}.", bsonType)
          System.throw(System.new(MongoDBBson.BsonInternalException, 2, message))
        end
      until 1
    end
    -- <summary>
    -- Tries to get the serialization info for a member.
    -- </summary>
    -- <param name="serializationInfo">The serialization information.</param>
    -- <returns>
    -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
    -- </returns>
    TryGetMemberSerializationInfo = function (this, memberName, serializationInfo)
      serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(memberName, getInstance(), System.typeof(MongoDBBson.BsonValue))
      return true, serializationInfo
    end
    -- <summary>
    -- Tries to get the serialization info for the individual items of the array.
    -- </summary>
    -- <returns>
    -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
    -- </returns>
    TryGetItemSerializationInfo = function (this, serializationInfo)
      serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(nil, getInstance(), System.typeof(MongoDBBson.BsonValue))
      return true, serializationInfo
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    SerializeValue = function (this, context, args, value)
      repeat
        local default = value:getBsonType()
        if default == 4 --[[BsonType.Array]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonArraySerializer.getInstance(), context, System.cast(MongoDBBson.BsonArray, value), MongoDBBson.BsonArray)
          break
        elseif default == 5 --[[BsonType.Binary]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonBinaryDataSerializer.getInstance(), context, System.cast(MongoDBBson.BsonBinaryData, value), MongoDBBson.BsonBinaryData)
          break
        elseif default == 8 --[[BsonType.Boolean]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonBooleanSerializer.getInstance(), context, System.cast(MongoDBBson.BsonBoolean, value), MongoDBBson.BsonBoolean)
          break
        elseif default == 9 --[[BsonType.DateTime]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonDateTimeSerializer.getInstance(), context, System.cast(MongoDBBson.BsonDateTime, value), MongoDBBson.BsonDateTime)
          break
        elseif default == 19 --[[BsonType.Decimal128]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonDecimal128Serializer.getInstance(), context, System.cast(MongoDBBson.BsonDecimal128, value), MongoDBBson.BsonDecimal128)
          break
        elseif default == 3 --[[BsonType.Document]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonDocumentSerializer.getInstance(), context, System.cast(MongoDBBson.BsonDocument, value), MongoDBBson.BsonDocument)
          break
        elseif default == 1 --[[BsonType.Double]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonDoubleSerializer.getInstance(), context, System.cast(MongoDBBson.BsonDouble, value), MongoDBBson.BsonDouble)
          break
        elseif default == 16 --[[BsonType.Int32]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonInt32Serializer.getInstance(), context, System.cast(MongoDBBson.BsonInt32, value), MongoDBBson.BsonInt32)
          break
        elseif default == 18 --[[BsonType.Int64]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonInt64Serializer.getInstance(), context, System.cast(MongoDBBson.BsonInt64, value), MongoDBBson.BsonInt64)
          break
        elseif default == 13 --[[BsonType.JavaScript]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonJavaScriptSerializer.getInstance(), context, System.cast(MongoDBBson.BsonJavaScript, value), MongoDBBson.BsonJavaScript)
          break
        elseif default == 15 --[[BsonType.JavaScriptWithScope]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonJavaScriptWithScopeSerializer.getInstance(), context, System.cast(MongoDBBson.BsonJavaScriptWithScope, value), MongoDBBson.BsonJavaScriptWithScope)
          break
        elseif default == 127 --[[BsonType.MaxKey]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonMaxKeySerializer.getInstance(), context, System.cast(MongoDBBson.BsonMaxKey, value), MongoDBBson.BsonMaxKey)
          break
        elseif default == 255 --[[BsonType.MinKey]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonMinKeySerializer.getInstance(), context, System.cast(MongoDBBson.BsonMinKey, value), MongoDBBson.BsonMinKey)
          break
        elseif default == 10 --[[BsonType.Null]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonNullSerializer.getInstance(), context, System.cast(MongoDBBson.BsonNull, value), MongoDBBson.BsonNull)
          break
        elseif default == 7 --[[BsonType.ObjectId]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonObjectIdSerializer.getInstance(), context, System.cast(MongoDBBson.BsonObjectId, value), MongoDBBson.BsonObjectId)
          break
        elseif default == 11 --[[BsonType.RegularExpression]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonRegularExpressionSerializer.getInstance(), context, System.cast(MongoDBBson.BsonRegularExpression, value), MongoDBBson.BsonRegularExpression)
          break
        elseif default == 2 --[[BsonType.String]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonStringSerializer.getInstance(), context, System.cast(MongoDBBson.BsonString, value), MongoDBBson.BsonString)
          break
        elseif default == 14 --[[BsonType.Symbol]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonSymbolSerializer.getInstance(), context, System.cast(MongoDBBson.BsonSymbol, value), MongoDBBson.BsonSymbol)
          break
        elseif default == 17 --[[BsonType.Timestamp]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonTimestampSerializer.getInstance(), context, System.cast(MongoDBBson.BsonTimestamp, value), MongoDBBson.BsonTimestamp)
          break
        elseif default == 6 --[[BsonType.Undefined]] then
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonUndefinedSerializer.getInstance(), context, System.cast(MongoDBBson.BsonUndefined, value), MongoDBBson.BsonUndefined)
          break
        else
          System.throw(System.new(MongoDBBson.BsonInternalException, 2, "Invalid BsonType."))
        end
      until 1
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.BsonValueSerializerBase_1(out.MongoDB.Bson.BsonValue),
          out.MongoDB.Bson.Serialization.IBsonArraySerializer,
          out.MongoDB.Bson.Serialization.IBsonDocumentSerializer
        }
      end,
      getInstance = getInstance,
      DeserializeValue = DeserializeValue,
      TryGetMemberSerializationInfo = TryGetMemberSerializationInfo,
      TryGetItemSerializationInfo = TryGetItemSerializationInfo,
      SerializeValue = SerializeValue,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
