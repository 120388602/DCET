-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local ArrayType = System.Array(System.Type)
local ArrayObject = System.Array(System.Object)
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for a class that implements IEnumerable.
  -- </summary>
  namespace.class("EnumerableInterfaceImplementerSerializer_1", function (namespace)
    return function (TValue)
      local WithItemSerializer, CreateAccumulator, getChildSerializer, WithChildSerializer, class, __ctor1__, __ctor2__, __ctor3__
      local EnumerableInterfaceImplementerSerializerBase_1TValue = MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase_1(TValue)
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableInterfaceImplementerSerializer{TValue}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        EnumerableInterfaceImplementerSerializerBase_1TValue.__ctor__[1](this)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableInterfaceImplementerSerializer{TValue}"/> class.
      -- </summary>
      __ctor2__ = function (this, itemSerializer)
        EnumerableInterfaceImplementerSerializerBase_1TValue.__ctor__[2](this, itemSerializer)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableInterfaceImplementerSerializer{TValue}" /> class.
      -- </summary>
      __ctor3__ = function (this, serializerRegistry)
        EnumerableInterfaceImplementerSerializerBase_1TValue.__ctor__[3](this, serializerRegistry)
      end
      -- <summary>
      -- Returns a serializer that has been reconfigured with the specified item serializer.
      -- </summary>
      -- <returns>The reconfigured serializer.</returns>
      WithItemSerializer = function (this, itemSerializer)
        return System.new(class, 2, itemSerializer)
      end
      -- <summary>
      -- Creates the accumulator.
      -- </summary>
      CreateAccumulator = function (this)
        return TValue()
      end
      getChildSerializer = function (this)
        return this:getItemSerializer()
      end
      WithChildSerializer = function (this, childSerializer)
        return WithItemSerializer(this, childSerializer)
      end
      class = {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase_1(TValue),
            out.MongoDB.Bson.Serialization.IChildSerializerConfigurable
          }
        end,
        WithItemSerializer = WithItemSerializer,
        CreateAccumulator = CreateAccumulator,
        getChildSerializer = getChildSerializer,
        WithChildSerializer = WithChildSerializer,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__
        }
      }
      return class
    end
  end)

  -- <summary>
  -- Represents a serializer for a class that implementes <see cref="IEnumerable{TItem}"/>.
  -- </summary>
  -- <typeparam name="TItem">The type of the item.</typeparam>
  namespace.class("EnumerableInterfaceImplementerSerializer_2", function (namespace)
    return function (TValue, TItem)
      local WithItemSerializer, CreateAccumulator, FinalizeResult, getChildSerializer, WithChildSerializer, class, __ctor1__, __ctor2__, 
      __ctor3__
      local ListTItem = System.List(TItem)
      local IEnumerable_1TItem = System.IEnumerable_1(TItem)
      local IBsonSerializer_1TItem = MongoDB.Bson.Serialization.IBsonSerializer_1(TItem)
      local EnumerableInterfaceImplementerSerializerBase_2TValueTItem = MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase_2(TValue, TItem)
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableInterfaceImplementerSerializer{TValue, TItem}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        EnumerableInterfaceImplementerSerializerBase_2TValueTItem.__ctor__[1](this)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableInterfaceImplementerSerializer{TValue, TItem}"/> class.
      -- </summary>
      __ctor2__ = function (this, itemSerializer)
        EnumerableInterfaceImplementerSerializerBase_2TValueTItem.__ctor__[2](this, itemSerializer)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableInterfaceImplementerSerializer{TValue, TItem}" /> class.
      -- </summary>
      __ctor3__ = function (this, serializerRegistry)
        EnumerableInterfaceImplementerSerializerBase_2TValueTItem.__ctor__[3](this, serializerRegistry)
      end
      -- <summary>
      -- Returns a serializer that has been reconfigured with the specified item serializer.
      -- </summary>
      -- <returns>The reconfigured serializer.</returns>
      WithItemSerializer = function (this, itemSerializer)
        return System.new(class, 2, itemSerializer)
      end
      -- <summary>
      -- Creates the accumulator.
      -- </summary>
      CreateAccumulator = function (this)
        return ListTItem()
      end
      -- <summary>
      -- Finalizes the result.
      -- </summary>
      -- <returns>The final result.</returns>
      FinalizeResult = function (this, accumulator)
        -- find and call a constructor that we can pass the accumulator to
        local accumulatorType = accumulator:GetType()
        for _, constructorInfo in System.each(SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(TValue)):GetConstructors()) do
          local parameterInfos = constructorInfo:GetParameters()
          if #parameterInfos == 1 and SystemReflection.IntrospectionExtensions.GetTypeInfo(parameterInfos:get(0):getParameterType()):IsAssignableFrom(accumulatorType) then
            return System.cast(TValue, constructorInfo:Invoke(ArrayObject(accumulator)))
          end
        end

        -- otherwise try to find a no-argument constructor and an Add method
        local valueTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(TValue))
        local noArgumentConstructorInfo = valueTypeInfo:GetConstructor(ArrayType:new(0))
        local addMethodInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(TValue)):GetMethod("Add", ArrayType(System.typeof(TItem)))
        if SystemReflection.ConstructorInfo.op_Inequality(noArgumentConstructorInfo, nil) and addMethodInfo ~= nil then
          local value = System.cast(TValue, noArgumentConstructorInfo:Invoke(ArrayType:new(0)))
          for _, item in System.each(System.cast(IEnumerable_1TItem, accumulator)) do
            addMethodInfo:Invoke(value, ArrayObject(item))
          end
          return value
        end

        local message = System.String.Format("Type '{0}' does not have a suitable constructor or Add method.", System.typeof(TValue):getFullName())
        System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
      end
      getChildSerializer = function (this)
        return this:getItemSerializer()
      end
      WithChildSerializer = function (this, childSerializer)
        return WithItemSerializer(this, System.cast(IBsonSerializer_1TItem, childSerializer))
      end
      class = {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase_2(TValue, TItem),
            out.MongoDB.Bson.Serialization.IChildSerializerConfigurable
          }
        end,
        WithItemSerializer = WithItemSerializer,
        CreateAccumulator = CreateAccumulator,
        FinalizeResult = FinalizeResult,
        getChildSerializer = getChildSerializer,
        WithChildSerializer = WithChildSerializer,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__
        }
      }
      return class
    end
  end)
end)
