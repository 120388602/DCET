-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for enums.
  -- </summary>
  namespace.class("EnumSerializer_1", function (namespace)
    return function (TEnum)
      local getRepresentation, Deserialize, Serialize, WithRepresentation, WithRepresentation1, class, __ctor1__, __ctor2__
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumSerializer{TEnum}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        __ctor2__(this, 0 --[[(BsonType)0]])
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumSerializer{TEnum}"/> class.
      -- </summary>
      __ctor2__ = function (this, representation)
        repeat
          local default = representation
          if default == 0 or default == 16 --[[BsonType.Int32]] or default == 18 --[[BsonType.Int64]] or default == 2 --[[BsonType.String]] then
            break
          else
            local message = System.String.Format("{0} is not a valid representation for an EnumSerializer.", representation)
            System.throw(System.ArgumentException(message))
          end
        until 1

        -- don't know of a way to enforce this at compile time
        local enumTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(TEnum))
        if not enumTypeInfo:getIsEnum() then
          local message = System.String.Format("{0} is not an enum type.", System.typeof(TEnum):getFullName())
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end

        this._representation = representation
      end
      getRepresentation = function (this)
        return this._representation
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      Deserialize = function (this, context, args)
        local bsonReader = context:getReader()

        local bsonType = bsonReader:GetCurrentBsonType()
        repeat
          local default = bsonType
          if default == 16 --[[BsonType.Int32]] then
            return System.cast(TEnum, System.Enum.ToObject(System.typeof(TEnum), bsonReader:ReadInt32()))
          elseif default == 18 --[[BsonType.Int64]] then
            return System.cast(TEnum, System.Enum.ToObject(System.typeof(TEnum), bsonReader:ReadInt64()))
          elseif default == 1 --[[BsonType.Double]] then
            return System.cast(TEnum, System.Enum.ToObject(System.typeof(TEnum), System.ToInt64(bsonReader:ReadDouble())))
          elseif default == 2 --[[BsonType.String]] then
            return System.cast(TEnum, System.Enum.Parse(System.typeof(TEnum), bsonReader:ReadString()))
          else
            System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
          end
        until 1
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      Serialize = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        repeat
          local caseLabel2, caseLabel1
          local default = this._representation
          if default == 0 then
            local underlyingTypeCode = System.Type.GetTypeCode(System.Enum.GetUnderlyingType(System.typeof(TEnum)))
            if underlyingTypeCode == 11 --[[TypeCode.Int64]] or underlyingTypeCode == 12 --[[TypeCode.UInt64]] then
              caseLabel2 = true
              goto caseLabel2
            else
              caseLabel1 = true
              goto caseLabel1
            end
          elseif default == 16 --[[BsonType.Int32]] then
            bsonWriter:WriteInt32(System.Convert.ToInt32(value))
            break
          elseif default == 18 --[[BsonType.Int64]] then
            bsonWriter:WriteInt64(System.Convert.ToInt64(value))
            break
          elseif default == 2 --[[BsonType.String]] then
            bsonWriter:WriteString(value:ToString())
            break
          else
            System.throw(System.new(MongoDBBson.BsonInternalException, 2, "Unexpected EnumRepresentation."))
          end
          ::caseLabel2::
          if caseLabel2 then
            bsonWriter:WriteInt64(System.Convert.ToInt64(value))
            break
          end
          ::caseLabel1::
          if caseLabel1 then
            bsonWriter:WriteInt32(System.Convert.ToInt32(value))
            break
          end
        until 1
      end
      -- <summary>
      -- Returns a serializer that has been reconfigured with the specified representation.
      -- </summary>
      -- <returns>The reconfigured serializer.</returns>
      WithRepresentation = function (this, representation)
        if representation == this._representation then
          return this
        else
          return System.new(class, 2, representation)
        end
      end
      WithRepresentation1 = function (this, representation)
        return WithRepresentation(this, representation)
      end
      class = {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.StructSerializerBase_1(TEnum),
            out.MongoDB.Bson.Serialization.IRepresentationConfigurable_1(out.MongoDB.Bson.Serialization.Serializers.EnumSerializer_1(TEnum))
          }
        end,
        _representation = 0,
        getRepresentation = getRepresentation,
        Deserialize = Deserialize,
        Serialize = Serialize,
        WithRepresentation = WithRepresentation,
        WithRepresentation1 = WithRepresentation1,
        __ctor__ = {
          __ctor1__,
          __ctor2__
        }
      }
      return class
    end
  end)
end)
