-- Generated by CSharp.lua Compiler
--[[ Copyright 2015-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for a BsonDocument with some parts raw.
  -- </summary>
  namespace.class("PartiallyRawBsonDocumentSerializer", function (namespace)
    local Deserialize, ChooseSerializer, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="PartiallyRawBsonDocumentSerializer"/> class.
    -- </summary>
    -- <param name="rawSerializer">The raw serializer.</param>
    __ctor__ = function (this, name, rawSerializer)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      if rawSerializer == nil then
        System.throw(System.ArgumentNullException("rawSerializer"))
      end
      if not SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(MongoDBBson.BsonValue)):IsAssignableFrom(rawSerializer:getValueType()) then
        System.throw(System.ArgumentException("RawSerializer ValueType must be a BsonValue.", "rawSerializer"))
      end

      this._name = name
      this._rawSerializer = rawSerializer
    end
    Deserialize = function (this, context, args)
      local document = MongoDBBson.BsonDocument()

      local reader = context:getReader()
      reader:ReadStartDocument()
      while reader:ReadBsonType() ~= 0 do
        local name = MongoDBBsonIO.IBsonReaderExtensions.ReadName(reader)
        local serializer = ChooseSerializer(this, name)
        local value = System.cast(MongoDBBson.BsonValue, MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(serializer, context))
        document:set1(name, value)
      end
      reader:ReadEndDocument()

      return document
    end
    ChooseSerializer = function (this, name)
      if name == this._name then
        return this._rawSerializer
      else
        return MongoDBSerializers.BsonValueSerializer.getInstance()
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(out.MongoDB.Bson.BsonDocument)
        }
      end,
      Deserialize = Deserialize,
      __ctor__ = __ctor__
    }
  end)
end)
