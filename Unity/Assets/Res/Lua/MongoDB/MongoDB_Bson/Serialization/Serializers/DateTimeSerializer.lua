-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
local MongoDBSerializerHelper
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  MongoDBSerializerHelper = MongoDB.Bson.Serialization.Serializers.SerializerHelper
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for DateTimes.
  -- </summary>
  namespace.class("DateTimeSerializer", function (namespace)
    local __dateOnlyInstance, __localInstance, __utcInstance, getDateOnlyInstance, getLocalInstance, getUtcInstance, getDateOnly, getKind, 
    getRepresentation, Deserialize, Serialize, WithDateOnly, WithDateOnly1, WithKind, WithKind1, WithRepresentation, 
    WithRepresentation1, class, static, internal, __ctor1__, __ctor2__, __ctor3__, __ctor4__, 
    __ctor5__, __ctor6__, __ctor7__
    namespace.class("Flags", function (namespace)
      return {}
    end)
    static = function (this)
      __dateOnlyInstance = System.new(class, 2, true)
      __localInstance = System.new(class, 5, 2 --[[DateTimeKind.Local]])
      __utcInstance = System.new(class, 5, 1 --[[DateTimeKind.Utc]])
    end
    internal = function (this)
      this._int64Serializer = MongoDBSerializers.Int64Serializer()
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="DateTimeSerializer"/> class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor6__(this, 1 --[[DateTimeKind.Utc]], 9 --[[BsonType.DateTime]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="DateTimeSerializer"/> class.
    -- </summary>
    __ctor2__ = function (this, dateOnly)
      __ctor3__(this, dateOnly, 9 --[[BsonType.DateTime]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="DateTimeSerializer"/> class.
    -- </summary>
    -- <param name="representation">The representation.</param>
    __ctor3__ = function (this, dateOnly, representation)
      __ctor7__(this, dateOnly, 1 --[[DateTimeKind.Utc]], representation)
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="DateTimeSerializer"/> class.
    -- </summary>
    __ctor4__ = function (this, representation)
      __ctor6__(this, 1 --[[DateTimeKind.Utc]], representation)
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="DateTimeSerializer"/> class.
    -- </summary>
    __ctor5__ = function (this, kind)
      __ctor6__(this, kind, 9 --[[BsonType.DateTime]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="DateTimeSerializer"/> class.
    -- </summary>
    -- <param name="representation">The representation.</param>
    __ctor6__ = function (this, kind, representation)
      __ctor7__(this, false, kind, representation)
    end
    __ctor7__ = function (this, dateOnly, kind, representation)
      internal(this)
      repeat
        local default = representation
        if default == 9 --[[BsonType.DateTime]] or default == 3 --[[BsonType.Document]] or default == 18 --[[BsonType.Int64]] or default == 2 --[[BsonType.String]] then
          break
        else
          local message = System.String.Format("{0} is not a valid representation for a DateTimeSerializer.", representation)
          System.throw(System.ArgumentException(message))
        end
      until 1

      this._dateOnly = dateOnly
      this._kind = kind
      this._representation = representation

      this._helper = MongoDBSerializers.SerializerHelper(System.Array(MongoDBSerializerHelper.Member)(MongoDBSerializerHelper.Member("DateTime", 1 --[[Flags.DateTime]], false), MongoDBSerializerHelper.Member("Ticks", 2 --[[Flags.Ticks]], false)))
    end
    getDateOnlyInstance = function ()
      return __dateOnlyInstance
    end
    getLocalInstance = function ()
      return __localInstance
    end
    getUtcInstance = function ()
      return __utcInstance
    end
    getDateOnly = function (this)
      return this._dateOnly
    end
    getKind = function (this)
      return this._kind
    end
    getRepresentation = function (this)
      return this._representation
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize = function (this, context, args)
      local bsonReader = context:getReader()
      local value

      local bsonType = bsonReader:GetCurrentBsonType()
      repeat
        local default = bsonType
        if default == 9 --[[BsonType.DateTime]] then
          value = System.new(MongoDBBson.BsonDateTime, 2, bsonReader:ReadDateTime()):ToUniversalTime()
          break
        elseif default == 3 --[[BsonType.Document]] then
          value = System.default(System.DateTime)
          this._helper:DeserializeMembers(context, function (elementName, flag)
            repeat
              local default = flag
              if default == 1 --[[Flags.DateTime]] then
                bsonReader:SkipValue()
                break
              elseif default == 2 --[[Flags.Ticks]] then
                value = System.DateTime(MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._int64Serializer, context, System.Int64), 1 --[[DateTimeKind.Utc]])
                break
              end
            until 1
          end)
          break
        elseif default == 18 --[[BsonType.Int64]] then
          value = System.DateTime.SpecifyKind(System.DateTime(bsonReader:ReadInt64()), 1 --[[DateTimeKind.Utc]])
          break
        elseif default == 2 --[[BsonType.String]] then
          if this._dateOnly then
            value = System.DateTime.SpecifyKind(System.DateTime.ParseExact(bsonReader:ReadString(), "yyyy-MM-dd", nil), 1 --[[DateTimeKind.Utc]])
          else
            value = MongoDBBsonIO.JsonConvert.ToDateTime(bsonReader:ReadString())
          end
          break
        else
          System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
        end
      until 1

      if this._dateOnly then
        if value:getTimeOfDay() ~= System.TimeSpan.Zero then
          System.throw(System.FormatException("TimeOfDay component for DateOnly DateTime value is not zero."))
        end
        value = System.DateTime.SpecifyKind(value, this._kind)
        -- not ToLocalTime or ToUniversalTime!
      else
        repeat
          local extern = this._kind
          if extern == 2 --[[DateTimeKind.Local]] or extern == 0 --[[DateTimeKind.Unspecified]] then
            value = System.DateTime.SpecifyKind(MongoDBBson.BsonUtils.ToLocalTime(value), this._kind)
            break
          elseif extern == 1 --[[DateTimeKind.Utc]] then
            value = MongoDBBson.BsonUtils.ToUniversalTime(value)
            break
          end
        until 1
      end

      return value
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    Serialize = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      local utcDateTime
      if this._dateOnly then
        if value:getTimeOfDay() ~= System.TimeSpan.Zero then
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, "TimeOfDay component is not zero."))
        end
        utcDateTime = System.DateTime.SpecifyKind(value, 1 --[[DateTimeKind.Utc]])
        -- not ToLocalTime
      else
        utcDateTime = MongoDBBson.BsonUtils.ToUniversalTime(value)
      end
      local millisecondsSinceEpoch = MongoDBBson.BsonUtils.ToMillisecondsSinceEpoch(utcDateTime)

      repeat
        local default = this._representation
        if default == 9 --[[BsonType.DateTime]] then
          bsonWriter:WriteDateTime(millisecondsSinceEpoch)
          break
        elseif default == 3 --[[BsonType.Document]] then
          bsonWriter:WriteStartDocument()
          MongoDBBsonIO.IBsonWriterExtensions.WriteDateTime(bsonWriter, "DateTime", millisecondsSinceEpoch)
          MongoDBBsonIO.IBsonWriterExtensions.WriteInt64(bsonWriter, "Ticks", utcDateTime:getTicks())
          bsonWriter:WriteEndDocument()
          break
        elseif default == 18 --[[BsonType.Int64]] then
          bsonWriter:WriteInt64(utcDateTime:getTicks())
          break
        elseif default == 2 --[[BsonType.String]] then
          if this._dateOnly then
            bsonWriter:WriteString(value:ToString("yyyy-MM-dd"))
          else
            if value == System.DateTime.MinValue or value == System.DateTime.MaxValue then
              -- serialize MinValue and MaxValue as Unspecified so we do NOT get the time zone offset
              value = System.DateTime.SpecifyKind(value, 0 --[[DateTimeKind.Unspecified]])
            elseif value:getKind() == 0 --[[DateTimeKind.Unspecified]] then
              -- serialize Unspecified as Local se we get the time zone offset
              value = System.DateTime.SpecifyKind(value, 2 --[[DateTimeKind.Local]])
            end
            bsonWriter:WriteString(MongoDBBsonIO.JsonConvert.ToString1(value))
          end
          break
        else
          local message = System.String.Format("'{0}' is not a valid DateTime representation.", this._representation)
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end
      until 1
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified dateOnly value.
    -- </summary>
    -- <returns>
    -- The reconfigured serializer.
    -- </returns>
    WithDateOnly = function (this, dateOnly)
      if dateOnly == this._dateOnly then
        return this
      else
        return System.new(class, 3, dateOnly, this._representation)
      end
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified dateOnly value and representation.
    -- </summary>
    -- <param name="representation">The representation.</param>
    -- <returns>
    -- The reconfigured serializer.
    -- </returns>
    WithDateOnly1 = function (this, dateOnly, representation)
      if dateOnly == this._dateOnly and representation == this._representation then
        return this
      else
        return System.new(class, 3, dateOnly, representation)
      end
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified DateTimeKind value.
    -- </summary>
    -- <returns>
    -- The reconfigured serializer.
    -- </returns>
    WithKind = function (this, kind)
      if kind == this._kind and this._dateOnly == false then
        return this
      else
        return System.new(class, 6, kind, this._representation)
      end
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified DateTimeKind value and representation.
    -- </summary>
    -- <param name="representation">The representation.</param>
    -- <returns>
    -- The reconfigured serializer.
    -- </returns>
    WithKind1 = function (this, kind, representation)
      if kind == this._kind and representation == this._representation and this._dateOnly == false then
        return this
      else
        return System.new(class, 6, kind, representation)
      end
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified representation.
    -- </summary>
    -- <returns>The reconfigured serializer.</returns>
    WithRepresentation = function (this, representation)
      if representation == this._representation then
        return this
      else
        if this._dateOnly then
          return System.new(class, 3, this._dateOnly, representation)
        else
          return System.new(class, 6, this._kind, representation)
        end
      end
    end
    WithRepresentation1 = function (this, representation)
      return WithRepresentation(this, representation)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.StructSerializerBase_1(System.DateTime),
          out.MongoDB.Bson.Serialization.IRepresentationConfigurable_1(out.MongoDB.Bson.Serialization.Serializers.DateTimeSerializer)
        }
      end,
      _dateOnly = false,
      _kind = 0,
      _representation = 0,
      getDateOnlyInstance = getDateOnlyInstance,
      getLocalInstance = getLocalInstance,
      getUtcInstance = getUtcInstance,
      getDateOnly = getDateOnly,
      getKind = getKind,
      getRepresentation = getRepresentation,
      Deserialize = Deserialize,
      Serialize = Serialize,
      WithDateOnly = WithDateOnly,
      WithDateOnly1 = WithDateOnly1,
      WithKind = WithKind,
      WithKind1 = WithKind1,
      WithRepresentation = WithRepresentation,
      WithRepresentation1 = WithRepresentation1,
      static = static,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__,
        __ctor5__,
        __ctor6__,
        __ctor7__
      }
    }
    return class
  end)
end)
