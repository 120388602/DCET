-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for a BsonValue that can round trip C# null.
  -- </summary>
  namespace.class("BsonValueCSharpNullSerializer_1", function (namespace)
    return function (TBsonValue)
      local Deserialize, Serialize, IsCSharpNullRepresentation, __ctor__
      -- <summary>
      -- Initializes a new instance of the <see cref="BsonValueCSharpNullSerializer{TBsonValue}"/> class.
      -- </summary>
      __ctor__ = function (this, wrappedSerializer)
        this._wrappedSerializer = wrappedSerializer
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      Deserialize = function (this, context, args)
        local bsonReader = context:getReader()

        local bsonType = bsonReader:GetCurrentBsonType()
        if bsonType == 3 --[[BsonType.Document]] and IsCSharpNullRepresentation(this, bsonReader) then
          -- if IsCSharpNullRepresentation returns true it will have consumed the document representing C# null
          return nil
        end

        -- handle BSON null for backward compatibility with existing data (new data would have _csharpnull)
        if bsonType == 10 --[[BsonType.Null]] and (args:getNominalType() ~= System.typeof(MongoDBBson.BsonValue) and args:getNominalType() ~= System.typeof(MongoDBBson.BsonNull)) then
          bsonReader:ReadNull()
          return nil
        end

        return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._wrappedSerializer, context, TBsonValue)
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      Serialize = function (this, context, args, value)
        if MongoDBBson.BsonValue.op_Equality(value, nil) then
          local bsonWriter = context:getWriter()
          bsonWriter:WriteStartDocument()
          MongoDBBsonIO.IBsonWriterExtensions.WriteBoolean(bsonWriter, "_csharpnull", true)
          bsonWriter:WriteEndDocument()
        else
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._wrappedSerializer, context, value, TBsonValue)
        end
      end
      IsCSharpNullRepresentation = function (this, bsonReader)
        local bookmark = bsonReader:GetBookmark()
        bsonReader:ReadStartDocument()
        local bsonType = bsonReader:ReadBsonType()
        if bsonType == 8 --[[BsonType.Boolean]] then
          local name = MongoDBBsonIO.IBsonReaderExtensions.ReadName(bsonReader)
          if name == "_csharpnull" or name == "$csharpnull" then
            local value = bsonReader:ReadBoolean()
            if value then
              bsonType = bsonReader:ReadBsonType()
              if bsonType == 0 --[[BsonType.EndOfDocument]] then
                bsonReader:ReadEndDocument()
                return true
              end
            end
          end
        end

        bsonReader:ReturnToBookmark(bookmark)
        return false
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TBsonValue)
          }
        end,
        Deserialize = Deserialize,
        Serialize = Serialize,
        __ctor__ = __ctor__
      }
    end
  end)

  -- <summary>
  -- Represents a serializer for a BsonValue that can round trip C# null and implements IBsonArraySerializer and IBsonDocumentSerializer.
  -- </summary>
  namespace.class("BsonValueCSharpNullArrayAndDocumentSerializer_1", function (namespace)
    return function (TBsonValue)
      local TryGetItemSerializationInfo, TryGetMemberSerializationInfo, __ctor__
      local BsonValueCSharpNullSerializer_1TBsonValue = MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer_1(TBsonValue)
      -- <summary>
      -- Initializes a new instance of the <see cref="BsonValueCSharpNullArrayAndDocumentSerializer{TBsonValue}"/> class.
      -- </summary>
      __ctor__ = function (this, wrappedSerializer)
        BsonValueCSharpNullSerializer_1TBsonValue.__ctor__(this, wrappedSerializer)
      end
      -- <summary>
      -- Tries to get the serialization info for the individual items of the array.
      -- </summary>
      -- <returns>
      -- The serialization info for the items.
      -- </returns>
      TryGetItemSerializationInfo = function (this, serializationInfo)
        local default
        default, serializationInfo = MongoDBSerializers.BsonValueSerializer.getInstance():TryGetItemSerializationInfo()
        return default, serializationInfo
      end
      -- <summary>
      -- Tries to get the serialization info for a member.
      -- </summary>
      -- <param name="serializationInfo">The serialization information.</param>
      -- <returns>
      -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
      -- </returns>
      TryGetMemberSerializationInfo = function (this, memberName, serializationInfo)
        local default
        default, serializationInfo = MongoDBSerializers.BsonValueSerializer.getInstance():TryGetMemberSerializationInfo(memberName)
        return default, serializationInfo
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer_1(TBsonValue),
            out.MongoDB.Bson.Serialization.IBsonArraySerializer,
            out.MongoDB.Bson.Serialization.IBsonDocumentSerializer
          }
        end,
        TryGetItemSerializationInfo = TryGetItemSerializationInfo,
        TryGetMemberSerializationInfo = TryGetMemberSerializationInfo,
        __ctor__ = __ctor__
      }
    end
  end)

  -- <summary>
  -- Represents a serializer for a BsonValue that can round trip C# null and implements IBsonArraySerializer.
  -- </summary>
  namespace.class("BsonValueCSharpNullArraySerializer_1", function (namespace)
    return function (TBsonValue)
      local TryGetItemSerializationInfo, __ctor__
      local BsonValueCSharpNullSerializer_1TBsonValue = MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer_1(TBsonValue)
      -- <summary>
      -- Initializes a new instance of the <see cref="BsonValueCSharpNullArraySerializer{TBsonValue}"/> class.
      -- </summary>
      __ctor__ = function (this, wrappedSerializer)
        BsonValueCSharpNullSerializer_1TBsonValue.__ctor__(this, wrappedSerializer)
      end
      -- <summary>
      -- Tries to get the serialization info for the individual items of the array.
      -- </summary>
      -- <returns>
      -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
      -- </returns>
      TryGetItemSerializationInfo = function (this, serializationInfo)
        local default
        default, serializationInfo = MongoDBSerializers.BsonValueSerializer.getInstance():TryGetItemSerializationInfo()
        return default, serializationInfo
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer_1(TBsonValue),
            out.MongoDB.Bson.Serialization.IBsonArraySerializer
          }
        end,
        TryGetItemSerializationInfo = TryGetItemSerializationInfo,
        __ctor__ = __ctor__
      }
    end
  end)

  -- <summary>
  -- Represents a serializer for a BsonValue that can round trip C# null and implements IBsonDocumentSerializer.
  -- </summary>
  namespace.class("BsonValueCSharpNullDocumentSerializer_1", function (namespace)
    return function (TBsonValue)
      local TryGetMemberSerializationInfo, __ctor__
      local BsonValueCSharpNullSerializer_1TBsonValue = MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer_1(TBsonValue)
      -- <summary>
      -- Initializes a new instance of the <see cref="BsonValueCSharpNullDocumentSerializer{TBsonValue}"/> class.
      -- </summary>
      __ctor__ = function (this, wrappedSerializer)
        BsonValueCSharpNullSerializer_1TBsonValue.__ctor__(this, wrappedSerializer)
      end
      -- <summary>
      -- Tries to get the serialization info for a member.
      -- </summary>
      -- <param name="serializationInfo">The serialization information.</param>
      -- <returns>
      -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
      -- </returns>
      TryGetMemberSerializationInfo = function (this, memberName, serializationInfo)
        local default
        default, serializationInfo = MongoDBSerializers.BsonValueSerializer.getInstance():TryGetMemberSerializationInfo(memberName)
        return default, serializationInfo
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer_1(TBsonValue),
            out.MongoDB.Bson.Serialization.IBsonDocumentSerializer
          }
        end,
        TryGetMemberSerializationInfo = TryGetMemberSerializationInfo,
        __ctor__ = __ctor__
      }
    end
  end)
end)
