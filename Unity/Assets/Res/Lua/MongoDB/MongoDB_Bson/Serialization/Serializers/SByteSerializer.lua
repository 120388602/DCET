-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ArrayByte = System.Array(System.Byte)
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for SBytes.
  -- </summary>
  namespace.class("SByteSerializer", function (namespace)
    local getRepresentation, Deserialize, Serialize, WithRepresentation, WithRepresentation1, class, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the <see cref="SByteSerializer"/> class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor2__(this, 16 --[[BsonType.Int32]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="SByteSerializer"/> class.
    -- </summary>
    __ctor2__ = function (this, representation)
      repeat
        local default = representation
        if default == 5 --[[BsonType.Binary]] or default == 16 --[[BsonType.Int32]] or default == 18 --[[BsonType.Int64]] or default == 2 --[[BsonType.String]] then
          break
        else
          local message = System.String.Format("{0} is not a valid representation for an SByteSerializer.", representation)
          System.throw(System.ArgumentException(message))
        end
      until 1

      this._representation = representation
    end
    getRepresentation = function (this)
      return this._representation
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize = function (this, context, args)
      local bsonReader = context:getReader()
      local value
      local lostData = false

      local bsonType = bsonReader:GetCurrentBsonType()
      repeat
        local default = bsonType
        if default == 5 --[[BsonType.Binary]] then
          local bytes = bsonReader:ReadBytes()
          if #bytes ~= 1 then
            System.throw(System.FormatException("Binary data for SByte must be exactly one byte long."))
          end
          value = System.toSByte(bytes:get(0))
          break
        elseif default == 16 --[[BsonType.Int32]] then
          local int32Value = bsonReader:ReadInt32()
          value = System.toSByte(int32Value)
          lostData = value ~= int32Value
          break
        elseif default == 18 --[[BsonType.Int64]] then
          local int64Value = bsonReader:ReadInt64()
          value = System.toSByte(int64Value)
          lostData = value ~= int64Value
          break
        elseif default == 2 --[[BsonType.String]] then
          local s = bsonReader:ReadString()
          if #s == 1 then
            s = "0" .. s
          end
          value = System.toSByte(System.Byte.Parse(s, 515 --[[NumberStyles.HexNumber]]))
          break
        else
          System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
        end
      until 1

      if lostData then
        local message = System.String.Format("Data loss occurred when trying to convert from {0} to SByte.", bsonType)
        System.throw(System.FormatException(message))
      end

      return value
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    Serialize = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      repeat
        local default = this._representation
        if default == 5 --[[BsonType.Binary]] then
          bsonWriter:WriteBytes(ArrayByte(System.toByte(value)))
          break
        elseif default == 16 --[[BsonType.Int32]] then
          bsonWriter:WriteInt32(value)
          break
        elseif default == 18 --[[BsonType.Int64]] then
          bsonWriter:WriteInt64(value)
          break
        elseif default == 2 --[[BsonType.String]] then
          bsonWriter:WriteString(System.String.Format("{0:x2}", System.toByte(value)))
          break
        else
          local message = System.String.Format("'{0}' is not a valid SByte representation.", this._representation)
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end
      until 1
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified representation.
    -- </summary>
    -- <returns>The reconfigured serializer.</returns>
    WithRepresentation = function (this, representation)
      if representation == this._representation then
        return this
      else
        return System.new(class, 2, representation)
      end
    end
    WithRepresentation1 = function (this, representation)
      return WithRepresentation(this, representation)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.StructSerializerBase_1(System.SByte),
          out.MongoDB.Bson.Serialization.IRepresentationConfigurable_1(out.MongoDB.Bson.Serialization.Serializers.SByteSerializer)
        }
      end,
      _representation = 0,
      getRepresentation = getRepresentation,
      Deserialize = Deserialize,
      Serialize = Serialize,
      WithRepresentation = WithRepresentation,
      WithRepresentation1 = WithRepresentation1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          class = { 0x6, System.CLSCompliantAttribute(false) }
        }
      end
    }
    return class
  end)
end)
