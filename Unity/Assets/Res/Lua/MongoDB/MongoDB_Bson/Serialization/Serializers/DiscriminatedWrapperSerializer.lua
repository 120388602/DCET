-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonSerialization
local MongoDBSerializers
local MongoDBSerializerHelper
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  MongoDBSerializerHelper = MongoDB.Bson.Serialization.Serializers.SerializerHelper
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer that serializes values as a discriminator/value pair.
  -- </summary>
  namespace.class("DiscriminatedWrapperSerializer_1", function (namespace)
    namespace.class("Flags", function (namespace)
      return function (TValue)
        return {}
      end
    end)
    return function (TValue)
      local Deserialize, IsPositionedAtDiscriminatedWrapper, Serialize, __ctor__
      -- <summary>
      -- Initializes a new instance of the <see cref="DiscriminatedWrapperSerializer{TValue}" /> class.
      -- </summary>
      -- <param name="wrappedSerializer">The wrapped serializer.</param>
      __ctor__ = function (this, discriminatorConvention, wrappedSerializer)
        this._discriminatorConvention = discriminatorConvention
        this._wrappedSerializer = wrappedSerializer

        this._helper = MongoDBSerializers.SerializerHelper(System.Array(MongoDBSerializerHelper.Member)(MongoDBSerializerHelper.Member(discriminatorConvention:getElementName(), 1 --[[Flags.Discriminator]], false), MongoDBSerializerHelper.Member("_v", 2 --[[Flags.Value]], false)))

        this._isPositionedHelper = MongoDBSerializers.SerializerHelper(System.Array(MongoDBSerializerHelper.Member)(MongoDBSerializerHelper.Member(discriminatorConvention:getElementName(), 1 --[[Flags.Discriminator]], true), MongoDBSerializerHelper.Member("_v", 2 --[[Flags.Value]], true), MongoDBSerializerHelper.Member("*", 4 --[[Flags.Other]], true)))
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      Deserialize = function (this, context, args)
        local bsonReader = context:getReader()
        local nominalType = args:getNominalType()
        local actualType = this._discriminatorConvention:GetActualType(bsonReader, nominalType)
        local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(actualType)

        local value = System.default(TValue)
        this._helper:DeserializeMembers(context, function (elementName, flag)
          repeat
            local default = flag
            if default == 1 --[[Flags.Discriminator]] then
              bsonReader:SkipValue()
              break
            elseif default == 2 --[[Flags.Value]] then
              local extern = MongoDBBsonSerialization.BsonDeserializationArgs()
              extern:setNominalType(actualType)
              local valueDeserializationArgs = extern
              value = System.cast(TValue, serializer:Deserialize1(context, valueDeserializationArgs:__clone__()))
              break
            end
          until 1
        end)

        return value
      end
      -- <summary>
      -- Determines whether the reader is positioned at a discriminated wrapper.
      -- </summary>
      -- <returns>True if the reader is positioned at a discriminated wrapper.</returns>
      IsPositionedAtDiscriminatedWrapper = function (this, context)
        local bsonReader = context:getReader()
        local bookmark = bsonReader:GetBookmark()

        local default, extern = System.try(function ()
          if bsonReader:GetCurrentBsonType() ~= 3 --[[BsonType.Document]] then
            return true, false
          end
          local foundFields = this._isPositionedHelper:DeserializeMembers(context, function (elementName, flag)
            context:getReader():SkipValue()
          end)
          return true, foundFields == (3 --[[Flags.Discriminator | Flags.Value]])
        end, nil, function ()
          bsonReader:ReturnToBookmark(bookmark)
        end)
        if default then
          return extern
        end
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The value.</param>
      Serialize = function (this, context, args, value)
        local bsonWriter = context:getWriter()
        local nominalType = args:getNominalType()
        local actualType = value:GetType()
        local discriminator = this._discriminatorConvention:GetDiscriminator(nominalType, actualType)

        bsonWriter:WriteStartDocument()
        bsonWriter:WriteName(this._discriminatorConvention:getElementName())
        MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, discriminator, MongoDBBson.BsonValue)
        bsonWriter:WriteName("_v")
        args:setNominalType(actualType)
        this._wrappedSerializer:Serialize(context, args:__clone__(), value)
        bsonWriter:WriteEndDocument()
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TValue)
          }
        end,
        Deserialize = Deserialize,
        IsPositionedAtDiscriminatedWrapper = IsPositionedAtDiscriminatedWrapper,
        Serialize = Serialize,
        __ctor__ = __ctor__
      }
    end
  end)
end)
