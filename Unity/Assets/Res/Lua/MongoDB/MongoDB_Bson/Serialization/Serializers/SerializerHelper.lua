-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local SystemLinq = System.Linq
local MongoDBBson
local MongoDBBsonIO
local BsonTrie_1Int64
local TrieNameDecoder_1Int64
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  BsonTrie_1Int64 = MongoDBBsonIO.BsonTrie_1(System.Int64)
  TrieNameDecoder_1Int64 = MongoDBBsonIO.TrieNameDecoder_1(System.Int64)
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a helper for serializers.
  -- </summary>
  namespace.class("SerializerHelper", function (namespace)
    local DeserializeMembers, FindFirstMissingRequiredMember, __ctor__
    -- <summary>
    -- Represents information about a member.
    -- </summary>
    namespace.class("Member", function (namespace)
      local __validFlags, getFlag, getElementName, getIsOptional, static, __ctor__
      static = function (this)
        __validFlags = Linq.ToArray(Linq.Select(SystemLinq.Enumerable.Range(0, 64), function (i)
          return System.sl(1, i)
        end, System.Int64))
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="Member" /> class.
      -- </summary>
      -- <param name="flag">The flag.</param>
      -- <param name="isOptional">Whether the member is optional.</param>
      __ctor__ = function (this, elementName, flag, isOptional)
        if System.String.IsNullOrEmpty(elementName) then
          System.throw(System.ArgumentException(System.String.Format("Invalid element name: '{0}'.", elementName)))
        end
        if not Linq.Contains(__validFlags, flag) then
          System.throw(System.ArgumentException(System.String.Format("Invalid member flag: {0:x}.", flag)))
        end

        this._elementName = elementName
        this._flag = flag
        this._isOptional = isOptional
      end
      getFlag = function (this)
        return this._flag
      end
      getElementName = function (this)
        return this._elementName
      end
      getIsOptional = function (this)
        return this._isOptional
      end
      return {
        _flag = 0,
        _isOptional = false,
        getFlag = getFlag,
        getElementName = getElementName,
        getIsOptional = getIsOptional,
        static = static,
        __ctor__ = __ctor__
      }
    end)
    -- <summary>
    -- Initializes a new instance of the <see cref="SerializerHelper"/> class.
    -- </summary>
    __ctor__ = function (this, members)
      if members == nil then
        System.throw(System.ArgumentNullException("members"))
      end
      if #members > 64 then
        System.throw(System.ArgumentException("SerializerHelper supports a maximum of 64 members.", "members"))
      end

      this._members = members
      this._trie = BsonTrie_1Int64()

      for _, member in System.each(members) do
        this._allMemberFlags = System.bor(this._allMemberFlags, member:getFlag())
        if not member:getIsOptional() then
          this._requiredMemberFlags = System.bor(this._requiredMemberFlags, member:getFlag())
        end

        if member:getElementName() == "*" then
          this._extraMemberFlag = member:getFlag()
        else
          this._trie:Add(member:getElementName(), member:getFlag())
        end
      end
    end
    -- <summary>
    -- Deserializes the members.
    -- </summary>
    -- <param name="memberHandler">The member handler.</param>
    -- <returns>The found member flags.</returns>
    DeserializeMembers = function (this, context, memberHandler)
      local reader = context:getReader()
      local foundMemberFlags = 0

      reader:ReadStartDocument()
      while reader:ReadBsonType() ~= 0 do
        local trieDecoder = TrieNameDecoder_1Int64(this._trie)
        local elementName = reader:ReadName(trieDecoder)

        local memberFlag
        if trieDecoder:getFound() then
          memberFlag = trieDecoder:getValue()
        else
          if this._extraMemberFlag == 0 then
            System.throw(System.new(MongoDBBson.BsonSerializationException, 2, System.String.Format("Invalid element: '{0}'.", elementName)))
          else
            memberFlag = this._extraMemberFlag
          end
        end

        memberHandler(elementName, memberFlag)
        foundMemberFlags = System.bor(foundMemberFlags, memberFlag)
      end
      reader:ReadEndDocument()

      local missingRequiredMemberFlags = System.band(this._requiredMemberFlags, System.bnot(foundMemberFlags))
      if missingRequiredMemberFlags ~= 0 then
        local missingRequiredMember = FindFirstMissingRequiredMember(this, missingRequiredMemberFlags)
        System.throw(System.new(MongoDBBson.BsonSerializationException, 2, System.String.Format("Missing element: '{0}'.", missingRequiredMember:getElementName())))
      end

      return foundMemberFlags
    end
    FindFirstMissingRequiredMember = function (this, missingRequiredMemberFlags)
      for _, member in System.each(this._members) do
        if (System.band(member:getFlag(), missingRequiredMemberFlags)) ~= 0 then
          return member
        end
      end
      System.throw(MongoDBBson.BsonInternalException())
    end
    return {
      _allMemberFlags = 0,
      _extraMemberFlag = 0,
      _requiredMemberFlags = 0,
      DeserializeMembers = DeserializeMembers,
      __ctor__ = __ctor__
    }
  end)
end)
