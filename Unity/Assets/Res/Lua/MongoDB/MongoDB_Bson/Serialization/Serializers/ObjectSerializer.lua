-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for objects.
  -- </summary>
  namespace.class("ObjectSerializer", function (namespace)
    local __instance, getInstance, Deserialize, Serialize, DeserializeDiscriminatedValue, SerializeDiscriminatedValue, class, static, 
    __ctor1__, __ctor2__
    static = function (this)
      __instance = class()
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="ObjectSerializer"/> class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor2__(this, MongoDBBsonSerialization.BsonSerializer.LookupDiscriminatorConvention(System.typeof(System.Object)))
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="ObjectSerializer"/> class.
    -- </summary>
    -- <exception cref="System.ArgumentNullException">discriminatorConvention</exception>
    __ctor2__ = function (this, discriminatorConvention)
      if discriminatorConvention == nil then
        System.throw(System.ArgumentNullException("discriminatorConvention"))
      end

      this._discriminatorConvention = discriminatorConvention
    end
    getInstance = function ()
      return __instance
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize = function (this, context, args)
      local bsonReader = context:getReader()

      local bsonType = bsonReader:GetCurrentBsonType()
      repeat
        local defaultLabel
        local default = bsonType
        if default == 4 --[[BsonType.Array]] then
          if context:getDynamicArraySerializer() ~= nil then
            return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(context:getDynamicArraySerializer(), context)
          end
          defaultLabel = true
          goto defaultLabel
        elseif default == 5 --[[BsonType.Binary]] then
          local binaryData = bsonReader:ReadBinaryData()
          local subType = binaryData:getSubType()
          if subType == 4 --[[BsonBinarySubType.UuidStandard]] or subType == 3 --[[BsonBinarySubType.UuidLegacy]] then
            return binaryData:ToGuid()
          end
          defaultLabel = true
          goto defaultLabel
        elseif default == 8 --[[BsonType.Boolean]] then
          return bsonReader:ReadBoolean()
        elseif default == 9 --[[BsonType.DateTime]] then
          local millisecondsSinceEpoch = bsonReader:ReadDateTime()
          local bsonDateTime = System.new(MongoDBBson.BsonDateTime, 2, millisecondsSinceEpoch)
          return bsonDateTime:ToUniversalTime()
        elseif default == 19 --[[BsonType.Decimal128]] then
          return bsonReader:ReadDecimal128()
        elseif default == 3 --[[BsonType.Document]] then
          return DeserializeDiscriminatedValue(this, context, args:__clone__())
        elseif default == 1 --[[BsonType.Double]] then
          return bsonReader:ReadDouble()
        elseif default == 16 --[[BsonType.Int32]] then
          return bsonReader:ReadInt32()
        elseif default == 18 --[[BsonType.Int64]] then
          return bsonReader:ReadInt64()
        elseif default == 10 --[[BsonType.Null]] then
          bsonReader:ReadNull()
          return nil
        elseif default == 7 --[[BsonType.ObjectId]] then
          return bsonReader:ReadObjectId()
        elseif default == 2 --[[BsonType.String]] then
          return bsonReader:ReadString()
        else
          local message = System.String.Format("ObjectSerializer does not support BSON type '{0}'.", bsonType)
          System.throw(System.FormatException(message))
        end
        ::defaultLabel::
        if defaultLabel then
          local message = System.String.Format("ObjectSerializer does not support BSON type '{0}'.", bsonType)
          System.throw(System.FormatException(message))
        end
      until 1
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    Serialize = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      if value == nil then
        bsonWriter:WriteNull()
      else
        local actualType = value:GetType()
        if actualType == System.typeof(System.Object) then
          bsonWriter:WriteStartDocument()
          bsonWriter:WriteEndDocument()
        else
          -- certain types can be written directly as BSON value
          -- if we're not at the top level document, or if we're using the JsonWriter
          if bsonWriter:getState() == 2 --[[BsonWriterState.Value]] or System.is(bsonWriter, MongoDBBsonIO.JsonWriter) then
            repeat
              local default = System.Type.GetTypeCode(actualType)
              if default == 3 --[[TypeCode.Boolean]] then
                bsonWriter:WriteBoolean(System.cast(System.Boolean, value))
                return
              elseif default == 16 --[[TypeCode.DateTime]] then
                local bsonDateTime = MongoDBBson.BsonDateTime(MongoDBBson.BsonUtils.ToUniversalTime(System.cast(System.DateTime, value)))
                bsonWriter:WriteDateTime(bsonDateTime:getMillisecondsSinceEpoch())
                return
              elseif default == 14 --[[TypeCode.Double]] then
                bsonWriter:WriteDouble(System.cast(System.Double, value))
                return
              elseif default == 7 --[[TypeCode.Int16]] then
                bsonWriter:WriteInt32(System.cast(System.Int16, value))
                return
              elseif default == 9 --[[TypeCode.Int32]] then
                bsonWriter:WriteInt32(System.cast(System.Int32, value))
                return
              elseif default == 11 --[[TypeCode.Int64]] then
                bsonWriter:WriteInt64(System.cast(System.Int64, value))
                return
              elseif default == 1 --[[TypeCode.Object]] then
                if actualType == System.typeof(MongoDBBson.Decimal128) then
                  local decimal128 = System.cast(MongoDBBson.Decimal128, value)
                  bsonWriter:WriteDecimal128(decimal128:__clone__())
                  return
                end
                if actualType == System.typeof(System.Guid) then
                  local guid = System.cast(System.Guid, value)
                  local guidRepresentation = bsonWriter:getSettings():getGuidRepresentation()
                  local binaryData = System.new(MongoDBBson.BsonBinaryData, 5, guid, guidRepresentation)
                  bsonWriter:WriteBinaryData(binaryData)
                  return
                end
                if actualType == System.typeof(MongoDBBson.ObjectId) then
                  bsonWriter:WriteObjectId(System.cast(MongoDBBson.ObjectId, value))
                  return
                end
                break
              elseif default == 18 --[[TypeCode.String]] then
                bsonWriter:WriteString(System.cast(System.String, value))
                return
              end
            until 1
          end

          SerializeDiscriminatedValue(this, context, args:__clone__(), value, actualType)
        end
      end
    end
    DeserializeDiscriminatedValue = function (this, context, args)
      local bsonReader = context:getReader()

      local actualType = this._discriminatorConvention:GetActualType(bsonReader, System.typeof(System.Object))
      if actualType == System.typeof(System.Object) then
        local type = bsonReader:GetCurrentBsonType()
        repeat
          local default = type
          if default == 3 --[[BsonType.Document]] then
            if context:getDynamicDocumentSerializer() ~= nil then
              return context:getDynamicDocumentSerializer():Deserialize1(context, args:__clone__())
            end
            break
          end
        until 1

        bsonReader:ReadStartDocument()
        bsonReader:ReadEndDocument()
        return System.Object()
      else
        local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(actualType)
        local polymorphicSerializer = System.as(serializer, MongoDBBsonSerialization.IBsonPolymorphicSerializer)
        if polymorphicSerializer ~= nil and polymorphicSerializer:getIsDiscriminatorCompatibleWithObjectSerializer() then
          return serializer:Deserialize1(context, args:__clone__())
        else
          local value = nil
          local wasValuePresent = false

          bsonReader:ReadStartDocument()
          while bsonReader:ReadBsonType() ~= 0 do
            local name = MongoDBBsonIO.IBsonReaderExtensions.ReadName(bsonReader)
            if name == this._discriminatorConvention:getElementName() then
              bsonReader:SkipValue()
            elseif name == "_v" then
              value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(serializer, context)
              wasValuePresent = true
            else
              local message = System.String.Format("Unexpected element name: '{0}'.", name)
              System.throw(System.FormatException(message))
            end
          end
          bsonReader:ReadEndDocument()

          if not wasValuePresent then
            System.throw(System.FormatException("_v element missing."))
          end

          return value
        end
      end
    end
    SerializeDiscriminatedValue = function (this, context, args, value, actualType)
      local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(actualType)

      local polymorphicSerializer = System.as(serializer, MongoDBBsonSerialization.IBsonPolymorphicSerializer)
      if polymorphicSerializer ~= nil and polymorphicSerializer:getIsDiscriminatorCompatibleWithObjectSerializer() then
        serializer:Serialize1(context, args:__clone__(), value)
      else
        if context:getIsDynamicType() ~= nil and context:getIsDynamicType()(value:GetType()) then
          args:setNominalType(actualType)
          serializer:Serialize1(context, args:__clone__(), value)
        else
          local bsonWriter = context:getWriter()
          local discriminator = this._discriminatorConvention:GetDiscriminator(System.typeof(System.Object), actualType)

          bsonWriter:WriteStartDocument()
          bsonWriter:WriteName(this._discriminatorConvention:getElementName())
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, discriminator, MongoDBBson.BsonValue)
          bsonWriter:WriteName("_v")
          MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(serializer, context, value)
          bsonWriter:WriteEndDocument()
        end
      end
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.ClassSerializerBase_1(System.Object)
        }
      end,
      getInstance = getInstance,
      Deserialize = Deserialize,
      Serialize = Serialize,
      static = static,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
