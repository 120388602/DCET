-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for Strings.
  -- </summary>
  namespace.class("StringSerializer", function (namespace)
    local getRepresentation, DeserializeValue, SerializeValue, WithRepresentation, WithRepresentation1, class, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the <see cref="StringSerializer"/> class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor2__(this, 2 --[[BsonType.String]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="StringSerializer"/> class.
    -- </summary>
    __ctor2__ = function (this, representation)
      repeat
        local default = representation
        if default == 7 --[[BsonType.ObjectId]] or default == 2 --[[BsonType.String]] or default == 14 --[[BsonType.Symbol]] then
          break
        else
          local message = System.String.Format("{0} is not a valid representation for a StringSerializer.", representation)
          System.throw(System.ArgumentException(message))
        end
      until 1

      this._representation = representation
    end
    getRepresentation = function (this)
      return this._representation
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    DeserializeValue = function (this, context, args)
      local bsonReader = context:getReader()

      local bsonType = bsonReader:GetCurrentBsonType()
      repeat
        local defaultLabel
        local default = bsonType
        if default == 7 --[[BsonType.ObjectId]] then
          if this._representation == 7 --[[BsonType.ObjectId]] then
            return bsonReader:ReadObjectId():ToString()
          else
            defaultLabel = true
            goto defaultLabel
          end
        elseif default == 2 --[[BsonType.String]] then
          return bsonReader:ReadString()
        elseif default == 14 --[[BsonType.Symbol]] then
          return bsonReader:ReadSymbol()
        else
          System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
        end
        ::defaultLabel::
        if defaultLabel then
          System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
        end
      until 1
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    SerializeValue = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      repeat
        local default = this._representation
        if default == 7 --[[BsonType.ObjectId]] then
          bsonWriter:WriteObjectId(MongoDBBson.ObjectId.Parse(value))
          break
        elseif default == 2 --[[BsonType.String]] then
          bsonWriter:WriteString(value)
          break
        elseif default == 14 --[[BsonType.Symbol]] then
          bsonWriter:WriteSymbol(value)
          break
        else
          local message = System.String.Format("'{0}' is not a valid String representation.", this._representation)
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end
      until 1
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified representation.
    -- </summary>
    -- <returns>The reconfigured serializer.</returns>
    WithRepresentation = function (this, representation)
      if representation == this._representation then
        return this
      else
        return System.new(class, 2, representation)
      end
    end
    WithRepresentation1 = function (this, representation)
      return WithRepresentation(this, representation)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.SealedClassSerializerBase_1(System.String),
          out.MongoDB.Bson.Serialization.IRepresentationConfigurable_1(out.MongoDB.Bson.Serialization.Serializers.StringSerializer)
        }
      end,
      _representation = 0,
      getRepresentation = getRepresentation,
      DeserializeValue = DeserializeValue,
      SerializeValue = SerializeValue,
      WithRepresentation = WithRepresentation,
      WithRepresentation1 = WithRepresentation1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
