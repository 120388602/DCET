-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for Timespans.
  -- </summary>
  namespace.class("TimeSpanSerializer", function (namespace)
    local getRepresentation, getUnits, Deserialize, Serialize, WithRepresentation, WithRepresentation2, FromDouble, FromInt32, 
    FromInt64, TicksPerUnit, ToDouble, ToInt32, ToInt64, WithRepresentation1, class, __ctor1__, 
    __ctor2__, __ctor3__
    -- <summary>
    -- Initializes a new instance of the <see cref="TimeSpanSerializer"/> class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor2__(this, 2 --[[BsonType.String]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="TimeSpanSerializer"/> class.
    -- </summary>
    __ctor2__ = function (this, representation)
      __ctor3__(this, representation, 0 --[[TimeSpanUnits.Ticks]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="TimeSpanSerializer"/> class.
    -- </summary>
    -- <param name="units">The units.</param>
    __ctor3__ = function (this, representation, units)
      repeat
        local default = representation
        if default == 1 --[[BsonType.Double]] or default == 16 --[[BsonType.Int32]] or default == 18 --[[BsonType.Int64]] or default == 2 --[[BsonType.String]] then
          break
        else
          local message = System.String.Format("{0} is not a valid representation for a TimeSpanSerializer.", representation)
          System.throw(System.ArgumentException(message))
        end
      until 1

      this._representation = representation
      this._units = units
    end
    getRepresentation = function (this)
      return this._representation
    end
    getUnits = function (this)
      return this._units
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="args">The deserialization args.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize = function (this, context, args)
      local bsonReader = context:getReader()

      local bsonType = bsonReader:GetCurrentBsonType()
      repeat
        local default = bsonType
        if default == 1 --[[BsonType.Double]] then
          return FromDouble(this, bsonReader:ReadDouble(), this._units)
        elseif default == 16 --[[BsonType.Int32]] then
          return FromInt32(this, bsonReader:ReadInt32(), this._units)
        elseif default == 18 --[[BsonType.Int64]] then
          return FromInt64(this, bsonReader:ReadInt64(), this._units)
        elseif default == 2 --[[BsonType.String]] then
          return System.TimeSpan.Parse(bsonReader:ReadString())
        else
          System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
        end
      until 1
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="args">The serialization args.</param>
    -- <param name="value">The object.</param>
    Serialize = function (this, context, args, value)
      local bsonWriter = context:getWriter()

      repeat
        local default = this._representation
        if default == 1 --[[BsonType.Double]] then
          bsonWriter:WriteDouble(ToDouble(this, value, this._units))
          break
        elseif default == 16 --[[BsonType.Int32]] then
          bsonWriter:WriteInt32(ToInt32(this, value, this._units))
          break
        elseif default == 18 --[[BsonType.Int64]] then
          bsonWriter:WriteInt64(ToInt64(this, value, this._units))
          break
        elseif default == 2 --[[BsonType.String]] then
          bsonWriter:WriteString(value:ToString())
          break
        else
          local message = System.String.Format("'{0}' is not a valid TimeSpan representation.", this._representation)
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end
      until 1
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified representation.
    -- </summary>
    -- <returns>The reconfigured serializer.</returns>
    WithRepresentation = function (this, representation)
      if representation == this._representation then
        return this
      else
        return System.new(class, 3, representation, this._units)
      end
    end
    -- <summary>
    -- Returns a serializer that has been reconfigured with the specified representation and units.
    -- </summary>
    -- <param name="units">The units.</param>
    -- <returns>
    -- The reconfigured serializer.
    -- </returns>
    WithRepresentation2 = function (this, representation, units)
      if representation == this._representation and units == this._units then
        return this
      else
        return System.new(class, 3, representation, units)
      end
    end
    FromDouble = function (this, value, units)
      if units == 7 --[[TimeSpanUnits.Nanoseconds]] then
        return System.TimeSpan.FromTicks(System.ToInt64(value / 100.0))
        -- divide first then cast to reduce chance of overflow
      else
        return System.TimeSpan.FromTicks(System.ToInt64(value * TicksPerUnit(this, units)))
        -- multiply first then cast to preserve fractional part of value
      end
    end
    FromInt32 = function (this, value, units)
      if units == 7 --[[TimeSpanUnits.Nanoseconds]] then
        return System.TimeSpan.FromTicks(System.div(value, 100))
      else
        return System.TimeSpan.FromTicks(value * TicksPerUnit(this, units))
      end
    end
    FromInt64 = function (this, value, units)
      if units == 7 --[[TimeSpanUnits.Nanoseconds]] then
        return System.TimeSpan.FromTicks(System.div(value, 100))
      else
        return System.TimeSpan.FromTicks(value * TicksPerUnit(this, units))
      end
    end
    TicksPerUnit = function (this, units)
      repeat
        local default = units
        if default == 1 --[[TimeSpanUnits.Days]] then
          return 864000000000 --[[TimeSpan.TicksPerDay]]
        elseif default == 2 --[[TimeSpanUnits.Hours]] then
          return 36000000000 --[[TimeSpan.TicksPerHour]]
        elseif default == 3 --[[TimeSpanUnits.Minutes]] then
          return 600000000 --[[TimeSpan.TicksPerMinute]]
        elseif default == 4 --[[TimeSpanUnits.Seconds]] then
          return 10000000 --[[TimeSpan.TicksPerSecond]]
        elseif default == 5 --[[TimeSpanUnits.Milliseconds]] then
          return 10000 --[[TimeSpan.TicksPerMillisecond]]
        elseif default == 6 --[[TimeSpanUnits.Microseconds]] then
          return 10 --[[TimeSpan.TicksPerMillisecond / 1000]]
        elseif default == 0 --[[TimeSpanUnits.Ticks]] then
          return 1
        else
          local message = System.String.Format("Invalid TimeSpanUnits value: {0}.", units)
          System.throw(System.ArgumentException(message))
        end
      until 1
    end
    ToDouble = function (this, timeSpan, units)
      if units == 7 --[[TimeSpanUnits.Nanoseconds]] then
        return (timeSpan:getTicks()) * 100.0
      else
        return timeSpan:getTicks() / TicksPerUnit(this, units)
        -- cast first then divide to preserve fractional part of result
      end
    end
    ToInt32 = function (this, timeSpan, units)
      if units == 7 --[[TimeSpanUnits.Nanoseconds]] then
        return System.toInt32(timeSpan:getTicks() * 100)
      else
        return System.toInt32(System.div(timeSpan:getTicks(), TicksPerUnit(this, units)))
      end
    end
    ToInt64 = function (this, timeSpan, units)
      if units == 7 --[[TimeSpanUnits.Nanoseconds]] then
        return timeSpan:getTicks() * 100
      else
        return System.div(timeSpan:getTicks(), TicksPerUnit(this, units))
      end
    end
    WithRepresentation1 = function (this, representation)
      return WithRepresentation(this, representation)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.StructSerializerBase_1(System.TimeSpan),
          out.MongoDB.Bson.Serialization.IRepresentationConfigurable_1(out.MongoDB.Bson.Serialization.Serializers.TimeSpanSerializer)
        }
      end,
      _representation = 0,
      _units = 0,
      getRepresentation = getRepresentation,
      getUnits = getUnits,
      Deserialize = Deserialize,
      Serialize = Serialize,
      WithRepresentation = WithRepresentation,
      WithRepresentation2 = WithRepresentation2,
      WithRepresentation1 = WithRepresentation1,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      }
    }
    return class
  end)
end)
