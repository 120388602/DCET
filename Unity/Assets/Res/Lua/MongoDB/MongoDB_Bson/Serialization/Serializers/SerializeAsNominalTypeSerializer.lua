-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a serializer for a class that will be serialized as if it were one of its base classes.
  -- </summary>
  -- <typeparam name="TNominalType">The nominal type.</typeparam>
  namespace.class("SerializeAsNominalTypeSerializer_2", function (namespace)
    return function (TActualType, TNominalType)
      local Serialize, __ctor1__, __ctor2__, __ctor3__
      local IBsonSerializer_1TNominalType = MongoDB.Bson.Serialization.IBsonSerializer_1(TNominalType)
      local LazyIBsonSerializer_1TNominalType = System.Lazy(IBsonSerializer_1TNominalType)
      -- <summary>
      -- Initializes a new instance of the <see cref="SerializeAsNominalTypeSerializer{TActualType, TNominalType}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        __ctor3__(this, MongoDBBsonSerialization.BsonSerializer.getSerializerRegistry())
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="SerializeAsNominalTypeSerializer{TActualType, TNominalType}"/> class.
      -- </summary>
      __ctor2__ = function (this, nominalTypeSerializer)
        if nominalTypeSerializer == nil then
          System.throw(System.ArgumentNullException("nominalTypeSerializer"))
        end

        this._lazyNominalTypeSerializer = LazyIBsonSerializer_1TNominalType(function ()
          return nominalTypeSerializer
        end)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="SerializeAsNominalTypeSerializer{TActualType, TNominalType}" /> class.
      -- </summary>
      __ctor3__ = function (this, serializerRegistry)
        if serializerRegistry == nil then
          System.throw(System.ArgumentNullException("serializerRegistry"))
        end

        this._lazyNominalTypeSerializer = LazyIBsonSerializer_1TNominalType(function ()
          return serializerRegistry:GetSerializer1(TNominalType)
        end)
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The value.</param>
      Serialize = function (this, context, args, value)
        if value == nil then
          local bsonWriter = context:getWriter()
          bsonWriter:WriteNull()
        else
          args:setNominalType(System.typeof(TNominalType))
          args:setSerializeAsNominalType(true)
          this._lazyNominalTypeSerializer:getValue():Serialize(context, args:__clone__(), value)
        end
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TActualType)
          }
        end,
        Serialize = Serialize,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__
        }
      }
    end
  end)
end)
