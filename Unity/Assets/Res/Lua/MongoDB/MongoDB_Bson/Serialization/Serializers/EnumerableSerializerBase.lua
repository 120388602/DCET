-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBsonSerialization
local MongoDBConventions
local LazyIBsonSerializer
System.import(function (out)
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBConventions = MongoDB.Bson.Serialization.Conventions
  LazyIBsonSerializer = System.Lazy(MongoDBBsonSerialization.IBsonSerializer)
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Represents a base serializer for enumerable values.
  -- </summary>
  namespace.class("EnumerableSerializerBase_1", function (namespace)
    return function (TValue)
      local getItemSerializer, Deserialize, TryGetItemSerializationInfo, Serialize, internal, __ctor1__, __ctor2__, __ctor3__
      local DiscriminatedWrapperSerializer_1TValue = MongoDB.Bson.Serialization.Serializers.DiscriminatedWrapperSerializer_1(TValue)
      internal = function (this)
        this._discriminatorConvention = MongoDBConventions.ScalarDiscriminatorConvention("_t")
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableSerializerBase{TValue}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        __ctor3__(this, MongoDBBsonSerialization.BsonSerializer.getSerializerRegistry())
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableSerializerBase{TValue}"/> class.
      -- </summary>
      __ctor2__ = function (this, itemSerializer)
        internal(this)
        if itemSerializer == nil then
          System.throw(System.ArgumentNullException("itemSerializer"))
        end

        this._lazyItemSerializer = LazyIBsonSerializer(function ()
          return itemSerializer
        end)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableSerializerBase{TValue}" /> class.
      -- </summary>
      __ctor3__ = function (this, serializerRegistry)
        internal(this)
        if serializerRegistry == nil then
          System.throw(System.ArgumentNullException("serializerRegistry"))
        end

        this._lazyItemSerializer = LazyIBsonSerializer(function ()
          return serializerRegistry:GetSerializer(System.typeof(System.Object))
        end)
      end
      getItemSerializer = function (this)
        return this._lazyItemSerializer:getValue()
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      Deserialize = function (this, context, args)
        local bsonReader = context:getReader()

        local bsonType = bsonReader:GetCurrentBsonType()
        repeat
          local defaultLabel
          local default = bsonType
          if default == 10 --[[BsonType.Null]] then
            bsonReader:ReadNull()
            return nil
          elseif default == 4 --[[BsonType.Array]] then
            bsonReader:ReadStartArray()
            local accumulator = this:CreateAccumulator()
            while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
              local item = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(this._lazyItemSerializer:getValue(), context)
              this:AddItem(accumulator, item)
            end
            bsonReader:ReadEndArray()
            return this:FinalizeResult(accumulator)
          elseif default == 3 --[[BsonType.Document]] then
            local serializer = DiscriminatedWrapperSerializer_1TValue(this._discriminatorConvention, this)
            if serializer:IsPositionedAtDiscriminatedWrapper(context) then
              return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(serializer, context, TValue)
            else
              defaultLabel = true
              goto defaultLabel
            end
          else
            System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
          end
          ::defaultLabel::
          if defaultLabel then
            System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
          end
        until 1
      end
      -- <summary>
      -- Tries to get the serialization info for the individual items of the array.
      -- </summary>
      -- <returns>
      -- <c>true</c> if the serialization info exists; otherwise <c>false</c>.
      -- </returns>
      TryGetItemSerializationInfo = function (this, serializationInfo)
        local itemSerializer = this._lazyItemSerializer:getValue()
        serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(nil, itemSerializer, itemSerializer:getValueType())
        return true, serializationInfo
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      Serialize = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        if value == nil then
          bsonWriter:WriteNull()
        else
          local actualType = value:GetType()
          if actualType == args:getNominalType() or args:getSerializeAsNominalType() then
            bsonWriter:WriteStartArray()
            for _, item in System.each(this:EnumerateItemsInSerializationOrder(value)) do
              MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._lazyItemSerializer:getValue(), context, item)
            end
            bsonWriter:WriteEndArray()
          else
            local serializer = DiscriminatedWrapperSerializer_1TValue(this._discriminatorConvention, this)
            MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(serializer, context, value, TValue)
          end
        end
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TValue),
            out.MongoDB.Bson.Serialization.IBsonArraySerializer
          }
        end,
        getItemSerializer = getItemSerializer,
        Deserialize = Deserialize,
        TryGetItemSerializationInfo = TryGetItemSerializationInfo,
        Serialize = Serialize,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__
        }
      }
    end
  end)

  -- <summary>
  -- Represents a serializer for enumerable values.
  -- </summary>
  -- <typeparam name="TItem">The type of the items.</typeparam>
  namespace.class("EnumerableSerializerBase_2", function (namespace)
    return function (TValue, TItem)
      local getItemSerializer, Deserialize, TryGetItemSerializationInfo, Serialize, internal, __ctor1__, __ctor2__, __ctor3__
      local IBsonSerializer_1TItem = MongoDB.Bson.Serialization.IBsonSerializer_1(TItem)
      local LazyIBsonSerializer_1TItem = System.Lazy(IBsonSerializer_1TItem)
      local DiscriminatedWrapperSerializer_1TValue = MongoDB.Bson.Serialization.Serializers.DiscriminatedWrapperSerializer_1(TValue)
      internal = function (this)
        this._discriminatorConvention = MongoDBConventions.ScalarDiscriminatorConvention("_t")
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableSerializerBase{TValue, TItem}"/> class.
      -- </summary>
      __ctor1__ = function (this)
        __ctor3__(this, MongoDBBsonSerialization.BsonSerializer.getSerializerRegistry())
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableSerializerBase{TValue, TItem}"/> class.
      -- </summary>
      __ctor2__ = function (this, itemSerializer)
        internal(this)
        if itemSerializer == nil then
          System.throw(System.ArgumentNullException("itemSerializer"))
        end

        this._lazyItemSerializer = LazyIBsonSerializer_1TItem(function ()
          return itemSerializer
        end)
      end
      -- <summary>
      -- Initializes a new instance of the <see cref="EnumerableSerializerBase{TValue, TItem}" /> class.
      -- </summary>
      __ctor3__ = function (this, serializerRegistry)
        internal(this)
        if serializerRegistry == nil then
          System.throw(System.ArgumentNullException("serializerRegistry"))
        end

        this._lazyItemSerializer = LazyIBsonSerializer_1TItem(function ()
          return serializerRegistry:GetSerializer1(TItem)
        end)
      end
      getItemSerializer = function (this)
        return this._lazyItemSerializer:getValue()
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      Deserialize = function (this, context, args)
        local bsonReader = context:getReader()

        local bsonType = bsonReader:GetCurrentBsonType()
        repeat
          local defaultLabel
          local default = bsonType
          if default == 10 --[[BsonType.Null]] then
            bsonReader:ReadNull()
            return nil
          elseif default == 4 --[[BsonType.Array]] then
            bsonReader:ReadStartArray()
            local accumulator = this:CreateAccumulator()
            while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
              local item = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(this._lazyItemSerializer:getValue(), context, TItem)
              this:AddItem(accumulator, item)
            end
            bsonReader:ReadEndArray()
            return this:FinalizeResult(accumulator)
          elseif default == 3 --[[BsonType.Document]] then
            local serializer = DiscriminatedWrapperSerializer_1TValue(this._discriminatorConvention, this)
            if serializer:IsPositionedAtDiscriminatedWrapper(context) then
              return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(serializer, context, TValue)
            else
              defaultLabel = true
              goto defaultLabel
            end
          else
            System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
          end
          ::defaultLabel::
          if defaultLabel then
            System.throw(this:CreateCannotDeserializeFromBsonTypeException(bsonType))
          end
        until 1
      end
      -- <summary>
      -- Tries to get the serialization info for the individual items of the array.
      -- </summary>
      -- <returns>
      -- The serialization info for the items.
      -- </returns>
      TryGetItemSerializationInfo = function (this, serializationInfo)
        local serializer = this._lazyItemSerializer:getValue()
        serializationInfo = MongoDBBsonSerialization.BsonSerializationInfo(nil, serializer, serializer:getValueType())
        return true, serializationInfo
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      Serialize = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        if value == nil then
          bsonWriter:WriteNull()
        else
          local actualType = value:GetType()
          if actualType == args:getNominalType() then
            bsonWriter:WriteStartArray()
            for _, item in System.each(this:EnumerateItemsInSerializationOrder(value)) do
              MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(this._lazyItemSerializer:getValue(), context, item, TItem)
            end
            bsonWriter:WriteEndArray()
          else
            local serializer = DiscriminatedWrapperSerializer_1TValue(this._discriminatorConvention, this)
            MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(serializer, context, value, TValue)
          end
        end
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(TValue),
            out.MongoDB.Bson.Serialization.IBsonArraySerializer
          }
        end,
        getItemSerializer = getItemSerializer,
        Deserialize = Deserialize,
        TryGetItemSerializationInfo = TryGetItemSerializationInfo,
        Serialize = Serialize,
        __ctor__ = {
          __ctor1__,
          __ctor2__,
          __ctor3__
        }
      }
    end
  end)
end)
