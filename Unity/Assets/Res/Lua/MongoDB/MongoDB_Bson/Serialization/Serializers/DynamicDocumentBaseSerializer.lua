-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemLinqExpressions = System.Linq.Expressions
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization.Serializers", function (namespace)
  -- <summary>
  -- Base serializer for dynamic types.
  -- </summary>
  namespace.class("DynamicDocumentBaseSerializer_1", function (namespace)
    return function (T)
      local _objectSerializer, Deserialize, Serialize, static
      static = function (this)
        _objectSerializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer(System.Object)
      end
      -- <summary>
      -- Deserializes a value.
      -- </summary>
      -- <param name="args">The deserialization args.</param>
      -- <returns>A deserialized value.</returns>
      Deserialize = function (this, context, args)
        local bsonReader = context:getReader()

        local bsonType = bsonReader:GetCurrentBsonType()
        local message
        repeat
          local default = bsonType
          if default == 3 --[[BsonType.Document]] then
            local dynamicContext = context:With(System.fn(this, this.ConfigureDeserializationContext))
            bsonReader:ReadStartDocument()
            local document = this:CreateDocument()
            while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
              local name = MongoDBBsonIO.IBsonReaderExtensions.ReadName(bsonReader)
              local value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(_objectSerializer, dynamicContext, System.Object)
              this:SetValueForMember(document, name, value)
            end
            bsonReader:ReadEndDocument()
            return document
          else
            message = System.String.Format("Cannot deserialize a '{0}' from BsonType '{1}'.", MongoDBBson.BsonUtils.GetFriendlyTypeName(System.typeof(T)), bsonType)
            System.throw(System.FormatException(message))
          end
        until 1
      end
      -- <summary>
      -- Serializes a value.
      -- </summary>
      -- <param name="args">The serialization args.</param>
      -- <param name="value">The object.</param>
      Serialize = function (this, context, args, value)
        local bsonWriter = context:getWriter()

        local metaObject = value:GetMetaObject(SystemLinqExpressions.Expression.Constant(value))
        local memberNames = metaObject:GetDynamicMemberNames()
        local dynamicContext = context:With(System.fn(this, this.ConfigureSerializationContext))

        bsonWriter:WriteStartDocument()
        for _, memberName in System.each(memberNames) do
          local memberValue
          local default
          default, memberValue = this:TryGetValueForMember(value, memberName)
          if default then
            bsonWriter:WriteName(memberName)
            MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize1(_objectSerializer, dynamicContext, memberValue, System.Object)
          end
        end
        bsonWriter:WriteEndDocument()
      end
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.SerializerBase_1(T)
          }
        end,
        Deserialize = Deserialize,
        Serialize = Serialize,
        static = static
      }
    end
  end)
end)
