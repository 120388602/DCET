-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- Represents all the contextual information needed by a serializer to serialize a value.
  -- </summary>
  namespace.class("BsonSerializationContext", function (namespace)
    local getIsDynamicType, getWriter, CreateRoot, With, class, __ctor__
    -- <summary>
    -- Represents a builder for a BsonSerializationContext.
    -- </summary>
    namespace.class("Builder", function (namespace)
      local getIsDynamicType, setIsDynamicType, getWriter, Build, __ctor__
      __ctor__ = function (this, other, writer)
        if writer == nil then
          System.throw(System.ArgumentNullException("writer"))
        end

        this._writer = writer
        if other ~= nil then
          this._isDynamicType = other._isDynamicType
        else
          this._isDynamicType = function (t)
            return (MongoDBBson.BsonDefaults.getDynamicArraySerializer() ~= nil and t == MongoDBBson.BsonDefaults.getDynamicArraySerializer():getValueType()) or (MongoDBBson.BsonDefaults.getDynamicDocumentSerializer() ~= nil and t == MongoDBBson.BsonDefaults.getDynamicDocumentSerializer():getValueType())
          end
        end
      end
      getIsDynamicType = function (this)
        return this._isDynamicType
      end
      setIsDynamicType = function (this, value)
        this._isDynamicType = value
      end
      getWriter = function (this)
        return this._writer
      end
      -- <summary>
      -- Builds the BsonSerializationContext instance.
      -- </summary>
      Build = function (this)
        return MongoDBBsonSerialization.BsonSerializationContext(this._writer, this._isDynamicType)
      end
      return {
        getIsDynamicType = getIsDynamicType,
        setIsDynamicType = setIsDynamicType,
        getWriter = getWriter,
        Build = Build,
        __ctor__ = __ctor__
      }
    end)
    __ctor__ = function (this, writer, isDynamicType)
      this._writer = writer
      this._isDynamicType = isDynamicType
    end
    getIsDynamicType = function (this)
      return this._isDynamicType
    end
    getWriter = function (this)
      return this._writer
    end
    -- <summary>
    -- Creates a root context.
    -- </summary>
    -- <param name="configurator">The serialization context configurator.</param>
    -- <returns>
    -- A root context.
    -- </returns>
    CreateRoot = function (writer, configurator)
      local builder = class.Builder(nil, writer)
      if configurator ~= nil then
        configurator(builder)
      end
      return builder:Build()
    end
    -- <summary>
    -- Creates a new context with some values changed.
    -- </summary>
    -- <returns>
    -- A new context.
    -- </returns>
    With = function (this, configurator)
      local builder = class.Builder(this, this._writer)
      if configurator ~= nil then
        configurator(builder)
      end
      return builder:Build()
    end
    class = {
      getIsDynamicType = getIsDynamicType,
      getWriter = getWriter,
      CreateRoot = CreateRoot,
      With = With,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
