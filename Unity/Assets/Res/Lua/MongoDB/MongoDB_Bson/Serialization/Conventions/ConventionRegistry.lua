-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBConventions
local MongoDBConventionRegistry
local ListIConventionPack
local ListConventionPackContainer
System.import(function (out)
  MongoDBConventions = MongoDB.Bson.Serialization.Conventions
  MongoDBConventionRegistry = MongoDB.Bson.Serialization.Conventions.ConventionRegistry
  ListIConventionPack = System.List(MongoDBConventions.IConventionPack)
  ListConventionPackContainer = System.List(MongoDBConventionRegistry.ConventionPackContainer)
end)
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- Represents a registry of conventions.
  -- </summary>
  namespace.class("ConventionRegistry", function (namespace)
    local __conventionPacks, __lock, Lookup, Register, Remove, class, static
    namespace.class("ConventionPackContainer", function (namespace)
      return {}
    end)
    static = function (this)
      __conventionPacks = ListConventionPackContainer()
      __lock = System.Object()
      Register("__defaults__", MongoDBConventions.DefaultConventionPack.getInstance(), function (t)
        return true
      end)
      Register("__attributes__", MongoDBConventions.AttributeConventionPack.getInstance(), function (t)
        return true
      end)
    end
    -- <summary>
    -- Looks up the effective set of conventions that apply to a type.
    -- </summary>
    -- <returns>The conventions for that type.</returns>
    Lookup = function (type)
      if type == nil then
        System.throw(System.ArgumentNullException("type"))
      end

      -- lock(__lock)
      do
        local pack = MongoDBConventions.ConventionPack()

        -- append any attribute packs (usually just one) at the end so attributes are processed last
        local attributePacks = ListIConventionPack()
        for _, container in System.each(__conventionPacks) do
          if container.Filter(type) then
            if container.Name == "__attributes__" then
              attributePacks:Add(container.Pack)
            else
              pack:Append(container.Pack)
            end
          end
        end

        for _, attributePack in System.each(attributePacks) do
          pack:Append(attributePack)
        end

        return pack
      end
    end
    -- <summary>
    -- Registers the conventions.
    -- </summary>
    -- <param name="conventions">The conventions.</param>
    -- <param name="filter">The filter.</param>
    Register = function (name, conventions, filter)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      if conventions == nil then
        System.throw(System.ArgumentNullException("conventions"))
      end
      if filter == nil then
        System.throw(System.ArgumentNullException("filter"))
      end

      -- lock(__lock)
      do
        local default = class.ConventionPackContainer()
        default.Filter = filter
        default.Name = name
        default.Pack = conventions
        local container = default

        __conventionPacks:Add(container)
      end
    end
    -- <summary>
    -- Removes the conventions specified by the given name.
    -- </summary>
    -- <remarks>Removing a convention allows the removal of the special __defaults__ conventions
    -- and the __attributes__ conventions for those who want to completely customize the
    -- experience.</remarks>
    Remove = function (name)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end

      -- lock(__lock)
      do
        __conventionPacks:RemoveAll(function (x)
          return x.Name == name
        end)
      end
    end
    class = {
      Lookup = Lookup,
      Register = Register,
      Remove = Remove,
      static = static
    }
    return class
  end)
end)
