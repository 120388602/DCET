-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local SystemReflection = System.Reflection
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- Represents the object discriminator convention.
  -- </summary>
  namespace.class("ObjectDiscriminatorConvention", function (namespace)
    local __instance, getInstance, getElementName, GetActualType, GetDiscriminator, class, static, __ctor__
    static = function (this)
      __instance = class("_t")
    end
    -- <summary>
    -- Initializes a new instance of the ObjectDiscriminatorConvention class.
    -- </summary>
    __ctor__ = function (this, elementName)
      if elementName == nil then
        System.throw(System.ArgumentNullException("elementName"))
      end
      if elementName:IndexOf(0 --[['\0']]) ~= - 1 then
        System.throw(System.ArgumentException("Element names cannot contain nulls.", "elementName"))
      end
      this._elementName = elementName
    end
    getInstance = function ()
      return __instance
    end
    getElementName = function (this)
      return this._elementName
    end
    -- <summary>
    -- Gets the actual type of an object by reading the discriminator from a BsonReader.
    -- </summary>
    -- <param name="nominalType">The nominal type.</param>
    -- <returns>The actual type.</returns>
    GetActualType = function (this, bsonReader, nominalType)
      -- the BsonReader is sitting at the value whose actual type needs to be found
      local bsonType = bsonReader:GetCurrentBsonType()
      if bsonReader:getState() == 3 --[[BsonReaderState.Value]] then
        local primitiveType = nil
        repeat
          local default = bsonType
          if default == 8 --[[BsonType.Boolean]] then
            primitiveType = System.typeof(System.Boolean)
            break
          elseif default == 5 --[[BsonType.Binary]] then
            local bookmark = bsonReader:GetBookmark()
            local binaryData = bsonReader:ReadBinaryData()
            local subType = binaryData:getSubType()
            if subType == 4 --[[BsonBinarySubType.UuidStandard]] or subType == 3 --[[BsonBinarySubType.UuidLegacy]] then
              primitiveType = System.typeof(System.Guid)
            end
            bsonReader:ReturnToBookmark(bookmark)
            break
          elseif default == 9 --[[BsonType.DateTime]] then
            primitiveType = System.typeof(System.DateTime)
            break
          elseif default == 19 --[[BsonType.Decimal128]] then
            primitiveType = System.typeof(MongoDBBson.Decimal128)
            break
          elseif default == 1 --[[BsonType.Double]] then
            primitiveType = System.typeof(System.Double)
            break
          elseif default == 16 --[[BsonType.Int32]] then
            primitiveType = System.typeof(System.Int32)
            break
          elseif default == 18 --[[BsonType.Int64]] then
            primitiveType = System.typeof(System.Int64)
            break
          elseif default == 7 --[[BsonType.ObjectId]] then
            primitiveType = System.typeof(MongoDBBson.ObjectId)
            break
          elseif default == 2 --[[BsonType.String]] then
            primitiveType = System.typeof(System.String)
            break
          end
        until 1

        -- Type.IsAssignableFrom is extremely expensive, always perform a direct type check before calling Type.IsAssignableFrom
        if primitiveType ~= nil and (primitiveType == nominalType or SystemReflection.IntrospectionExtensions.GetTypeInfo(nominalType):IsAssignableFrom(primitiveType)) then
          return primitiveType
        end
      end

      if bsonType == 3 --[[BsonType.Document]] then
        local bookmark = bsonReader:GetBookmark()
        bsonReader:ReadStartDocument()
        local actualType = nominalType
        if MongoDBBsonIO.IBsonReaderExtensions.FindElement(bsonReader, this._elementName) then
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)
          local discriminator = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, MongoDBBson.BsonValue)
          if discriminator:getIsBsonArray() then
            discriminator = Linq.Last(discriminator:getAsBsonArray())
            -- last item is leaf class discriminator
          end
          actualType = MongoDBBsonSerialization.BsonSerializer.LookupActualType(nominalType, discriminator)
        end
        bsonReader:ReturnToBookmark(bookmark)
        return actualType
      end

      return nominalType
    end
    -- <summary>
    -- Gets the discriminator value for an actual type.
    -- </summary>
    -- <param name="actualType">The actual type.</param>
    -- <returns>The discriminator value.</returns>
    GetDiscriminator = function (this, nominalType, actualType)
      return MongoDBBson.BsonValue.op_Implicit21(MongoDBBsonSerialization.TypeNameDiscriminator.GetDiscriminator(actualType))
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention
        }
      end,
      getInstance = getInstance,
      getElementName = getElementName,
      GetActualType = GetActualType,
      GetDiscriminator = GetDiscriminator,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
