-- Generated by CSharp.lua Compiler
--[[ Copyright 2016-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
]]
local System = System
local Linq = System.Linq.Enumerable
local SystemReflection = System.Reflection
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- Maps a fully immutable type. This will include anonymous types.
  -- </summary>
  namespace.class("ImmutableTypeClassMapConvention", function (namespace)
    local Apply
    Apply = function (this, classMap)
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(classMap:getClassType())
      if typeInfo:getIsAbstract() then
        return
      end

      if SystemReflection.ConstructorInfo.op_Inequality(typeInfo:GetConstructor(System.Type.EmptyTypes), nil) then
        return
      end

      local properties = typeInfo:GetProperties()
      if Linq.Any(properties, function (p)
        return p:getCanWrite()
      end) then
        return
        -- a type that has any writable properties is not immutable
      end

      local anyConstructorsWereMapped = false
      for _, ctor in System.each(typeInfo:GetConstructors()) do
        local continue
        repeat
          local parameters = ctor:GetParameters()
          if #parameters ~= #properties then
            continue = true
            break
            -- only consider constructors that have sufficient parameters to initialize all properties
          end

          local matches = Linq.GroupJoin(parameters, properties, function (parameter)
            return parameter:getName()
          end, function (property)
            return property:getName()
          end, function (parameter, props)
            return System.AnonymousType({
              Parameter = parameter,
              Properties = props
            })
          end, System.StringComparer.getOrdinalIgnoreCase(), System.String, System.AnonymousType)

          if Linq.Any(matches, function (m)
            return Linq.Count(m.Properties) ~= 1
          end) then
            continue = true
            break
          end

          classMap:MapConstructor(ctor)

          anyConstructorsWereMapped = true
          continue = true
        until 1
        if not continue then
          break
        end
      end

      if anyConstructorsWereMapped then
        -- if any constructors were mapped by this convention then map all the properties also
        for _, property in System.each(properties) do
          classMap:MapMember(property)
        end
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Conventions.ConventionBase,
          out.MongoDB.Bson.Serialization.Conventions.IClassMapConvention
        }
      end,
      Apply = Apply
    }
  end)
end)
