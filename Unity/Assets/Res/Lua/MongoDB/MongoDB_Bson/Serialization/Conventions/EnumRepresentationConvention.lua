-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBBsonSerialization
local MongoDBConventions
System.import(function (out)
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBConventions = MongoDB.Bson.Serialization.Conventions
end)
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- A convention that allows you to set the Enum serialization representation
  -- </summary>
  namespace.class("EnumRepresentationConvention", function (namespace)
    local getRepresentation, Apply2, IsNullableEnum, EnsureRepresentationIsValidForEnums, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="EnumRepresentationConvention" /> class.
    -- </summary>
    -- from the enum itself.</param>
    __ctor__ = function (this, representation)
      MongoDBConventions.ConventionBase.__ctor__[1](this)
      EnsureRepresentationIsValidForEnums(this, representation)
      this._representation = representation
    end
    getRepresentation = function (this)
      return this._representation
    end
    -- <summary>
    -- Applies a modification to the member map.
    -- </summary>
    Apply2 = function (this, memberMap)
      local memberType = memberMap:getMemberType()
      local memberTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(memberType)

      if memberTypeInfo:getIsEnum() then
        local serializer = memberMap:GetSerializer()
        local representationConfigurableSerializer = System.as(serializer, MongoDBBsonSerialization.IRepresentationConfigurable)
        if representationConfigurableSerializer ~= nil then
          local reconfiguredSerializer = representationConfigurableSerializer:WithRepresentation1(this._representation)
          memberMap:SetSerializer(reconfiguredSerializer)
        end
        return
      end

      if IsNullableEnum(this, memberType) then
        local serializer = memberMap:GetSerializer()
        local childSerializerConfigurableSerializer = System.as(serializer, MongoDBBsonSerialization.IChildSerializerConfigurable)
        if childSerializerConfigurableSerializer ~= nil then
          local childSerializer = childSerializerConfigurableSerializer:getChildSerializer()
          local representationConfigurableChildSerializer = System.as(childSerializer, MongoDBBsonSerialization.IRepresentationConfigurable)
          if representationConfigurableChildSerializer ~= nil then
            local reconfiguredChildSerializer = representationConfigurableChildSerializer:WithRepresentation1(this._representation)
            local reconfiguredSerializer = childSerializerConfigurableSerializer:WithChildSerializer(reconfiguredChildSerializer)
            memberMap:SetSerializer(reconfiguredSerializer)
          end
        end
        return
      end
    end
    IsNullableEnum = function (this, type)
      return SystemReflection.IntrospectionExtensions.GetTypeInfo(type):getIsGenericType() and type:GetGenericTypeDefinition() == System.typeof(System.Nullable) and SystemReflection.IntrospectionExtensions.GetTypeInfo(System.Nullable.GetUnderlyingType(type)):getIsEnum()
    end
    EnsureRepresentationIsValidForEnums = function (this, representation)
      if representation == 0 or representation == 2 --[[BsonType.String]] or representation == 16 --[[BsonType.Int32]] or representation == 18 --[[BsonType.Int64]] then
        return
      end
      System.throw(System.ArgumentException("Enums can only be represented as String, Int32, Int64 or the type of the enum", "representation"))
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Conventions.ConventionBase,
          out.MongoDB.Bson.Serialization.Conventions.IMemberMapConvention
        }
      end,
      _representation = 0,
      getRepresentation = getRepresentation,
      Apply2 = Apply2,
      __ctor__ = __ctor__
    }
  end)
end)
