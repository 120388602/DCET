-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- Base class for a convention.
  -- </summary>
  namespace.class("ConventionBase", function (namespace)
    local getName, GetName, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the ConventionBase class.
    -- </summary>
    __ctor1__ = function (this)
      this._name = GetName(this:GetType())
    end
    -- <summary>
    -- Initializes a new instance of the ConventionBase class.
    -- </summary>
    __ctor2__ = function (this, name)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end

      this._name = name
    end
    getName = function (this)
      return this._name
    end
    GetName = function (type)
      local name = type:getName()
      if name:EndsWith("Convention") then
        return name:Substring(0, #name - 10)
      end

      return name
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Conventions.IConvention
        }
      end,
      getName = getName,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
