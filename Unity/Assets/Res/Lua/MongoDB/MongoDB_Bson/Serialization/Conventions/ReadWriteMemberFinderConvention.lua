-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBConventions
System.import(function (out)
  MongoDBConventions = MongoDB.Bson.Serialization.Conventions
end)
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- A convention that finds readable and writeable members and adds them to the class map.
  -- </summary>
  namespace.class("ReadWriteMemberFinderConvention", function (namespace)
    local Apply, MapField, MapProperty, __ctor1__, __ctor2__, __ctor3__, __ctor4__
    -- <summary>
    -- Initializes a new instance of the <see cref="ReadWriteMemberFinderConvention" /> class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor3__(this, 20 --[[BindingFlags.Instance | BindingFlags.Public]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="ReadWriteMemberFinderConvention" /> class.
    -- </summary>
    __ctor2__ = function (this, memberTypes)
      __ctor4__(this, memberTypes, 20 --[[BindingFlags.Instance | BindingFlags.Public]])
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="ReadWriteMemberFinderConvention" /> class.
    -- </summary>
    __ctor3__ = function (this, bindingFlags)
      __ctor4__(this, 20 --[[MemberTypes.Field | MemberTypes.Property]], bindingFlags)
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="ReadWriteMemberFinderConvention" /> class.
    -- </summary>
    -- <param name="bindingFlags">The binding flags.</param>
    __ctor4__ = function (this, memberTypes, bindingFlags)
      MongoDBConventions.ConventionBase.__ctor__[1](this)
      this._memberTypes = memberTypes
      this._bindingFlags = bindingFlags | 2 --[[BindingFlags.DeclaredOnly]]
    end
    -- <summary>
    -- Applies a modification to the class map.
    -- </summary>
    Apply = function (this, classMap)
      -- order is important for backwards compatibility and GetMembers changes the order of finding things.
      -- hence, we'll check member types explicitly instead of letting GetMembers handle it.

      if (this._memberTypes & 4 --[[MemberTypes.Field]]) == 4 --[[MemberTypes.Field]] then
        local fields = SystemReflection.IntrospectionExtensions.GetTypeInfo(classMap:getClassType()):GetFields(this._bindingFlags)
        for _, field in System.each(fields) do
          MapField(this, classMap, field)
        end
      end

      if (this._memberTypes & 16 --[[MemberTypes.Property]]) == 16 --[[MemberTypes.Property]] then
        local properties = SystemReflection.IntrospectionExtensions.GetTypeInfo(classMap:getClassType()):GetProperties(this._bindingFlags)
        for _, property in System.each(properties) do
          MapProperty(this, classMap, property)
        end
      end
    end
    MapField = function (this, classMap, fieldInfo)
      if fieldInfo:getIsInitOnly() or fieldInfo:getIsLiteral() then
        -- we can't write
        return
      end

      classMap:MapMember(fieldInfo)
    end
    MapProperty = function (this, classMap, propertyInfo)
      if not propertyInfo:getCanRead() or not propertyInfo:getCanWrite() then
        -- only read and write properties are mapped
        return
      end

      -- skip indexers
      if #propertyInfo:GetIndexParameters() ~= 0 then
        return
      end

      -- skip overridden properties (they are already included by the base class)
      local getMethodInfo = propertyInfo:getGetMethod()
      if getMethodInfo:getIsVirtual() and getMethodInfo:GetBaseDefinition():getDeclaringType() ~= classMap:getClassType() then
        return
      end

      classMap:MapMember(propertyInfo)
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Conventions.ConventionBase,
          out.MongoDB.Bson.Serialization.Conventions.IClassMapConvention
        }
      end,
      _bindingFlags = 0,
      _memberTypes = 0,
      Apply = Apply,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      }
    }
  end)
end)
