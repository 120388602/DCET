-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBConventions
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBConventions = MongoDB.Bson.Serialization.Conventions
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- Represents the standard discriminator conventions (see ScalarDiscriminatorConvention and HierarchicalDiscriminatorConvention).
  -- </summary>
  namespace.class("StandardDiscriminatorConvention", function (namespace)
    local __scalar, __hierarchical, getScalar, getHierarchical, getElementName, GetActualType, static, __ctor__
    static = function (this)
      __scalar = MongoDBConventions.ScalarDiscriminatorConvention("_t")
      __hierarchical = MongoDBConventions.HierarchicalDiscriminatorConvention("_t")
    end
    -- <summary>
    -- Initializes a new instance of the StandardDiscriminatorConvention class.
    -- </summary>
    __ctor__ = function (this, elementName)
      if elementName == nil then
        System.throw(System.ArgumentNullException("elementName"))
      end
      if elementName:IndexOf(0 --[['\0']]) ~= - 1 then
        System.throw(System.ArgumentException("Element names cannot contain nulls.", "elementName"))
      end
      this._elementName = elementName
    end
    getScalar = function ()
      return __scalar
    end
    getHierarchical = function ()
      return __hierarchical
    end
    getElementName = function (this)
      return this._elementName
    end
    -- <summary>
    -- Gets the actual type of an object by reading the discriminator from a BsonReader.
    -- </summary>
    -- <param name="nominalType">The nominal type.</param>
    -- <returns>The actual type.</returns>
    GetActualType = function (this, bsonReader, nominalType)
      -- the BsonReader is sitting at the value whose actual type needs to be found
      local bsonType = bsonReader:GetCurrentBsonType()
      if bsonType == 3 --[[BsonType.Document]] then
        -- ensure KnownTypes of nominalType are registered (so IsTypeDiscriminated returns correct answer)
        MongoDBBsonSerialization.BsonSerializer.EnsureKnownTypesAreRegistered(nominalType)

        -- we can skip looking for a discriminator if nominalType has no discriminated sub types
        if MongoDBBsonSerialization.BsonSerializer.IsTypeDiscriminated(nominalType) then
          local bookmark = bsonReader:GetBookmark()
          bsonReader:ReadStartDocument()
          local actualType = nominalType
          if MongoDBBsonIO.IBsonReaderExtensions.FindElement(bsonReader, this._elementName) then
            local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)
            local discriminator = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, MongoDBBson.BsonValue)
            if discriminator:getIsBsonArray() then
              discriminator = Linq.Last(discriminator:getAsBsonArray())
              -- last item is leaf class discriminator
            end
            actualType = MongoDBBsonSerialization.BsonSerializer.LookupActualType(nominalType, discriminator)
          end
          bsonReader:ReturnToBookmark(bookmark)
          return actualType
        end
      end

      return nominalType
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention
        }
      end,
      getScalar = getScalar,
      getHierarchical = getHierarchical,
      getElementName = getElementName,
      GetActualType = GetActualType,
      static = static,
      __ctor__ = __ctor__
    }
  end)
end)
