-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MongoDBConventions
System.import(function (out)
  MongoDBConventions = MongoDB.Bson.Serialization.Conventions
end)
System.namespace("MongoDB.Bson.Serialization.Conventions", function (namespace)
  -- <summary>
  -- Runs the conventions against a BsonClassMap and its BsonMemberMaps.
  -- </summary>
  namespace.class("ConventionRunner", function (namespace)
    local Apply, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="ConventionRunner" /> class.
    -- </summary>
    __ctor__ = function (this, conventions)
      if conventions == nil then
        System.throw(System.ArgumentNullException("conventions"))
      end

      this._conventions = Linq.ToList(conventions:getConventions())
    end
    -- <summary>
    -- Applies a modification to the class map.
    -- </summary>
    Apply = function (this, classMap)
      for _, convention in System.each(Linq.OfType(this._conventions, MongoDBConventions.IClassMapConvention)) do
        convention:Apply(classMap)
      end

      for _, convention in System.each(Linq.OfType(this._conventions, MongoDBConventions.IMemberMapConvention)) do
        for _, memberMap in System.each(classMap:getDeclaredMemberMaps()) do
          convention:Apply2(memberMap)
        end
      end

      for _, convention in System.each(Linq.OfType(this._conventions, MongoDBConventions.ICreatorMapConvention)) do
        for _, creatorMap in System.each(classMap:getCreatorMaps()) do
          convention:Apply1(creatorMap)
        end
      end

      for _, convention in System.each(Linq.OfType(this._conventions, MongoDBConventions.IPostProcessingConvention)) do
        convention:PostProcess(classMap)
      end
    end
    return {
      Apply = Apply,
      __ctor__ = __ctor__
    }
  end)
end)
