-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemSecurity = System.Security
local SystemCryptography = System.Security.Cryptography
local SystemText = System.Text
local ArrayByte = System.Array(System.Byte)
System.namespace("MongoDB.Bson.Serialization.IdGenerators", function (namespace)
  -- <summary>
  -- A GUID generator that generates GUIDs in ascending order. To enable
  -- an index to make use of the ascending nature make sure to use
  -- <see cref="GuidRepresentation.Standard">GuidRepresentation.Standard</see>
  -- as the storage representation.
  -- Internally the GUID is of the form
  -- 8 bytes: Ticks from DateTime.UtcNow.Ticks
  -- 3 bytes: hash of machine name
  -- 2 bytes: low order bytes of process Id
  -- 3 bytes: increment
  -- </summary>
  namespace.class("AscendingGuidGenerator", function (namespace)
    local __instance, __machineProcessId, __increment, getInstance, GenerateId, GenerateId1, IsEmpty, GetCurrentProcessId, 
    GetMachineHash, GetMachineName, class, static
    static = function (this)
      __instance = class()
      local machineHash = GetMachineHash()
      local processId
      System.try(function ()
        -- use low order two bytes only
        processId = System.toInt16(GetCurrentProcessId())
      end, function (default)
        if System.is(default, SystemSecurity.SecurityException) then
          processId = 0
        else
          return 1, default
        end
      end)

      __machineProcessId = ArrayByte(machineHash:get(0), machineHash:get(1), machineHash:get(2), System.toByte(System.sr(processId, 8)), System.toByte(processId))
    end
    __increment = 0
    getInstance = function ()
      return __instance
    end
    -- <summary>
    -- Generates an ascending Guid for a document. Consecutive invocations
    -- should generate Guids that are ascending from a MongoDB perspective
    -- </summary>
    -- MongoCollection when called from the driver). </param>
    -- <param name="document">The document it was generated for.</param>
    -- <returns>A Guid.</returns>
    GenerateId = function (this, container, document)
      local default
      default, __increment = System.Interlocked.Increment(__increment)
      local increment = System.band(default, 0x00ffffff)
      return GenerateId1(this, System.DateTime.getUtcNow():getTicks(), __machineProcessId, increment)
    end
    -- <summary>
    -- Generates a Guid for a document. Note - this is purely used for
    -- unit testing
    -- </summary>
    -- <param name="machineProcessId">A 5 byte array with the first 3 bytes
    -- representing a machine id and the next 2 representing a process
    -- id</param>
    -- <param name="increment">The increment portion of the Guid. Used
    -- to distinguish between 2 Guids that have the timestamp. Note
    -- only the least significant 3 bytes are used.</param>
    -- <returns>A Guid.</returns>
    GenerateId1 = function (this, tickCount, machineProcessId, increment)
      local a = System.toInt32(System.sr(tickCount, 32))
      local b = System.toInt16(System.sr(tickCount, 16))
      local c = System.toInt16(tickCount)
      local d = ArrayByte:new(8)
      System.Array.Copy(machineProcessId, d, 5)
      d:set(5, System.toByte(System.sr(increment, 16)))
      d:set(6, System.toByte(System.sr(increment, 8)))
      d:set(7, System.toByte(increment))
      return System.Guid(a, b, c, d)
    end
    -- <summary>
    -- Tests whether an id is empty.
    -- </summary>
    -- <returns>True if the Id is empty. False otherwise</returns>
    IsEmpty = function (this, id)
      return id == nil or System.Guid.op_Equality(System.cast(System.Guid, id), System.Guid.Empty)
    end
    -- <summary>
    -- Gets the current process id.  This method exists because of how
    -- CAS operates on the call stack, checking for permissions before
    -- executing the method.  Hence, if we inlined this call, the calling
    -- method would not execute before throwing an exception requiring the
    -- try/catch at an even higher level that we don't necessarily control.
    -- </summary>
    GetCurrentProcessId = function ()
      return System.Process.GetCurrentProcess():getId()
    end
    GetMachineHash = function ()
      -- use instead of Dns.HostName so it will work offline
      local machineName = GetMachineName()
      local sha1 = SystemCryptography.SHA1.Create()
      return sha1:ComputeHash(SystemText.Encoding.getUTF8():GetBytes(machineName))
    end
    GetMachineName = function ()
      return System.Environment.getMachineName()
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.IIdGenerator
        }
      end,
      getInstance = getInstance,
      GenerateId = GenerateId,
      GenerateId1 = GenerateId1,
      IsEmpty = IsEmpty,
      static = static,
      __metadata__ = function (out)
        return {
          methods = {
            { "GetCurrentProcessId", 0x89, GetCurrentProcessId, System.Int32, System.MethodImplAttribute(8 --[[MethodImplOptions.NoInlining]]) }
          }
        }
      end
    }
    return class
  end)
end)
