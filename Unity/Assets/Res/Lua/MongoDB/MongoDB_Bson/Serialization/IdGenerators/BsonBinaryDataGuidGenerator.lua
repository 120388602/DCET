-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization.IdGenerators", function (namespace)
  -- <summary>
  -- Represents an Id generator for Guids stored in BsonBinaryData values.
  -- </summary>
  namespace.class("BsonBinaryDataGuidGenerator", function (namespace)
    local __csharpLegacyInstance, __javaLegacyInstance, __pythonLegacyInstance, __standardInstance, __unspecifiedInstance, __emptyGuidBytes, getCSharpLegacyInstance, getJavaLegacyInstance, 
    getPythonLegacyInstance, getStandardInstance, getUnspecifedInstance, GetInstance, GenerateId, IsEmpty, class, static, 
    __ctor__
    static = function (this)
      __csharpLegacyInstance = class(2 --[[GuidRepresentation.CSharpLegacy]])
      __javaLegacyInstance = class(3 --[[GuidRepresentation.JavaLegacy]])
      __pythonLegacyInstance = class(4 --[[GuidRepresentation.PythonLegacy]])
      __standardInstance = class(1 --[[GuidRepresentation.Standard]])
      __unspecifiedInstance = class(0 --[[GuidRepresentation.Unspecified]])
      __emptyGuidBytes = System.Guid.Empty:ToByteArray()
    end
    -- <summary>
    -- Initializes a new instance of the BsonBinaryDataGuidGenerator class.
    -- </summary>
    __ctor__ = function (this, guidRepresentation)
      this._guidRepresentation = guidRepresentation
    end
    getCSharpLegacyInstance = function ()
      return __csharpLegacyInstance
    end
    getJavaLegacyInstance = function ()
      return __javaLegacyInstance
    end
    getPythonLegacyInstance = function ()
      return __pythonLegacyInstance
    end
    getStandardInstance = function ()
      return __standardInstance
    end
    getUnspecifedInstance = function ()
      return __unspecifiedInstance
    end
    -- <summary>
    -- Gets the instance of BsonBinaryDataGuidGenerator for a GuidRepresentation.
    -- </summary>
    -- <returns>The instance of BsonBinaryDataGuidGenerator for a GuidRepresentation.</returns>
    GetInstance = function (guidRepresentation)
      repeat
        local default = guidRepresentation
        if default == 2 --[[GuidRepresentation.CSharpLegacy]] then
          return __csharpLegacyInstance
        elseif default == 3 --[[GuidRepresentation.JavaLegacy]] then
          return __javaLegacyInstance
        elseif default == 4 --[[GuidRepresentation.PythonLegacy]] then
          return __pythonLegacyInstance
        elseif default == 1 --[[GuidRepresentation.Standard]] then
          return __standardInstance
        elseif default == 0 --[[GuidRepresentation.Unspecified]] then
          return __unspecifiedInstance
        else
          System.throw(System.ArgumentOutOfRangeException("guidRepresentation"))
        end
      until 1
    end
    -- <summary>
    -- Generates an Id for a document.
    -- </summary>
    -- <param name="document">The document.</param>
    -- <returns>An Id.</returns>
    GenerateId = function (this, container, document)
      return System.new(MongoDBBson.BsonBinaryData, 5, System.Guid.NewGuid(), this._guidRepresentation)
    end
    -- <summary>
    -- Tests whether an Id is empty.
    -- </summary>
    -- <returns>True if the Id is empty.</returns>
    IsEmpty = function (this, id)
      if id == nil or (System.cast(MongoDBBson.BsonValue, id)):getIsBsonNull() then
        return true
      end

      local idBsonBinaryData = System.cast(MongoDBBson.BsonBinaryData, id)
      local subType = idBsonBinaryData:getSubType()
      if subType ~= 3 --[[BsonBinarySubType.UuidLegacy]] and subType ~= 4 --[[BsonBinarySubType.UuidStandard]] then
        System.throw(System.ArgumentOutOfRangeException("id", "The binary sub type of the id value passed to the BsonBinaryDataGuidGenerator IsEmpty method is not UuidLegacy or UuidStandard."))
      end
      return Linq.SequenceEqual(idBsonBinaryData:getBytes(), __emptyGuidBytes)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.IIdGenerator
        }
      end,
      _guidRepresentation = 0,
      getCSharpLegacyInstance = getCSharpLegacyInstance,
      getJavaLegacyInstance = getJavaLegacyInstance,
      getPythonLegacyInstance = getPythonLegacyInstance,
      getStandardInstance = getStandardInstance,
      getUnspecifedInstance = getUnspecifedInstance,
      GetInstance = GetInstance,
      GenerateId = GenerateId,
      IsEmpty = IsEmpty,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
