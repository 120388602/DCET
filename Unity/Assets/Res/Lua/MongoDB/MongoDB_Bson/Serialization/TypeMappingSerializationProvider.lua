-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemConcurrent = System.Collections.Concurrent
local SystemReflection = System.Reflection
local ConcurrentDictionary_2TypeType = SystemConcurrent.ConcurrentDictionary_2(System.Type, System.Type)
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- Represents a serialization provider based on a mapping from value types to serializer types.
  -- </summary>
  namespace.class("TypeMappingSerializationProvider", function (namespace)
    local GetSerializer1, RegisterMapping, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="TypeMappingSerializationProvider"/> class.
    -- </summary>
    __ctor__ = function (this)
      this._serializerTypes = ConcurrentDictionary_2TypeType()
    end
    GetSerializer1 = function (this, type, serializerRegistry)
      if type == nil then
        System.throw(System.ArgumentNullException("type"))
      end
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      if typeInfo:getIsGenericType() and typeInfo:getContainsGenericParameters() then
        local message = System.String.Format("Generic type {0} has unassigned type parameters.", MongoDBBson.BsonUtils.GetFriendlyTypeName(type))
        System.throw(System.ArgumentException(message, "type"))
      end

      local serializerType
      local default
      default, serializerType = this._serializerTypes:TryGetValue(type)
      if default then
        return this:CreateSerializer1(serializerType, serializerRegistry)
      end

      if typeInfo:getIsGenericType() and not typeInfo:getContainsGenericParameters() then
        local serializerTypeDefinition
        local extern
        extern, serializerTypeDefinition = this._serializerTypes:TryGetValue(type:GetGenericTypeDefinition())
        if extern then
          return this:CreateGenericSerializer1(serializerTypeDefinition, SystemReflection.IntrospectionExtensions.GetTypeInfo(type):GetGenericArguments(), serializerRegistry)
        end
      end

      return nil
    end
    -- <summary>
    -- Registers the serializer mapping.
    -- </summary>
    -- <param name="serializerType">Type of the serializer.</param>
    RegisterMapping = function (this, type, serializerType)
      if type == nil then
        System.throw(System.ArgumentNullException("type"))
      end
      if serializerType == nil then
        System.throw(System.ArgumentNullException("serializerType"))
      end
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      local serializerTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(serializerType)
      if typeInfo:getContainsGenericParameters() ~= serializerTypeInfo:getContainsGenericParameters() then
        System.throw(System.ArgumentException("The type and the serializerType must have the same number of type parameters."))
      end
      if typeInfo:getContainsGenericParameters() then
        if not typeInfo:getIsGenericTypeDefinition() or not serializerTypeInfo:getIsGenericTypeDefinition() then
          System.throw(System.ArgumentException("A generic type must either have all or none of the type parameters assigned."))
        end
        if #SystemReflection.IntrospectionExtensions.GetTypeInfo(type):GetGenericArguments() ~= #SystemReflection.IntrospectionExtensions.GetTypeInfo(serializerType):GetGenericArguments() then
          System.throw(System.ArgumentException("The type and the serializerType must have the same number of type parameters."))
        end
      end

      if not this._serializerTypes:TryAdd(type, serializerType) then
        local message = System.String.Format("There is already a serializer mapping registered for type {0}.", MongoDBBson.BsonUtils.GetFriendlyTypeName(type))
        System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.BsonSerializationProviderBase
        }
      end,
      GetSerializer1 = GetSerializer1,
      RegisterMapping = RegisterMapping,
      __ctor__ = __ctor__
    }
  end)
end)
