-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
System.namespace("MongoDB.Bson.Serialization.Attributes", function (namespace)
  -- <summary>
  -- Specifies the discriminator and related options for a class.
  -- </summary>
  namespace.class("BsonDiscriminatorAttribute", function (namespace)
    local getDiscriminator, getRequired, setRequired, getRootClass, setRootClass, Apply, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the BsonDiscriminatorAttribute class.
    -- </summary>
    __ctor1__ = function (this)
      System.Attribute.__ctor__(this)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDiscriminatorAttribute class.
    -- </summary>
    __ctor2__ = function (this, discriminator)
      System.Attribute.__ctor__(this)
      this._discriminator = discriminator
    end
    getDiscriminator = function (this)
      return this._discriminator
    end
    getRequired = function (this)
      return this._required
    end
    setRequired = function (this, value)
      this._required = value
    end
    getRootClass = function (this)
      return this._rootClass
    end
    setRootClass = function (this, value)
      this._rootClass = value
    end
    -- <summary>
    -- Applies a modification to the class map.
    -- </summary>
    Apply = function (this, classMap)
      if this._discriminator ~= nil then
        classMap:SetDiscriminator(this._discriminator)
      end
      classMap:SetDiscriminatorIsRequired(this._required)
      classMap:SetIsRootClass(this._rootClass)
    end
    return {
      base = function (out)
        return {
          System.Attribute,
          out.MongoDB.Bson.Serialization.IBsonClassMapAttribute
        }
      end,
      _required = false,
      _rootClass = false,
      getDiscriminator = getDiscriminator,
      getRequired = getRequired,
      setRequired = setRequired,
      getRootClass = getRootClass,
      setRootClass = setRootClass,
      Apply = Apply,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
