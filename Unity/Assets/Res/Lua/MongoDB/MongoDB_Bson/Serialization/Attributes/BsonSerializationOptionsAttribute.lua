-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson.Serialization.Attributes", function (namespace)
  -- <summary>
  -- Abstract base class for serialization options attributes.
  -- </summary>
  namespace.class("BsonSerializationOptionsAttribute", function (namespace)
    local Apply, Apply1, __ctor__
    -- <summary>
    -- Initializes a new instance of the BsonSerializationOptionsAttribute class.
    -- </summary>
    __ctor__ = function (this)
      System.Attribute.__ctor__(this)
    end
    -- <summary>
    -- Applies a modification to the member map.
    -- </summary>
    Apply = function (this, memberMap)
      local serializer = memberMap:GetSerializer()
      local reconfiguredSerializer = this:Apply1(serializer)
      memberMap:SetSerializer(reconfiguredSerializer)
    end
    -- <summary>
    -- Reconfigures the specified serializer by applying this attribute to it.
    -- </summary>
    -- <returns>A reconfigured serializer.</returns>
    -- <exception cref="System.NotSupportedException"></exception>
    Apply1 = function (this, serializer)
      -- if none of the overrides applied the attribute to the serializer see if it can be applied to a child serializer
      local childSerializerConfigurable = System.as(serializer, MongoDBBsonSerialization.IChildSerializerConfigurable)
      if childSerializerConfigurable ~= nil then
        local childSerializer = childSerializerConfigurable:getChildSerializer()
        local reconfiguredChildSerializer = this:Apply1(childSerializer)
        return childSerializerConfigurable:WithChildSerializer(reconfiguredChildSerializer)
      end

      local message = System.String.Format("A serializer of type '{0}' is not configurable using an attribute of type '{1}'.", MongoDBBson.BsonUtils.GetFriendlyTypeName(serializer:GetType()), MongoDBBson.BsonUtils.GetFriendlyTypeName(this:GetType()))
      System.throw(System.NotSupportedException(message))
    end
    return {
      base = function (out)
        return {
          System.Attribute,
          out.MongoDB.Bson.Serialization.IBsonMemberMapAttribute
        }
      end,
      Apply = Apply,
      Apply1 = Apply1,
      __ctor__ = __ctor__
    }
  end)
end)
