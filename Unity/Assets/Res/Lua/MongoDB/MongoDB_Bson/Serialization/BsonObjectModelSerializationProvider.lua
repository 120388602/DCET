-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local MongoDBBson
local MongoDBBsonSerialization
local MongoDBSerializers
local DictTypeIBsonSerializer
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  DictTypeIBsonSerializer = System.Dictionary(System.Type, MongoDBBsonSerialization.IBsonSerializer)
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- Provides serializers for BsonValue and its derivations.
  -- </summary>
  namespace.class("BsonObjectModelSerializationProvider", function (namespace)
    local __serializers, GetSerializer1, static
    static = function (this)
      local default = DictTypeIBsonSerializer()
      default:AddKeyValue(System.typeof(MongoDBBson.BsonArray), MongoDBSerializers.BsonArraySerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonBinaryData), MongoDBSerializers.BsonBinaryDataSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonBoolean), MongoDBSerializers.BsonBooleanSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonDateTime), MongoDBSerializers.BsonDateTimeSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonDecimal128), MongoDBSerializers.BsonDecimal128Serializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonDocument), MongoDBSerializers.BsonDocumentSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonDocumentWrapper), MongoDBSerializers.BsonDocumentWrapperSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonDouble), MongoDBSerializers.BsonDoubleSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonInt32), MongoDBSerializers.BsonInt32Serializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonInt64), MongoDBSerializers.BsonInt64Serializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonJavaScript), MongoDBSerializers.BsonJavaScriptSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonJavaScriptWithScope), MongoDBSerializers.BsonJavaScriptWithScopeSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonMaxKey), MongoDBSerializers.BsonMaxKeySerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonMinKey), MongoDBSerializers.BsonMinKeySerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonNull), MongoDBSerializers.BsonNullSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonObjectId), MongoDBSerializers.BsonObjectIdSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonRegularExpression), MongoDBSerializers.BsonRegularExpressionSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonString), MongoDBSerializers.BsonStringSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonSymbol), MongoDBSerializers.BsonSymbolSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonTimestamp), MongoDBSerializers.BsonTimestampSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonUndefined), MongoDBSerializers.BsonUndefinedSerializer.getInstance())
      default:AddKeyValue(System.typeof(MongoDBBson.BsonValue), MongoDBSerializers.BsonValueSerializer.getInstance())
      __serializers = default
    end
    GetSerializer1 = function (this, type, serializerRegistry)
      if type == nil then
        System.throw(System.ArgumentNullException("type"))
      end
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      if typeInfo:getIsGenericType() and typeInfo:getContainsGenericParameters() then
        local message = System.String.Format("Generic type {0} has unassigned type parameters.", MongoDBBson.BsonUtils.GetFriendlyTypeName(type))
        System.throw(System.ArgumentException(message, "type"))
      end

      local serializer
      local default
      default, serializer = __serializers:TryGetValue(type)
      if default then
        return serializer
      end

      return nil
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.BsonSerializationProviderBase
        }
      end,
      GetSerializer1 = GetSerializer1,
      static = static
    }
  end)
end)
