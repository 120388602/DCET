-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
-- don't add using statement for MongoDB.Bson.Serialization.Serializers to minimize dependencies on DefaultSerializer
local System = System
local SystemReflection = System.Reflection
local HashSetType = System.HashSet(System.Type)
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBAttributes
local MongoDBConventions
local MongoDBIdGenerators
local DictTypeIIdGenerator
local DictBsonValueHashSetType
local DictTypeIDiscriminatorConvention
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBAttributes = MongoDB.Bson.Serialization.Attributes
  MongoDBConventions = MongoDB.Bson.Serialization.Conventions
  MongoDBIdGenerators = MongoDB.Bson.Serialization.IdGenerators
  DictTypeIIdGenerator = System.Dictionary(System.Type, MongoDBBsonSerialization.IIdGenerator)
  DictBsonValueHashSetType = System.Dictionary(MongoDBBson.BsonValue, HashSetType)
  DictTypeIDiscriminatorConvention = System.Dictionary(System.Type, MongoDBConventions.IDiscriminatorConvention)
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- A static class that represents the BSON serialization functionality.
  -- </summary>
  namespace.class("BsonSerializer", function (namespace)
    local __configLock, __idGenerators, __discriminatorConventions, __discriminators, __discriminatedTypes, __serializerRegistry, __typeMappingSerializationProvider, __typesWithRegisteredKnownTypes, 
    __useNullIdChecker, __useZeroIdChecker, getSerializerRegistry, getUseNullIdChecker, setUseNullIdChecker, getUseZeroIdChecker, setUseZeroIdChecker, getConfigLock, 
    Deserialize, Deserialize1, Deserialize2, Deserialize3, Deserialize4, Deserialize5, Deserialize6, Deserialize7, 
    Deserialize8, Deserialize9, Deserialize10, Deserialize11, IsTypeDiscriminated, LookupActualType, LookupDiscriminatorConvention, LookupIdGenerator, 
    LookupSerializer, LookupSerializer1, RegisterDiscriminator, RegisterDiscriminatorConvention, RegisterGenericSerializerDefinition, RegisterIdGenerator, RegisterSerializationProvider, RegisterSerializer, 
    RegisterSerializer1, Serialize, Serialize1, EnsureKnownTypesAreRegistered, CreateSerializerRegistry, RegisterIdGenerators, static
    static = function (this)
      __configLock = System.ReaderWriterLockSlim(1 --[[LockRecursionPolicy.SupportsRecursion]])
      __idGenerators = DictTypeIIdGenerator()
      __discriminatorConventions = DictTypeIDiscriminatorConvention()
      __discriminators = DictBsonValueHashSetType()
      __discriminatedTypes = HashSetType()
      __typesWithRegisteredKnownTypes = HashSetType()
      CreateSerializerRegistry()
      RegisterIdGenerators()
    end
    __useNullIdChecker = false
    __useZeroIdChecker = false
    getSerializerRegistry = function ()
      return __serializerRegistry
    end
    getUseNullIdChecker = function ()
      return __useNullIdChecker
    end
    setUseNullIdChecker = function (value)
      __useNullIdChecker = value
    end
    getUseZeroIdChecker = function ()
      return __useZeroIdChecker
    end
    setUseZeroIdChecker = function (value)
      __useZeroIdChecker = value
    end
    getConfigLock = function ()
      return __configLock
    end
    -- <summary>
    -- Deserializes an object from a BsonDocument.
    -- </summary>
    -- <param name="document">The BsonDocument.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize = function (document, configurator, TNominalType)
      local default, extern = System.using(MongoDBBsonIO.BsonDocumentReader(document), function (bsonReader)
        return true, Deserialize1(bsonReader, configurator, TNominalType)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="bsonReader">The BsonReader.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize1 = function (bsonReader, configurator, TNominalType)
      local serializer = LookupSerializer(TNominalType)
      local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader, configurator)
      return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(serializer, context, TNominalType)
    end
    -- <summary>
    -- Deserializes an object from a BSON byte array.
    -- </summary>
    -- <param name="bytes">The BSON byte array.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize2 = function (bytes, configurator, TNominalType)
      local default, extern = System.using(MongoDBBsonIO.ByteArrayBuffer(bytes, true), function (buffer)
        local default, extern = System.using(MongoDBBsonIO.ByteBufferStream(buffer, false), function (stream)
          return true, Deserialize3(stream, configurator, TNominalType)
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes an object from a BSON Stream.
    -- </summary>
    -- <param name="stream">The BSON Stream.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize3 = function (stream, configurator, TNominalType)
      local default, extern = System.using(MongoDBBsonIO.BsonBinaryReader(stream), function (bsonReader)
        return true, Deserialize1(bsonReader, configurator, TNominalType)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes an object from a JSON string.
    -- </summary>
    -- <param name="json">The JSON string.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize4 = function (json, configurator, TNominalType)
      local default, extern = System.using(MongoDBBsonIO.JsonReader(json), function (bsonReader)
        return true, Deserialize1(bsonReader, configurator, TNominalType)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes an object from a JSON TextReader.
    -- </summary>
    -- <param name="textReader">The JSON TextReader.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize5 = function (textReader, configurator, TNominalType)
      local default, extern = System.using(System.new(MongoDBBsonIO.JsonReader, 3, textReader), function (bsonReader)
        return true, Deserialize1(bsonReader, configurator, TNominalType)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes an object from a BsonDocument.
    -- </summary>
    -- <param name="nominalType">The nominal type of the object.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize6 = function (document, nominalType, configurator)
      local default, extern = System.using(MongoDBBsonIO.BsonDocumentReader(document), function (bsonReader)
        return true, Deserialize7(bsonReader, nominalType, configurator)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes a value.
    -- </summary>
    -- <param name="nominalType">The nominal type of the object.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize7 = function (bsonReader, nominalType, configurator)
      local serializer = LookupSerializer1(nominalType)
      local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader, configurator)
      return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize(serializer, context)
    end
    -- <summary>
    -- Deserializes an object from a BSON byte array.
    -- </summary>
    -- <param name="nominalType">The nominal type of the object.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize8 = function (bytes, nominalType, configurator)
      local default, extern = System.using(MongoDBBsonIO.ByteArrayBuffer(bytes, true), function (buffer)
        local default, extern = System.using(MongoDBBsonIO.ByteBufferStream(buffer, false), function (stream)
          return true, Deserialize9(stream, nominalType, configurator)
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes an object from a BSON Stream.
    -- </summary>
    -- <param name="nominalType">The nominal type of the object.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize9 = function (stream, nominalType, configurator)
      local default, extern = System.using(MongoDBBsonIO.BsonBinaryReader(stream), function (bsonReader)
        return true, Deserialize7(bsonReader, nominalType, configurator)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes an object from a JSON string.
    -- </summary>
    -- <param name="nominalType">The nominal type of the object.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize10 = function (json, nominalType, configurator)
      local default, extern = System.using(MongoDBBsonIO.JsonReader(json), function (bsonReader)
        return true, Deserialize7(bsonReader, nominalType, configurator)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Deserializes an object from a JSON TextReader.
    -- </summary>
    -- <param name="nominalType">The nominal type of the object.</param>
    -- <param name="configurator">The configurator.</param>
    -- <returns>A deserialized value.</returns>
    Deserialize11 = function (textReader, nominalType, configurator)
      local default, extern = System.using(System.new(MongoDBBsonIO.JsonReader, 3, textReader), function (bsonReader)
        return true, Deserialize7(bsonReader, nominalType, configurator)
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Returns whether the given type has any discriminators registered for any of its subclasses.
    -- </summary>
    -- <returns>True if the type is discriminated.</returns>
    IsTypeDiscriminated = function (type)
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      return typeInfo:getIsInterface() or __discriminatedTypes:Contains(type)
    end
    -- <summary>
    -- Looks up the actual type of an object to be deserialized.
    -- </summary>
    -- <param name="discriminator">The discriminator.</param>
    -- <returns>The actual type of the object.</returns>
    LookupActualType = function (nominalType, discriminator)
      if MongoDBBson.BsonValue.op_Equality(discriminator, nil) then
        return nominalType
      end

      -- note: EnsureKnownTypesAreRegistered handles its own locking so call from outside any lock
      EnsureKnownTypesAreRegistered(nominalType)

      __configLock:EnterReadLock()
      local default, extern = System.try(function ()
        local actualType = nil

        local hashSet
        local default
        default, hashSet = __discriminators:TryGetValue(discriminator)
        if default then
          for _, type in System.each(hashSet) do
            if SystemReflection.IntrospectionExtensions.GetTypeInfo(nominalType):IsAssignableFrom(type) then
              if actualType == nil then
                actualType = type
              else
                local message = System.String.Format("Ambiguous discriminator '{0}'.", discriminator)
                System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
              end
            end
          end
        end

        if actualType == nil and discriminator:getIsString() then
          actualType = MongoDBBsonSerialization.TypeNameDiscriminator.GetActualType(discriminator:getAsString())
          -- see if it's a Type name
        end

        if actualType == nil then
          local message = System.String.Format("Unknown discriminator value '{0}'.", discriminator)
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end

        if not SystemReflection.IntrospectionExtensions.GetTypeInfo(nominalType):IsAssignableFrom(actualType) then
          local message = System.String.Format("Actual type {0} is not assignable to expected type {1}.", actualType:getFullName(), nominalType:getFullName())
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end

        return true, actualType
      end, nil, function ()
        __configLock:ExitReadLock()
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Looks up the discriminator convention for a type.
    -- </summary>
    -- <returns>A discriminator convention.</returns>
    LookupDiscriminatorConvention = function (type)
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)

      __configLock:EnterReadLock()
      local default, extern = System.try(function ()
        local convention
        local default
        default, convention = __discriminatorConventions:TryGetValue(type)
        if default then
          return true, convention
        end
      end, nil, function ()
        __configLock:ExitReadLock()
      end)
      if default then
        return extern
      end

      __configLock:EnterWriteLock()
      local ref, out = System.try(function ()
        local convention
        local default
        default, convention = __discriminatorConventions:TryGetValue(type)
        if not default then
          if type == System.typeof(System.Object) then
            -- if there is no convention registered for object register the default one
            convention = MongoDBConventions.ObjectDiscriminatorConvention("_t")
            RegisterDiscriminatorConvention(System.typeof(System.Object), convention)
          elseif typeInfo:getIsInterface() then
            -- TODO: should convention for interfaces be inherited from parent interfaces?
            convention = LookupDiscriminatorConvention(System.typeof(System.Object))
            RegisterDiscriminatorConvention(type, convention)
          else
            -- inherit the discriminator convention from the closest parent (that isn't object) that has one
            -- otherwise default to the standard hierarchical convention
            local parentType = SystemReflection.IntrospectionExtensions.GetTypeInfo(type):getBaseType()
            while convention == nil do
              if parentType == System.typeof(System.Object) then
                convention = MongoDBConventions.StandardDiscriminatorConvention.getHierarchical()
                break
              end
              local extern
              extern, convention = __discriminatorConventions:TryGetValue(parentType)
              if extern then
                break
              end
              parentType = SystemReflection.IntrospectionExtensions.GetTypeInfo(parentType):getBaseType()
            end

            -- register this convention for all types between this and the parent type where we found the convention
            local unregisteredType = type
            while unregisteredType ~= parentType do
              RegisterDiscriminatorConvention(unregisteredType, convention)
              unregisteredType = SystemReflection.IntrospectionExtensions.GetTypeInfo(unregisteredType):getBaseType()
            end
          end
        end

        return true, convention
      end, nil, function ()
        __configLock:ExitWriteLock()
      end)
      if ref then
        return out
      end
    end
    -- <summary>
    -- Looks up an IdGenerator.
    -- </summary>
    -- <returns>An IdGenerator for the Id type.</returns>
    LookupIdGenerator = function (type)
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      __configLock:EnterReadLock()
      local default, extern = System.try(function ()
        local idGenerator
        local default
        default, idGenerator = __idGenerators:TryGetValue(type)
        if default then
          return true, idGenerator
        end
      end, nil, function ()
        __configLock:ExitReadLock()
      end)
      if default then
        return extern
      end

      __configLock:EnterWriteLock()
      local ref, out = System.try(function ()
        local idGenerator
        local default
        default, idGenerator = __idGenerators:TryGetValue(type)
        if not default then
          if typeInfo:getIsValueType() and __useZeroIdChecker then
            local iEquatableDefinition = System.typeof(System.IEquatable_1)
            local iEquatableType = iEquatableDefinition:MakeGenericType(type)
            if SystemReflection.IntrospectionExtensions.GetTypeInfo(iEquatableType):IsAssignableFrom(type) then
              local zeroIdCheckerDefinition = System.typeof(MongoDBIdGenerators.ZeroIdChecker_1)
              local zeroIdCheckerType = zeroIdCheckerDefinition:MakeGenericType(type)
              idGenerator = System.cast(MongoDBBsonSerialization.IIdGenerator, System.Activator.CreateInstance(zeroIdCheckerType))
            end
          elseif __useNullIdChecker then
            idGenerator = MongoDBIdGenerators.NullIdChecker.getInstance()
          else
            idGenerator = nil
          end

          __idGenerators:set(type, idGenerator)
          -- remember it even if it's null
        end

        return true, idGenerator
      end, nil, function ()
        __configLock:ExitWriteLock()
      end)
      if ref then
        return out
      end
    end
    -- <summary>
    -- Looks up a serializer for a Type.
    -- </summary>
    -- <returns>A serializer for type T.</returns>
    LookupSerializer = function (T)
      return System.cast(MongoDBBsonSerialization.IBsonSerializer_1(T), LookupSerializer1(System.typeof(T)))
    end
    -- <summary>
    -- Looks up a serializer for a Type.
    -- </summary>
    -- <returns>A serializer for the Type.</returns>
    LookupSerializer1 = function (type)
      return __serializerRegistry:GetSerializer(type)
    end
    -- <summary>
    -- Registers the discriminator for a type.
    -- </summary>
    -- <param name="discriminator">The discriminator.</param>
    RegisterDiscriminator = function (type, discriminator)
      local typeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(type)
      if typeInfo:getIsInterface() then
        local message = System.String.Format("Discriminators can only be registered for classes, not for interface {0}.", type:getFullName())
        System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
      end

      __configLock:EnterWriteLock()
      System.try(function ()
        local hashSet
        local default
        default, hashSet = __discriminators:TryGetValue(discriminator)
        if not default then
          hashSet = HashSetType()
          __discriminators:AddKeyValue(discriminator, hashSet)
        end

        if not hashSet:Contains(type) then
          hashSet:Add(type)

          -- mark all base types as discriminated (so we know that it's worth reading a discriminator)
          do
            local baseType = SystemReflection.IntrospectionExtensions.GetTypeInfo(type):getBaseType()
            while baseType ~= nil do
              __discriminatedTypes:Add(baseType)
              baseType = SystemReflection.IntrospectionExtensions.GetTypeInfo(baseType):getBaseType()
            end
          end
        end
      end, nil, function ()
        __configLock:ExitWriteLock()
      end)
    end
    -- <summary>
    -- Registers the discriminator convention for a type.
    -- </summary>
    -- <param name="convention">The discriminator convention.</param>
    RegisterDiscriminatorConvention = function (type, convention)
      __configLock:EnterWriteLock()
      System.try(function ()
        if not __discriminatorConventions:ContainsKey(type) then
          __discriminatorConventions:AddKeyValue(type, convention)
        else
          local message = System.String.Format("There is already a discriminator convention registered for type {0}.", type:getFullName())
          System.throw(System.new(MongoDBBson.BsonSerializationException, 2, message))
        end
      end, nil, function ()
        __configLock:ExitWriteLock()
      end)
    end
    -- <summary>
    -- Registers a generic serializer definition for a generic type.
    -- </summary>
    -- <param name="genericSerializerDefinition">The generic serializer definition.</param>
    RegisterGenericSerializerDefinition = function (genericTypeDefinition, genericSerializerDefinition)
      __typeMappingSerializationProvider:RegisterMapping(genericTypeDefinition, genericSerializerDefinition)
    end
    -- <summary>
    -- Registers an IdGenerator for an Id Type.
    -- </summary>
    -- <param name="idGenerator">The IdGenerator for the Id Type.</param>
    RegisterIdGenerator = function (type, idGenerator)
      __configLock:EnterWriteLock()
      System.try(function ()
        __idGenerators:set(type, idGenerator)
      end, nil, function ()
        __configLock:ExitWriteLock()
      end)
    end
    -- <summary>
    -- Registers a serialization provider.
    -- </summary>
    RegisterSerializationProvider = function (provider)
      __serializerRegistry:RegisterSerializationProvider(provider)
    end
    -- <summary>
    -- Registers a serializer for a type.
    -- </summary>
    -- <param name="serializer">The serializer.</param>
    RegisterSerializer = function (serializer, T)
      RegisterSerializer1(System.typeof(T), serializer)
    end
    -- <summary>
    -- Registers a serializer for a type.
    -- </summary>
    -- <param name="serializer">The serializer.</param>
    RegisterSerializer1 = function (type, serializer)
      __serializerRegistry:RegisterSerializer(type, serializer)
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="bsonWriter">The BsonWriter.</param>
    -- <param name="value">The object.</param>
    -- <param name="configurator">The serialization context configurator.</param>
    -- <param name="args">The serialization args.</param>
    Serialize = function (bsonWriter, value, configurator, args, TNominalType)
      local serializer = LookupSerializer(TNominalType)
      local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(bsonWriter, configurator)
      serializer:Serialize(context, args:__clone__(), value)
    end
    -- <summary>
    -- Serializes a value.
    -- </summary>
    -- <param name="nominalType">The nominal type of the object.</param>
    -- <param name="value">The object.</param>
    -- <param name="configurator">The serialization context configurator.</param>
    -- <param name="args">The serialization args.</param>
    Serialize1 = function (bsonWriter, nominalType, value, configurator, args)
      local serializer = LookupSerializer1(nominalType)
      local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(bsonWriter, configurator)
      serializer:Serialize1(context, args:__clone__(), value)
    end
    EnsureKnownTypesAreRegistered = function (nominalType)
      __configLock:EnterReadLock()
      local default = System.try(function ()
        if __typesWithRegisteredKnownTypes:Contains(nominalType) then
          return true
        end
      end, nil, function ()
        __configLock:ExitReadLock()
      end)
      if default then
        return
      end

      __configLock:EnterWriteLock()
      System.try(function ()
        if not __typesWithRegisteredKnownTypes:Contains(nominalType) then
          -- only call LookupClassMap for classes with a BsonKnownTypesAttribute

          local knownTypesAttribute = SystemReflection.IntrospectionExtensions.GetTypeInfo(nominalType):GetCustomAttributes(System.typeof(MongoDBAttributes.BsonKnownTypesAttribute), false)
          if knownTypesAttribute ~= nil and #knownTypesAttribute > 0 then
            -- try and force a scan of the known types
            LookupSerializer1(nominalType)
          end

          __typesWithRegisteredKnownTypes:Add(nominalType)
        end
      end, nil, function ()
        __configLock:ExitWriteLock()
      end)
    end
    CreateSerializerRegistry = function ()
      __serializerRegistry = MongoDBBsonSerialization.BsonSerializerRegistry()
      __typeMappingSerializationProvider = MongoDBBsonSerialization.TypeMappingSerializationProvider()

      -- order matters. It's in reverse order of how they'll get consumed
      __serializerRegistry:RegisterSerializationProvider(MongoDBBsonSerialization.BsonClassMapSerializationProvider())
      __serializerRegistry:RegisterSerializationProvider(MongoDBBsonSerialization.DiscriminatedInterfaceSerializationProvider())
      __serializerRegistry:RegisterSerializationProvider(MongoDBBsonSerialization.CollectionsSerializationProvider())
      __serializerRegistry:RegisterSerializationProvider(MongoDBBsonSerialization.PrimitiveSerializationProvider())
      __serializerRegistry:RegisterSerializationProvider(MongoDBBsonSerialization.AttributedSerializationProvider())
      __serializerRegistry:RegisterSerializationProvider(__typeMappingSerializationProvider)
      __serializerRegistry:RegisterSerializationProvider(MongoDBBsonSerialization.BsonObjectModelSerializationProvider())
    end
    RegisterIdGenerators = function ()
      RegisterIdGenerator(System.typeof(MongoDBBson.BsonObjectId), MongoDBIdGenerators.BsonObjectIdGenerator.getInstance())
      RegisterIdGenerator(System.typeof(System.Guid), MongoDBIdGenerators.GuidGenerator.getInstance())
      RegisterIdGenerator(System.typeof(MongoDBBson.ObjectId), MongoDBIdGenerators.ObjectIdGenerator.getInstance())
    end
    return {
      getSerializerRegistry = getSerializerRegistry,
      getUseNullIdChecker = getUseNullIdChecker,
      setUseNullIdChecker = setUseNullIdChecker,
      getUseZeroIdChecker = getUseZeroIdChecker,
      setUseZeroIdChecker = setUseZeroIdChecker,
      getConfigLock = getConfigLock,
      Deserialize = Deserialize,
      Deserialize1 = Deserialize1,
      Deserialize2 = Deserialize2,
      Deserialize3 = Deserialize3,
      Deserialize4 = Deserialize4,
      Deserialize5 = Deserialize5,
      Deserialize6 = Deserialize6,
      Deserialize7 = Deserialize7,
      Deserialize8 = Deserialize8,
      Deserialize9 = Deserialize9,
      Deserialize10 = Deserialize10,
      Deserialize11 = Deserialize11,
      IsTypeDiscriminated = IsTypeDiscriminated,
      LookupActualType = LookupActualType,
      LookupDiscriminatorConvention = LookupDiscriminatorConvention,
      LookupIdGenerator = LookupIdGenerator,
      LookupSerializer = LookupSerializer,
      LookupSerializer1 = LookupSerializer1,
      RegisterDiscriminator = RegisterDiscriminator,
      RegisterDiscriminatorConvention = RegisterDiscriminatorConvention,
      RegisterGenericSerializerDefinition = RegisterGenericSerializerDefinition,
      RegisterIdGenerator = RegisterIdGenerator,
      RegisterSerializationProvider = RegisterSerializationProvider,
      RegisterSerializer = RegisterSerializer,
      RegisterSerializer1 = RegisterSerializer1,
      Serialize = Serialize,
      Serialize1 = Serialize1,
      EnsureKnownTypesAreRegistered = EnsureKnownTypesAreRegistered,
      static = static
    }
  end)
end)
