-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson.Serialization", function (namespace)
  -- <summary>
  -- A class backed by a BsonDocument.
  -- </summary>
  namespace.class("BsonDocumentBackedClass", function (namespace)
    local getBackingDocument, GetValue, GetValue1, SetValue, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the <see cref="BsonDocumentBackedClass"/> class.
    -- </summary>
    __ctor1__ = function (this, serializer)
      __ctor2__(this, MongoDBBson.BsonDocument(), serializer)
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="BsonDocumentBackedClass"/> class.
    -- </summary>
    -- <param name="serializer">The serializer.</param>
    __ctor2__ = function (this, backingDocument, serializer)
      if MongoDBBson.BsonDocument.op_Equality1(backingDocument, nil) then
        System.throw(System.ArgumentNullException("backingDocument"))
      end
      if serializer == nil then
        System.throw(System.ArgumentNullException("serializer"))
      end

      this._backingDocument = backingDocument
      this._serializer = serializer
    end
    getBackingDocument = function (this)
      return this._backingDocument
    end
    -- <summary>
    -- Gets the value from the backing document.
    -- </summary>
    -- <param name="memberName">The member name.</param>
    -- <returns>The value.</returns>
    GetValue = function (this, memberName, T)
      local info
      local default
      default, info = this._serializer:TryGetMemberSerializationInfo(memberName)
      if not default then
        local message = System.String.Format("The member {0} does not exist.", memberName)
        System.throw(System.ArgumentException(message, "memberName"))
      end

      local bsonValue
      local extern
      extern, bsonValue = this._backingDocument:TryGetValue(info:getElementName())
      if not extern then
        local message = System.String.Format("The backing document does not contain an element named '{0}'.", info:getElementName())
        System.throw(System.KeyNotFoundException(message))
      end

      return System.cast(T, info:DeserializeValue(bsonValue))
    end
    -- <summary>
    -- Gets the value from the backing document.
    -- </summary>
    -- <param name="memberName">The member name.</param>
    -- <param name="defaultValue">The default value.</param>
    -- <returns>The value.</returns>
    GetValue1 = function (this, memberName, defaultValue, T)
      local info
      local default
      default, info = this._serializer:TryGetMemberSerializationInfo(memberName)
      if not default then
        local message = System.String.Format("The member {0} does not exist.", memberName)
        System.throw(System.ArgumentException(message, "memberName"))
      end

      local bsonValue
      local extern
      extern, bsonValue = this._backingDocument:TryGetValue(info:getElementName())
      if not extern then
        return defaultValue
      end

      return System.cast(T, info:DeserializeValue(bsonValue))
    end
    -- <summary>
    -- Sets the value in the backing document.
    -- </summary>
    -- <param name="value">The value.</param>
    SetValue = function (this, memberName, value)
      local info
      local default
      default, info = this._serializer:TryGetMemberSerializationInfo(memberName)
      if not default then
        local message = System.String.Format("The member {0} does not exist.", memberName)
        System.throw(System.ArgumentException(message, "memberName"))
      end

      local bsonValue = info:SerializeValue(value)
      this._backingDocument:Set1(info:getElementName(), bsonValue)
    end
    return {
      getBackingDocument = getBackingDocument,
      GetValue = GetValue,
      GetValue1 = GetValue1,
      SetValue = SetValue,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
