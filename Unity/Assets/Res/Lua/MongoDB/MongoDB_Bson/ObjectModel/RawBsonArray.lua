-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local SystemIO = System.IO
local ListIDisposable = System.List(System.IDisposable)
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents an immutable BSON array that is represented using only the raw bytes.
  -- </summary>
  namespace.class("RawBsonArray", function (namespace)
    local getCapacity, setCapacity, getCount, getIsReadOnly, getRawValues, getSlice, getValues, get, 
    set, Add1, AddRange, AddRange1, AddRange2, AddRange3, AddRange4, AddRange5, 
    AddRange6, AddRange7, AddRange8, Clone, Clear, Contains, CopyTo, CopyTo1, 
    DeepClone, Dispose, GetEnumerator, IndexOf, IndexOf1, IndexOf2, Insert, Materialize, 
    Remove, RemoveAt, ToArray, ToList, ToString, Dispose1, ThrowIfDisposed, CloneSlice, 
    DeserializeRawBsonArray, DeserializeRawBsonDocument, DeserializeBsonValue, class, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="RawBsonArray"/> class.
    -- </summary>
    -- <exception cref="System.ArgumentNullException">slice</exception>
    -- <exception cref="System.ArgumentException">RawBsonArray cannot be used with an IByteBuffer that needs disposing.</exception>
    __ctor__ = function (this, slice)
      this._disposableItems = ListIDisposable()
      this._readerSettings = MongoDBBsonIO.BsonBinaryReaderSettings.getDefaults()
      MongoDBBson.BsonArray.__ctor__[1](this)
      if slice == nil then
        System.throw(System.ArgumentNullException("slice"))
      end

      this._slice = slice
    end
    getCapacity = function (this)
      ThrowIfDisposed(this)
      return this._slice:getCapacity()
    end
    setCapacity = function (this, value)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    getCount = function (this)
      ThrowIfDisposed(this)
      local default, extern = System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
        local default, extern = System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
          local count = 0

          bsonReader:ReadStartDocument()
          while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
            bsonReader:SkipName()
            bsonReader:SkipValue()
            count = count + 1
          end
          bsonReader:ReadEndDocument()

          return true, count
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    getIsReadOnly = function (this)
      return true
    end
    getRawValues = function (this)
      return System.yieldIEnumerable(function (this)
        ThrowIfDisposed(this)
        System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
          System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
            local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

            bsonReader:ReadStartDocument()
            while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
              bsonReader:SkipName()
              System.yield(DeserializeBsonValue(this, context):getRawValue())
            end
            bsonReader:ReadEndDocument()
          end)
        end)
      end, System.Object, this)
    end
    getSlice = function (this)
      return this._slice
    end
    getValues = function (this)
      return System.yieldIEnumerable(function (this)
        ThrowIfDisposed(this)
        System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
          System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
            local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

            bsonReader:ReadStartDocument()
            while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
              bsonReader:SkipName()
              System.yield(DeserializeBsonValue(this, context))
            end
            bsonReader:ReadEndDocument()
          end)
        end)
      end, MongoDBBson.BsonValue, this)
    end
    get = function (this, index)
      if index < 0 then
        System.throw(System.ArgumentOutOfRangeException("index"))
      end
      ThrowIfDisposed(this)

      local default, extern = System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
        local default, extern = System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
          bsonReader:ReadStartDocument()
          local i = 0
          while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
            bsonReader:SkipName()
            if i == index then
              local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)
              return true, DeserializeBsonValue(this, context)
            end

            bsonReader:SkipValue()
            i = i + 1
          end
          bsonReader:ReadEndDocument()

          System.throw(System.ArgumentOutOfRangeException("index"))
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    set = function (this, index, value)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds an element to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    Add1 = function (this, value)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange1 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange2 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange3 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange4 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange5 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange6 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange7 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange8 = function (this, values)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Creates a shallow clone of the array (see also DeepClone).
    -- </summary>
    Clone = function (this)
      return class(CloneSlice(this))
    end
    -- <summary>
    -- Clears the array.
    -- </summary>
    Clear = function (this)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Tests whether the array contains a value.
    -- </summary>
    -- <returns>True if the array contains the value.</returns>
    Contains = function (this, value)
      ThrowIfDisposed(this)
      local default, extern = System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
        local default, extern = System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

          bsonReader:ReadStartDocument()
          while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
            bsonReader:SkipName()
            if DeserializeBsonValue(this, context):Equals1(value) then
              return true, true
            end
          end
          bsonReader:ReadEndDocument()

          return true, false
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Copies elements from this array to another array.
    -- </summary>
    -- <param name="arrayIndex">The zero based index of the other array at which to start copying.</param>
    CopyTo = function (this, array, arrayIndex)
      ThrowIfDisposed(this)
      System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
        System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

          bsonReader:ReadStartDocument()
          while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
            bsonReader:SkipName()
            local default = arrayIndex
            arrayIndex = default + 1
            array:set(default, DeserializeBsonValue(this, context))
          end
          bsonReader:ReadEndDocument()
        end)
      end)
    end
    -- <summary>
    -- Copies elements from this array to another array as raw values (see BsonValue.RawValue).
    -- </summary>
    -- <param name="arrayIndex">The zero based index of the other array at which to start copying.</param>
    CopyTo1 = function (this, array, arrayIndex)
      ThrowIfDisposed(this)
      System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
        System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

          bsonReader:ReadStartDocument()
          while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
            bsonReader:SkipName()
            local default = arrayIndex
            arrayIndex = default + 1
            array:set(default, DeserializeBsonValue(this, context):getRawValue())
          end
          bsonReader:ReadEndDocument()
        end)
      end)
    end
    -- <summary>
    -- Creates a deep clone of the array (see also Clone).
    -- </summary>
    DeepClone = function (this)
      ThrowIfDisposed(this)
      return class(CloneSlice(this))
    end
    -- <summary>
    -- Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    -- </summary>
    Dispose = function (this)
      this:Dispose1(true)
      System.GC.SuppressFinalize(this)
    end
    -- <summary>
    -- Gets an enumerator that can enumerate the elements of the array.
    -- </summary>
    GetEnumerator = function (this)
      return System.yieldIEnumerator(function (this)
        ThrowIfDisposed(this)
        System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
          System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
            local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

            bsonReader:ReadStartDocument()
            while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
              bsonReader:SkipName()
              System.yield(DeserializeBsonValue(this, context))
            end
            bsonReader:ReadEndDocument()
          end)
        end)
      end, MongoDBBson.BsonValue, this)
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf = function (this, value)
      return this:IndexOf2(value, 0, 2147483647 --[[Int32.MaxValue]])
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <param name="index">The zero based index at which to start the search.</param>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf1 = function (this, value, index)
      return this:IndexOf2(value, index, 2147483647 --[[Int32.MaxValue]])
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <param name="index">The zero based index at which to start the search.</param>
    -- <param name="count">The number of elements to search.</param>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf2 = function (this, value, index, count)
      ThrowIfDisposed(this)
      local default, extern = System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
        local default, extern = System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

          bsonReader:ReadStartDocument()
          local i = 0
          while bsonReader:ReadBsonType() ~= 0 --[[BsonType.EndOfDocument]] do
            bsonReader:SkipName()
            if i >= index then
              if count == 0 then
                return true, - 1
              end

              if DeserializeBsonValue(this, context):Equals1(value) then
                return true, i
              end

              count = count - 1
            else
              bsonReader:SkipValue()
            end

            i = i + 1
          end
          bsonReader:ReadEndDocument()

          return true, - 1
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Inserts a new value into the array.
    -- </summary>
    -- <param name="value">The new value.</param>
    Insert = function (this, index, value)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Materializes the RawBsonArray into a regular BsonArray.
    -- </summary>
    -- <returns>A BsonArray.</returns>
    Materialize = function (this, binaryReaderSettings)
      ThrowIfDisposed(this)

      -- because BsonBinaryReader can only read documents at the top level we have to wrap the RawBsonArray in a document
      local document = System.new(MongoDBBson.BsonDocument, 12, "array", this)
      local bytes = MongoDBBson.BsonExtensionMethods.ToBson(document, nil, nil, nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs), MongoDBBson.BsonDocument)

      local default, extern = System.using(SystemIO.MemoryStream(bytes), function (stream)
        local default, extern = System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, binaryReaderSettings), function (reader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(reader)
          local materializedDocument = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonDocumentSerializer.getInstance(), context, MongoDBBson.BsonDocument)
          return true, materializedDocument:get1("array"):getAsBsonArray()
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Removes the first occurrence of a value from the array.
    -- </summary>
    -- <returns>True if the value was removed.</returns>
    Remove = function (this, value)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Removes an element from the array.
    -- </summary>
    RemoveAt = function (this, index)
      System.throw(System.NotSupportedException("RawBsonArray instances are immutable."))
    end
    -- <summary>
    -- Converts the BsonArray to an array of BsonValues.
    -- </summary>
    ToArray = function (this)
      ThrowIfDisposed(this)
      return Linq.ToArray(this:getValues())
    end
    -- <summary>
    -- Converts the BsonArray to a list of BsonValues.
    -- </summary>
    ToList = function (this)
      ThrowIfDisposed(this)
      return Linq.ToList(this:getValues())
    end
    -- <summary>
    -- Returns a string representation of the array.
    -- </summary>
    ToString = function (this)
      ThrowIfDisposed(this)
      local parts = Linq.ToArray(Linq.Select(this:getValues(), function (v)
        return v:ToString()
      end, System.String))
      return System.String.Format("[{0}]", System.String.JoinParams(", ", parts))
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      if not this._disposed then
        if disposing then
          if this._slice ~= nil then
            this._slice:Dispose()
            this._slice = nil
          end
          if this._disposableItems ~= nil then
            this._disposableItems:ForEach(function (x)
              x:Dispose()
            end)
            this._disposableItems = nil
          end
        end
        this._disposed = true
      end
    end
    -- <summary>
    -- Throws if disposed.
    -- </summary>
    ThrowIfDisposed = function (this)
      if this._disposed then
        System.throw(System.ObjectDisposedException(this:GetType():getName()))
      end
    end
    CloneSlice = function (this)
      return this._slice:GetSlice(0, this._slice:getLength())
    end
    DeserializeRawBsonArray = function (this, bsonReader)
      local slice = bsonReader:ReadRawBsonArray()
      local nestedArray = class(slice)
      this._disposableItems:Add(nestedArray)
      return nestedArray
    end
    DeserializeRawBsonDocument = function (this, bsonReader)
      local slice = bsonReader:ReadRawBsonDocument()
      local nestedDocument = MongoDBBson.RawBsonDocument(slice)
      this._disposableItems:Add(nestedDocument)
      return nestedDocument
    end
    DeserializeBsonValue = function (this, context)
      local bsonReader = context:getReader()
      repeat
        local default = bsonReader:GetCurrentBsonType()
        if default == 4 --[[BsonType.Array]] then
          return DeserializeRawBsonArray(this, bsonReader)
        elseif default == 3 --[[BsonType.Document]] then
          return DeserializeRawBsonDocument(this, bsonReader)
        else
          return MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, MongoDBBson.BsonValue)
        end
      until 1
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonArray,
          System.IDisposable
        }
      end,
      _disposed = false,
      getCapacity = getCapacity,
      setCapacity = setCapacity,
      getCount = getCount,
      getIsReadOnly = getIsReadOnly,
      getRawValues = getRawValues,
      getSlice = getSlice,
      getValues = getValues,
      get = get,
      set = set,
      Add1 = Add1,
      AddRange = AddRange,
      AddRange1 = AddRange1,
      AddRange2 = AddRange2,
      AddRange3 = AddRange3,
      AddRange4 = AddRange4,
      AddRange5 = AddRange5,
      AddRange6 = AddRange6,
      AddRange7 = AddRange7,
      AddRange8 = AddRange8,
      Clone = Clone,
      Clear = Clear,
      Contains = Contains,
      CopyTo = CopyTo,
      CopyTo1 = CopyTo1,
      DeepClone = DeepClone,
      Dispose = Dispose,
      GetEnumerator = GetEnumerator,
      IndexOf = IndexOf,
      IndexOf1 = IndexOf1,
      IndexOf2 = IndexOf2,
      Insert = Insert,
      Materialize = Materialize,
      Remove = Remove,
      RemoveAt = RemoveAt,
      ToArray = ToArray,
      ToList = ToList,
      ToString = ToString,
      Dispose1 = Dispose1,
      ThrowIfDisposed = ThrowIfDisposed,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "RawValues", 0x206, System.IEnumerable_1(System.Object), getRawValues, System.ObsoleteAttribute("Use ToArray to ToList instead.") }
          },
          methods = {
            { "CopyTo", 0x206, CopyTo1, System.Array(System.Object), System.Int32, System.ObsoleteAttribute("Use ToArray or ToList instead.") }
          },
          class = { 0x6, System.new(out.MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute, 2, System.typeof(MongoDBSerializers.RawBsonArraySerializer)) }
        }
      end
    }
    return class
  end)
end)
