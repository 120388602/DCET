-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON DateTime value.
  -- </summary>
  namespace.class("BsonDateTime", function (namespace)
    local getBsonType, getIsValidDateTime, getMillisecondsSinceEpoch, getRawValue, getValue, op_Implicit22, op_Inequality1, op_Equality1, 
    Create1, CompareTo, CompareTo1, Equals, EqualsObj, GetHashCode, ToLocalTime, ToNullableLocalTime, 
    ToNullableUniversalTime, ToUniversalTime, ToString, IConvertibleGetTypeCodeImplementation, IConvertibleToDateTimeImplementation, class, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the BsonDateTime class.
    -- </summary>
    __ctor1__ = function (this, value)
      MongoDBBson.BsonValue.__ctor__(this)
      this._millisecondsSinceEpoch = MongoDBBson.BsonUtils.ToMillisecondsSinceEpoch(value)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDateTime class.
    -- </summary>
    __ctor2__ = function (this, millisecondsSinceEpoch)
      MongoDBBson.BsonValue.__ctor__(this)
      this._millisecondsSinceEpoch = millisecondsSinceEpoch
    end
    getBsonType = function (this)
      return 9 --[[BsonType.DateTime]]
    end
    getIsValidDateTime = function (this)
      return this._millisecondsSinceEpoch >= MongoDBBson.BsonConstants.getDateTimeMinValueMillisecondsSinceEpoch() and this._millisecondsSinceEpoch <= MongoDBBson.BsonConstants.getDateTimeMaxValueMillisecondsSinceEpoch()
    end
    getMillisecondsSinceEpoch = function (this)
      return this._millisecondsSinceEpoch
    end
    getRawValue = function (this)
      return this._millisecondsSinceEpoch
    end
    getValue = function (this)
      return MongoDBBson.BsonUtils.ToDateTimeFromMillisecondsSinceEpoch(this._millisecondsSinceEpoch)
    end
    -- <summary>
    -- Converts a DateTime to a BsonDateTime.
    -- </summary>
    -- <returns>A BsonDateTime.</returns>
    op_Implicit22 = function (value)
      return class(value)
    end
    -- <summary>
    -- Compares two BsonDateTime values.
    -- </summary>
    -- <param name="rhs">The other BsonDateTime.</param>
    -- <returns>True if the two BsonDateTime values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonDateTime values.
    -- </summary>
    -- <param name="rhs">The other BsonDateTime.</param>
    -- <returns>True if the two BsonDateTime values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      return Equals(lhs, rhs)
    end
    -- <summary>
    -- Creates a new BsonDateTime.
    -- </summary>
    -- <returns>A BsonDateTime or null.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 9 --[[BsonType.DateTime]]))
    end
    -- <summary>
    -- Compares this BsonDateTime to another BsonDateTime.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonDateTime is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      if op_Equality1(other, nil) then
        return 1
      end
      return this._millisecondsSinceEpoch:CompareTo(other._millisecondsSinceEpoch)
    end
    -- <summary>
    -- Compares the BsonDateTime to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonDateTime is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherDateTime = System.as(other, class)
      if op_Inequality1(otherDateTime, nil) then
        return this._millisecondsSinceEpoch:CompareTo(otherDateTime._millisecondsSinceEpoch)
      end
      local otherTimestamp = System.as(other, MongoDBBson.BsonTimestamp)
      if MongoDBBson.BsonTimestamp.op_Inequality1(otherTimestamp, nil) then
        return this._millisecondsSinceEpoch:CompareTo(otherTimestamp:getTimestamp() * 1000)
        -- timestamp is in seconds
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Compares this BsonDateTime to another BsonDateTime.
    -- </summary>
    -- <returns>True if the two BsonDateTime values are equal.</returns>
    Equals = function (this, rhs)
      if System.Object.ReferenceEquals(rhs) or this:GetType() ~= rhs:GetType() then
        return false
      end
      return this._millisecondsSinceEpoch == rhs._millisecondsSinceEpoch
    end
    -- <summary>
    -- Compares this BsonDateTime to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonDateTime and equal to this one.</returns>
    EqualsObj = function (this, obj)
      return Equals(this, System.as(obj, class))
      -- works even if obj is null or of a different type
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      -- see Effective Java by Joshua Bloch
      local hash = 17
      hash = 37 * hash + this:getBsonType():GetHashCode()
      hash = 37 * hash + this._millisecondsSinceEpoch:GetHashCode()
      return hash
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime in local time.
    -- </summary>
    ToLocalTime = function (this)
      return MongoDBBson.BsonUtils.ToLocalTime(this:ToUniversalTime())
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime? in local time.
    -- </summary>
    ToNullableLocalTime = function (this)
      return this:ToLocalTime()
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime? in UTC.
    -- </summary>
    ToNullableUniversalTime = function (this)
      return this:ToUniversalTime()
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime in UTC.
    -- </summary>
    ToUniversalTime = function (this)
      return MongoDBBson.BsonUtils.ToDateTimeFromMillisecondsSinceEpoch(this._millisecondsSinceEpoch)
    end
    -- <summary>
    -- Returns a string representation of the value.
    -- </summary>
    ToString = function (this)
      if this:getIsValidDateTime() then
        return MongoDBBson.BsonUtils.ToDateTimeFromMillisecondsSinceEpoch(this._millisecondsSinceEpoch):ToString("yyyy-MM-ddTHH:mm:ss.FFFFFFFK")
      else
        return MongoDBBsonIO.JsonConvert.ToString8(this._millisecondsSinceEpoch)
      end
    end
    IConvertibleGetTypeCodeImplementation = function (this)
      return 16 --[[TypeCode.DateTime]]
    end
    IConvertibleToDateTimeImplementation = function (this, provider)
      return this:ToUniversalTime()
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonDateTime),
          System.IEquatable_1(out.MongoDB.Bson.BsonDateTime)
        }
      end,
      _millisecondsSinceEpoch = 0,
      getBsonType = getBsonType,
      getIsValidDateTime = getIsValidDateTime,
      getMillisecondsSinceEpoch = getMillisecondsSinceEpoch,
      getRawValue = getRawValue,
      getValue = getValue,
      op_Implicit22 = op_Implicit22,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      Create1 = Create1,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToLocalTime = ToLocalTime,
      ToNullableLocalTime = ToNullableLocalTime,
      ToNullableUniversalTime = ToNullableUniversalTime,
      ToUniversalTime = ToUniversalTime,
      ToString = ToString,
      IConvertibleGetTypeCodeImplementation = IConvertibleGetTypeCodeImplementation,
      IConvertibleToDateTimeImplementation = IConvertibleToDateTimeImplementation,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "_millisecondsSinceEpoch", 0x1, System.Int64 }
          },
          properties = {
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "IsValidDateTime", 0x206, System.Boolean, getIsValidDateTime },
            { "MillisecondsSinceEpoch", 0x206, System.Int64, getMillisecondsSinceEpoch },
            { "RawValue", 0x206, System.Object, getRawValue, System.ObsoleteAttribute("Use MillisecondsSinceEpoch instead.") },
            { "Value", 0x206, System.DateTime, getValue, System.ObsoleteAttribute("Use ToUniversalTime instead.") }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
