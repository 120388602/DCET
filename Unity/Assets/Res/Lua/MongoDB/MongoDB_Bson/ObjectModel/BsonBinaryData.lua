-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents BSON binary data.
  -- </summary>
  namespace.class("BsonBinaryData", function (namespace)
    local getBsonType, getBytes, getGuidRepresentation, getRawValue, getSubType, op_Implicit22, op_Implicit23, op_Inequality1, 
    op_Equality1, Create1, CompareTo, CompareTo1, Equals, EqualsObj, GetHashCode, ToGuid, 
    ToGuid1, ToString, class, __ctor1__, __ctor2__, __ctor3__, __ctor4__, __ctor5__
    -- <summary>
    -- Initializes a new instance of the BsonBinaryData class.
    -- </summary>
    __ctor1__ = function (this, bytes)
      __ctor2__(this, bytes, 0 --[[BsonBinarySubType.Binary]])
    end
    -- <summary>
    -- Initializes a new instance of the BsonBinaryData class.
    -- </summary>
    -- <param name="subType">The binary data subtype.</param>
    __ctor2__ = function (this, bytes, subType)
      __ctor3__(this, bytes, subType, (subType == 4 --[[BsonBinarySubType.UuidStandard]]) and 1 --[[GuidRepresentation.Standard]] or 0 --[[GuidRepresentation.Unspecified]])
    end
    -- <summary>
    -- Initializes a new instance of the BsonBinaryData class.
    -- </summary>
    -- <param name="subType">The binary data subtype.</param>
    -- <param name="guidRepresentation">The representation for Guids.</param>
    __ctor3__ = function (this, bytes, subType, guidRepresentation)
      MongoDBBson.BsonValue.__ctor__(this)
      if bytes == nil then
        System.throw(System.ArgumentNullException("bytes" --[[nameof(bytes)]]))
      end
      if subType == 4 --[[BsonBinarySubType.UuidStandard]] or subType == 3 --[[BsonBinarySubType.UuidLegacy]] then
        if #bytes ~= 16 then
          local message = System.String.Format("Length must be 16, not {0}, when subType is {1}.", #bytes, subType)
          System.throw(System.ArgumentException(message, "bytes" --[[nameof(bytes)]]))
        end
        local expectedSubType
        repeat
          local default = guidRepresentation
          if default == 2 --[[GuidRepresentation.CSharpLegacy]] or default == 3 --[[GuidRepresentation.JavaLegacy]] or default == 4 --[[GuidRepresentation.PythonLegacy]] or default == 0 --[[GuidRepresentation.Unspecified]] then
            expectedSubType = 3 --[[BsonBinarySubType.UuidLegacy]]
            break
          elseif default == 1 --[[GuidRepresentation.Standard]] then
            expectedSubType = 4 --[[BsonBinarySubType.UuidStandard]]
            break
          else
            System.throw(System.ArgumentException("Invalid guidRepresentation: " .. guidRepresentation:EnumToString(MongoDBBson.GuidRepresentation) .. ".", "guidRepresentation" --[[nameof(guidRepresentation)]]))
          end
        until 1

        if subType ~= expectedSubType then
          System.throw(System.ArgumentException("GuidRepresentation " .. guidRepresentation:EnumToString(MongoDBBson.GuidRepresentation) .. " is only valid with subType " .. expectedSubType:EnumToString(MongoDBBson.BsonBinarySubType) .. ", not with subType " .. subType:EnumToString(MongoDBBson.BsonBinarySubType) .. ".", "guidRepresentation" --[[nameof(guidRepresentation)]]))
        end
      else
        if guidRepresentation ~= 0 --[[GuidRepresentation.Unspecified]] then
          local message = System.String.Format("GuidRepresentation must be Unspecified, not {0}, when subType is not UuidStandard or UuidLegacy.", guidRepresentation)
          System.throw(System.ArgumentException(message, "guidRepresentation" --[[nameof(guidRepresentation)]]))
        end
      end
      this._bytes = bytes
      this._subType = subType
      this._guidRepresentation = guidRepresentation
    end
    -- <summary>
    -- Initializes a new instance of the BsonBinaryData class.
    -- </summary>
    __ctor4__ = function (this, guid)
      __ctor5__(this, guid, MongoDBBson.BsonDefaults.getGuidRepresentation())
    end
    -- <summary>
    -- Initializes a new instance of the BsonBinaryData class.
    -- </summary>
    -- <param name="guidRepresentation">The representation for Guids.</param>
    __ctor5__ = function (this, guid, guidRepresentation)
      __ctor3__(this, MongoDBBson.GuidConverter.ToBytes(guid, guidRepresentation), (guidRepresentation == 1 --[[GuidRepresentation.Standard]]) and 4 --[[BsonBinarySubType.UuidStandard]] or 3 --[[BsonBinarySubType.UuidLegacy]], guidRepresentation)
    end
    getBsonType = function (this)
      return 5 --[[BsonType.Binary]]
    end
    getBytes = function (this)
      return this._bytes
    end
    getGuidRepresentation = function (this)
      return this._guidRepresentation
    end
    getRawValue = function (this)
      if this._subType == 0 --[[BsonBinarySubType.Binary]] or this._subType == 2 --[[BsonBinarySubType.OldBinary]] then
        return this._bytes
      elseif this._subType == 4 --[[BsonBinarySubType.UuidStandard]] or this._subType == 3 --[[BsonBinarySubType.UuidLegacy]] then
        return ToGuid(this)
      else
        return nil
      end
    end
    getSubType = function (this)
      return this._subType
    end
    -- <summary>
    -- Converts a byte array to a BsonBinaryData.
    -- </summary>
    -- <returns>A BsonBinaryData.</returns>
    op_Implicit22 = function (bytes)
      return class(bytes)
    end
    -- <summary>
    -- Converts a Guid to a BsonBinaryData.
    -- </summary>
    -- <returns>A BsonBinaryData.</returns>
    op_Implicit23 = function (value)
      return System.new(class, 4, value)
    end
    -- <summary>
    -- Compares two BsonBinaryData values.
    -- </summary>
    -- <param name="rhs">The other BsonBinaryData.</param>
    -- <returns>True if the two BsonBinaryData values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonBinaryData values.
    -- </summary>
    -- <param name="rhs">The other BsonBinaryData.</param>
    -- <returns>True if the two BsonBinaryData values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      return Equals(lhs, rhs)
    end
    -- <summary>
    -- Creates a new BsonBinaryData.
    -- </summary>
    -- <returns>A BsonBinaryData or null.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 5 --[[BsonType.Binary]]))
    end
    -- <summary>
    -- Compares this BsonBinaryData to another BsonBinaryData.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonBinaryData is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      if op_Equality1(other, nil) then
        return 1
      end
      local r = this._subType:CompareToObj(other._subType)
      if r ~= 0 then
        return r
      end
      do
        local i = 0
        while i < #this._bytes and i < #other._bytes do
          r = this._bytes:get(i):CompareTo(other._bytes:get(i))
          if r ~= 0 then
            return r
          end
          i = i + 1
        end
      end
      return (#this._bytes):CompareTo(#other._bytes)
    end
    -- <summary>
    -- Compares the BsonBinaryData to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonBinaryData is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherBinaryData = System.as(other, class)
      if op_Inequality1(otherBinaryData, nil) then
        return CompareTo(this, otherBinaryData)
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Compares this BsonBinaryData to another BsonBinaryData.
    -- </summary>
    -- <returns>True if the two BsonBinaryData values are equal.</returns>
    Equals = function (this, rhs)
      if System.Object.ReferenceEquals(rhs) or this:GetType() ~= rhs:GetType() then
        return false
      end
      -- note: guidRepresentation is not considered when testing for Equality
      return System.Object.ReferenceEquals(this, rhs) or this._subType == rhs._subType and Linq.SequenceEqual(this._bytes, rhs._bytes)
    end
    -- <summary>
    -- Compares this BsonBinaryData to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonBinaryData and equal to this one.</returns>
    EqualsObj = function (this, obj)
      return Equals(this, System.as(obj, class))
      -- works even if obj is null or of a different type
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      -- see Effective Java by Joshua Bloch
      -- note: guidRepresentation is not considered when computing the hash code
      local hash = 17
      hash = 37 * hash + this:getBsonType():GetHashCode()
      for _, b in System.each(this._bytes) do
        hash = 37 * hash + b
      end
      hash = 37 * hash + this._subType:GetHashCode()
      return hash
    end
    -- <summary>
    -- Converts this BsonBinaryData to a Guid.
    -- </summary>
    ToGuid = function (this)
      return ToGuid1(this, this._guidRepresentation)
    end
    -- <summary>
    -- Converts this BsonBinaryData to a Guid.
    -- </summary>
    -- <returns>A Guid.</returns>
    ToGuid1 = function (this, guidRepresentation)
      if this._subType ~= 4 --[[BsonBinarySubType.UuidStandard]] and this._subType ~= 3 --[[BsonBinarySubType.UuidLegacy]] then
        local message = System.String.Format("SubType must be UuidStandard or UuidLegacy, not {0}.", this._subType)
        System.throw(System.InvalidOperationException(message))
      end
      if guidRepresentation == 0 --[[GuidRepresentation.Unspecified]] then
        System.throw(System.ArgumentException("GuidRepresentation cannot be Unspecified."))
      end
      return MongoDBBson.GuidConverter.FromBytes(this._bytes, guidRepresentation)
    end
    -- <summary>
    -- Returns a string representation of the binary data.
    -- </summary>
    ToString = function (this)
      return System.String.Format("{0}:0x{1}", this._subType, MongoDBBson.BsonUtils.ToHexString(this._bytes))
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonBinaryData),
          System.IEquatable_1(out.MongoDB.Bson.BsonBinaryData)
        }
      end,
      _subType = 0,
      _guidRepresentation = 0,
      getBsonType = getBsonType,
      getBytes = getBytes,
      getGuidRepresentation = getGuidRepresentation,
      getRawValue = getRawValue,
      getSubType = getSubType,
      op_Implicit22 = op_Implicit22,
      op_Implicit23 = op_Implicit23,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      Create1 = Create1,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToGuid = ToGuid,
      ToGuid1 = ToGuid1,
      ToString = ToString,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__,
        __ctor5__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "_bytes", 0x1, System.Array(System.Byte) },
            { "_guidRepresentation", 0x1, System.Int32 },
            { "_subType", 0x1, System.Int32 }
          },
          properties = {
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "Bytes", 0x206, System.Array(System.Byte), getBytes },
            { "GuidRepresentation", 0x206, System.Int32, getGuidRepresentation },
            { "RawValue", 0x206, System.Object, getRawValue, System.ObsoleteAttribute("Use Value instead.") },
            { "SubType", 0x206, System.Int32, getSubType }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
