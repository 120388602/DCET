-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local ListIDisposable = System.List(System.IDisposable)
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
local ListBsonElement
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  ListBsonElement = System.List(MongoDBBson.BsonElement)
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON document that is deserialized lazily.
  -- </summary>
  namespace.class("LazyBsonDocument", function (namespace)
    local getSlice, Clone, DeepClone, Dispose1, Materialize, MaterializeCompleted, CloneSlice, DeserializeLazyBsonArray, 
    DeserializeLazyBsonDocument, MaterializeThisLevel, class, internal, __ctor1__, __ctor2__
    internal = function (this)
      this._disposableItems = ListIDisposable()
      this._readerSettings = MongoDBBsonIO.BsonBinaryReaderSettings.getDefaults()
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="LazyBsonDocument"/> class.
    -- </summary>
    -- <exception cref="System.ArgumentNullException">slice</exception>
    -- <exception cref="System.ArgumentException">LazyBsonDocument cannot be used with an IByteBuffer that needs disposing.</exception>
    __ctor1__ = function (this, slice)
      internal(this)
      MongoDBBson.MaterializedOnDemandBsonDocument.__ctor__(this)
      if slice == nil then
        System.throw(System.ArgumentNullException("slice"))
      end

      this._slice = slice
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="LazyBsonDocument"/> class.
    -- </summary>
    __ctor2__ = function (this, bytes)
      __ctor1__(this, MongoDBBsonIO.ByteArrayBuffer(bytes, true))
    end
    getSlice = function (this)
      return this._slice
    end
    -- <summary>
    -- Creates a shallow clone of the document (see also DeepClone).
    -- </summary>
    -- A shallow clone of the document.
    -- </returns>
    Clone = function (this)
      if this._slice ~= nil then
        return class(CloneSlice(this))
      else
        return MongoDBBson.MaterializedOnDemandBsonDocument.Clone(this)
      end
    end
    -- <summary>
    -- Creates a deep clone of the document (see also Clone).
    -- </summary>
    -- A deep clone of the document.
    -- </returns>
    DeepClone = function (this)
      if this._slice ~= nil then
        return class(CloneSlice(this))
      else
        return MongoDBBson.MaterializedOnDemandBsonDocument.DeepClone(this)
      end
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      if not this:getIsDisposed() then
        if disposing then
          if this._slice ~= nil then
            this._slice:Dispose()
            this._slice = nil
          end
          if this._disposableItems ~= nil then
            this._disposableItems:ForEach(function (x)
              x:Dispose()
            end)
            this._disposableItems = nil
          end
        end
      end
      MongoDBBson.MaterializedOnDemandBsonDocument.Dispose1(this, disposing)
    end
    -- <summary>
    -- Materializes the BsonDocument.
    -- </summary>
    Materialize = function (this)
      return MaterializeThisLevel(this)
    end
    -- <summary>
    -- Informs subclasses that the Materialize process completed so they can free any resources related to the unmaterialized state.
    -- </summary>
    MaterializeCompleted = function (this)
      local slice = this._slice
      this._slice = nil
      slice:Dispose()
    end
    CloneSlice = function (this)
      return this._slice:GetSlice(0, this._slice:getLength())
    end
    DeserializeLazyBsonArray = function (this, bsonReader)
      local slice = bsonReader:ReadRawBsonArray()
      local nestedArray = MongoDBBson.LazyBsonArray(slice)
      this._disposableItems:Add(nestedArray)
      return nestedArray
    end
    DeserializeLazyBsonDocument = function (this, bsonReader)
      local slice = bsonReader:ReadRawBsonDocument()
      local nestedDocument = class(slice)
      this._disposableItems:Add(nestedDocument)
      return nestedDocument
    end
    MaterializeThisLevel = function (this)
      local elements = ListBsonElement()

      System.using(MongoDBBsonIO.ByteBufferStream(this._slice, false), function (stream)
        System.using(System.new(MongoDBBsonIO.BsonBinaryReader, 2, stream, this._readerSettings), function (bsonReader)
          local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(bsonReader)

          bsonReader:ReadStartDocument()
          local bsonType
          while true do
            bsonType = bsonReader:ReadBsonType()
            if not (bsonType ~= 0 --[[BsonType.EndOfDocument]]) then
              break
            end
            local name = bsonReader:ReadName1()
            local value
            repeat
              local default = bsonType
              if default == 4 --[[BsonType.Array]] then
                value = DeserializeLazyBsonArray(this, bsonReader)
                break
              elseif default == 3 --[[BsonType.Document]] then
                value = DeserializeLazyBsonDocument(this, bsonReader)
                break
              else
                value = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonValueSerializer.getInstance(), context, MongoDBBson.BsonValue)
                break
              end
            until 1
            elements:Add(System.new(MongoDBBson.BsonElement, 2, name, value))
          end
          bsonReader:ReadEndDocument()
        end)
      end)

      return elements
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.MaterializedOnDemandBsonDocument
        }
      end,
      getSlice = getSlice,
      Clone = Clone,
      DeepClone = DeepClone,
      Dispose1 = Dispose1,
      Materialize = Materialize,
      MaterializeCompleted = MaterializeCompleted,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          class = { 0x6, System.new(out.MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute, 2, System.typeof(MongoDBSerializers.LazyBsonDocumentSerializer)) }
        }
      end
    }
    return class
  end)
end)
