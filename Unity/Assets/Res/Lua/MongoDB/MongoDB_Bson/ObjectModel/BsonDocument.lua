-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local ArrayObject = System.Array(System.Object)
local DictStringInt32 = System.Dictionary(System.String, System.Int32)
local DictStringObject = System.Dictionary(System.String, System.Object)
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
local MongoDBShared
local ListBsonElement
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  MongoDBShared = MongoDB.Shared
  ListBsonElement = System.List(MongoDBBson.BsonElement)
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON document.
  -- </summary>
  namespace.class("BsonDocument", function (namespace)
    local op_Inequality1, op_Equality1, getAllowDuplicateNames, setAllowDuplicateNames, getBsonType, getElementCount, getElements, getNames, 
    getRawValues, getValues, get, set, get2, get1, set1, Create1, 
    Parse, TryParse, Add, Add1, Add2, Add3, Add4, Add5, 
    Add6, Add7, Add8, Add9, Add10, Add11, AddRange, AddRange1, 
    AddRange2, AddRange3, Clear, Clone, CompareTo, CompareTo1, Contains, ContainsValue, 
    DeepClone, Equals, EqualsObj, GetElement, GetElement1, GetEnumerator, GetHashCode, GetValue, 
    GetValue1, GetValue2, IndexOfName, InsertAt, Merge, Merge1, Remove, RemoveAt, 
    RemoveElement, Set, Set1, SetElement, SetElement1, ToDictionary, ToHashtable, ToString, 
    TryGetElement, TryGetValue, RebuildIndexes, ToBsonDocument, GetEnumerator1, class, internal, __ctor1__, 
    __ctor2__, __ctor3__, __ctor4__, __ctor5__, __ctor6__, __ctor7__, __ctor8__, __ctor9__, 
    __ctor10__, __ctor11__, __ctor12__
    internal = function (this)
      this._elements = ListBsonElement()
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class.
    -- </summary>
    __ctor1__ = function (this)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class specifying whether duplicate element names are allowed
    -- (allowing duplicate element names is not recommended).
    -- </summary>
    __ctor2__ = function (this, allowDuplicateNames)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this._allowDuplicateNames = allowDuplicateNames
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds one element.
    -- </summary>
    __ctor3__ = function (this, element)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:Add(element:__clone__())
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds new elements from a dictionary of key/value pairs.
    -- </summary>
    __ctor4__ = function (this, dictionary)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:AddRange(dictionary)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds new elements from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">A list of keys to select values from the dictionary.</param>
    __ctor5__ = function (this, dictionary, keys)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:Add2(dictionary, keys)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds new elements from a dictionary of key/value pairs.
    -- </summary>
    __ctor6__ = function (this, dictionary)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:AddRange3(dictionary)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds new elements from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">A list of keys to select values from the dictionary.</param>
    __ctor7__ = function (this, dictionary, keys)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:Add4(dictionary, keys)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds new elements from a dictionary of key/value pairs.
    -- </summary>
    __ctor8__ = function (this, dictionary)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:AddRange1(dictionary)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds new elements from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">A list of keys to select values from the dictionary.</param>
    __ctor9__ = function (this, dictionary, keys)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:Add6(dictionary, keys)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds new elements from a list of elements.
    -- </summary>
    __ctor10__ = function (this, elements)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:AddRange2(elements)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and adds one or more elements.
    -- </summary>
    __ctor11__ = function (this, elements)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:Add8(elements)
    end
    -- <summary>
    -- Initializes a new instance of the BsonDocument class and creates and adds a new element.
    -- </summary>
    -- <param name="value">The value of the element to add to the document.</param>
    __ctor12__ = function (this, name, value)
      internal(this)
      MongoDBBson.BsonValue.__ctor__(this)
      this:Add9(name, value)
    end
    -- <summary>
    -- Compares two BsonDocument values.
    -- </summary>
    -- <param name="rhs">The other BsonDocument.</param>
    -- <returns>True if the two BsonDocument values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonDocument values.
    -- </summary>
    -- <param name="rhs">The other BsonDocument.</param>
    -- <returns>True if the two BsonDocument values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      return System.Object.EqualsStatic(lhs, rhs)
      -- handles lhs == null correctly
    end
    getAllowDuplicateNames = function (this)
      return this._allowDuplicateNames
    end
    setAllowDuplicateNames = function (this, value)
      this._allowDuplicateNames = value
    end
    getBsonType = function (this)
      return 3 --[[BsonType.Document]]
    end
    getElementCount = function (this)
      return #this._elements
    end
    getElements = function (this)
      return this._elements
    end
    getNames = function (this)
      return Linq.Select(this._elements, function (e)
        return e:getName()
      end, System.String)
    end
    getRawValues = function (this)
      return Linq.Select(this._elements, function (e)
        return e:getValue():getRawValue()
      end, System.Object)
    end
    getValues = function (this)
      return Linq.Select(this._elements, function (e)
        return e:getValue()
      end, MongoDBBson.BsonValue)
    end
    get = function (this, index)
      return this._elements:get(index):getValue()
    end
    set = function (this, index, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      this._elements:set(index, System.new(MongoDBBson.BsonElement, 2, this._elements:get(index):getName(), value))
    end
    get2 = function (this, name, defaultValue)
      return this:GetValue2(name, defaultValue)
    end
    get1 = function (this, name)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      local index = this:IndexOfName(name)
      if index ~= - 1 then
        return this._elements:get(index):getValue()
      else
        local message = System.String.Format("Element '{0}' not found.", name)
        System.throw(System.KeyNotFoundException(message))
      end
    end
    set1 = function (this, name, value)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      local index = this:IndexOfName(name)
      if index ~= - 1 then
        this._elements:set(index, System.new(MongoDBBson.BsonElement, 2, name, value))
      else
        this:Add(System.new(MongoDBBson.BsonElement, 2, name, value))
      end
    end
    -- <summary>
    -- Creates a new BsonDocument by mapping an object to a BsonDocument.
    -- </summary>
    -- <returns>A BsonDocument.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 3 --[[BsonType.Document]]))
    end
    -- <summary>
    -- Parses a JSON string and returns a BsonDocument.
    -- </summary>
    -- <returns>A BsonDocument.</returns>
    Parse = function (json)
      local default, extern = System.using(MongoDBBsonIO.JsonReader(json), function (jsonReader)
        local context = MongoDBBsonSerialization.BsonDeserializationContext.CreateRoot(jsonReader)
        local document = MongoDBBsonSerialization.IBsonSerializerExtensions.Deserialize1(MongoDBSerializers.BsonDocumentSerializer.getInstance(), context, class)
        if not jsonReader:IsAtEndOfFile() then
          System.throw(System.FormatException("String contains extra non-whitespace characters beyond the end of the document."))
        end
        return true, document
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Tries to parse a JSON string and returns a value indicating whether it succeeded or failed.
    -- </summary>
    -- <param name="result">The result.</param>
    -- <returns>Whether it succeeded or failed.</returns>
    TryParse = function (s, result)
      local default, extern = System.try(function ()
        result = Parse(s)
        return true, true
      end, function (default)
        result = nil
        return true, false
      end)
      if default then
        return extern, result
      end
    end
    -- <summary>
    -- Adds an element to the document.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add = function (this, element)
      local isDuplicate = this:IndexOfName(element:getName()) ~= - 1
      if isDuplicate and not this._allowDuplicateNames then
        local message = System.String.Format("Duplicate element name '{0}'.", element:getName())
        System.throw(System.InvalidOperationException(message))
      else
        this._elements:Add(element:__clone__())
        if not isDuplicate then
          if this._indexes == nil then
            RebuildIndexes(this)
          else
            this._indexes:AddKeyValue(element:getName(), #this._elements - 1)
            -- index of the newly added element
          end
        end
      end

      return this
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add1 = function (this, dictionary)
      return this:AddRange(dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">Which keys of the hash table to add.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add2 = function (this, dictionary, keys)
      return this:Add4(dictionary, keys)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add3 = function (this, dictionary)
      return this:AddRange3(dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">Which keys of the hash table to add.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add4 = function (this, dictionary, keys)
      if dictionary == nil then
        System.throw(System.ArgumentNullException("dictionary"))
      end
      if keys == nil then
        System.throw(System.ArgumentNullException("keys"))
      end

      for _, key in System.each(keys) do
        this:Add9(key, MongoDBBson.BsonTypeMapper.MapToBsonValue(dictionary:get(key)))
      end

      return this
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add5 = function (this, dictionary)
      return this:AddRange1(dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">Which keys of the hash table to add.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add6 = function (this, dictionary, keys)
      if dictionary == nil then
        System.throw(System.ArgumentNullException("dictionary"))
      end
      if keys == nil then
        System.throw(System.ArgumentNullException("keys"))
      end

      for _, key in System.each(keys) do
        if key == nil then
          System.throw(System.ArgumentException("keys", "A key passed to BsonDocument.Add is null."))
        end
        if key:GetType() ~= System.typeof(System.String) then
          System.throw(System.ArgumentOutOfRangeException("keys", "A key passed to BsonDocument.Add is not a string."))
        end
        this:Add9(System.cast(System.String, key), MongoDBBson.BsonTypeMapper.MapToBsonValue(dictionary:get(key)))
      end

      return this
    end
    -- <summary>
    -- Adds a list of elements to the document.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add7 = function (this, elements)
      return this:AddRange2(elements)
    end
    -- <summary>
    -- Adds a list of elements to the document.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add8 = function (this, elements)
      return this:AddRange2(elements)
    end
    -- <summary>
    -- Creates and adds an element to the document.
    -- </summary>
    -- <param name="value">The value of the element.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add9 = function (this, name, value)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end

      this:Add(System.new(MongoDBBson.BsonElement, 2, name, value))

      return this
    end
    -- <summary>
    -- Creates and adds an element to the document, but only if the condition is true.
    -- </summary>
    -- <param name="value">The value of the element.</param>
    -- <param name="condition">Whether to add the element to the document.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add10 = function (this, name, value, condition)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end

      if condition then
        -- don't check for null value unless condition is true
        if MongoDBBson.BsonValue.op_Equality(value, nil) then
          System.throw(System.ArgumentNullException("value"))
        end

        this:Add(System.new(MongoDBBson.BsonElement, 2, name, value))
      end

      return this
    end
    -- <summary>
    -- Creates and adds an element to the document, but only if the condition is true.
    -- If the condition is false the value factory is not called at all.
    -- </summary>
    -- <param name="valueFactory">A delegate called to compute the value of the element if condition is true.</param>
    -- <param name="condition">Whether to add the element to the document.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add11 = function (this, name, valueFactory, condition)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      if valueFactory == nil then
        System.throw(System.ArgumentNullException("valueFactory"))
      end

      if condition then
        this:Add(System.new(MongoDBBson.BsonElement, 2, name, valueFactory()))
      end

      return this
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    AddRange = function (this, dictionary)
      return this:AddRange3(dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    AddRange1 = function (this, dictionary)
      if dictionary == nil then
        System.throw(System.ArgumentNullException("dictionary"))
      end

      for _, entry in System.each(dictionary) do
        entry = System.cast(System.DictionaryEntry, entry)
        if entry:getKey() == nil then
          System.throw(System.ArgumentException("A key passed to BsonDocument.AddRange is null.", "keys"))
        end
        if entry:getKey():GetType() ~= System.typeof(System.String) then
          System.throw(System.ArgumentOutOfRangeException("dictionary", "One or more keys in the dictionary passed to BsonDocument.AddRange is not a string."))
        end
        this:Add9(System.cast(System.String, entry:getKey()), MongoDBBson.BsonTypeMapper.MapToBsonValue(entry:getValue()))
      end

      return this
    end
    -- <summary>
    -- Adds a list of elements to the document.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    AddRange2 = function (this, elements)
      if elements == nil then
        System.throw(System.ArgumentNullException("elements"))
      end

      for _, element in System.each(elements) do
        this:Add(element:__clone__())
      end

      return this
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    AddRange3 = function (this, dictionary)
      if dictionary == nil then
        System.throw(System.ArgumentNullException("dictionary"))
      end

      for _, entry in System.each(dictionary) do
        this:Add9(entry.Key, MongoDBBson.BsonTypeMapper.MapToBsonValue(entry.Value))
      end

      return this
    end
    -- <summary>
    -- Clears the document (removes all elements).
    -- </summary>
    Clear = function (this)
      this._elements:Clear()
      this._indexes = nil
    end
    -- <summary>
    -- Creates a shallow clone of the document (see also DeepClone).
    -- </summary>
    Clone = function (this)
      local clone = class()
      for _, element in System.each(this._elements) do
        clone:Add(element:Clone())
      end
      return clone
    end
    -- <summary>
    -- Compares this document to another document.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this document is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, rhs)
      if op_Equality1(rhs, nil) then
        return 1
      end

      -- lhs and rhs might be subclasses of BsonDocument
      local default, extern = System.using(this:getElements():GetEnumerator(), function (lhsEnumerator)
        local default, extern = System.using(rhs:getElements():GetEnumerator(), function (rhsEnumerator)
          while true do
            local lhsHasNext = lhsEnumerator:MoveNext()
            local rhsHasNext = rhsEnumerator:MoveNext()
            if not lhsHasNext and not rhsHasNext then
              return true, 0
            end
            if not lhsHasNext then
              return true, - 1
            end
            if not rhsHasNext then
              return true, 1
            end

            local lhsElement = lhsEnumerator:getCurrent()
            local rhsElement = rhsEnumerator:getCurrent()
            local result = lhsElement:getName():CompareTo(rhsElement:getName())
            if result ~= 0 then
              return true, result
            end
            result = lhsElement:getValue():CompareTo1(rhsElement:getValue())
            if result ~= 0 then
              return true, result
            end
          end
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Compares the BsonDocument to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonDocument is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherDocument = System.as(other, class)
      if op_Inequality1(otherDocument, nil) then
        return this:CompareTo(otherDocument)
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Tests whether the document contains an element with the specified name.
    -- </summary>
    -- <returns>True if the document contains an element with the specified name.</returns>
    Contains = function (this, name)
      return this:IndexOfName(name) ~= - 1
    end
    -- <summary>
    -- Tests whether the document contains an element with the specified value.
    -- </summary>
    -- <returns>True if the document contains an element with the specified value.</returns>
    ContainsValue = function (this, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return Linq.Any(this._elements, function (e)
        return MongoDBBson.BsonValue.op_Equality(e:getValue(), value)
      end)
    end
    -- <summary>
    -- Creates a deep clone of the document (see also Clone).
    -- </summary>
    DeepClone = function (this)
      local clone = class()
      for _, element in System.each(this._elements) do
        clone:Add(element:DeepClone())
      end
      return clone
    end
    -- <summary>
    -- Compares this document to another document.
    -- </summary>
    -- <returns>True if the two documents are equal.</returns>
    Equals = function (this, obj)
      return this:EqualsObj(obj)
      -- handles obj == null correctly
    end
    -- <summary>
    -- Compares this BsonDocument to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonDocument and equal to this one.</returns>
    EqualsObj = function (this, obj)
      if System.Object.ReferenceEquals(obj) or not (System.is(obj, class)) then
        return false
      end

      -- lhs and rhs might be subclasses of BsonDocument
      local rhs = System.cast(class, obj)
      return Linq.SequenceEqual(this:getElements(), rhs:getElements())
    end
    -- <summary>
    -- Gets an element of this document.
    -- </summary>
    -- <returns>The element.</returns>
    GetElement = function (this, index)
      return this._elements:get(index)
    end
    -- <summary>
    -- Gets an element of this document.
    -- </summary>
    -- <returns>A BsonElement.</returns>
    GetElement1 = function (this, name)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      local index = this:IndexOfName(name)
      if index ~= - 1 then
        return this._elements:get(index)
      else
        local message = System.String.Format("Element '{0}' not found.", name)
        System.throw(System.KeyNotFoundException(message))
      end
    end
    -- <summary>
    -- Gets an enumerator that can be used to enumerate the elements of this document.
    -- </summary>
    GetEnumerator = function (this)
      return this._elements:GetEnumerator()
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      return MongoDBShared.Hasher():Hash4(this:getBsonType()):HashElements(this:getElements()):GetHashCode()
    end
    -- <summary>
    -- Gets the value of an element.
    -- </summary>
    -- <returns>The value of the element.</returns>
    GetValue = function (this, index)
      return this:get(index)
    end
    -- <summary>
    -- Gets the value of an element.
    -- </summary>
    -- <returns>The value of the element.</returns>
    GetValue1 = function (this, name)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      return this:get1(name)
    end
    -- <summary>
    -- Gets the value of an element or a default value if the element is not found.
    -- </summary>
    -- <param name="defaultValue">The default value returned if the element is not found.</param>
    -- <returns>The value of the element or the default value if the element is not found.</returns>
    GetValue2 = function (this, name, defaultValue)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end

      local index = this:IndexOfName(name)
      if index ~= - 1 then
        return this._elements:get(index):getValue()
      else
        return defaultValue
      end
    end
    -- <summary>
    -- Gets the index of an element.
    -- </summary>
    -- <returns>The index of the element, or -1 if the element is not found.</returns>
    IndexOfName = function (this, name)
      if this._indexes == nil then
        local count = #this._elements
        for index = 0, count - 1 do
          if this._elements:get(index):getName() == name then
            return index
          end
        end

        return - 1
      else
        local index
        local default
        default, index = this._indexes:TryGetValue(name)
        if default then
          return index
        else
          return - 1
        end
      end
    end
    -- <summary>
    -- Inserts a new element at a specified position.
    -- </summary>
    -- <param name="element">The element.</param>
    InsertAt = function (this, index, element)
      local isDuplicate = this:IndexOfName(element:getName()) ~= - 1
      if isDuplicate and not this._allowDuplicateNames then
        local message = System.String.Format("Duplicate element name '{0}' not allowed.", element:getName())
        System.throw(System.InvalidOperationException(message))
      else
        this._elements:Insert(index, element:__clone__())
        RebuildIndexes(this)
      end
    end
    -- <summary>
    -- Merges another document into this one. Existing elements are not overwritten.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Merge = function (this, document)
      this:Merge1(document, false)
      -- don't overwriteExistingElements
      return this
    end
    -- <summary>
    -- Merges another document into this one, specifying whether existing elements are overwritten.
    -- </summary>
    -- <param name="overwriteExistingElements">Whether to overwrite existing elements.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Merge1 = function (this, document, overwriteExistingElements)
      if op_Equality1(document, nil) then
        System.throw(System.ArgumentNullException("document"))
      end

      for _, element in System.each(document) do
        if overwriteExistingElements or not this:Contains(element:getName()) then
          this:set1(element:getName(), element:getValue())
        end
      end

      return this
    end
    -- <summary>
    -- Removes an element from this document (if duplicate element names are allowed
    -- then all elements with this name will be removed).
    -- </summary>
    Remove = function (this, name)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end

      if this._allowDuplicateNames then
        local count = #this._elements
        local removedAny = false
        for i = count - 1, 0, -1 do
          if this._elements:get(i):getName() == name then
            this._elements:RemoveAt(i)
            removedAny = true
          end
        end

        if removedAny then
          RebuildIndexes(this)
        end
      else
        local index = this:IndexOfName(name)
        if index ~= - 1 then
          this._elements:RemoveAt(index)
          RebuildIndexes(this)
        end
      end
    end
    -- <summary>
    -- Removes an element from this document.
    -- </summary>
    RemoveAt = function (this, index)
      this._elements:RemoveAt(index)
      RebuildIndexes(this)
    end
    -- <summary>
    -- Removes an element from this document.
    -- </summary>
    RemoveElement = function (this, element)
      if this._elements:Remove(element:__clone__()) then
        RebuildIndexes(this)
      end
    end
    -- <summary>
    -- Sets the value of an element.
    -- </summary>
    -- <param name="value">The new value.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Set = function (this, index, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      this:set(index, value)
      return this
    end
    -- <summary>
    -- Sets the value of an element (an element will be added if no element with this name is found).
    -- </summary>
    -- <param name="value">The new value.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Set1 = function (this, name, value)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      this:set1(name, value)
      return this
    end
    -- <summary>
    -- Sets an element of the document (replacing the existing element at that position).
    -- </summary>
    -- <param name="element">The new element.</param>
    -- <returns>The document.</returns>
    SetElement = function (this, index, element)
      local oldName = this._elements:get(index):getName()
      this._elements:set(index, element)

      if element:getName() ~= oldName then
        RebuildIndexes(this)
      end

      return this
    end
    -- <summary>
    -- Sets an element of the document (replaces any existing element with the same name or adds a new element if an element with the same name is not found).
    -- </summary>
    -- <returns>The document.</returns>
    SetElement1 = function (this, element)
      local index = this:IndexOfName(element:getName())
      if index ~= - 1 then
        this._elements:set(index, element)
      else
        this:Add(element:__clone__())
      end
      return this
    end
    -- <summary>
    -- Converts the BsonDocument to a Dictionary&lt;string, object&gt;.
    -- </summary>
    ToDictionary = function (this)
      local default = MongoDBBson.BsonTypeMapperOptions()
      default:setDuplicateNameHandling(2 --[[DuplicateNameHandling.ThrowException]])
      default:setMapBsonArrayTo(System.typeof(ArrayObject))
      default:setMapBsonDocumentTo(System.typeof(DictStringObject))
      default:setMapOldBinaryToByteArray(false)
      local options = default
      return System.cast(DictStringObject, MongoDBBson.BsonTypeMapper.MapToDotNetValue1(this, options))
    end
    -- <summary>
    -- Converts the BsonDocument to a Hashtable.
    -- </summary>
    ToHashtable = function (this)
      local default = MongoDBBson.BsonTypeMapperOptions()
      default:setDuplicateNameHandling(2 --[[DuplicateNameHandling.ThrowException]])
      default:setMapBsonArrayTo(System.typeof(ArrayObject))
      default:setMapBsonDocumentTo(System.typeof(System.Hashtable))
      default:setMapOldBinaryToByteArray(false)
      local options = default
      return System.cast(System.Hashtable, MongoDBBson.BsonTypeMapper.MapToDotNetValue1(this, options))
    end
    -- <summary>
    -- Returns a string representation of the document.
    -- </summary>
    ToString = function (this)
      return MongoDBBson.BsonExtensionMethods.ToJson(this, nil, nil, nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs), class)
    end
    -- <summary>
    -- Tries to get an element of this document.
    -- </summary>
    -- <param name="value">The element.</param>
    -- <returns>True if an element with that name was found.</returns>
    TryGetElement = function (this, name, value)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      local index = this:IndexOfName(name)
      if index ~= - 1 then
        value = this._elements:get(index)
        return true, value
      else
        value = System.default(MongoDBBson.BsonElement)
        return false, value
      end
    end
    -- <summary>
    -- Tries to get the value of an element of this document.
    -- </summary>
    -- <param name="value">The value of the element.</param>
    -- <returns>True if an element with that name was found.</returns>
    TryGetValue = function (this, name, value)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      local index = this:IndexOfName(name)
      if index ~= - 1 then
        value = this._elements:get(index):getValue()
        return true, value
      else
        value = nil
        return false, value
      end
    end
    RebuildIndexes = function (this)
      if #this._elements < 8 --[[BsonDocument.__indexesThreshold]] then
        this._indexes = nil
        return
      end

      if this._indexes == nil then
        this._indexes = DictStringInt32()
      else
        this._indexes:Clear()
      end

      -- process the elements in reverse order so that in case of duplicates the dictionary ends up pointing at the first one
      local count = #this._elements
      for index = count - 1, 0, -1 do
        local element = this._elements:get(index)
        this._indexes:set(element:getName(), index)
      end
    end
    ToBsonDocument = function (this)
      return this
    end
    GetEnumerator1 = function (this)
      return this:GetEnumerator()
    end
    class = {
      base = function (out, this)
        this.__genericT__ = out.MongoDB.Bson.BsonElement
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonDocument),
          out.MongoDB.Bson.IConvertibleToBsonDocument,
          System.IEnumerable_1(out.MongoDB.Bson.BsonElement),
          System.IEquatable_1(out.MongoDB.Bson.BsonDocument)
        }
      end,
      _allowDuplicateNames = false,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      getAllowDuplicateNames = getAllowDuplicateNames,
      setAllowDuplicateNames = setAllowDuplicateNames,
      getBsonType = getBsonType,
      getElementCount = getElementCount,
      getElements = getElements,
      getNames = getNames,
      getRawValues = getRawValues,
      getValues = getValues,
      get = get,
      set = set,
      get2 = get2,
      get1 = get1,
      set1 = set1,
      Create1 = Create1,
      Parse = Parse,
      TryParse = TryParse,
      Add = Add,
      Add1 = Add1,
      Add2 = Add2,
      Add3 = Add3,
      Add4 = Add4,
      Add5 = Add5,
      Add6 = Add6,
      Add7 = Add7,
      Add8 = Add8,
      Add9 = Add9,
      Add10 = Add10,
      Add11 = Add11,
      AddRange = AddRange,
      AddRange1 = AddRange1,
      AddRange2 = AddRange2,
      AddRange3 = AddRange3,
      Clear = Clear,
      Clone = Clone,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Contains = Contains,
      ContainsValue = ContainsValue,
      DeepClone = DeepClone,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetElement = GetElement,
      GetElement1 = GetElement1,
      GetEnumerator = GetEnumerator,
      GetHashCode = GetHashCode,
      GetValue = GetValue,
      GetValue1 = GetValue1,
      GetValue2 = GetValue2,
      IndexOfName = IndexOfName,
      InsertAt = InsertAt,
      Merge = Merge,
      Merge1 = Merge1,
      Remove = Remove,
      RemoveAt = RemoveAt,
      RemoveElement = RemoveElement,
      Set = Set,
      Set1 = Set1,
      SetElement = SetElement,
      SetElement1 = SetElement1,
      ToDictionary = ToDictionary,
      ToHashtable = ToHashtable,
      ToString = ToString,
      TryGetElement = TryGetElement,
      TryGetValue = TryGetValue,
      ToBsonDocument = ToBsonDocument,
      GetEnumerator1 = GetEnumerator1,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__,
        __ctor5__,
        __ctor6__,
        __ctor7__,
        __ctor8__,
        __ctor9__,
        __ctor10__,
        __ctor11__,
        __ctor12__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "_allowDuplicateNames", 0x1, System.Boolean },
            { "_elements", 0x1, System.List(out.MongoDB.Bson.BsonElement) },
            { "_indexes", 0x1, System.Dictionary(System.String, System.Int32) }
          },
          methods = {
            { ".ctor", 0x106, __ctor3__, out.MongoDB.Bson.BsonElement, System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x206, __ctor12__, System.String, out.MongoDB.Bson.BsonValue, System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor10__, System.IEnumerable_1(out.MongoDB.Bson.BsonElement), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x206, __ctor9__, System.IDictionary, System.IEnumerable, System.ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead."), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor8__, System.IDictionary, System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor11__, System.Array(out.MongoDB.Bson.BsonElement), System.ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead."), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor6__, System.IEnumerable_1(System.KeyValuePair(System.String, System.Object)), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x206, __ctor5__, System.Dictionary(System.String, System.Object), System.IEnumerable_1(System.String), System.ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead."), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor4__, System.Dictionary(System.String, System.Object), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x206, __ctor7__, System.IDictionary_2(System.String, System.Object), System.IEnumerable_1(System.String), System.ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead."), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { "Add", 0x186, Add7, System.IEnumerable_1(out.MongoDB.Bson.BsonElement), class, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x186, Add1, System.Dictionary(System.String, System.Object), class, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x286, Add2, System.Dictionary(System.String, System.Object), System.IEnumerable_1(System.String), class, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") },
            { "Add", 0x186, Add3, System.IDictionary_2(System.String, System.Object), class, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x286, Add4, System.IDictionary_2(System.String, System.Object), System.IEnumerable_1(System.String), class, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") },
            { "Add", 0x186, Add5, System.IDictionary, class, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x286, Add6, System.IDictionary, System.IEnumerable, class, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") },
            { "Add", 0x186, Add8, System.Array(out.MongoDB.Bson.BsonElement), class, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") }
          },
          properties = {
            { "AllowDuplicateNames", 0x106, System.Boolean, getAllowDuplicateNames, setAllowDuplicateNames },
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "ElementCount", 0x206, System.Int32, getElementCount },
            { "Elements", 0x206, System.IEnumerable_1(out.MongoDB.Bson.BsonElement), getElements },
            { "Names", 0x206, System.IEnumerable_1(System.String), getNames },
            { "RawValues", 0x206, System.IEnumerable_1(System.Object), getRawValues, System.ObsoleteAttribute("Use Values instead.") },
            { "Values", 0x206, System.IEnumerable_1(out.MongoDB.Bson.BsonValue), getValues }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
