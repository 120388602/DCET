-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MongoDBBson
local MongoDBShared
local ListBsonValue
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBShared = MongoDB.Shared
  ListBsonValue = System.List(MongoDBBson.BsonValue)
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON array.
  -- </summary>
  namespace.class("BsonArray", function (namespace)
    local op_Inequality1, op_Equality1, getBsonType, getCapacity, setCapacity, getCount, getIsReadOnly, getRawValues, 
    getValues, get, set, Create1, Add1, AddRange, AddRange1, AddRange2, 
    AddRange3, AddRange4, AddRange5, AddRange6, AddRange7, AddRange8, Clone, Clear, 
    CompareTo, CompareTo1, Contains, CopyTo, CopyTo1, DeepClone, Equals, EqualsObj, 
    GetEnumerator, GetHashCode, IndexOf, IndexOf1, IndexOf2, Insert, Remove, RemoveAt, 
    ToArray, ToList, ToString, Add, GetEnumerator1, class, __ctor1__, __ctor2__, 
    __ctor3__, __ctor4__, __ctor5__, __ctor6__, __ctor7__, __ctor8__, __ctor9__, __ctor10__, 
    __ctor11__
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor1__ = function (this)
      __ctor11__(this, 0)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor2__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor3__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange1(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor4__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange2(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor5__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange3(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor6__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange4(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor7__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange5(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor8__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange6(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor9__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange7(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor10__ = function (this, values)
      __ctor11__(this, 0)
      this:AddRange8(values)
    end
    -- <summary>
    -- Initializes a new instance of the BsonArray class.
    -- </summary>
    __ctor11__ = function (this, capacity)
      MongoDBBson.BsonValue.__ctor__(this)
      this._values = ListBsonValue(capacity)
    end
    -- <summary>
    -- Compares two BsonArray values.
    -- </summary>
    -- <param name="rhs">The other BsonArray.</param>
    -- <returns>True if the two BsonArray values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonArray values.
    -- </summary>
    -- <param name="rhs">The other BsonArray.</param>
    -- <returns>True if the two BsonArray values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      return System.Object.EqualsStatic(lhs, rhs)
      -- handles lhs == null correctly
    end
    getBsonType = function (this)
      return 4 --[[BsonType.Array]]
    end
    getCapacity = function (this)
      return this._values:getCapacity()
    end
    setCapacity = function (this, value)
      this._values:setCapacity(value)
    end
    getCount = function (this)
      return #this._values
    end
    getIsReadOnly = function (this)
      return false
    end
    getRawValues = function (this)
      return Linq.Select(this._values, function (v)
        return v:getRawValue()
      end, System.Object)
    end
    getValues = function (this)
      return this._values
    end
    get = function (this, index)
      return this._values:get(index)
    end
    set = function (this, index, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      this._values:set(index, value)
    end
    -- <summary>
    -- Creates a new BsonArray.
    -- </summary>
    -- <returns>A BsonArray or null.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 4 --[[BsonType.Array]]))
    end
    -- <summary>
    -- Adds an element to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    Add1 = function (this, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end

      this._values:Add(value)

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(MongoDBBson.BsonBoolean.op_Implicit22(value))
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange1 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(value)
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange2 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(MongoDBBson.BsonDateTime(value))
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange3 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(MongoDBBson.BsonDouble.op_Implicit22(value))
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange4 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(MongoDBBson.BsonInt32.op_Implicit22(value))
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange5 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(MongoDBBson.BsonInt64.op_Implicit22(value))
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange6 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(MongoDBBson.BsonObjectId(value:__clone__()))
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange7 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        local default
        if (value == nil) then
          default = MongoDBBson.BsonNull.getValue()
        else
          default = MongoDBBson.BsonString.op_Implicit22(value)
        end
        this._values:Add(default)
      end

      return this
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange8 = function (this, values)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      for _, value in System.each(values) do
        this:Add1(MongoDBBson.BsonTypeMapper.MapToBsonValue(value))
      end

      return this
    end
    -- <summary>
    -- Creates a shallow clone of the array (see also DeepClone).
    -- </summary>
    Clone = function (this)
      local clone = System.new(class, 11, this._values:getCapacity())
      for _, value in System.each(this._values) do
        clone:Add1(value)
      end
      return clone
    end
    -- <summary>
    -- Clears the array.
    -- </summary>
    Clear = function (this)
      this._values:Clear()
    end
    -- <summary>
    -- Compares the array to another array.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this array is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, rhs)
      if op_Equality1(rhs, nil) then
        return 1
      end

      -- lhs and rhs might be subclasses of BsonArray
      local default, extern = System.using(this:GetEnumerator(), function (lhsEnumerator)
        local default, extern = System.using(rhs:GetEnumerator(), function (rhsEnumerator)
          while true do
            local lhsHasNext = lhsEnumerator:MoveNext()
            local rhsHasNext = rhsEnumerator:MoveNext()
            if not lhsHasNext and not rhsHasNext then
              return true, 0
            end
            if not lhsHasNext then
              return true, - 1
            end
            if not rhsHasNext then
              return true, 1
            end

            local lhsValue = lhsEnumerator:getCurrent()
            local rhsValue = rhsEnumerator:getCurrent()
            local result = lhsValue:CompareTo1(rhsValue)
            if result ~= 0 then
              return true, result
            end
          end
        end)
        if default then
          return true, extern
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Compares the array to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this array is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherArray = System.as(other, class)
      if op_Inequality1(otherArray, nil) then
        return this:CompareTo(otherArray)
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Tests whether the array contains a value.
    -- </summary>
    -- <returns>True if the array contains the value.</returns>
    Contains = function (this, value)
      -- don't throw ArgumentNullException if value is null
      -- just let _values.Contains return false
      return this._values:Contains(value)
    end
    -- <summary>
    -- Copies elements from this array to another array.
    -- </summary>
    -- <param name="arrayIndex">The zero based index of the other array at which to start copying.</param>
    CopyTo = function (this, array, arrayIndex)
      do
        local i = 0 local j = arrayIndex
        while i < #this._values do
          array:set(j, this._values:get(i))
          i = i + 1
          j = j + 1
        end
      end
    end
    -- <summary>
    -- Copies elements from this array to another array as raw values (see BsonValue.RawValue).
    -- </summary>
    -- <param name="arrayIndex">The zero based index of the other array at which to start copying.</param>
    CopyTo1 = function (this, array, arrayIndex)
      do
        local i = 0 local j = arrayIndex
        while i < #this._values do
          array:set(j, this._values:get(i):getRawValue())
          i = i + 1
          j = j + 1
        end
      end
    end
    -- <summary>
    -- Creates a deep clone of the array (see also Clone).
    -- </summary>
    DeepClone = function (this)
      local clone = System.new(class, 11, this._values:getCapacity())
      for _, value in System.each(this._values) do
        clone:Add1(value:DeepClone())
      end
      return clone
    end
    -- <summary>
    -- Compares this array to another array.
    -- </summary>
    -- <returns>True if the two arrays are equal.</returns>
    Equals = function (this, obj)
      return this:EqualsObj(obj)
      -- handles obj == null correctly
    end
    -- <summary>
    -- Compares this BsonArray to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonArray and equal to this one.</returns>
    EqualsObj = function (this, obj)
      if System.Object.ReferenceEquals(obj) or not (System.is(obj, class)) then
        return false
      end

      -- lhs and rhs might be subclasses of BsonArray
      local rhs = System.cast(class, obj)
      return Linq.SequenceEqual(this:getValues(), rhs:getValues())
    end
    -- <summary>
    -- Gets an enumerator that can enumerate the elements of the array.
    -- </summary>
    GetEnumerator = function (this)
      return this._values:GetEnumerator()
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      return MongoDBShared.Hasher():Hash4(this:getBsonType()):HashElements(this:getValues()):GetHashCode()
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf = function (this, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return this._values:IndexOf(value)
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <param name="index">The zero based index at which to start the search.</param>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf1 = function (this, value, index)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return this._values:IndexOf(value, index)
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <param name="index">The zero based index at which to start the search.</param>
    -- <param name="count">The number of elements to search.</param>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf2 = function (this, value, index, count)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return this._values:IndexOf(value, index, count)
    end
    -- <summary>
    -- Inserts a new value into the array.
    -- </summary>
    -- <param name="value">The new value.</param>
    Insert = function (this, index, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      this._values:Insert(index, value)
    end
    -- <summary>
    -- Removes the first occurrence of a value from the array.
    -- </summary>
    -- <returns>True if the value was removed.</returns>
    Remove = function (this, value)
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return this._values:Remove(value)
    end
    -- <summary>
    -- Removes an element from the array.
    -- </summary>
    RemoveAt = function (this, index)
      this._values:RemoveAt(index)
    end
    -- <summary>
    -- Converts the BsonArray to an array of BsonValues.
    -- </summary>
    ToArray = function (this)
      return this._values:ToArray()
    end
    -- <summary>
    -- Converts the BsonArray to a list of BsonValues.
    -- </summary>
    ToList = function (this)
      return Linq.ToList(this._values)
    end
    -- <summary>
    -- Returns a string representation of the array.
    -- </summary>
    ToString = function (this)
      local sb = System.StringBuilder()
      sb:Append("[")
      for i = 0, #this._values - 1 do
        if i > 0 then
          sb:Append(", ")
        end
        sb:Append(this._values:get(i):ToString())
      end
      sb:Append("]")
      return sb:ToString()
    end
    Add = function (this, value)
      this:Add1(value)
    end
    GetEnumerator1 = function (this)
      return this:GetEnumerator()
    end
    class = {
      base = function (out, this)
        this.__genericT__ = out.MongoDB.Bson.BsonValue
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonArray),
          System.IEquatable_1(out.MongoDB.Bson.BsonArray),
          System.IList_1(out.MongoDB.Bson.BsonValue)
        }
      end,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      getBsonType = getBsonType,
      getCapacity = getCapacity,
      setCapacity = setCapacity,
      getCount = getCount,
      getIsReadOnly = getIsReadOnly,
      getRawValues = getRawValues,
      getValues = getValues,
      get = get,
      set = set,
      Create1 = Create1,
      Add1 = Add1,
      AddRange = AddRange,
      AddRange1 = AddRange1,
      AddRange2 = AddRange2,
      AddRange3 = AddRange3,
      AddRange4 = AddRange4,
      AddRange5 = AddRange5,
      AddRange6 = AddRange6,
      AddRange7 = AddRange7,
      AddRange8 = AddRange8,
      Clone = Clone,
      Clear = Clear,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Contains = Contains,
      CopyTo = CopyTo,
      CopyTo1 = CopyTo1,
      DeepClone = DeepClone,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetEnumerator = GetEnumerator,
      GetHashCode = GetHashCode,
      IndexOf = IndexOf,
      IndexOf1 = IndexOf1,
      IndexOf2 = IndexOf2,
      Insert = Insert,
      Remove = Remove,
      RemoveAt = RemoveAt,
      ToArray = ToArray,
      ToList = ToList,
      ToString = ToString,
      Add = Add,
      GetEnumerator1 = GetEnumerator1,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__,
        __ctor5__,
        __ctor6__,
        __ctor7__,
        __ctor8__,
        __ctor9__,
        __ctor10__,
        __ctor11__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "_values", 0x1, System.List(out.MongoDB.Bson.BsonValue) }
          },
          methods = {
            { ".ctor", 0x106, __ctor2__, System.IEnumerable_1(System.Boolean), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor3__, System.IEnumerable_1(out.MongoDB.Bson.BsonValue), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor4__, System.IEnumerable_1(System.DateTime), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor5__, System.IEnumerable_1(System.Double), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor6__, System.IEnumerable_1(System.Int32), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor7__, System.IEnumerable_1(System.Int64), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor8__, System.IEnumerable_1(out.MongoDB.Bson.ObjectId), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor9__, System.IEnumerable_1(System.String), System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { ".ctor", 0x106, __ctor10__, System.IEnumerable, System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors") },
            { "CopyTo", 0x206, CopyTo1, System.Array(System.Object), System.Int32, System.ObsoleteAttribute("Use ToArray or ToList instead.") }
          },
          properties = {
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "Capacity", 0x106, System.Int32, getCapacity, setCapacity },
            { "Count", 0x206, System.Int32, getCount },
            { "IsReadOnly", 0x206, System.Boolean, getIsReadOnly },
            { "RawValues", 0x206, System.IEnumerable_1(System.Object), getRawValues, System.ObsoleteAttribute("Use ToArray to ToList instead.") },
            { "Values", 0x206, System.IEnumerable_1(out.MongoDB.Bson.BsonValue), getValues }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
