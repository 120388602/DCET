-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MongoDBBson
local MongoDBBsonIO
local MongoDBBsonSerialization
local MongoDBSerializers
local UndiscriminatedActualTypeSerializer_1Object
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
  MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
  UndiscriminatedActualTypeSerializer_1Object = MongoDBSerializers.UndiscriminatedActualTypeSerializer_1(System.Object)
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- this class is a wrapper for an object that we intend to serialize as a BsonDocument
  -- it is a subclass of BsonDocument so that it may be used where a BsonDocument is expected
  -- this class is mostly used by MongoCollection and MongoCursor when supporting generic query objects

  -- if all that ever happens with this wrapped object is that it gets serialized then the BsonDocument is never materialized

  -- <summary>
  -- Represents a BsonDocument wrapper.
  -- </summary>
  namespace.class("BsonDocumentWrapper", function (namespace)
    local getSerializer, getWrapped, Create2, Create3, CreateMultiple, CreateMultiple1, Clone, Materialize, 
    MaterializeCompleted, class, __ctor1__, __ctor2__
    -- <summary>
    -- Initializes a new instance of the <see cref="BsonDocumentWrapper"/> class.
    -- </summary>
    __ctor1__ = function (this, value)
      __ctor2__(this, value, UndiscriminatedActualTypeSerializer_1Object.getInstance())
    end
    -- <summary>
    -- Initializes a new instance of the <see cref="BsonDocumentWrapper"/> class.
    -- </summary>
    -- <param name="serializer">The serializer.</param>
    __ctor2__ = function (this, value, serializer)
      MongoDBBson.MaterializedOnDemandBsonDocument.__ctor__(this)
      if serializer == nil then
        System.throw(System.ArgumentNullException("serializer"))
      end

      this._wrapped = value
      this._serializer = serializer
    end
    getSerializer = function (this)
      return this._serializer
    end
    getWrapped = function (this)
      return this._wrapped
    end
    -- <summary>
    -- Creates a new instance of the BsonDocumentWrapper class.
    -- </summary>
    -- <param name="value">The wrapped object.</param>
    -- <returns>A BsonDocumentWrapper.</returns>
    Create2 = function (value, TNominalType)
      return Create3(System.typeof(TNominalType), value)
    end
    -- <summary>
    -- Creates a new instance of the BsonDocumentWrapper class.
    -- </summary>
    -- <param name="value">The wrapped object.</param>
    -- <returns>A BsonDocumentWrapper.</returns>
    Create3 = function (nominalType, value)
      local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(nominalType)
      return System.new(class, 2, value, serializer)
    end
    -- <summary>
    -- Creates a list of new instances of the BsonDocumentWrapper class.
    -- </summary>
    -- <param name="values">A list of wrapped objects.</param>
    -- <returns>A list of BsonDocumentWrappers.</returns>
    CreateMultiple = function (values, TNominalType)
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(System.typeof(TNominalType))
      return Linq.Select(values, function (v)
        return System.new(class, 2, v, serializer)
      end, class)
    end
    -- <summary>
    -- Creates a list of new instances of the BsonDocumentWrapper class.
    -- </summary>
    -- <param name="values">A list of wrapped objects.</param>
    -- <returns>A list of BsonDocumentWrappers.</returns>
    CreateMultiple1 = function (nominalType, values)
      if nominalType == nil then
        System.throw(System.ArgumentNullException("nominalType"))
      end
      if values == nil then
        System.throw(System.ArgumentNullException("values"))
      end

      local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer1(nominalType)
      return Linq.Select(Linq.Cast(values, System.Object), function (v)
        return System.new(class, 2, v, serializer)
      end, class)
    end
    -- <summary>
    -- Creates a shallow clone of the document (see also DeepClone).
    -- </summary>
    -- A shallow clone of the document.
    -- </returns>
    Clone = function (this)
      if this:getIsMaterialized() then
        return MongoDBBson.MaterializedOnDemandBsonDocument.Clone(this)
      else
        return System.new(class, 2, this._wrapped, this._serializer)
      end
    end
    -- <summary>
    -- Materializes the BsonDocument.
    -- </summary>
    Materialize = function (this)
      local bsonDocument = MongoDBBson.BsonDocument()
      local writerSettings = MongoDBBsonIO.BsonDocumentWriterSettings.getDefaults()
      System.using(System.new(MongoDBBsonIO.BsonDocumentWriter, 2, bsonDocument, writerSettings), function (bsonWriter)
        local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(bsonWriter)
        MongoDBBsonSerialization.IBsonSerializerExtensions.Serialize(this._serializer, context, this._wrapped)
      end)

      return bsonDocument:getElements()
    end
    -- <summary>
    -- Informs subclasses that the Materialize process completed so they can free any resources related to the unmaterialized state.
    -- </summary>
    MaterializeCompleted = function (this)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.MaterializedOnDemandBsonDocument
        }
      end,
      getSerializer = getSerializer,
      getWrapped = getWrapped,
      Create2 = Create2,
      Create3 = Create3,
      CreateMultiple = CreateMultiple,
      CreateMultiple1 = CreateMultiple1,
      Clone = Clone,
      Materialize = Materialize,
      MaterializeCompleted = MaterializeCompleted,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
