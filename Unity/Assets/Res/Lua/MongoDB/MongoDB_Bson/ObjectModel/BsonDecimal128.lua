-- Generated by CSharp.lua Compiler
--[[ Copyright 2016-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonIO
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonIO = MongoDB.Bson.IO
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON Decimal128 value.
  -- </summary>
  namespace.class("BsonDecimal128", function (namespace)
    local getBsonType, getRawValue, getValue, op_Implicit22, op_Inequality1, op_Equality1, Create1, CompareTo, 
    CompareTo1, Equals, EqualsObj, GetHashCode, ToBoolean1, ToDecimal1, ToDecimal128, ToDouble1, 
    ToInt321, ToInt641, ToString, IConvertibleGetTypeCodeImplementation, IConvertibleToBooleanImplementation, IConvertibleToByteImplementation, IConvertibleToDecimalImplementation, IConvertibleToDoubleImplementation, 
    IConvertibleToInt16Implementation, IConvertibleToInt32Implementation, IConvertibleToInt64Implementation, IConvertibleToSByteImplementation, IConvertibleToSingleImplementation, IConvertibleToStringImplementation, IConvertibleToUInt16Implementation, IConvertibleToUInt32Implementation, 
    IConvertibleToUInt64Implementation, OperatorEqualsImplementation, class, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="BsonDecimal128" /> class.
    -- </summary>
    __ctor__ = function (this, value)
      this._value = System.default(MongoDBBson.Decimal128)
      MongoDBBson.BsonValue.__ctor__(this)
      this._value = value:__clone__()
    end
    getBsonType = function (this)
      return 19 --[[BsonType.Decimal128]]
    end
    getRawValue = function (this)
      return this._value:__clone__()
    end
    getValue = function (this)
      return this._value:__clone__()
    end
    -- <summary>
    -- Converts a Decimal128 to a BsonDecimal128.
    -- </summary>
    -- <returns>A BsonDecimal128.</returns>
    op_Implicit22 = function (value)
      return class(value:__clone__())
    end
    -- <summary>
    -- Compares two BsonDecimal128 values.
    -- </summary>
    -- <param name="rhs">The other BsonDecimal128.</param>
    -- <returns>True if the two BsonDecimal128 values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonDecimal128 values.
    -- </summary>
    -- <param name="rhs">The other BsonDecimal128.</param>
    -- <returns>True if the two BsonDecimal128 values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      return lhs:OperatorEqualsImplementation(rhs)
    end
    -- <summary>
    -- Creates a new instance of the BsonDecimal128 class.
    -- </summary>
    -- <returns>A BsonDecimal128.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 19 --[[BsonType.Decimal128]]))
    end
    -- <summary>
    -- Compares this BsonDecimal128 to another BsonDecimal128.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonDecimal128 is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      if op_Equality1(other, nil) then
        return 1
      end
      return this._value:CompareTo(other._value)
    end
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end

      local otherDecimal128 = System.as(other, class)
      if op_Inequality1(otherDecimal128, nil) then
        return this._value:CompareTo(getValue(otherDecimal128))
      end

      local otherInt32 = System.as(other, MongoDBBson.BsonInt32)
      if MongoDBBson.BsonInt32.op_Inequality1(otherInt32, nil) then
        return this._value:CompareTo(MongoDBBson.Decimal128.op_Implicit2(otherInt32:getValue()))
      end

      local otherInt64 = System.as(other, MongoDBBson.BsonInt64)
      if MongoDBBson.BsonInt64.op_Inequality1(otherInt64, nil) then
        return this._value:CompareTo(MongoDBBson.Decimal128.op_Implicit3(otherInt64:getValue()))
      end

      local otherDouble = System.as(other, MongoDBBson.BsonDouble)
      if MongoDBBson.BsonDouble.op_Inequality1(otherDouble, nil) then
        return this._value:CompareTo(MongoDBBson.Decimal128.op_Explicit3(otherDouble:getValue()))
      end

      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Compares this BsonDecimal128 to another BsonDecimal128.
    -- </summary>
    -- <returns>True if the two BsonDecimal128 values are equal.</returns>
    Equals = function (this, rhs)
      if System.Object.ReferenceEquals(rhs) or this:GetType() ~= rhs:GetType() then
        return false
      end
      return this._value:Equals(rhs._value)
      -- use Equals instead of == so NaN is handled correctly
    end
    EqualsObj = function (this, obj)
      return Equals(this, System.as(obj, class))
      -- works even if obj is null or of a different type
    end
    GetHashCode = function (this)
      -- see Effective Java by Joshua Bloch
      local hash = 17
      hash = 37 * hash + this:getBsonType():GetHashCode()
      hash = 37 * hash + this._value:GetHashCode()
      return hash
    end
    ToBoolean1 = function (this)
      return not (MongoDBBson.Decimal128.IsNaN(this._value:__clone__()) or this._value:Equals(MongoDBBson.Decimal128.getZero()))
    end
    ToDecimal1 = function (this)
      return MongoDBBson.Decimal128.ToDecimal1(this._value:__clone__())
    end
    ToDecimal128 = function (this)
      return this._value:__clone__()
    end
    ToDouble1 = function (this)
      return MongoDBBson.Decimal128.ToDouble1(this._value:__clone__())
    end
    ToInt321 = function (this)
      return MongoDBBson.Decimal128.ToInt321(this._value:__clone__())
    end
    ToInt641 = function (this)
      return MongoDBBson.Decimal128.ToInt641(this._value:__clone__())
    end
    ToString = function (this)
      return MongoDBBsonIO.JsonConvert.ToString4(this._value:__clone__())
    end
    IConvertibleGetTypeCodeImplementation = function (this)
      return 1 --[[TypeCode.Object]]
    end
    IConvertibleToBooleanImplementation = function (this, provider)
      return this._value:ToBoolean(provider)
    end
    IConvertibleToByteImplementation = function (this, provider)
      return this._value:ToByte(provider)
    end
    IConvertibleToDecimalImplementation = function (this, provider)
      return this._value:ToDecimal(provider)
    end
    IConvertibleToDoubleImplementation = function (this, provider)
      return this._value:ToDouble(provider)
    end
    IConvertibleToInt16Implementation = function (this, provider)
      return this._value:ToInt16(provider)
    end
    IConvertibleToInt32Implementation = function (this, provider)
      return this._value:ToInt32(provider)
    end
    IConvertibleToInt64Implementation = function (this, provider)
      return this._value:ToInt64(provider)
    end
    IConvertibleToSByteImplementation = function (this, provider)
      return this._value:ToSByte(provider)
    end
    IConvertibleToSingleImplementation = function (this, provider)
      return this._value:ToSingle(provider)
    end
    IConvertibleToStringImplementation = function (this, provider)
      return this._value:ToString(provider)
    end
    IConvertibleToUInt16Implementation = function (this, provider)
      return this._value:ToUInt16(provider)
    end
    IConvertibleToUInt32Implementation = function (this, provider)
      return this._value:ToUInt32(provider)
    end
    IConvertibleToUInt64Implementation = function (this, provider)
      return this._value:ToUInt64(provider)
    end
    OperatorEqualsImplementation = function (this, rhs)
      local rhsDecimal128 = System.as(rhs, class)
      if op_Inequality1(rhsDecimal128, nil) then
        return MongoDBBson.Decimal128.op_Equality(this._value, rhsDecimal128._value)
        -- use == instead of Equals so NaN is handled correctly
      end

      local rhsInt32 = System.as(rhs, MongoDBBson.BsonInt32)
      if MongoDBBson.BsonInt32.op_Inequality1(rhsInt32, nil) then
        return MongoDBBson.Decimal128.op_Equality(this._value, MongoDBBson.Decimal128.op_Implicit2(rhsInt32:getValue()))
      end

      local rhsInt64 = System.as(rhs, MongoDBBson.BsonInt64)
      if MongoDBBson.BsonInt64.op_Inequality1(rhsInt64, nil) then
        return MongoDBBson.Decimal128.op_Equality(this._value, MongoDBBson.Decimal128.op_Implicit3(rhsInt64:getValue()))
      end

      local rhsDouble = System.as(rhs, MongoDBBson.BsonDouble)
      if MongoDBBson.BsonDouble.op_Inequality1(rhsDouble, nil) then
        return MongoDBBson.Decimal128.op_Equality(this._value, MongoDBBson.Decimal128.op_Explicit3(rhsDouble:getValue()))
        -- use == instead of Equals so NaN is handled correctly
      end

      return this:Equals1(rhs)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonDecimal128),
          System.IEquatable_1(out.MongoDB.Bson.BsonDecimal128)
        }
      end,
      getBsonType = getBsonType,
      getRawValue = getRawValue,
      getValue = getValue,
      op_Implicit22 = op_Implicit22,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      Create1 = Create1,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToBoolean1 = ToBoolean1,
      ToDecimal1 = ToDecimal1,
      ToDecimal128 = ToDecimal128,
      ToDouble1 = ToDouble1,
      ToInt321 = ToInt321,
      ToInt641 = ToInt641,
      ToString = ToString,
      IConvertibleGetTypeCodeImplementation = IConvertibleGetTypeCodeImplementation,
      IConvertibleToBooleanImplementation = IConvertibleToBooleanImplementation,
      IConvertibleToByteImplementation = IConvertibleToByteImplementation,
      IConvertibleToDecimalImplementation = IConvertibleToDecimalImplementation,
      IConvertibleToDoubleImplementation = IConvertibleToDoubleImplementation,
      IConvertibleToInt16Implementation = IConvertibleToInt16Implementation,
      IConvertibleToInt32Implementation = IConvertibleToInt32Implementation,
      IConvertibleToInt64Implementation = IConvertibleToInt64Implementation,
      IConvertibleToSByteImplementation = IConvertibleToSByteImplementation,
      IConvertibleToSingleImplementation = IConvertibleToSingleImplementation,
      IConvertibleToStringImplementation = IConvertibleToStringImplementation,
      IConvertibleToUInt16Implementation = IConvertibleToUInt16Implementation,
      IConvertibleToUInt32Implementation = IConvertibleToUInt32Implementation,
      IConvertibleToUInt64Implementation = IConvertibleToUInt64Implementation,
      OperatorEqualsImplementation = OperatorEqualsImplementation,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "_value", 0x1, out.MongoDB.Bson.Decimal128 }
          },
          properties = {
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "RawValue", 0x206, System.Object, getRawValue, System.ObsoleteAttribute("Use Value instead.") },
            { "Value", 0x206, out.MongoDB.Bson.Decimal128, getValue }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
