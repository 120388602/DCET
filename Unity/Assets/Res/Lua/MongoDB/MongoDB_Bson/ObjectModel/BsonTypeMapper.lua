-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemReflection = System.Reflection
local SystemRegularExpressions = System.Text.RegularExpressions
local ArrayByte = System.Array(System.Byte)
local ArrayObject = System.Array(System.Object)
local ArrayString = System.Array(System.String)
local IList_1Object = System.IList_1(System.Object)
local KeyValuePairStringObject = System.KeyValuePair(System.String, System.Object)
local IDictionary_2StringObject = System.IDictionary_2(System.String, System.Object)
local IEnumerable_1KeyValuePairStringObject = System.IEnumerable_1(KeyValuePairStringObject)
local MongoDBBson
local MongoDBBsonBsonTypeMapper
local MongoDBBsonIO
local DictTypeInt32
local DictMappingInt32
local DictTypeICustomBsonTypeMapper
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonBsonTypeMapper = MongoDB.Bson.BsonTypeMapper
  MongoDBBsonIO = MongoDB.Bson.IO
  DictTypeInt32 = System.Dictionary(System.Type, System.Int32)
  DictMappingInt32 = System.Dictionary(MongoDBBsonBsonTypeMapper.Mapping, System.Int32)
  DictTypeICustomBsonTypeMapper = System.Dictionary(System.Type, MongoDBBson.ICustomBsonTypeMapper)
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- A static class that maps between .NET objects and BsonValues.
  -- </summary>
  namespace.class("BsonTypeMapper", function (namespace)
    local __fromMappings, __fromToMappings, __customTypeMappers, MapToBsonValue, MapToBsonValue1, MapToDotNetValue, MapToDotNetValue1, RegisterCustomTypeMapper, 
    TryMapToBsonValue, Convert, class, static
    namespace.struct("Mapping", function (namespace)
      local FromTo, getNetType, getBsonType, EqualsObj, GetHashCode, class, __ctor__
      __ctor__ = function (this, netType, bsonType)
        if bsonType == nil then
          return
        end
        this._netType = netType
        this._bsonType = bsonType
      end
      FromTo = function (netType, bsonType)
        return class(netType, bsonType)
      end
      getNetType = function (this)
        return this._netType
      end
      getBsonType = function (this)
        return this._bsonType
      end
      -- <summary>
      -- Compares this Mapping to another object.
      -- </summary>
      -- <returns>True if the other object is a Mapping and equal to this one.</returns>
      EqualsObj = function (this, obj)
        local rhs = System.cast(class, obj)
        return this._netType == rhs._netType and this._bsonType == rhs._bsonType
      end
      -- <summary>
      -- Gets the hash code.
      -- </summary>
      GetHashCode = function (this)
        return this._netType:GetHashCode() + this._bsonType
      end
      class = {
        _bsonType = 0,
        FromTo = FromTo,
        getNetType = getNetType,
        getBsonType = getBsonType,
        EqualsObj = EqualsObj,
        GetHashCode = GetHashCode,
        __ctor__ = __ctor__
      }
      return class
    end)
    static = function (this)
      local default = DictTypeInt32()
      default:AddKeyValue(System.typeof(System.Boolean), 1 --[[Conversion.BoolToBsonBoolean]])
      default:AddKeyValue(System.typeof(System.Byte), 12 --[[Conversion.ByteToBsonInt32]])
      default:AddKeyValue(System.typeof(ArrayByte), 7 --[[Conversion.ByteArrayToBsonBinary]])
      default:AddKeyValue(System.typeof(System.Char), 17 --[[Conversion.CharToBsonInt32]])
      default:AddKeyValue(System.typeof(System.DateTime), 20 --[[Conversion.DateTimeToBsonDateTime]])
      default:AddKeyValue(System.typeof(System.Double), 22 --[[Conversion.DecimalToBsonDecimal128]])
      default:AddKeyValue(System.typeof(MongoDBBson.Decimal128), 24 --[[Conversion.Decimal128ToBsonDecimal128]])
      default:AddKeyValue(System.typeof(System.Double), 27 --[[Conversion.DoubleToBsonDouble]])
      default:AddKeyValue(System.typeof(System.Single), 53 --[[Conversion.SingleToBsonDouble]])
      default:AddKeyValue(System.typeof(System.Guid), 28 --[[Conversion.GuidToBsonBinary]])
      default:AddKeyValue(System.typeof(System.Int32), 37 --[[Conversion.Int32ToBsonInt32]])
      default:AddKeyValue(System.typeof(System.Int64), 42 --[[Conversion.Int64ToBsonInt64]])
      default:AddKeyValue(System.typeof(MongoDBBson.ObjectId), 44 --[[Conversion.ObjectIdToBsonObjectId]])
      default:AddKeyValue(System.typeof(SystemRegularExpressions.Regex), 45 --[[Conversion.RegexToBsonRegularExpression]])
      default:AddKeyValue(System.typeof(System.SByte), 49 --[[Conversion.SByteToBsonInt32]])
      default:AddKeyValue(System.typeof(System.Int16), 32 --[[Conversion.Int16ToBsonInt32]])
      default:AddKeyValue(System.typeof(System.String), 64 --[[Conversion.StringToBsonString]])
      default:AddKeyValue(System.typeof(System.UInt32), 76 --[[Conversion.UInt32ToBsonInt64]])
      default:AddKeyValue(System.typeof(System.UInt16), 70 --[[Conversion.UInt16ToBsonInt32]])
      default:AddKeyValue(System.typeof(System.UInt64), 80 --[[Conversion.UInt64ToBsonInt64]])
      __fromMappings = default
      local default = DictMappingInt32()
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Boolean), 8 --[[BsonType.Boolean]]), 1 --[[Conversion.BoolToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonArray), 4 --[[BsonType.Array]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonBinaryData), 5 --[[BsonType.Binary]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonBoolean), 8 --[[BsonType.Boolean]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonDateTime), 9 --[[BsonType.DateTime]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonDocument), 3 --[[BsonType.Document]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonDecimal128), 19 --[[BsonType.Decimal128]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonDouble), 1 --[[BsonType.Double]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonInt32), 16 --[[BsonType.Int32]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonInt64), 18 --[[BsonType.Int64]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonJavaScript), 13 --[[BsonType.JavaScript]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonJavaScript), 15 --[[BsonType.JavaScriptWithScope]]), 2 --[[Conversion.BsonJavaScriptToBsonJavaScriptWithScope]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonJavaScriptWithScope), 15 --[[BsonType.JavaScriptWithScope]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonMaxKey), 8 --[[BsonType.Boolean]]), 3 --[[Conversion.BsonMaxKeyToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonMaxKey), 127 --[[BsonType.MaxKey]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonMinKey), 8 --[[BsonType.Boolean]]), 4 --[[Conversion.BsonMinKeyToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonMinKey), 255 --[[BsonType.MinKey]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonNull), 8 --[[BsonType.Boolean]]), 5 --[[Conversion.BsonNullToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonNull), 10 --[[BsonType.Null]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonObjectId), 7 --[[BsonType.ObjectId]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonRegularExpression), 11 --[[BsonType.RegularExpression]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonString), 2 --[[BsonType.String]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonSymbol), 14 --[[BsonType.Symbol]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonTimestamp), 17 --[[BsonType.Timestamp]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonUndefined), 8 --[[BsonType.Boolean]]), 6 --[[Conversion.BsonUndefinedToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.BsonUndefined), 6 --[[BsonType.Undefined]]), 0 --[[Conversion.None]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Byte), 8 --[[BsonType.Boolean]]), 9 --[[Conversion.ByteToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Byte), 19 --[[BsonType.Decimal128]]), 10 --[[Conversion.ByteToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Byte), 1 --[[BsonType.Double]]), 11 --[[Conversion.ByteToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Byte), 16 --[[BsonType.Int32]]), 12 --[[Conversion.ByteToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Byte), 18 --[[BsonType.Int64]]), 13 --[[Conversion.ByteToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(ArrayByte), 5 --[[BsonType.Binary]]), 7 --[[Conversion.ByteArrayToBsonBinary]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(ArrayByte), 7 --[[BsonType.ObjectId]]), 8 --[[Conversion.ByteArrayToBsonObjectId]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Char), 8 --[[BsonType.Boolean]]), 14 --[[Conversion.CharToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Char), 19 --[[BsonType.Decimal128]]), 15 --[[Conversion.CharToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Char), 1 --[[BsonType.Double]]), 16 --[[Conversion.CharToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Char), 16 --[[BsonType.Int32]]), 17 --[[Conversion.CharToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Char), 18 --[[BsonType.Int64]]), 18 --[[Conversion.CharToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.DateTime), 9 --[[BsonType.DateTime]]), 20 --[[Conversion.DateTimeToBsonDateTime]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.DateTimeOffset), 9 --[[BsonType.DateTime]]), 19 --[[Conversion.DateTimeOffsetToBsonDateTime]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Double), 8 --[[BsonType.Boolean]]), 21 --[[Conversion.DecimalToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Double), 19 --[[BsonType.Decimal128]]), 22 --[[Conversion.DecimalToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.Decimal128), 8 --[[BsonType.Boolean]]), 23 --[[Conversion.Decimal128ToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.Decimal128), 19 --[[BsonType.Decimal128]]), 24 --[[Conversion.Decimal128ToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Double), 8 --[[BsonType.Boolean]]), 25 --[[Conversion.DoubleToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Double), 19 --[[BsonType.Decimal128]]), 26 --[[Conversion.DoubleToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Double), 1 --[[BsonType.Double]]), 27 --[[Conversion.DoubleToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Single), 8 --[[BsonType.Boolean]]), 51 --[[Conversion.SingleToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Single), 19 --[[BsonType.Decimal128]]), 52 --[[Conversion.SingleToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Single), 1 --[[BsonType.Double]]), 53 --[[Conversion.SingleToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Guid), 5 --[[BsonType.Binary]]), 28 --[[Conversion.GuidToBsonBinary]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int32), 8 --[[BsonType.Boolean]]), 34 --[[Conversion.Int32ToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int32), 19 --[[BsonType.Decimal128]]), 35 --[[Conversion.Int32ToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int32), 1 --[[BsonType.Double]]), 36 --[[Conversion.Int32ToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int32), 16 --[[BsonType.Int32]]), 37 --[[Conversion.Int32ToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int32), 18 --[[BsonType.Int64]]), 38 --[[Conversion.Int32ToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int64), 8 --[[BsonType.Boolean]]), 39 --[[Conversion.Int64ToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int64), 19 --[[BsonType.Decimal128]]), 40 --[[Conversion.Int64ToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int64), 1 --[[BsonType.Double]]), 41 --[[Conversion.Int64ToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int64), 18 --[[BsonType.Int64]]), 42 --[[Conversion.Int64ToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int64), 17 --[[BsonType.Timestamp]]), 43 --[[Conversion.Int64ToBsonTimestamp]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(MongoDBBson.ObjectId), 7 --[[BsonType.ObjectId]]), 44 --[[Conversion.ObjectIdToBsonObjectId]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(SystemRegularExpressions.Regex), 11 --[[BsonType.RegularExpression]]), 45 --[[Conversion.RegexToBsonRegularExpression]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.SByte), 8 --[[BsonType.Boolean]]), 46 --[[Conversion.SByteToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.SByte), 19 --[[BsonType.Decimal128]]), 47 --[[Conversion.SByteToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.SByte), 1 --[[BsonType.Double]]), 48 --[[Conversion.SByteToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.SByte), 16 --[[BsonType.Int32]]), 49 --[[Conversion.SByteToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.SByte), 18 --[[BsonType.Int64]]), 50 --[[Conversion.SByteToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int16), 8 --[[BsonType.Boolean]]), 29 --[[Conversion.Int16ToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int16), 19 --[[BsonType.Decimal128]]), 30 --[[Conversion.Int16ToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int16), 1 --[[BsonType.Double]]), 31 --[[Conversion.Int16ToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int16), 16 --[[BsonType.Int32]]), 32 --[[Conversion.Int16ToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.Int16), 18 --[[BsonType.Int64]]), 33 --[[Conversion.Int16ToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 8 --[[BsonType.Boolean]]), 54 --[[Conversion.StringToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 9 --[[BsonType.DateTime]]), 55 --[[Conversion.StringToBsonDateTime]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 19 --[[BsonType.Decimal128]]), 56 --[[Conversion.StringToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 1 --[[BsonType.Double]]), 57 --[[Conversion.StringToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 16 --[[BsonType.Int32]]), 58 --[[Conversion.StringToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 18 --[[BsonType.Int64]]), 59 --[[Conversion.StringToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 13 --[[BsonType.JavaScript]]), 60 --[[Conversion.StringToBsonJavaScript]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 15 --[[BsonType.JavaScriptWithScope]]), 61 --[[Conversion.StringToBsonJavaScriptWithScope]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 7 --[[BsonType.ObjectId]]), 62 --[[Conversion.StringToBsonObjectId]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 11 --[[BsonType.RegularExpression]]), 63 --[[Conversion.StringToBsonRegularExpression]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 2 --[[BsonType.String]]), 64 --[[Conversion.StringToBsonString]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 14 --[[BsonType.Symbol]]), 65 --[[Conversion.StringToBsonSymbol]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.String), 17 --[[BsonType.Timestamp]]), 66 --[[Conversion.StringToBsonTimestamp]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt32), 8 --[[BsonType.Boolean]]), 72 --[[Conversion.UInt32ToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt32), 19 --[[BsonType.Decimal128]]), 73 --[[Conversion.UInt32ToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt32), 1 --[[BsonType.Double]]), 74 --[[Conversion.UInt32ToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt32), 16 --[[BsonType.Int32]]), 75 --[[Conversion.UInt32ToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt32), 18 --[[BsonType.Int64]]), 76 --[[Conversion.UInt32ToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt16), 8 --[[BsonType.Boolean]]), 67 --[[Conversion.UInt16ToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt16), 19 --[[BsonType.Decimal128]]), 68 --[[Conversion.UInt16ToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt16), 1 --[[BsonType.Double]]), 69 --[[Conversion.UInt16ToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt16), 16 --[[BsonType.Int32]]), 70 --[[Conversion.UInt16ToBsonInt32]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt16), 18 --[[BsonType.Int64]]), 71 --[[Conversion.UInt16ToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt64), 8 --[[BsonType.Boolean]]), 77 --[[Conversion.UInt64ToBsonBoolean]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt64), 19 --[[BsonType.Decimal128]]), 78 --[[Conversion.UInt64ToBsonDecimal128]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt64), 1 --[[BsonType.Double]]), 79 --[[Conversion.UInt64ToBsonDouble]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt64), 18 --[[BsonType.Int64]]), 80 --[[Conversion.UInt64ToBsonInt64]])
      default:AddKeyValue(class.Mapping.FromTo(System.typeof(System.UInt64), 17 --[[BsonType.Timestamp]]), 81 --[[Conversion.UInt64ToBsonTimestamp]])
      __fromToMappings = default
      __customTypeMappers = DictTypeICustomBsonTypeMapper()
    end
    -- <summary>
    -- Maps an object to an instance of the closest BsonValue class.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    MapToBsonValue = function (value)
      local bsonValue
      local default
      default, bsonValue = TryMapToBsonValue(value)
      if default then
        return bsonValue
      end

      local message = System.String.Format(".NET type {0} cannot be mapped to a BsonValue.", value:GetType():getFullName())
      System.throw(System.ArgumentException(message))
    end
    -- <summary>
    -- Maps an object to a specific BsonValue type.
    -- </summary>
    -- <param name="bsonType">The BsonType to map to.</param>
    -- <returns>A BsonValue of the desired type (or BsonNull.Value if value is null and bsonType is Null).</returns>
    MapToBsonValue1 = function (value, bsonType)
      local message
      if value == nil then
        if bsonType == 10 --[[BsonType.Null]] then
          return MongoDBBson.BsonNull.getValue()
        else
          message = System.String.Format("C# null cannot be mapped to BsonType.{0}.", bsonType)
          System.throw(System.ArgumentException(message, "value"))
        end
      end

      -- handle subclasses of BsonDocument (like QueryDocument) correctly
      if bsonType == 3 --[[BsonType.Document]] then
        local bsonDocument = System.as(value, MongoDBBson.BsonDocument)
        if MongoDBBson.BsonDocument.op_Inequality1(bsonDocument, nil) then
          return bsonDocument
        end
      end

      local valueType = value:GetType()
      local valueTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(valueType)
      if valueTypeInfo:getIsEnum() then
        valueType = System.Enum.GetUnderlyingType(valueType)
        repeat
          local default = System.Type.GetTypeCode(valueType)
          if default == 6 --[[TypeCode.Byte]] then
            value = System.cast(System.Byte, value)
            break
          elseif default == 7 --[[TypeCode.Int16]] then
            value = System.cast(System.Int16, value)
            break
          elseif default == 9 --[[TypeCode.Int32]] then
            value = System.cast(System.Int32, value)
            break
          elseif default == 11 --[[TypeCode.Int64]] then
            value = System.cast(System.Int64, value)
            break
          elseif default == 5 --[[TypeCode.SByte]] then
            value = System.cast(System.SByte, value)
            break
          elseif default == 8 --[[TypeCode.UInt16]] then
            value = System.cast(System.UInt16, value)
            break
          elseif default == 10 --[[TypeCode.UInt32]] then
            value = System.cast(System.UInt32, value)
            break
          elseif default == 12 --[[TypeCode.UInt64]] then
            value = System.toInt64(System.cast(System.UInt64, value))
            break
          end
        until 1
        valueType = value:GetType()
      end

      local conversion
      -- the conversion (if it exists) that will convert value to bsonType
      local default
      default, conversion = __fromToMappings:TryGetValue(class.Mapping.FromTo(valueType, bsonType))
      if default then
        return Convert(value, conversion)
      end

      -- these coercions can't be handled by the conversions table (because of the interfaces)
      repeat
        local extern = bsonType
        if extern == 4 --[[BsonType.Array]] then
          if System.is(value, System.IEnumerable) then
            return System.new(MongoDBBson.BsonArray, 10, System.cast(System.IEnumerable, value))
          end
          break
        elseif extern == 3 --[[BsonType.Document]] then
          if System.is(value, IEnumerable_1KeyValuePairStringObject) then
            return System.new(MongoDBBson.BsonDocument, 6, System.cast(IEnumerable_1KeyValuePairStringObject, value))
          end
          if System.is(value, System.IDictionary) then
            return System.new(MongoDBBson.BsonDocument, 8, System.cast(System.IDictionary, value))
          end
          break
        end
      until 1

      message = System.String.Format(".NET type {0} cannot be mapped to BsonType.{1}.", value:GetType():getFullName(), bsonType)
      System.throw(System.ArgumentException(message, "value"))
    end
    -- <summary>
    -- Maps a BsonValue to a .NET value using the default BsonTypeMapperOptions.
    -- </summary>
    -- <returns>The mapped .NET value.</returns>
    MapToDotNetValue = function (bsonValue)
      return MapToDotNetValue1(bsonValue, MongoDBBson.BsonTypeMapperOptions.getDefaults())
    end
    -- <summary>
    -- Maps a BsonValue to a .NET value.
    -- </summary>
    -- <param name="options">The BsonTypeMapperOptions.</param>
    -- <returns>The mapped .NET value.</returns>
    MapToDotNetValue1 = function (bsonValue, options)
      repeat
        local default = bsonValue:getBsonType()
        if default == 4 --[[BsonType.Array]] then
          local bsonArray = System.cast(MongoDBBson.BsonArray, bsonValue)
          if options:getMapBsonArrayTo() == System.typeof(MongoDBBson.BsonArray) then
            return bsonArray
          elseif options:getMapBsonArrayTo() == System.typeof(ArrayObject) then
            local array = ArrayObject:new(bsonArray:getCount())
            for i = 0, bsonArray:getCount() - 1 do
              array:set(i, MapToDotNetValue1(bsonArray:get(i), options))
            end
            return array
          elseif SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(IList_1Object)):IsAssignableFrom(options:getMapBsonArrayTo()) then
            local list = System.cast(IList_1Object, System.Activator.CreateInstance(options:getMapBsonArrayTo()))
            for i = 0, bsonArray:getCount() - 1 do
              list:Add(MapToDotNetValue1(bsonArray:get(i), options))
            end
            return list
          elseif SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(System.IList)):IsAssignableFrom(options:getMapBsonArrayTo()) then
            local list = System.cast(System.IList, System.Activator.CreateInstance(options:getMapBsonArrayTo()))
            for i = 0, bsonArray:getCount() - 1 do
              list:AddObj(MapToDotNetValue1(bsonArray:get(i), options))
            end
            return list
          else
            local message = System.String.Format("A BsonArray can't be mapped to a {0}.", MongoDBBson.BsonUtils.GetFriendlyTypeName(options:getMapBsonArrayTo()))
            System.throw(System.NotSupportedException(message))
          end
        elseif default == 5 --[[BsonType.Binary]] then
          local bsonBinaryData = System.cast(MongoDBBson.BsonBinaryData, bsonValue)
          if bsonBinaryData:getSubType() == 0 --[[BsonBinarySubType.Binary]] or bsonBinaryData:getSubType() == 2 --[[BsonBinarySubType.OldBinary]] and options:getMapOldBinaryToByteArray() then
            return bsonBinaryData:getBytes()
          elseif bsonBinaryData:getSubType() == 3 --[[BsonBinarySubType.UuidLegacy]] or bsonBinaryData:getSubType() == 4 --[[BsonBinarySubType.UuidStandard]] then
            return bsonBinaryData:ToGuid()
          else
            return bsonBinaryData
            -- unmapped
          end
        elseif default == 8 --[[BsonType.Boolean]] then
          return bsonValue:getAsBoolean()
        elseif default == 9 --[[BsonType.DateTime]] then
          return bsonValue:ToUniversalTime()
        elseif default == 19 --[[BsonType.Decimal128]] then
          return bsonValue:getAsDecimal128()
        elseif default == 3 --[[BsonType.Document]] then
          local bsonDocument = System.cast(MongoDBBson.BsonDocument, bsonValue)
          if options:getMapBsonDocumentTo() == System.typeof(MongoDBBson.BsonDocument) then
            return bsonDocument
          elseif SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(IDictionary_2StringObject)):IsAssignableFrom(options:getMapBsonDocumentTo()) then
            local dictionary = System.cast(IDictionary_2StringObject, System.Activator.CreateInstance(options:getMapBsonDocumentTo()))
            for _, element in System.each(bsonDocument:getElements()) do
              local mappedValue = MapToDotNetValue1(element:getValue(), options)
              if dictionary:ContainsKey(element:getName()) then
                repeat
                  local extern = options:getDuplicateNameHandling()
                  if extern == 1 --[[DuplicateNameHandling.Ignore]] then
                    break
                  elseif extern == 2 --[[DuplicateNameHandling.ThrowException]] then
                    local message = System.String.Format("Duplicate element name '{0}'.", element:getName())
                    System.throw(System.ArgumentOutOfRangeException("bsonValue", message))
                  else
                    dictionary:set(element:getName(), mappedValue)
                    break
                  end
                until 1
              else
                dictionary:AddKeyValue(element:getName(), mappedValue)
              end
            end
            return dictionary
          elseif SystemReflection.IntrospectionExtensions.GetTypeInfo(System.typeof(System.IDictionary)):IsAssignableFrom(options:getMapBsonDocumentTo()) then
            local dictionary = System.cast(System.IDictionary, System.Activator.CreateInstance(options:getMapBsonDocumentTo()))
            for _, element in System.each(bsonDocument:getElements()) do
              local mappedValue = MapToDotNetValue1(element:getValue(), options)
              if dictionary:Contains(element:getName()) then
                repeat
                  local extern = options:getDuplicateNameHandling()
                  if extern == 1 --[[DuplicateNameHandling.Ignore]] then
                    break
                  elseif extern == 2 --[[DuplicateNameHandling.ThrowException]] then
                    local message = System.String.Format("Duplicate element name '{0}'.", element:getName())
                    System.throw(System.ArgumentOutOfRangeException("bsonValue", message))
                  else
                    dictionary:set(element:getName(), mappedValue)
                    break
                  end
                until 1
              else
                dictionary:Add(element:getName(), mappedValue)
              end
            end
            return dictionary
          else
            local message = System.String.Format("A BsonDocument can't be mapped to a {0}.", MongoDBBson.BsonUtils.GetFriendlyTypeName(options:getMapBsonArrayTo()))
            System.throw(System.NotSupportedException(message))
          end
        elseif default == 1 --[[BsonType.Double]] then
          return bsonValue:getAsDouble()
        elseif default == 16 --[[BsonType.Int32]] then
          return bsonValue:getAsInt32()
        elseif default == 18 --[[BsonType.Int64]] then
          return bsonValue:getAsInt64()
        elseif default == 10 --[[BsonType.Null]] then
          return nil
        elseif default == 7 --[[BsonType.ObjectId]] then
          return bsonValue:getAsObjectId()
        elseif default == 2 --[[BsonType.String]] then
          return bsonValue:getAsString()
        else
          return bsonValue
        end
      until 1
    end
    -- <summary>
    -- Registers a custom type mapper.
    -- </summary>
    -- <param name="customTypeMapper">A custom type mapper.</param>
    RegisterCustomTypeMapper = function (type, customTypeMapper)
      __customTypeMappers:AddKeyValue(type, customTypeMapper)
    end
    -- <summary>
    -- Tries to map an object to an instance of the closest BsonValue class.
    -- </summary>
    -- <param name="bsonValue">The BsonValue.</param>
    -- <returns>True if the mapping was successfull.</returns>
    TryMapToBsonValue = function (value, bsonValue)
      if value == nil then
        bsonValue = MongoDBBson.BsonNull.getValue()
        return true, bsonValue
      end

      -- also handles subclasses of BsonDocument (like QueryDocument) correctly
      bsonValue = System.as(value, MongoDBBson.BsonValue)
      if MongoDBBson.BsonValue.op_Inequality(bsonValue, nil) then
        return true, bsonValue
      end

      local valueType = value:GetType()
      local valueTypeInfo = SystemReflection.IntrospectionExtensions.GetTypeInfo(valueType)
      if valueTypeInfo:getIsEnum() then
        valueType = System.Enum.GetUnderlyingType(valueType)
        repeat
          local default = System.Type.GetTypeCode(valueType)
          if default == 6 --[[TypeCode.Byte]] then
            value = System.cast(System.Byte, value)
            break
          elseif default == 7 --[[TypeCode.Int16]] then
            value = System.cast(System.Int16, value)
            break
          elseif default == 9 --[[TypeCode.Int32]] then
            value = System.cast(System.Int32, value)
            break
          elseif default == 11 --[[TypeCode.Int64]] then
            value = System.cast(System.Int64, value)
            break
          elseif default == 5 --[[TypeCode.SByte]] then
            value = System.cast(System.SByte, value)
            break
          elseif default == 8 --[[TypeCode.UInt16]] then
            value = System.cast(System.UInt16, value)
            break
          elseif default == 10 --[[TypeCode.UInt32]] then
            value = System.cast(System.UInt32, value)
            break
          elseif default == 12 --[[TypeCode.UInt64]] then
            value = System.toInt64(System.cast(System.UInt64, value))
            break
          end
        until 1
        valueType = value:GetType()
      end

      local conversion
      local default
      default, conversion = __fromMappings:TryGetValue(valueType)
      if default then
        bsonValue = Convert(value, conversion)
        return true, bsonValue
      end

      -- these mappings can't be handled by the mappings table (because of the interfaces)
      if System.is(value, IEnumerable_1KeyValuePairStringObject) then
        bsonValue = System.new(MongoDBBson.BsonDocument, 6, System.cast(IEnumerable_1KeyValuePairStringObject, value))
        return true, bsonValue
      end
      if System.is(value, System.IDictionary) then
        bsonValue = System.new(MongoDBBson.BsonDocument, 8, System.cast(System.IDictionary, value))
        return true, bsonValue
      end

      -- NOTE: the check for IEnumerable must be after the check for IDictionary
      -- because IDictionary implements IEnumerable
      if System.is(value, System.IEnumerable) then
        bsonValue = System.new(MongoDBBson.BsonArray, 10, System.cast(System.IEnumerable, value))
        return true, bsonValue
      end

      local customTypeMapper
      local extern
      extern, customTypeMapper = __customTypeMappers:TryGetValue(valueType)
      if extern then
        local ref
        ref, bsonValue = customTypeMapper:TryMapToBsonValue(value)
        return ref, bsonValue
      end

      bsonValue = nil
      return false, bsonValue
    end
    Convert = function (value, conversion)
      -- note: the ToBoolean conversions use the JavaScript definition of truthiness
      repeat
        local default = conversion
        if default == 0 --[[Conversion.None]] then
          return System.cast(MongoDBBson.BsonValue, value)
        elseif default == 1 --[[Conversion.BoolToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Boolean, value)))
        elseif default == 2 --[[Conversion.BsonJavaScriptToBsonJavaScriptWithScope]] then
          return MongoDBBson.BsonJavaScriptWithScope((System.cast(MongoDBBson.BsonJavaScript, value)):getCode(), MongoDBBson.BsonDocument())
        elseif default == 3 --[[Conversion.BsonMaxKeyToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.getTrue()
        elseif default == 4 --[[Conversion.BsonMinKeyToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.getTrue()
        elseif default == 5 --[[Conversion.BsonNullToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.getFalse()
        elseif default == 6 --[[Conversion.BsonUndefinedToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.getFalse()
        elseif default == 7 --[[Conversion.ByteArrayToBsonBinary]] then
          return MongoDBBson.BsonBinaryData(System.cast(ArrayByte, value))
        elseif default == 8 --[[Conversion.ByteArrayToBsonObjectId]] then
          return MongoDBBson.BsonObjectId(System.new(MongoDBBson.ObjectId, 2, System.cast(ArrayByte, value)))
        elseif default == 9 --[[Conversion.ByteToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Byte, value) ~= 0))
        elseif default == 10 --[[Conversion.ByteToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit(System.cast(System.Byte, value)))
        elseif default == 11 --[[Conversion.ByteToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Byte, value))
        elseif default == 12 --[[Conversion.ByteToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(System.cast(System.Byte, value))
        elseif default == 13 --[[Conversion.ByteToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.Byte, value))
        elseif default == 14 --[[Conversion.CharToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Char, value) ~= 0))
        elseif default == 15 --[[Conversion.CharToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit7(System.cast(System.Char, value)))
        elseif default == 16 --[[Conversion.CharToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Char, value))
        elseif default == 17 --[[Conversion.CharToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(System.cast(System.Char, value))
        elseif default == 18 --[[Conversion.CharToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.Char, value))
        elseif default == 19 --[[Conversion.DateTimeOffsetToBsonDateTime]] then
          return MongoDBBson.BsonDateTime((System.cast(System.DateTimeOffset, value)):getUtcDateTime())
        elseif default == 20 --[[Conversion.DateTimeToBsonDateTime]] then
          return MongoDBBson.BsonDateTime(System.cast(System.DateTime, value))
        elseif default == 21 --[[Conversion.DecimalToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Double, value) ~= 0))
        elseif default == 22 --[[Conversion.DecimalToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit1(System.cast(System.Double, value)))
        elseif default == 23 --[[Conversion.Decimal128ToBsonBoolean]] then
          local d128 = System.cast(MongoDBBson.Decimal128, value)
          return MongoDBBson.BsonBoolean.op_Implicit22((not (MongoDBBson.Decimal128.IsNaN(d128:__clone__()) or MongoDBBson.Decimal128.op_Equality(d128, MongoDBBson.Decimal128.getZero()))))
        elseif default == 24 --[[Conversion.Decimal128ToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(System.cast(MongoDBBson.Decimal128, value))
        elseif default == 25 --[[Conversion.DoubleToBsonBoolean]] then
          local d = System.cast(System.Double, value)
          return MongoDBBson.BsonBoolean.op_Implicit22((not (System.Double.IsNaN(d) or d == 0.0)))
        elseif default == 26 --[[Conversion.DoubleToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Explicit3(System.cast(System.Double, value)))
        elseif default == 27 --[[Conversion.DoubleToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Double, value))
        elseif default == 28 --[[Conversion.GuidToBsonBinary]] then
          return System.new(MongoDBBson.BsonBinaryData, 4, System.cast(System.Guid, value))
        elseif default == 29 --[[Conversion.Int16ToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Int16, value) ~= 0))
        elseif default == 30 --[[Conversion.Int16ToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit5(System.cast(System.Int16, value)))
        elseif default == 31 --[[Conversion.Int16ToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Int16, value))
        elseif default == 32 --[[Conversion.Int16ToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(System.cast(System.Int16, value))
        elseif default == 33 --[[Conversion.Int16ToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.Int16, value))
        elseif default == 34 --[[Conversion.Int32ToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Int32, value) ~= 0))
        elseif default == 35 --[[Conversion.Int32ToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit2(System.cast(System.Int32, value)))
        elseif default == 36 --[[Conversion.Int32ToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Int32, value))
        elseif default == 37 --[[Conversion.Int32ToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(System.cast(System.Int32, value))
        elseif default == 38 --[[Conversion.Int32ToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.Int32, value))
        elseif default == 39 --[[Conversion.Int64ToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Int64, value) ~= 0))
        elseif default == 40 --[[Conversion.Int64ToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit3(System.cast(System.Int64, value)))
        elseif default == 41 --[[Conversion.Int64ToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Int64, value))
        elseif default == 43 --[[Conversion.Int64ToBsonTimestamp]] then
          return MongoDBBson.BsonTimestamp(System.cast(System.Int64, value))
        elseif default == 42 --[[Conversion.Int64ToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.Int64, value))
        elseif default == 44 --[[Conversion.ObjectIdToBsonObjectId]] then
          return MongoDBBson.BsonObjectId(System.cast(MongoDBBson.ObjectId, value))
        elseif default == 45 --[[Conversion.RegexToBsonRegularExpression]] then
          return System.new(MongoDBBson.BsonRegularExpression, 3, System.cast(SystemRegularExpressions.Regex, value))
        elseif default == 46 --[[Conversion.SByteToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.SByte, value) ~= 0))
        elseif default == 47 --[[Conversion.SByteToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit4(System.cast(System.SByte, value)))
        elseif default == 48 --[[Conversion.SByteToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.SByte, value))
        elseif default == 49 --[[Conversion.SByteToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(System.cast(System.SByte, value))
        elseif default == 50 --[[Conversion.SByteToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.SByte, value))
        elseif default == 51 --[[Conversion.SingleToBsonBoolean]] then
          local f = System.cast(System.Single, value)
          return MongoDBBson.BsonBoolean.op_Implicit22((not (System.Single.IsNaN(f) or f == 0.0)))
        elseif default == 52 --[[Conversion.SingleToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Explicit4(System.cast(System.Single, value)))
        elseif default == 53 --[[Conversion.SingleToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Double, System.cast(System.Single, value)))
        elseif default == 54 --[[Conversion.StringToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.String, value) ~= ""))
        elseif default == 55 --[[Conversion.StringToBsonDateTime]] then
          local formats = ArrayString("yyyy-MM-ddK", "yyyy-MM-ddTHH:mm:ssK", "yyyy-MM-ddTHH:mm:ss.FFFFFFFK")
          local dt = System.DateTime.ParseExact(System.cast(System.String, value), formats, nil, 80 --[[DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal]])
          return MongoDBBson.BsonDateTime(dt)
        elseif default == 56 --[[Conversion.StringToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBsonIO.JsonConvert.ToDecimal128(System.cast(System.String, value)))
        elseif default == 57 --[[Conversion.StringToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(MongoDBBsonIO.JsonConvert.ToDouble(System.cast(System.String, value)))
        elseif default == 58 --[[Conversion.StringToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(MongoDBBsonIO.JsonConvert.ToInt32(System.cast(System.String, value)))
        elseif default == 59 --[[Conversion.StringToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(MongoDBBsonIO.JsonConvert.ToInt64(System.cast(System.String, value)))
        elseif default == 60 --[[Conversion.StringToBsonJavaScript]] then
          return MongoDBBson.BsonJavaScript(System.cast(System.String, value))
        elseif default == 61 --[[Conversion.StringToBsonJavaScriptWithScope]] then
          return MongoDBBson.BsonJavaScriptWithScope(System.cast(System.String, value), MongoDBBson.BsonDocument())
        elseif default == 62 --[[Conversion.StringToBsonObjectId]] then
          return MongoDBBson.BsonObjectId(MongoDBBson.ObjectId.Parse(System.cast(System.String, value)))
        elseif default == 63 --[[Conversion.StringToBsonRegularExpression]] then
          return MongoDBBson.BsonRegularExpression(System.cast(System.String, value))
        elseif default == 64 --[[Conversion.StringToBsonString]] then
          return MongoDBBson.BsonString.op_Implicit22(System.cast(System.String, value))
        elseif default == 65 --[[Conversion.StringToBsonSymbol]] then
          return MongoDBBson.BsonSymbolTable.Lookup(System.cast(System.String, value))
        elseif default == 66 --[[Conversion.StringToBsonTimestamp]] then
          return MongoDBBson.BsonTimestamp(MongoDBBsonIO.JsonConvert.ToInt64(System.cast(System.String, value)))
        elseif default == 67 --[[Conversion.UInt16ToBsonBoolean]] then
          return MongoDBBson.BsonValue.op_Implicit((System.cast(System.UInt16, value) ~= 0))
        elseif default == 68 --[[Conversion.UInt16ToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit7(System.cast(System.UInt16, value)))
        elseif default == 69 --[[Conversion.UInt16ToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.UInt16, value))
        elseif default == 70 --[[Conversion.UInt16ToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(System.cast(System.UInt16, value))
        elseif default == 71 --[[Conversion.UInt16ToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.UInt16, value))
        elseif default == 72 --[[Conversion.UInt32ToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.UInt32, value) ~= 0))
        elseif default == 73 --[[Conversion.UInt32ToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit6(System.cast(System.UInt32, value)))
        elseif default == 74 --[[Conversion.UInt32ToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.UInt32, value))
        elseif default == 75 --[[Conversion.UInt32ToBsonInt32]] then
          return MongoDBBson.BsonInt32.op_Implicit22(System.toInt32(System.cast(System.UInt32, value)))
        elseif default == 76 --[[Conversion.UInt32ToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.UInt32, value))
        elseif default == 77 --[[Conversion.UInt64ToBsonBoolean]] then
          return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.UInt64, value) ~= 0))
        elseif default == 78 --[[Conversion.UInt64ToBsonDecimal128]] then
          return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit8(System.cast(System.UInt64, value)))
        elseif default == 79 --[[Conversion.UInt64ToBsonDouble]] then
          return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.UInt64, value))
        elseif default == 80 --[[Conversion.UInt64ToBsonInt64]] then
          return MongoDBBson.BsonInt64.op_Implicit22(System.toInt64(System.cast(System.UInt64, value)))
        elseif default == 81 --[[Conversion.UInt64ToBsonTimestamp]] then
          return MongoDBBson.BsonTimestamp(System.toInt64(System.cast(System.UInt64, value)))
        end
      until 1

      System.throw(System.new(MongoDBBson.BsonInternalException, 2, "Unexpected Conversion."))
    end
    class = {
      MapToBsonValue = MapToBsonValue,
      MapToBsonValue1 = MapToBsonValue1,
      MapToDotNetValue = MapToDotNetValue,
      MapToDotNetValue1 = MapToDotNetValue1,
      RegisterCustomTypeMapper = RegisterCustomTypeMapper,
      TryMapToBsonValue = TryMapToBsonValue,
      static = static
    }
    return class
  end)
end)
