-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON element.
  -- </summary>
  namespace.struct("BsonElement", function (namespace)
    local getName, getValue, op_Equality, op_Inequality, ValidateElementName, Clone, DeepClone, CompareTo, 
    Equals, EqualsObj, GetHashCode, ToString, class, __ctor1__, __ctor2__
    __ctor1__ = function (this)
    end
    -- <summary>
    -- Initializes a new instance of the BsonElement class.
    -- </summary>
    -- <param name="value">The value of the element.</param>
    __ctor2__ = function (this, name, value)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      if MongoDBBson.BsonValue.op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      ValidateElementName(name)
      this._name = name
      this._value = value
    end
    getName = function (this)
      return this._name
    end
    getValue = function (this)
      return this._value
    end
    -- <summary>
    -- Compares two BsonElements.
    -- </summary>
    -- <param name="rhs">The other BsonElement.</param>
    -- <returns>True if the two BsonElements are equal (or both null).</returns>
    op_Equality = function (lhs, rhs)
      return System.Object.EqualsStatic(lhs, rhs)
    end
    -- <summary>
    -- Compares two BsonElements.
    -- </summary>
    -- <param name="rhs">The other BsonElement.</param>
    -- <returns>True if the two BsonElements are not equal (or one is null and the other is not).</returns>
    op_Inequality = function (lhs, rhs)
      return not (op_Equality(lhs, rhs))
    end
    ValidateElementName = function (name)
      if name:IndexOf(0 --[['\0']]) >= 0 then
        System.throw(System.ArgumentException("Element name cannot contain null (0x00) characters"))
      end
    end
    -- <summary>
    -- Creates a shallow clone of the element (see also DeepClone).
    -- </summary>
    Clone = function (this)
      return System.new(class, 2, this._name, this._value)
    end
    -- <summary>
    -- Creates a deep clone of the element (see also Clone).
    -- </summary>
    DeepClone = function (this)
      return System.new(class, 2, this._name, this._value:DeepClone())
    end
    -- <summary>
    -- Compares this BsonElement to another BsonElement.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonElement is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      local r = this._name:CompareTo(other._name)
      if r ~= 0 then
        return r
      end
      return this._value:CompareTo1(other._value)
    end
    -- <summary>
    -- Compares this BsonElement to another BsonElement.
    -- </summary>
    -- <returns>True if the two BsonElement values are equal.</returns>
    Equals = function (this, rhs)
      return this._name == rhs._name and MongoDBBson.BsonValue.op_Equality(this._value, rhs._value)
    end
    -- <summary>
    -- Compares this BsonElement to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonElement and equal to this one.</returns>
    EqualsObj = function (this, obj)
      if obj == nil or obj:GetType() ~= System.typeof(class) then
        return false
      end
      return Equals(this, System.cast(class, obj))
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      -- see Effective Java by Joshua Bloch
      local hash = 17
      hash = 37 * hash + this._name:GetHashCode()
      hash = 37 * hash + this._value:GetHashCode()
      return hash
    end
    -- <summary>
    -- Returns a string representation of the value.
    -- </summary>
    ToString = function (this)
      return System.String.Format("{0}={1}", this._name, this._value)
    end
    class = {
      base = function (out)
        return {
          System.IComparable_1(out.MongoDB.Bson.BsonElement),
          System.IEquatable_1(out.MongoDB.Bson.BsonElement)
        }
      end,
      getName = getName,
      getValue = getValue,
      op_Equality = op_Equality,
      op_Inequality = op_Inequality,
      Clone = Clone,
      DeepClone = DeepClone,
      CompareTo = CompareTo,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToString = ToString,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "_name", 0x1, System.String },
            { "_value", 0x1, out.MongoDB.Bson.BsonValue }
          },
          properties = {
            { "Name", 0x206, System.String, getName },
            { "Value", 0x206, out.MongoDB.Bson.BsonValue, getValue }
          }
        }
      end
    }
    return class
  end)
end)
