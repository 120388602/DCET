-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON document that is not materialized until you start using it.
  -- </summary>
  namespace.class("MaterializedOnDemandBsonDocument", function (namespace)
    local getElementCount, getElements, getIsDisposed, getIsMaterialized, getNames, getRawValues, getValues, get, 
    set, get2, get1, set1, Add, Add1, Add2, Add3, 
    Add4, Add5, Add6, Add7, Add8, Add9, Add10, Add11, 
    AddRange, AddRange1, AddRange2, AddRange3, Clear, Clone, CompareTo, CompareTo1, 
    Contains, ContainsValue, DeepClone, Dispose, EqualsObj, GetElement, GetElement1, GetEnumerator, 
    GetHashCode, GetValue, GetValue1, GetValue2, InsertAt, Merge, Merge1, Remove, 
    RemoveAt, RemoveElement, Set, Set1, SetElement1, SetElement, TryGetElement, TryGetValue, 
    Dispose1, ThrowIfDisposed, EnsureIsMaterialized, __ctor__
    -- <summary>
    -- Initializes a new instance of the <see cref="MaterializedOnDemandBsonDocument"/> class.
    -- </summary>
    __ctor__ = function (this)
      MongoDBBson.BsonDocument.__ctor__[1](this)
    end
    getElementCount = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.getElementCount(this)
    end
    getElements = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.getElements(this)
    end
    getIsDisposed = function (this)
      return this._disposed
    end
    getIsMaterialized = function (this)
      return this._isMaterialized
    end
    getNames = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.getNames(this)
    end
    getRawValues = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.getRawValues(this)
    end
    getValues = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.getValues(this)
    end
    get = function (this, index)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument:get(index)
    end
    set = function (this, index, value)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonDocument:set(index, value)
    end
    get2 = function (this, name, defaultValue)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument:get2(name, defaultValue)
    end
    get1 = function (this, name)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument:get1(name)
    end
    set1 = function (this, name, value)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonDocument:set1(name, value)
    end
    -- <summary>
    -- Adds an element to the document.
    -- </summary>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    Add = function (this, element)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add(this, element:__clone__())
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add1 = function (this, dictionary)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add1(this, dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">Which keys of the hash table to add.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add2 = function (this, dictionary, keys)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add2(this, dictionary, keys)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add3 = function (this, dictionary)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add3(this, dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">Which keys of the hash table to add.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add4 = function (this, dictionary, keys)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add4(this, dictionary, keys)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add5 = function (this, dictionary)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add5(this, dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <param name="keys">Which keys of the hash table to add.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add6 = function (this, dictionary, keys)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add6(this, dictionary, keys)
    end
    -- <summary>
    -- Adds a list of elements to the document.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add7 = function (this, elements)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add7(this, elements)
    end
    -- <summary>
    -- Adds a list of elements to the document.
    -- </summary>
    -- <returns>The document (so method calls can be chained).</returns>
    Add8 = function (this, elements)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add8(this, elements)
    end
    -- <summary>
    -- Creates and adds an element to the document.
    -- </summary>
    -- <param name="value">The value of the element.</param>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    Add9 = function (this, name, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add9(this, name, value)
    end
    -- <summary>
    -- Creates and adds an element to the document, but only if the condition is true.
    -- </summary>
    -- <param name="value">The value of the element.</param>
    -- <param name="condition">Whether to add the element to the document.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add10 = function (this, name, value, condition)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add10(this, name, value, condition)
    end
    -- <summary>
    -- Creates and adds an element to the document, but only if the condition is true.
    -- If the condition is false the value factory is not called at all.
    -- </summary>
    -- <param name="valueFactory">A delegate called to compute the value of the element if condition is true.</param>
    -- <param name="condition">Whether to add the element to the document.</param>
    -- <returns>The document (so method calls can be chained).</returns>
    Add11 = function (this, name, valueFactory, condition)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Add11(this, name, valueFactory, condition)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    AddRange = function (this, dictionary)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.AddRange(this, dictionary)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    AddRange1 = function (this, dictionary)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.AddRange1(this, dictionary)
    end
    -- <summary>
    -- Adds a list of elements to the document.
    -- </summary>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    AddRange2 = function (this, elements)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.AddRange2(this, elements)
    end
    -- <summary>
    -- Adds elements to the document from a dictionary of key/value pairs.
    -- </summary>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    AddRange3 = function (this, dictionary)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.AddRange3(this, dictionary)
    end
    -- <summary>
    -- Clears the document (removes all elements).
    -- </summary>
    Clear = function (this)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonDocument.Clear(this)
    end
    -- <summary>
    -- Creates a shallow clone of the document (see also DeepClone).
    -- </summary>
    -- A shallow clone of the document.
    -- </returns>
    Clone = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Clone(this)
    end
    -- <summary>
    -- Compares this document to another document.
    -- </summary>
    -- <returns>
    -- A 32-bit signed integer that indicates whether this document is less than, equal to, or greather than the other.
    -- </returns>
    CompareTo = function (this, other)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.CompareTo(this, other)
    end
    -- <summary>
    -- Compares the BsonDocument to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonDocument is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.CompareTo1(this, other)
    end
    -- <summary>
    -- Tests whether the document contains an element with the specified name.
    -- </summary>
    -- <returns>
    -- True if the document contains an element with the specified name.
    -- </returns>
    Contains = function (this, name)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Contains(this, name)
    end
    -- <summary>
    -- Tests whether the document contains an element with the specified value.
    -- </summary>
    -- <returns>
    -- True if the document contains an element with the specified value.
    -- </returns>
    ContainsValue = function (this, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.ContainsValue(this, value)
    end
    -- <summary>
    -- Creates a deep clone of the document (see also Clone).
    -- </summary>
    -- A deep clone of the document.
    -- </returns>
    DeepClone = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.DeepClone(this)
    end
    -- <summary>
    -- Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    -- </summary>
    Dispose = function (this)
      this:Dispose1(true)
      System.GC.SuppressFinalize(this)
    end
    -- <summary>
    -- Determines whether the specified <see cref="System.Object" />, is equal to this instance.
    -- </summary>
    -- <returns>
    -- <c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.
    -- </returns>
    EqualsObj = function (this, obj)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.EqualsObj(this, obj)
    end
    -- <summary>
    -- Gets an element of this document.
    -- </summary>
    -- <returns>
    -- The element.
    -- </returns>
    GetElement = function (this, index)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.GetElement(this, index)
    end
    -- <summary>
    -- Gets an element of this document.
    -- </summary>
    -- <returns>
    -- A BsonElement.
    -- </returns>
    GetElement1 = function (this, name)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.GetElement1(this, name)
    end
    -- <summary>
    -- Gets an enumerator that can be used to enumerate the elements of this document.
    -- </summary>
    -- An enumerator.
    -- </returns>
    GetEnumerator = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.GetEnumerator(this)
    end
    -- <summary>
    -- Returns a hash code for this instance.
    -- </summary>
    -- A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
    -- </returns>
    GetHashCode = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.GetHashCode(this)
    end
    -- <summary>
    -- Gets the value of an element.
    -- </summary>
    -- <returns>
    -- The value of the element.
    -- </returns>
    GetValue = function (this, index)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.GetValue(this, index)
    end
    -- <summary>
    -- Gets the value of an element.
    -- </summary>
    -- <returns>
    -- The value of the element.
    -- </returns>
    GetValue1 = function (this, name)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.GetValue1(this, name)
    end
    -- <summary>
    -- Gets the value of an element or a default value if the element is not found.
    -- </summary>
    -- <param name="defaultValue">The default value returned if the element is not found.</param>
    -- <returns>
    -- The value of the element or the default value if the element is not found.
    -- </returns>
    GetValue2 = function (this, name, defaultValue)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.GetValue2(this, name, defaultValue)
    end
    -- <summary>
    -- Inserts a new element at a specified position.
    -- </summary>
    -- <param name="element">The element.</param>
    InsertAt = function (this, index, element)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonDocument.InsertAt(this, index, element:__clone__())
    end
    -- <summary>
    -- Merges another document into this one. Existing elements are not overwritten.
    -- </summary>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    Merge = function (this, document)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Merge(this, document)
    end
    -- <summary>
    -- Merges another document into this one, specifying whether existing elements are overwritten.
    -- </summary>
    -- <param name="overwriteExistingElements">Whether to overwrite existing elements.</param>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    Merge1 = function (this, document, overwriteExistingElements)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Merge1(this, document, overwriteExistingElements)
    end
    -- <summary>
    -- Removes an element from this document (if duplicate element names are allowed
    -- then all elements with this name will be removed).
    -- </summary>
    Remove = function (this, name)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonDocument.Remove(this, name)
    end
    -- <summary>
    -- Removes an element from this document.
    -- </summary>
    RemoveAt = function (this, index)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonDocument.RemoveAt(this, index)
    end
    -- <summary>
    -- Removes an element from this document.
    -- </summary>
    RemoveElement = function (this, element)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonDocument.RemoveElement(this, element:__clone__())
    end
    -- <summary>
    -- Sets the value of an element.
    -- </summary>
    -- <param name="value">The new value.</param>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    Set = function (this, index, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Set(this, index, value)
    end
    -- <summary>
    -- Sets the value of an element (an element will be added if no element with this name is found).
    -- </summary>
    -- <param name="value">The new value.</param>
    -- <returns>
    -- The document (so method calls can be chained).
    -- </returns>
    Set1 = function (this, name, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.Set1(this, name, value)
    end
    -- <summary>
    -- Sets an element of the document (replaces any existing element with the same name or adds a new element if an element with the same name is not found).
    -- </summary>
    -- <returns>
    -- The document.
    -- </returns>
    SetElement1 = function (this, element)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.SetElement1(this, element:__clone__())
    end
    -- <summary>
    -- Sets an element of the document (replacing the existing element at that position).
    -- </summary>
    -- <param name="element">The new element.</param>
    -- <returns>
    -- The document.
    -- </returns>
    SetElement = function (this, index, element)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonDocument.SetElement(this, index, element:__clone__())
    end
    -- <summary>
    -- Tries to get an element of this document.
    -- </summary>
    -- <param name="value">The element.</param>
    -- <returns>
    -- True if an element with that name was found.
    -- </returns>
    TryGetElement = function (this, name, value)
      EnsureIsMaterialized(this)
      local default
      default, value = MongoDBBson.BsonDocument.TryGetElement(this, name)
      return default, value
    end
    -- <summary>
    -- Tries to get the value of an element of this document.
    -- </summary>
    -- <param name="value">The value of the element.</param>
    -- <returns>
    -- True if an element with that name was found.
    -- </returns>
    TryGetValue = function (this, name, value)
      EnsureIsMaterialized(this)
      local default
      default, value = MongoDBBson.BsonDocument.TryGetValue(this, name)
      return default, value
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      this._disposed = true
    end
    -- <summary>
    -- Throws if disposed.
    -- </summary>
    ThrowIfDisposed = function (this)
      if this._disposed then
        System.throw(System.ObjectDisposedException(this:GetType():getName()))
      end
    end
    EnsureIsMaterialized = function (this)
      ThrowIfDisposed(this)
      if not this._isMaterialized then
        local elements = this:Materialize()
        System.try(function ()
          this._isMaterialized = true
          MongoDBBson.BsonDocument.AddRange2(this, elements)
          this:MaterializeCompleted()
        end, function (default)
          MongoDBBson.BsonDocument.Clear(this)
          this._isMaterialized = false
          System.throw(default)
        end)
      end
    end
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonDocument,
          System.IDisposable
        }
      end,
      _disposed = false,
      _isMaterialized = false,
      getElementCount = getElementCount,
      getElements = getElements,
      getIsDisposed = getIsDisposed,
      getIsMaterialized = getIsMaterialized,
      getNames = getNames,
      getRawValues = getRawValues,
      getValues = getValues,
      get = get,
      set = set,
      get2 = get2,
      get1 = get1,
      set1 = set1,
      Add = Add,
      Add1 = Add1,
      Add2 = Add2,
      Add3 = Add3,
      Add4 = Add4,
      Add5 = Add5,
      Add6 = Add6,
      Add7 = Add7,
      Add8 = Add8,
      Add9 = Add9,
      Add10 = Add10,
      Add11 = Add11,
      AddRange = AddRange,
      AddRange1 = AddRange1,
      AddRange2 = AddRange2,
      AddRange3 = AddRange3,
      Clear = Clear,
      Clone = Clone,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Contains = Contains,
      ContainsValue = ContainsValue,
      DeepClone = DeepClone,
      Dispose = Dispose,
      EqualsObj = EqualsObj,
      GetElement = GetElement,
      GetElement1 = GetElement1,
      GetEnumerator = GetEnumerator,
      GetHashCode = GetHashCode,
      GetValue = GetValue,
      GetValue1 = GetValue1,
      GetValue2 = GetValue2,
      InsertAt = InsertAt,
      Merge = Merge,
      Merge1 = Merge1,
      Remove = Remove,
      RemoveAt = RemoveAt,
      RemoveElement = RemoveElement,
      Set = Set,
      Set1 = Set1,
      SetElement1 = SetElement1,
      SetElement = SetElement,
      TryGetElement = TryGetElement,
      TryGetValue = TryGetValue,
      Dispose1 = Dispose1,
      ThrowIfDisposed = ThrowIfDisposed,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "RawValues", 0x206, System.IEnumerable_1(System.Object), getRawValues, System.ObsoleteAttribute("Use Values instead.") }
          },
          methods = {
            { "Add", 0x186, Add1, System.Dictionary(System.String, System.Object), out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x286, Add2, System.Dictionary(System.String, System.Object), System.IEnumerable_1(System.String), out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") },
            { "Add", 0x186, Add3, System.IDictionary_2(System.String, System.Object), out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x286, Add4, System.IDictionary_2(System.String, System.Object), System.IEnumerable_1(System.String), out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") },
            { "Add", 0x186, Add5, System.IDictionary, out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x286, Add6, System.IDictionary, System.IEnumerable, out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") },
            { "Add", 0x186, Add7, System.IEnumerable_1(out.MongoDB.Bson.BsonElement), out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange instead.") },
            { "Add", 0x186, Add8, System.Array(out.MongoDB.Bson.BsonElement), out.MongoDB.Bson.BsonDocument, System.ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.") }
          },
          class = { 0x6, System.new(out.MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute, 2, System.typeof(MongoDBBson.MaterializedOnDemandBsonDocumentSerializer)) }
        }
      end
    }
  end)

  namespace.class("MaterializedOnDemandBsonDocumentSerializer", function (namespace)
    return {
      base = function (out)
        return {
          out.MongoDB.Bson.Serialization.Serializers.AbstractClassSerializer_1(out.MongoDB.Bson.MaterializedOnDemandBsonDocument)
        }
      end
    }
  end)
end)
