-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON array that is not materialized until you start using it.
  -- </summary>
  namespace.class("MaterializedOnDemandBsonArray", function (namespace)
    local getCapacity, setCapacity, getCount, getIsDisposed, getIsMaterialized, getRawValues, getValues, get, 
    set, Add1, AddRange, AddRange1, AddRange2, AddRange3, AddRange4, AddRange5, 
    AddRange6, AddRange7, AddRange8, Clear, Clone, CompareTo, CompareTo1, Contains, 
    CopyTo, CopyTo1, DeepClone, Dispose, EqualsObj, GetEnumerator, GetHashCode, IndexOf, 
    IndexOf1, IndexOf2, Insert, Remove, RemoveAt, ToArray, ToList, ToString, 
    Dispose1, ThrowIfDisposed, EnsureIsMaterialized, class, __ctor__
    namespace.class("MaterializedOnDemandBsonArraySerializer", function (namespace)
      return {
        base = function (out)
          return {
            out.MongoDB.Bson.Serialization.Serializers.AbstractClassSerializer_1(out.MongoDB.Bson.MaterializedOnDemandBsonArray)
          }
        end
      }
    end)
    -- <summary>
    -- Initializes a new instance of the <see cref="MaterializedOnDemandBsonArray"/> class.
    -- </summary>
    __ctor__ = function (this)
      MongoDBBson.BsonArray.__ctor__[1](this)
    end
    getCapacity = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.getCapacity(this)
    end
    setCapacity = function (this, value)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonArray.setCapacity(this, value)
    end
    getCount = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.getCount(this)
    end
    getIsDisposed = function (this)
      return this._disposed
    end
    getIsMaterialized = function (this)
      return this._isMaterialized
    end
    getRawValues = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.getRawValues(this)
    end
    getValues = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.getValues(this)
    end
    get = function (this, index)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray:get(index)
    end
    set = function (this, index, value)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonArray:set(index, value)
    end
    -- <summary>
    -- Adds an element to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    Add1 = function (this, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.Add1(this, value)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange1 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange1(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange2 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange2(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange3 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange3(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange4 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange4(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange5 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange5(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange6 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange6(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange7 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange7(this, values)
    end
    -- <summary>
    -- Adds multiple elements to the array.
    -- </summary>
    -- <returns>The array (so method calls can be chained).</returns>
    AddRange8 = function (this, values)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.AddRange8(this, values)
    end
    -- <summary>
    -- Clears the array.
    -- </summary>
    Clear = function (this)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonArray.Clear(this)
    end
    -- <summary>
    -- Creates a shallow clone of the array (see also DeepClone).
    -- </summary>
    -- A shallow clone of the array.
    -- </returns>
    Clone = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.Clone(this)
    end
    -- <summary>
    -- Compares the array to another array.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this array is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.CompareTo(this, other)
    end
    -- <summary>
    -- Compares the array to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this array is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.CompareTo1(this, other)
    end
    -- <summary>
    -- Tests whether the array contains a value.
    -- </summary>
    -- <returns>True if the array contains the value.</returns>
    Contains = function (this, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.Contains(this, value)
    end
    -- <summary>
    -- Copies elements from this array to another array.
    -- </summary>
    -- <param name="arrayIndex">The zero based index of the other array at which to start copying.</param>
    CopyTo = function (this, array, arrayIndex)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonArray.CopyTo(this, array, arrayIndex)
    end
    -- <summary>
    -- Copies elements from this array to another array as raw values (see BsonValue.RawValue).
    -- </summary>
    -- <param name="arrayIndex">The zero based index of the other array at which to start copying.</param>
    CopyTo1 = function (this, array, arrayIndex)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonArray.CopyTo1(this, array, arrayIndex)
    end
    -- <summary>
    -- Creates a deep clone of the array (see also Clone).
    -- </summary>
    -- A deep clone of the array.
    -- </returns>
    DeepClone = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.DeepClone(this)
    end
    -- <summary>
    -- Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    -- </summary>
    Dispose = function (this)
      this:Dispose1(true)
      System.GC.SuppressFinalize(this)
    end
    -- <summary>
    -- Determines whether the specified <see cref="System.Object" />, is equal to this instance.
    -- </summary>
    -- <returns>
    -- <c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.
    -- </returns>
    EqualsObj = function (this, obj)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.EqualsObj(this, obj)
    end
    -- <summary>
    -- Gets an enumerator that can enumerate the elements of the array.
    -- </summary>
    GetEnumerator = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.GetEnumerator(this)
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.GetHashCode(this)
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf = function (this, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.IndexOf(this, value)
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <param name="index">The zero based index at which to start the search.</param>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf1 = function (this, value, index)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.IndexOf1(this, value, index)
    end
    -- <summary>
    -- Gets the index of a value in the array.
    -- </summary>
    -- <param name="index">The zero based index at which to start the search.</param>
    -- <param name="count">The number of elements to search.</param>
    -- <returns>The zero based index of the value (or -1 if not found).</returns>
    IndexOf2 = function (this, value, index, count)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.IndexOf2(this, value, index, count)
    end
    -- <summary>
    -- Inserts a new value into the array.
    -- </summary>
    -- <param name="value">The new value.</param>
    Insert = function (this, index, value)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonArray.Insert(this, index, value)
    end
    -- <summary>
    -- Removes the first occurrence of a value from the array.
    -- </summary>
    -- <returns>True if the value was removed.</returns>
    Remove = function (this, value)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.Remove(this, value)
    end
    -- <summary>
    -- Removes an element from the array.
    -- </summary>
    RemoveAt = function (this, index)
      EnsureIsMaterialized(this)
      MongoDBBson.BsonArray.RemoveAt(this, index)
    end
    -- <summary>
    -- Converts the BsonArray to an array of BsonValues.
    -- </summary>
    ToArray = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.ToArray(this)
    end
    -- <summary>
    -- Converts the BsonArray to a list of BsonValues.
    -- </summary>
    ToList = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.ToList(this)
    end
    -- <summary>
    -- Returns a string representation of the array.
    -- </summary>
    ToString = function (this)
      EnsureIsMaterialized(this)
      return MongoDBBson.BsonArray.ToString(this)
    end
    -- <summary>
    -- Releases unmanaged and - optionally - managed resources.
    -- </summary>
    Dispose1 = function (this, disposing)
      this._disposed = true
    end
    -- <summary>
    -- Throws if disposed.
    -- </summary>
    ThrowIfDisposed = function (this)
      if this._disposed then
        System.throw(System.ObjectDisposedException(this:GetType():getName()))
      end
    end
    EnsureIsMaterialized = function (this)
      ThrowIfDisposed(this)
      if not this._isMaterialized then
        local values = this:Materialize()
        System.try(function ()
          this._isMaterialized = true
          MongoDBBson.BsonArray.AddRange1(this, values)
          this:MaterializeCompleted()
        end, function (default)
          MongoDBBson.BsonArray.Clear(this)
          this._isMaterialized = false
          System.throw(default)
        end)
      end
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonArray,
          System.IDisposable
        }
      end,
      _disposed = false,
      _isMaterialized = false,
      getCapacity = getCapacity,
      setCapacity = setCapacity,
      getCount = getCount,
      getIsDisposed = getIsDisposed,
      getIsMaterialized = getIsMaterialized,
      getRawValues = getRawValues,
      getValues = getValues,
      get = get,
      set = set,
      Add1 = Add1,
      AddRange = AddRange,
      AddRange1 = AddRange1,
      AddRange2 = AddRange2,
      AddRange3 = AddRange3,
      AddRange4 = AddRange4,
      AddRange5 = AddRange5,
      AddRange6 = AddRange6,
      AddRange7 = AddRange7,
      AddRange8 = AddRange8,
      Clear = Clear,
      Clone = Clone,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Contains = Contains,
      CopyTo = CopyTo,
      CopyTo1 = CopyTo1,
      DeepClone = DeepClone,
      Dispose = Dispose,
      EqualsObj = EqualsObj,
      GetEnumerator = GetEnumerator,
      GetHashCode = GetHashCode,
      IndexOf = IndexOf,
      IndexOf1 = IndexOf1,
      IndexOf2 = IndexOf2,
      Insert = Insert,
      Remove = Remove,
      RemoveAt = RemoveAt,
      ToArray = ToArray,
      ToList = ToList,
      ToString = ToString,
      Dispose1 = Dispose1,
      ThrowIfDisposed = ThrowIfDisposed,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "RawValues", 0x206, System.IEnumerable_1(System.Object), getRawValues, System.ObsoleteAttribute("Use ToArray to ToList instead.") }
          },
          methods = {
            { "CopyTo", 0x206, CopyTo1, System.Array(System.Object), System.Int32, System.ObsoleteAttribute("Use ToArray or ToList instead.") }
          },
          class = { 0x6, System.new(out.MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute, 2, System.typeof(class.MaterializedOnDemandBsonArraySerializer)) }
        }
      end
    }
    return class
  end)
end)
