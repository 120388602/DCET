-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON JavaScript value.
  -- </summary>
  namespace.class("BsonJavaScript", function (namespace)
    local getBsonType, getCode, op_Inequality1, op_Equality1, op_Implicit22, Create1, CompareTo2, CompareTo1, 
    Equals2, EqualsObj, GetHashCode, ToString, class, __ctor__
    -- <summary>
    -- Initializes a new instance of the BsonJavaScript class.
    -- </summary>
    __ctor__ = function (this, code)
      MongoDBBson.BsonValue.__ctor__(this)
      if code == nil then
        System.throw(System.ArgumentNullException("code"))
      end
      this._code = code
    end
    getBsonType = function (this)
      return 13 --[[BsonType.JavaScript]]
    end
    getCode = function (this)
      return this._code
    end
    -- <summary>
    -- Compares two BsonJavaScript values.
    -- </summary>
    -- <param name="rhs">The other BsonJavaScript.</param>
    -- <returns>True if the two BsonJavaScript values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonJavaScript values.
    -- </summary>
    -- <param name="rhs">The other BsonJavaScript.</param>
    -- <returns>True if the two BsonJavaScript values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      return Equals2(lhs, rhs)
    end
    -- <summary>
    -- Converts a string to a BsonJavaScript.
    -- </summary>
    -- <returns>A BsonJavaScript.</returns>
    op_Implicit22 = function (code)
      return class(code)
    end
    -- <summary>
    -- Creates a new BsonJavaScript.
    -- </summary>
    -- <returns>A BsonJavaScript or null.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 13 --[[BsonType.JavaScript]]))
    end
    -- <summary>
    -- Compares this BsonJavaScript to another BsonJavaScript.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonJavaScript is less than, equal to, or greather than the other.</returns>
    CompareTo2 = function (this, other)
      if op_Equality1(other, nil) then
        return 1
      end
      return this._code:CompareTo(other._code)
    end
    -- <summary>
    -- Compares the BsonJavaScript to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonJavaScript is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherJavaScript = System.as(other, class)
      if op_Inequality1(otherJavaScript, nil) then
        return CompareTo2(this, otherJavaScript)
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Compares this BsonJavaScript to another BsonJavaScript.
    -- </summary>
    -- <returns>True if the two BsonJavaScript values are equal.</returns>
    Equals2 = function (this, rhs)
      if System.Object.ReferenceEquals(rhs) or this:GetType() ~= rhs:GetType() then
        return false
      end
      return this._code == rhs._code
    end
    -- <summary>
    -- Compares this BsonJavaScript to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonJavaScript and equal to this one.</returns>
    EqualsObj = function (this, obj)
      return Equals2(this, System.as(obj, class))
      -- works even if obj is null or of a different type
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      -- see Effective Java by Joshua Bloch
      local hash = 17
      hash = 37 * hash + this:getBsonType():GetHashCode()
      hash = 37 * hash + this._code:GetHashCode()
      return hash
    end
    -- <summary>
    -- Returns a string representation of the value.
    -- </summary>
    ToString = function (this)
      return System.String.Format("new BsonJavaScript(\"{0}\")", this._code)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonJavaScript),
          System.IEquatable_1(out.MongoDB.Bson.BsonJavaScript)
        }
      end,
      getBsonType = getBsonType,
      getCode = getCode,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      op_Implicit22 = op_Implicit22,
      Create1 = Create1,
      CompareTo2 = CompareTo2,
      CompareTo1 = CompareTo1,
      Equals2 = Equals2,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToString = ToString,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "_code", 0x1, System.String }
          },
          properties = {
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "Code", 0x206, System.String, getCode }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
