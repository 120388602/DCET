-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- TODO: [Serializable] // must have custom deserialization to do SymbolTable lookup
  -- <summary>
  -- Represents a BSON symbol value.
  -- </summary>
  namespace.class("BsonSymbol", function (namespace)
    local getBsonType, getName, op_Implicit22, op_Inequality1, op_Equality1, Create1, CompareTo, CompareTo1, 
    Equals, EqualsObj, GetHashCode, ToString, class, __ctor__
    __ctor__ = function (this, name)
      MongoDBBson.BsonValue.__ctor__(this)
      if name == nil then
        System.throw(System.ArgumentNullException("name"))
      end
      this._name = name
    end
    getBsonType = function (this)
      return 14 --[[BsonType.Symbol]]
    end
    getName = function (this)
      return this._name
    end
    -- <summary>
    -- Converts a string to a BsonSymbol.
    -- </summary>
    -- <returns>A BsonSymbol.</returns>
    op_Implicit22 = function (name)
      return MongoDBBson.BsonSymbolTable.Lookup(name)
    end
    -- <summary>
    -- Compares two BsonSymbol values.
    -- </summary>
    -- <param name="rhs">The other BsonSymbol.</param>
    -- <returns>True if the two BsonSymbol values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonSymbol values.
    -- </summary>
    -- <param name="rhs">The other BsonSymbol.</param>
    -- <returns>True if the two BsonSymbol values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      return Equals(lhs, rhs)
    end
    -- <summary>
    -- Creates a new BsonSymbol.
    -- </summary>
    -- <returns>A BsonSymbol or null.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 14 --[[BsonType.Symbol]]))
    end
    -- <summary>
    -- Compares this BsonSymbol to another BsonSymbol.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonSymbol is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      if op_Equality1(other, nil) then
        return 1
      end
      return this._name:CompareTo(other._name)
    end
    -- <summary>
    -- Compares the BsonSymbol to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonSymbol is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherSymbol = System.as(other, class)
      if op_Inequality1(otherSymbol, nil) then
        return this._name:CompareTo(getName(otherSymbol))
      end
      local otherString = System.as(other, MongoDBBson.BsonString)
      if MongoDBBson.BsonString.op_Inequality1(otherString, nil) then
        return this._name:CompareTo(otherString:getValue())
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Compares this BsonSymbol to another BsonSymbol.
    -- </summary>
    -- <returns>True if the two BsonSymbol values are equal.</returns>
    Equals = function (this, rhs)
      if System.Object.ReferenceEquals(rhs) or this:GetType() ~= rhs:GetType() then
        return false
      end
      return System.Object.ReferenceEquals(this, rhs)
      -- symbols are guaranteed to be unique
    end
    -- <summary>
    -- Compares this BsonSymbol to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonSymbol and equal to this one.</returns>
    EqualsObj = function (this, obj)
      return Equals(this, System.as(obj, class))
      -- works even if obj is null or of a different type
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      return this._name:GetHashCode()
    end
    -- <summary>
    -- Returns a string representation of the value.
    -- </summary>
    ToString = function (this)
      return this._name
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonSymbol),
          System.IEquatable_1(out.MongoDB.Bson.BsonSymbol)
        }
      end,
      getBsonType = getBsonType,
      getName = getName,
      op_Implicit22 = op_Implicit22,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      Create1 = Create1,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToString = ToString,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
