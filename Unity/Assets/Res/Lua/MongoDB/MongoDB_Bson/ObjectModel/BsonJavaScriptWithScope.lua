-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local MongoDBBsonSerialization
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  MongoDBBsonSerialization = MongoDB.Bson.Serialization
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON JavaScript value with a scope.
  -- </summary>
  namespace.class("BsonJavaScriptWithScope", function (namespace)
    local op_Inequality2, op_Equality2, getBsonType, getScope, Create2, Clone, DeepClone, CompareTo, 
    CompareTo1, Equals, EqualsObj, GetHashCode, ToString, class, __ctor__
    -- <summary>
    -- Initializes a new instance of the BsonJavaScriptWithScope class.
    -- </summary>
    -- <param name="scope">A scope (a set of variables with values).</param>
    __ctor__ = function (this, code, scope)
      MongoDBBson.BsonJavaScript.__ctor__(this, code)
      if MongoDBBson.BsonDocument.op_Equality1(scope, nil) then
        System.throw(System.ArgumentNullException("scope"))
      end
      this._scope = scope
    end
    -- <summary>
    -- Compares two BsonJavaScriptWithScope values.
    -- </summary>
    -- <param name="rhs">The other BsonJavaScriptWithScope.</param>
    -- <returns>True if the two BsonJavaScriptWithScope values are not equal according to ==.</returns>
    op_Inequality2 = function (lhs, rhs)
      return not (op_Equality2(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonJavaScriptWithScope values.
    -- </summary>
    -- <param name="rhs">The other BsonJavaScriptWithScope.</param>
    -- <returns>True if the two BsonJavaScriptWithScope values are equal according to ==.</returns>
    op_Equality2 = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      return Equals(lhs, rhs)
    end
    getBsonType = function (this)
      return 15 --[[BsonType.JavaScriptWithScope]]
    end
    getScope = function (this)
      return this._scope
    end
    -- <summary>
    -- Creates a new BsonJavaScriptWithScope.
    -- </summary>
    -- <returns>A BsonJavaScriptWithScope or null.</returns>
    Create2 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 15 --[[BsonType.JavaScriptWithScope]]))
    end
    -- <summary>
    -- Creates a shallow clone of the BsonJavaScriptWithScope (see also DeepClone).
    -- </summary>
    Clone = function (this)
      return class(this:getCode(), System.cast(MongoDBBson.BsonDocument, this._scope:Clone()))
    end
    -- <summary>
    -- Creates a deep clone of the BsonJavaScriptWithScope (see also Clone).
    -- </summary>
    DeepClone = function (this)
      local clone = class(this:getCode(), MongoDBBson.BsonDocument())
      for _, element in System.each(this._scope) do
        clone._scope:Add(element:DeepClone())
      end
      return clone
    end
    -- <summary>
    -- Compares this BsonJavaScriptWithScope to another BsonJavaScriptWithScope.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonJavaScriptWithScope is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      if op_Equality2(other, nil) then
        return 1
      end
      local r = this:getCode():CompareTo(other:getCode())
      if r ~= 0 then
        return r
      end
      return this._scope:CompareTo(other._scope)
    end
    -- <summary>
    -- Compares the BsonJavaScriptWithScope to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonJavaScriptWithScope is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherJavaScriptWithScope = System.as(other, class)
      if op_Inequality2(otherJavaScriptWithScope, nil) then
        return CompareTo(this, otherJavaScriptWithScope)
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Compares this BsonJavaScriptWithScope to another BsonJavaScriptWithScope.
    -- </summary>
    -- <returns>True if the two BsonJavaScriptWithScope values are equal.</returns>
    Equals = function (this, rhs)
      if System.Object.ReferenceEquals(rhs) or this:GetType() ~= rhs:GetType() then
        return false
      end
      return this:getCode() == rhs:getCode() and MongoDBBson.BsonDocument.op_Equality1(this._scope, rhs._scope)
    end
    -- <summary>
    -- Compares this BsonJavaScriptWithScope to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonJavaScriptWithScope and equal to this one.</returns>
    EqualsObj = function (this, obj)
      return Equals(this, System.as(obj, class))
      -- works even if obj is null or of a different type
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      -- see Effective Java by Joshua Bloch
      local hash = 17
      hash = 37 * hash + MongoDBBson.BsonJavaScript.GetHashCode(this)
      hash = 37 * hash + this._scope:GetHashCode()
      return hash
    end
    -- <summary>
    -- Returns a string representation of the value.
    -- </summary>
    ToString = function (this)
      return System.String.Format("new BsonJavaScript(\"{0}\", {1})", this:getCode(), MongoDBBson.BsonExtensionMethods.ToJson(this._scope, nil, nil, nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs), MongoDBBson.BsonDocument))
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonJavaScript,
          System.IComparable_1(out.MongoDB.Bson.BsonJavaScriptWithScope),
          System.IEquatable_1(out.MongoDB.Bson.BsonJavaScriptWithScope)
        }
      end,
      op_Inequality2 = op_Inequality2,
      op_Equality2 = op_Equality2,
      getBsonType = getBsonType,
      getScope = getScope,
      Create2 = Create2,
      Clone = Clone,
      DeepClone = DeepClone,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToString = ToString,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "_scope", 0x1, out.MongoDB.Bson.BsonDocument }
          },
          properties = {
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "Scope", 0x206, out.MongoDB.Bson.BsonDocument, getScope }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
