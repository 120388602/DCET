-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local MongoDBBson
local DictInt32Int32
System.import(function (out)
  MongoDBBson = MongoDB.Bson
  DictInt32Int32 = System.Dictionary(System.Int32, System.Int32)
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON value (this is an abstract class, see the various subclasses).
  -- </summary>
  namespace.class("BsonValue", function (namespace)
    local __bsonTypeSortOrder, getAsBoolean, getAsBsonArray, getAsBsonBinaryData, getAsBsonDateTime, getAsBsonDocument, getAsBsonJavaScript, getAsBsonJavaScriptWithScope, 
    getAsBsonMaxKey, getAsBsonMinKey, getAsBsonNull, getAsBsonRegularExpression, getAsBsonSymbol, getAsBsonTimestamp, getAsBsonUndefined, getAsBsonValue, 
    getAsByteArray, getAsDateTime, getAsDecimal, getAsDecimal128, getAsDouble, getAsGuid, getAsInt32, getAsLocalTime, 
    getAsInt64, getAsNullableBoolean, getAsNullableDateTime, getAsNullableDecimal, getAsNullableDecimal128, getAsNullableDouble, getAsNullableGuid, getAsNullableInt32, 
    getAsNullableInt64, getAsNullableObjectId, getAsObjectId, getAsRegex, getAsString, getAsUniversalTime, getIsBoolean, getIsBsonArray, 
    getIsBsonBinaryData, getIsBsonDateTime, getIsBsonDocument, getIsBsonJavaScript, getIsBsonJavaScriptWithScope, getIsBsonMaxKey, getIsBsonMinKey, getIsBsonNull, 
    getIsBsonRegularExpression, getIsBsonSymbol, getIsBsonTimestamp, getIsBsonUndefined, getIsDateTime, getIsDecimal128, getIsDouble, getIsGuid, 
    getIsInt32, getIsInt64, getIsNumeric, getIsObjectId, getIsString, getIsValidDateTime, getRawValue, op_Explicit, 
    op_Explicit1, op_Implicit, op_Implicit1, op_Implicit2, op_Implicit3, op_Implicit4, op_Implicit5, op_Implicit6, 
    op_Implicit7, op_Implicit8, op_Implicit9, op_Implicit10, op_Implicit11, op_Implicit12, op_Implicit13, op_Implicit14, 
    op_Implicit15, op_Implicit16, op_Implicit17, op_Implicit18, op_Implicit19, op_Implicit20, op_Implicit21, op_Explicit2, 
    op_Explicit3, op_Explicit4, op_Explicit5, op_Explicit6, op_Explicit7, op_Explicit8, op_Explicit9, op_Explicit10, 
    op_Explicit11, op_Explicit12, op_Explicit13, op_Explicit14, op_Explicit15, op_Explicit16, op_Explicit17, op_Explicit18, 
    op_Explicit19, op_Explicit20, op_LessThan, op_LessThanOrEqual, op_Inequality, op_Equality, op_GreaterThan, op_GreaterThanOrEqual, 
    get, set, get1, set1, Create, Clone, CompareTypeTo, DeepClone, 
    Equals1, ToBoolean1, ToDecimal1, ToDecimal128, ToDouble1, ToInt321, ToInt641, ToLocalTime, 
    ToNullableLocalTime, ToNullableUniversalTime, ToUniversalTime, IConvertibleGetTypeCodeImplementation, IConvertibleToBooleanImplementation, IConvertibleToByteImplementation, IConvertibleToCharImplementation, IConvertibleToDateTimeImplementation, 
    IConvertibleToDecimalImplementation, IConvertibleToDoubleImplementation, IConvertibleToInt16Implementation, IConvertibleToInt32Implementation, IConvertibleToInt64Implementation, IConvertibleToSByteImplementation, IConvertibleToSingleImplementation, IConvertibleToStringImplementation, 
    IConvertibleToUInt16Implementation, IConvertibleToUInt32Implementation, IConvertibleToUInt64Implementation, OperatorEqualsImplementation, GetTypeCode, ToBoolean, ToByte, ToChar, 
    ToDateTime, ToDecimal, ToDouble, ToInt16, ToInt32, ToInt64, ToSByte, ToSingle, 
    ToString1, ToType, ToUInt16, ToUInt32, ToUInt64, class, static, const
    static = function (this)
      local default = DictInt32Int32()
      default:AddKeyValue(255 --[[BsonType.MinKey]], 1)
      default:AddKeyValue(6 --[[BsonType.Undefined]], 2)
      default:AddKeyValue(10 --[[BsonType.Null]], 3)
      default:AddKeyValue(19 --[[BsonType.Decimal128]], 4)
      default:AddKeyValue(1 --[[BsonType.Double]], 4)
      default:AddKeyValue(16 --[[BsonType.Int32]], 4)
      default:AddKeyValue(18 --[[BsonType.Int64]], 4)
      default:AddKeyValue(2 --[[BsonType.String]], 5)
      default:AddKeyValue(14 --[[BsonType.Symbol]], 5)
      default:AddKeyValue(3 --[[BsonType.Document]], 6)
      default:AddKeyValue(4 --[[BsonType.Array]], 7)
      default:AddKeyValue(5 --[[BsonType.Binary]], 8)
      default:AddKeyValue(7 --[[BsonType.ObjectId]], 9)
      default:AddKeyValue(8 --[[BsonType.Boolean]], 10)
      default:AddKeyValue(9 --[[BsonType.DateTime]], 11)
      default:AddKeyValue(17 --[[BsonType.Timestamp]], 11)
      default:AddKeyValue(11 --[[BsonType.RegularExpression]], 12)
      default:AddKeyValue(13 --[[BsonType.JavaScript]], 13)
      default:AddKeyValue(15 --[[BsonType.JavaScriptWithScope]], 14)
      default:AddKeyValue(127 --[[BsonType.MaxKey]], 15)
      __bsonTypeSortOrder = default
    end
    getAsBoolean = function (this)
      return (System.cast(MongoDBBson.BsonBoolean, this)):getValue()
    end
    getAsBsonArray = function (this)
      return System.cast(MongoDBBson.BsonArray, this)
    end
    getAsBsonBinaryData = function (this)
      return System.cast(MongoDBBson.BsonBinaryData, this)
    end
    getAsBsonDateTime = function (this)
      return System.cast(MongoDBBson.BsonDateTime, this)
    end
    getAsBsonDocument = function (this)
      return System.cast(MongoDBBson.BsonDocument, this)
    end
    getAsBsonJavaScript = function (this)
      return System.cast(MongoDBBson.BsonJavaScript, this)
    end
    getAsBsonJavaScriptWithScope = function (this)
      return System.cast(MongoDBBson.BsonJavaScriptWithScope, this)
    end
    getAsBsonMaxKey = function (this)
      return System.cast(MongoDBBson.BsonMaxKey, this)
    end
    getAsBsonMinKey = function (this)
      return System.cast(MongoDBBson.BsonMinKey, this)
    end
    getAsBsonNull = function (this)
      return System.cast(MongoDBBson.BsonNull, this)
    end
    getAsBsonRegularExpression = function (this)
      return System.cast(MongoDBBson.BsonRegularExpression, this)
    end
    getAsBsonSymbol = function (this)
      return System.cast(MongoDBBson.BsonSymbol, this)
    end
    getAsBsonTimestamp = function (this)
      return System.cast(MongoDBBson.BsonTimestamp, this)
    end
    getAsBsonUndefined = function (this)
      return System.cast(MongoDBBson.BsonUndefined, this)
    end
    getAsBsonValue = function (this)
      return this
    end
    getAsByteArray = function (this)
      return (System.cast(MongoDBBson.BsonBinaryData, this)):getBytes()
    end
    getAsDateTime = function (this)
      return getAsUniversalTime(this)
    end
    getAsDecimal = function (this)
      return MongoDBBson.Decimal128.op_Explicit2((System.cast(MongoDBBson.BsonDecimal128, this)):getValue())
    end
    getAsDecimal128 = function (this)
      return (System.cast(MongoDBBson.BsonDecimal128, this)):getValue()
    end
    getAsDouble = function (this)
      return (System.cast(MongoDBBson.BsonDouble, this)):getValue()
    end
    getAsGuid = function (this)
      return (System.cast(MongoDBBson.BsonBinaryData, this)):ToGuid()
    end
    getAsInt32 = function (this)
      return (System.cast(MongoDBBson.BsonInt32, this)):getValue()
    end
    getAsLocalTime = function (this)
      return (System.cast(MongoDBBson.BsonDateTime, this)):ToLocalTime()
    end
    getAsInt64 = function (this)
      return (System.cast(MongoDBBson.BsonInt64, this)):getValue()
    end
    getAsNullableBoolean = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = System.cast(System.Boolean, getAsBoolean(this), true)
      end
      return default
    end
    getAsNullableDateTime = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = System.cast(System.DateTime, getAsDateTime(this), true)
      end
      return default
    end
    getAsNullableDecimal = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = System.cast(System.Double, getAsDecimal128(this), true)
      end
      return default
    end
    getAsNullableDecimal128 = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = System.cast(MongoDBBson.Decimal128, getAsDecimal128(this), true)
      end
      return default
    end
    getAsNullableDouble = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = System.cast(System.Double, getAsDouble(this), true)
      end
      return default
    end
    getAsNullableGuid = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = System.cast(System.Guid, getAsGuid(this), true)
      end
      return default
    end
    getAsNullableInt32 = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = getAsInt32(this)
      end
      return default
    end
    getAsNullableInt64 = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = getAsInt64(this)
      end
      return default
    end
    getAsNullableObjectId = function (this)
      local default
      if (this:getBsonType() == 10 --[[BsonType.Null]]) then
        default = nil
      else
        default = System.cast(MongoDBBson.ObjectId, getAsObjectId(this), true)
      end
      return default
    end
    getAsObjectId = function (this)
      return (System.cast(MongoDBBson.BsonObjectId, this)):getValue()
    end
    getAsRegex = function (this)
      return (System.cast(MongoDBBson.BsonRegularExpression, this)):ToRegex()
    end
    getAsString = function (this)
      return (System.cast(MongoDBBson.BsonString, this)):getValue()
    end
    getAsUniversalTime = function (this)
      return (System.cast(MongoDBBson.BsonDateTime, this)):ToUniversalTime()
    end
    getIsBoolean = function (this)
      return this:getBsonType() == 8 --[[BsonType.Boolean]]
    end
    getIsBsonArray = function (this)
      return this:getBsonType() == 4 --[[BsonType.Array]]
    end
    getIsBsonBinaryData = function (this)
      return this:getBsonType() == 5 --[[BsonType.Binary]]
    end
    getIsBsonDateTime = function (this)
      return this:getBsonType() == 9 --[[BsonType.DateTime]]
    end
    getIsBsonDocument = function (this)
      return this:getBsonType() == 3 --[[BsonType.Document]]
    end
    getIsBsonJavaScript = function (this)
      return this:getBsonType() == 13 --[[BsonType.JavaScript]] or this:getBsonType() == 15 --[[BsonType.JavaScriptWithScope]]
    end
    getIsBsonJavaScriptWithScope = function (this)
      return this:getBsonType() == 15 --[[BsonType.JavaScriptWithScope]]
    end
    getIsBsonMaxKey = function (this)
      return this:getBsonType() == 127 --[[BsonType.MaxKey]]
    end
    getIsBsonMinKey = function (this)
      return this:getBsonType() == 255 --[[BsonType.MinKey]]
    end
    getIsBsonNull = function (this)
      return this:getBsonType() == 10 --[[BsonType.Null]]
    end
    getIsBsonRegularExpression = function (this)
      return this:getBsonType() == 11 --[[BsonType.RegularExpression]]
    end
    getIsBsonSymbol = function (this)
      return this:getBsonType() == 14 --[[BsonType.Symbol]]
    end
    getIsBsonTimestamp = function (this)
      return this:getBsonType() == 17 --[[BsonType.Timestamp]]
    end
    getIsBsonUndefined = function (this)
      return this:getBsonType() == 6 --[[BsonType.Undefined]]
    end
    getIsDateTime = function (this)
      return this:getIsValidDateTime()
    end
    getIsDecimal128 = function (this)
      return this:getBsonType() == 19 --[[BsonType.Decimal128]]
    end
    getIsDouble = function (this)
      return this:getBsonType() == 1 --[[BsonType.Double]]
    end
    getIsGuid = function (this)
      if this:getBsonType() == 5 --[[BsonType.Binary]] then
        local subType = (System.cast(MongoDBBson.BsonBinaryData, this)):getSubType()
        return subType == 4 --[[BsonBinarySubType.UuidStandard]] or subType == 3 --[[BsonBinarySubType.UuidLegacy]]
      else
        return false
      end
    end
    getIsInt32 = function (this)
      return this:getBsonType() == 16 --[[BsonType.Int32]]
    end
    getIsInt64 = function (this)
      return this:getBsonType() == 18 --[[BsonType.Int64]]
    end
    getIsNumeric = function (this)
      return this:getBsonType() == 19 --[[BsonType.Decimal128]] or this:getBsonType() == 1 --[[BsonType.Double]] or this:getBsonType() == 16 --[[BsonType.Int32]] or this:getBsonType() == 18 --[[BsonType.Int64]]
    end
    getIsObjectId = function (this)
      return this:getBsonType() == 7 --[[BsonType.ObjectId]]
    end
    getIsString = function (this)
      return this:getBsonType() == 2 --[[BsonType.String]]
    end
    getIsValidDateTime = function (this)
      return false
    end
    getRawValue = function (this)
      return nil
    end
    -- <summary>
    -- Casts a BsonValue to a bool.
    -- </summary>
    -- <returns>A bool.</returns>
    op_Explicit = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsBoolean(value)
    end
    -- <summary>
    -- Casts a BsonValue to a bool?.
    -- </summary>
    -- <returns>A bool?.</returns>
    op_Explicit1 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsNullableBoolean(value)
      end
      return default
    end
    -- <summary>
    -- Converts a bool to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit = function (value)
      return MongoDBBson.BsonBoolean.op_Implicit22(value)
    end
    -- <summary>
    -- Converts a bool? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit1 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonBoolean.op_Implicit22(System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts a byte[] to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit2 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonBinaryData(value)
      else
        default = nil
      end
      return default
    end
    -- <summary>
    -- Converts a DateTime to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit3 = function (value)
      return MongoDBBson.BsonDateTime(value)
    end
    -- <summary>
    -- Converts a DateTime? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit4 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonDateTime(System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts a decimal to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit5 = function (value)
      return MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit1(value))
    end
    -- <summary>
    -- Converts a decimal? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit6 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonDecimal128.op_Implicit22(MongoDBBson.Decimal128.op_Implicit1(System.Nullable.Value(value)))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts a <see cref="Decimal128"/> to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit7 = function (value)
      return MongoDBBson.BsonDecimal128.op_Implicit22(value)
    end
    -- <summary>
    -- Converts a nullable <see cref="Decimal128"/> to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit8 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonDecimal128.op_Implicit22(System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts a double to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit9 = function (value)
      return MongoDBBson.BsonDouble.op_Implicit22(value)
    end
    -- <summary>
    -- Converts a double? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit10 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonDouble.op_Implicit22(System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts an Enum to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit11 = function (value)
      return MongoDBBson.BsonTypeMapper.MapToBsonValue(value)
    end
    -- <summary>
    -- Converts a Guid to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit12 = function (value)
      return System.new(MongoDBBson.BsonBinaryData, 4, value)
    end
    -- <summary>
    -- Converts a Guid? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit13 = function (value)
      local default
      if (value ~= nil) then
        default = System.new(MongoDBBson.BsonBinaryData, 4, System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts an int to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit14 = function (value)
      return MongoDBBson.BsonInt32.op_Implicit22(value)
    end
    -- <summary>
    -- Converts an int? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit15 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonInt32.op_Implicit22(System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts a long to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit16 = function (value)
      return MongoDBBson.BsonInt64.op_Implicit22(value)
    end
    -- <summary>
    -- Converts a long? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit17 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonInt64.op_Implicit22(System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts an ObjectId to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit18 = function (value)
      return MongoDBBson.BsonObjectId(value:__clone__())
    end
    -- <summary>
    -- Converts an ObjectId? to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit19 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonObjectId(System.Nullable.Value(value))
      else
        default = MongoDBBson.BsonNull.getValue()
      end
      return default
    end
    -- <summary>
    -- Converts a Regex to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit20 = function (value)
      local default
      if (value ~= nil) then
        default = System.new(MongoDBBson.BsonRegularExpression, 3, value)
      else
        default = nil
      end
      return default
    end
    -- <summary>
    -- Converts a string to a BsonValue.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    op_Implicit21 = function (value)
      local default
      if (value ~= nil) then
        default = MongoDBBson.BsonString.op_Implicit22(value)
      else
        default = nil
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a byte[].
    -- </summary>
    -- <returns>A byte[].</returns>
    op_Explicit2 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsByteArray(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a DateTime.
    -- </summary>
    -- <returns>A DateTime.</returns>
    op_Explicit3 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      if not (System.is(value, MongoDBBson.BsonDateTime)) then
        System.throw(System.InvalidCastException())
      end
      return value:ToUniversalTime()
    end
    -- <summary>
    -- Casts a BsonValue to a DateTime?.
    -- </summary>
    -- <returns>A DateTime?.</returns>
    op_Explicit4 = function (value)
      if op_Inequality(value, nil) and not ((System.is(value, MongoDBBson.BsonDateTime)) or (System.is(value, MongoDBBson.BsonNull))) then
        System.throw(System.InvalidCastException())
      end
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = value:ToNullableUniversalTime()
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a decimal.
    -- </summary>
    -- <returns>A decimal.</returns>
    op_Explicit5 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsDecimal(value)
    end
    -- <summary>
    -- Casts a BsonValue to a decimal?.
    -- </summary>
    -- <returns>A decimal?.</returns>
    op_Explicit6 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsNullableDecimal(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a <see cref="Decimal128"/>.
    -- </summary>
    -- <returns>A <see cref="Decimal128"/>.</returns>
    op_Explicit7 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsDecimal128(value)
    end
    -- <summary>
    -- Casts a BsonValue to a nullable <see cref="Decimal128"/>?.
    -- </summary>
    -- <returns>A nullable <see cref="Decimal128"/>.</returns>
    op_Explicit8 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsNullableDecimal128(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a double.
    -- </summary>
    -- <returns>A double.</returns>
    op_Explicit9 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsDouble(value)
    end
    -- <summary>
    -- Casts a BsonValue to a double?.
    -- </summary>
    -- <returns>A double?.</returns>
    op_Explicit10 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsNullableDouble(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a Guid.
    -- </summary>
    -- <returns>A Guid.</returns>
    op_Explicit11 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsGuid(value)
    end
    -- <summary>
    -- Casts a BsonValue to a Guid?.
    -- </summary>
    -- <returns>A Guid?.</returns>
    op_Explicit12 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsNullableGuid(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to an int.
    -- </summary>
    -- <returns>An int.</returns>
    op_Explicit13 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsInt32(value)
    end
    -- <summary>
    -- Casts a BsonValue to an int?.
    -- </summary>
    -- <returns>An int?.</returns>
    op_Explicit14 = function (value)
      local default
      if op_Equality(value, nil) then
        default = nil
      else
        default = getAsNullableInt32(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a long.
    -- </summary>
    -- <returns>A long.</returns>
    op_Explicit15 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsInt64(value)
    end
    -- <summary>
    -- Casts a BsonValue to a long?.
    -- </summary>
    -- <returns>A long?.</returns>
    op_Explicit16 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsNullableInt64(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to an ObjectId.
    -- </summary>
    -- <returns>An ObjectId.</returns>
    op_Explicit17 = function (value)
      if op_Equality(value, nil) then
        System.throw(System.ArgumentNullException("value"))
      end
      return getAsObjectId(value)
    end
    -- <summary>
    -- Casts a BsonValue to an ObjectId?.
    -- </summary>
    -- <returns>An ObjectId?.</returns>
    op_Explicit18 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsNullableObjectId(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a Regex.
    -- </summary>
    -- <returns>A Regex.</returns>
    op_Explicit19 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsRegex(value)
      end
      return default
    end
    -- <summary>
    -- Casts a BsonValue to a string.
    -- </summary>
    -- <returns>A string.</returns>
    op_Explicit20 = function (value)
      local default
      if (op_Equality(value, nil)) then
        default = nil
      else
        default = getAsString(value)
      end
      return default
    end
    -- <summary>
    -- Compares two BsonValues.
    -- </summary>
    -- <param name="rhs">The other BsonValue.</param>
    -- <returns>True if the first BsonValue is less than the other one.</returns>
    op_LessThan = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) and System.Object.ReferenceEquals(rhs) then
        return false
      end
      if System.Object.ReferenceEquals(lhs) then
        return true
      end
      if System.Object.ReferenceEquals(rhs) then
        return false
      end
      return lhs:CompareTo1(rhs) < 0
    end
    -- <summary>
    -- Compares two BsonValues.
    -- </summary>
    -- <param name="rhs">The other BsonValue.</param>
    -- <returns>True if the first BsonValue is less than or equal to the other one.</returns>
    op_LessThanOrEqual = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) and System.Object.ReferenceEquals(rhs) then
        return true
      end
      if System.Object.ReferenceEquals(lhs) then
        return true
      end
      if System.Object.ReferenceEquals(rhs) then
        return false
      end
      return lhs:CompareTo1(rhs) <= 0
    end
    -- <summary>
    -- Compares two BsonValues.
    -- </summary>
    -- <param name="rhs">The other BsonValue.</param>
    -- <returns>True if the two BsonValues are not equal according to ==.</returns>
    op_Inequality = function (lhs, rhs)
      return not (op_Equality(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonValues.
    -- </summary>
    -- <param name="rhs">The other BsonValue.</param>
    -- <returns>True if the two BsonValues are equal according to ==.</returns>
    op_Equality = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      if System.Object.ReferenceEquals(rhs) then
        return false
      end
      -- don't check type because sometimes different types can be ==
      return lhs:OperatorEqualsImplementation(rhs)
      -- some subclasses override OperatorEqualsImplementation
    end
    -- <summary>
    -- Compares two BsonValues.
    -- </summary>
    -- <param name="rhs">The other BsonValue.</param>
    -- <returns>True if the first BsonValue is greater than the other one.</returns>
    op_GreaterThan = function (lhs, rhs)
      return not (op_LessThanOrEqual(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonValues.
    -- </summary>
    -- <param name="rhs">The other BsonValue.</param>
    -- <returns>True if the first BsonValue is greater than or equal to the other one.</returns>
    op_GreaterThanOrEqual = function (lhs, rhs)
      return not (op_LessThan(lhs, rhs))
    end
    get = function (this, index)
      local message = System.String.Format("{0} does not support indexing by position (only BsonDocument and BsonArray do).", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    set = function (this, index, value)
      local message = System.String.Format("{0} does not support indexing by position (only BsonDocument and BsonArray do).", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    get1 = function (this, name)
      local message = System.String.Format("{0} does not support indexing by name (only BsonDocument does).", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    set1 = function (this, name, value)
      local message = System.String.Format("{0} does not support indexing by name (only BsonDocument does).", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Creates a new instance of the BsonValue class.
    -- </summary>
    -- <returns>A BsonValue.</returns>
    Create = function (value)
      -- optimize away the call to MapToBsonValue for the most common cases
      if value == nil then
        return MongoDBBson.BsonNull.getValue()
      elseif System.is(value, class) then
        return System.cast(class, value)
      elseif System.is(value, System.Int32) then
        return MongoDBBson.BsonInt32.op_Implicit22(System.cast(System.Int32, value))
      elseif System.is(value, System.String) then
        return MongoDBBson.BsonString.op_Implicit22(System.cast(System.String, value))
      elseif System.is(value, System.Boolean) then
        return MongoDBBson.BsonBoolean.op_Implicit22((System.cast(System.Boolean, value)))
      elseif System.is(value, System.DateTime) then
        return MongoDBBson.BsonDateTime(System.cast(System.DateTime, value))
      elseif System.is(value, System.Int64) then
        return MongoDBBson.BsonInt64.op_Implicit22(System.cast(System.Int64, value))
      elseif System.is(value, System.Double) then
        return MongoDBBson.BsonDouble.op_Implicit22(System.cast(System.Double, value))
      else
        return MongoDBBson.BsonTypeMapper.MapToBsonValue(value)
      end
    end
    -- <summary>
    -- Creates a shallow clone of the BsonValue (see also DeepClone).
    -- </summary>
    Clone = function (this)
      return this
      -- subclasses override Clone if necessary
    end
    -- <summary>
    -- Compares the type of this BsonValue to the type of another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether the type of this BsonValue is less than, equal to, or greather than the type of the other BsonValue.</returns>
    CompareTypeTo = function (this, other)
      if System.Object.ReferenceEquals(other) then
        return 1
      end
      return __bsonTypeSortOrder:get(this:getBsonType()):CompareTo(__bsonTypeSortOrder:get(other:getBsonType()))
    end
    -- <summary>
    -- Creates a deep clone of the BsonValue (see also Clone).
    -- </summary>
    DeepClone = function (this)
      return this
      -- subclasses override DeepClone if necessary
    end
    -- <summary>
    -- Compares this BsonValue to another BsonValue.
    -- </summary>
    -- <returns>True if the two BsonValue values are equal.</returns>
    Equals1 = function (this, rhs)
      return this:EqualsObj(rhs)
    end
    -- <summary>
    -- Converts this BsonValue to a Boolean (using the JavaScript definition of truthiness).
    -- </summary>
    ToBoolean1 = function (this)
      -- some subclasses override as appropriate
      return true
      -- everything else is true        
    end
    -- <summary>
    -- Converts this BsonValue to a Decimal.
    -- </summary>
    ToDecimal1 = function (this)
      local message = System.String.Format("{0} does not support ToDecimal.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to a Decimal128.
    -- </summary>
    ToDecimal128 = function (this)
      local message = System.String.Format("{0} does not support ToDecimal128.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to a Double.
    -- </summary>
    ToDouble1 = function (this)
      local message = System.String.Format("{0} does not support ToDouble.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to an Int32.
    -- </summary>
    ToInt321 = function (this)
      local message = System.String.Format("{0} does not support ToInt32.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to an Int64.
    -- </summary>
    ToInt641 = function (this)
      local message = System.String.Format("{0} does not support ToInt64.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime in local time.
    -- </summary>
    ToLocalTime = function (this)
      local message = System.String.Format("{0} does not support ToLocalTime.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime? in local time.
    -- </summary>
    ToNullableLocalTime = function (this)
      local message = System.String.Format("{0} does not support ToNullableLocalTime.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime? in UTC.
    -- </summary>
    ToNullableUniversalTime = function (this)
      local message = System.String.Format("{0} does not support ToNullableUniversalTime.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Converts this BsonValue to a DateTime in UTC.
    -- </summary>
    ToUniversalTime = function (this)
      local message = System.String.Format("{0} does not support ToUniversalTime.", this:GetType():getName())
      System.throw(System.NotSupportedException(message))
    end
    -- <summary>
    -- Implementation of the IConvertible GetTypeCode method.
    -- </summary>
    IConvertibleGetTypeCodeImplementation = function (this)
      return 1 --[[TypeCode.Object]]
    end
    -- <summary>
    -- Implementation of the IConvertible ToBoolean method.
    -- </summary>
    -- <returns>A bool.</returns>
    IConvertibleToBooleanImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToByte method.
    -- </summary>
    -- <returns>A byte.</returns>
    IConvertibleToByteImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToChar method.
    -- </summary>
    -- <returns>A char.</returns>
    IConvertibleToCharImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToDateTime method.
    -- </summary>
    -- <returns>A DateTime.</returns>
    IConvertibleToDateTimeImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToDecimal method.
    -- </summary>
    -- <returns>A decimal.</returns>
    IConvertibleToDecimalImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToDouble method.
    -- </summary>
    -- <returns>A double.</returns>
    IConvertibleToDoubleImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToInt16 method.
    -- </summary>
    -- <returns>A short.</returns>
    IConvertibleToInt16Implementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToInt32 method.
    -- </summary>
    -- <returns>An int.</returns>
    IConvertibleToInt32Implementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToInt64 method.
    -- </summary>
    -- <returns>A long.</returns>
    IConvertibleToInt64Implementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToSByte method.
    -- </summary>
    -- <returns>An sbyte.</returns>
    IConvertibleToSByteImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToSingle method.
    -- </summary>
    -- <returns>A float.</returns>
    IConvertibleToSingleImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToString method.
    -- </summary>
    -- <returns>A string.</returns>
    IConvertibleToStringImplementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToUInt16 method.
    -- </summary>
    -- <returns>A ushort.</returns>
    IConvertibleToUInt16Implementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToUInt32 method.
    -- </summary>
    -- <returns>A uint.</returns>
    IConvertibleToUInt32Implementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of the IConvertible ToUInt64 method.
    -- </summary>
    -- <returns>A ulong.</returns>
    IConvertibleToUInt64Implementation = function (this, provider)
      System.throw(System.InvalidCastException())
    end
    -- <summary>
    -- Implementation of operator ==.
    -- </summary>
    -- <returns>True if the two BsonValues are equal according to ==.</returns>
    OperatorEqualsImplementation = function (this, rhs)
      return Equals1(this, rhs)
      -- default implementation of == is to call Equals
    end
    GetTypeCode = function (this)
      return this:IConvertibleGetTypeCodeImplementation()
    end
    ToBoolean = function (this, provider)
      return this:IConvertibleToBooleanImplementation(provider)
    end
    ToByte = function (this, provider)
      return this:IConvertibleToByteImplementation(provider)
    end
    ToChar = function (this, provider)
      return this:IConvertibleToCharImplementation(provider)
    end
    ToDateTime = function (this, provider)
      return this:IConvertibleToDateTimeImplementation(provider)
    end
    ToDecimal = function (this, provider)
      return this:IConvertibleToDecimalImplementation(provider)
    end
    ToDouble = function (this, provider)
      return this:IConvertibleToDoubleImplementation(provider)
    end
    ToInt16 = function (this, provider)
      return this:IConvertibleToInt16Implementation(provider)
    end
    ToInt32 = function (this, provider)
      return this:IConvertibleToInt32Implementation(provider)
    end
    ToInt64 = function (this, provider)
      return this:IConvertibleToInt64Implementation(provider)
    end
    ToSByte = function (this, provider)
      return this:IConvertibleToSByteImplementation(provider)
    end
    ToSingle = function (this, provider)
      return this:IConvertibleToSingleImplementation(provider)
    end
    ToString1 = function (this, provider)
      return this:IConvertibleToStringImplementation(provider)
    end
    ToType = function (this, conversionType, provider)
      if conversionType == System.typeof(System.Object) then
        return this
      end

      repeat
        local default = this:getBsonType()
        if default == 8 --[[BsonType.Boolean]] then
          return System.Convert.ChangeType(getAsBoolean(this), conversionType, provider)
        elseif default == 9 --[[BsonType.DateTime]] then
          return System.Convert.ChangeType(this:ToUniversalTime(), conversionType, provider)
        elseif default == 19 --[[BsonType.Decimal128]] then
          return System.Convert.ChangeType(getAsDecimal128(this), conversionType, provider)
        elseif default == 1 --[[BsonType.Double]] then
          return System.Convert.ChangeType(getAsDouble(this), conversionType, provider)
        elseif default == 16 --[[BsonType.Int32]] then
          return System.Convert.ChangeType(getAsInt32(this), conversionType, provider)
        elseif default == 18 --[[BsonType.Int64]] then
          return System.Convert.ChangeType(getAsInt64(this), conversionType, provider)
        elseif default == 7 --[[BsonType.ObjectId]] then
          return System.Convert.ChangeType(getAsObjectId(this), conversionType, provider)
        elseif default == 2 --[[BsonType.String]] then
          return System.Convert.ChangeType(getAsString(this), conversionType, provider)
        else
          System.throw(System.InvalidCastException())
        end
      until 1
    end
    ToUInt16 = function (this, provider)
      return this:IConvertibleToUInt16Implementation(provider)
    end
    ToUInt32 = function (this, provider)
      return this:IConvertibleToUInt32Implementation(provider)
    end
    ToUInt64 = function (this, provider)
      return this:IConvertibleToUInt64Implementation(provider)
    end
    --too many upvalues (limit is 60)
    const = {}
    const.getIsNumeric = getIsNumeric
    const.getIsObjectId = getIsObjectId
    const.getIsString = getIsString
    const.getIsValidDateTime = getIsValidDateTime
    const.getRawValue = getRawValue
    class = {
      base = function (out)
        return {
          System.IComparable_1(out.MongoDB.Bson.BsonValue),
          System.IConvertible,
          System.IEquatable_1(out.MongoDB.Bson.BsonValue)
        }
      end,
      getAsBoolean = getAsBoolean,
      getAsBsonArray = getAsBsonArray,
      getAsBsonBinaryData = getAsBsonBinaryData,
      getAsBsonDateTime = getAsBsonDateTime,
      getAsBsonDocument = getAsBsonDocument,
      getAsBsonJavaScript = getAsBsonJavaScript,
      getAsBsonJavaScriptWithScope = getAsBsonJavaScriptWithScope,
      getAsBsonMaxKey = getAsBsonMaxKey,
      getAsBsonMinKey = getAsBsonMinKey,
      getAsBsonNull = getAsBsonNull,
      getAsBsonRegularExpression = getAsBsonRegularExpression,
      getAsBsonSymbol = getAsBsonSymbol,
      getAsBsonTimestamp = getAsBsonTimestamp,
      getAsBsonUndefined = getAsBsonUndefined,
      getAsBsonValue = getAsBsonValue,
      getAsByteArray = getAsByteArray,
      getAsDateTime = getAsDateTime,
      getAsDecimal = getAsDecimal,
      getAsDecimal128 = getAsDecimal128,
      getAsDouble = getAsDouble,
      getAsGuid = getAsGuid,
      getAsInt32 = getAsInt32,
      getAsLocalTime = getAsLocalTime,
      getAsInt64 = getAsInt64,
      getAsNullableBoolean = getAsNullableBoolean,
      getAsNullableDateTime = getAsNullableDateTime,
      getAsNullableDecimal = getAsNullableDecimal,
      getAsNullableDecimal128 = getAsNullableDecimal128,
      getAsNullableDouble = getAsNullableDouble,
      getAsNullableGuid = getAsNullableGuid,
      getAsNullableInt32 = getAsNullableInt32,
      getAsNullableInt64 = getAsNullableInt64,
      getAsNullableObjectId = getAsNullableObjectId,
      getAsObjectId = getAsObjectId,
      getAsRegex = getAsRegex,
      getAsString = getAsString,
      getAsUniversalTime = getAsUniversalTime,
      getIsBoolean = getIsBoolean,
      getIsBsonArray = getIsBsonArray,
      getIsBsonBinaryData = getIsBsonBinaryData,
      getIsBsonDateTime = getIsBsonDateTime,
      getIsBsonDocument = getIsBsonDocument,
      getIsBsonJavaScript = getIsBsonJavaScript,
      getIsBsonJavaScriptWithScope = getIsBsonJavaScriptWithScope,
      getIsBsonMaxKey = getIsBsonMaxKey,
      getIsBsonMinKey = getIsBsonMinKey,
      getIsBsonNull = getIsBsonNull,
      getIsBsonRegularExpression = getIsBsonRegularExpression,
      getIsBsonSymbol = getIsBsonSymbol,
      getIsBsonTimestamp = getIsBsonTimestamp,
      getIsBsonUndefined = getIsBsonUndefined,
      getIsDateTime = getIsDateTime,
      getIsDecimal128 = getIsDecimal128,
      getIsDouble = getIsDouble,
      getIsGuid = getIsGuid,
      getIsInt32 = getIsInt32,
      getIsInt64 = getIsInt64,
      getIsNumeric = getIsNumeric,
      getIsObjectId = getIsObjectId,
      getIsString = getIsString,
      getIsValidDateTime = getIsValidDateTime,
      getRawValue = getRawValue,
      op_Explicit = op_Explicit,
      op_Explicit1 = op_Explicit1,
      op_Implicit = op_Implicit,
      op_Implicit1 = op_Implicit1,
      op_Implicit2 = op_Implicit2,
      op_Implicit3 = op_Implicit3,
      op_Implicit4 = op_Implicit4,
      op_Implicit5 = op_Implicit5,
      op_Implicit6 = op_Implicit6,
      op_Implicit7 = op_Implicit7,
      op_Implicit8 = op_Implicit8,
      op_Implicit9 = op_Implicit9,
      op_Implicit10 = op_Implicit10,
      op_Implicit11 = op_Implicit11,
      op_Implicit12 = op_Implicit12,
      op_Implicit13 = op_Implicit13,
      op_Implicit14 = op_Implicit14,
      op_Implicit15 = op_Implicit15,
      op_Implicit16 = op_Implicit16,
      op_Implicit17 = op_Implicit17,
      op_Implicit18 = op_Implicit18,
      op_Implicit19 = op_Implicit19,
      op_Implicit20 = op_Implicit20,
      op_Implicit21 = op_Implicit21,
      op_Explicit2 = op_Explicit2,
      op_Explicit3 = op_Explicit3,
      op_Explicit4 = op_Explicit4,
      op_Explicit5 = op_Explicit5,
      op_Explicit6 = op_Explicit6,
      op_Explicit7 = op_Explicit7,
      op_Explicit8 = op_Explicit8,
      op_Explicit9 = op_Explicit9,
      op_Explicit10 = op_Explicit10,
      op_Explicit11 = op_Explicit11,
      op_Explicit12 = op_Explicit12,
      op_Explicit13 = op_Explicit13,
      op_Explicit14 = op_Explicit14,
      op_Explicit15 = op_Explicit15,
      op_Explicit16 = op_Explicit16,
      op_Explicit17 = op_Explicit17,
      op_Explicit18 = op_Explicit18,
      op_Explicit19 = op_Explicit19,
      op_Explicit20 = op_Explicit20,
      op_LessThan = op_LessThan,
      op_LessThanOrEqual = op_LessThanOrEqual,
      op_Inequality = op_Inequality,
      op_Equality = op_Equality,
      op_GreaterThan = op_GreaterThan,
      op_GreaterThanOrEqual = op_GreaterThanOrEqual,
      get = get,
      set = set,
      get1 = get1,
      set1 = set1,
      Create = Create,
      Clone = Clone,
      CompareTypeTo = CompareTypeTo,
      DeepClone = DeepClone,
      Equals1 = Equals1,
      ToBoolean1 = ToBoolean1,
      ToDecimal1 = ToDecimal1,
      ToDecimal128 = ToDecimal128,
      ToDouble1 = ToDouble1,
      ToInt321 = ToInt321,
      ToInt641 = ToInt641,
      ToLocalTime = ToLocalTime,
      ToNullableLocalTime = ToNullableLocalTime,
      ToNullableUniversalTime = ToNullableUniversalTime,
      ToUniversalTime = ToUniversalTime,
      IConvertibleGetTypeCodeImplementation = IConvertibleGetTypeCodeImplementation,
      IConvertibleToBooleanImplementation = IConvertibleToBooleanImplementation,
      IConvertibleToByteImplementation = IConvertibleToByteImplementation,
      IConvertibleToCharImplementation = IConvertibleToCharImplementation,
      IConvertibleToDateTimeImplementation = IConvertibleToDateTimeImplementation,
      IConvertibleToDecimalImplementation = IConvertibleToDecimalImplementation,
      IConvertibleToDoubleImplementation = IConvertibleToDoubleImplementation,
      IConvertibleToInt16Implementation = IConvertibleToInt16Implementation,
      IConvertibleToInt32Implementation = IConvertibleToInt32Implementation,
      IConvertibleToInt64Implementation = IConvertibleToInt64Implementation,
      IConvertibleToSByteImplementation = IConvertibleToSByteImplementation,
      IConvertibleToSingleImplementation = IConvertibleToSingleImplementation,
      IConvertibleToStringImplementation = IConvertibleToStringImplementation,
      IConvertibleToUInt16Implementation = IConvertibleToUInt16Implementation,
      IConvertibleToUInt32Implementation = IConvertibleToUInt32Implementation,
      IConvertibleToUInt64Implementation = IConvertibleToUInt64Implementation,
      OperatorEqualsImplementation = OperatorEqualsImplementation,
      GetTypeCode = GetTypeCode,
      ToBoolean = ToBoolean,
      ToByte = ToByte,
      ToChar = ToChar,
      ToDateTime = ToDateTime,
      ToDecimal = ToDecimal,
      ToDouble = ToDouble,
      ToInt16 = ToInt16,
      ToInt32 = ToInt32,
      ToInt64 = ToInt64,
      ToSByte = ToSByte,
      ToSingle = ToSingle,
      ToString1 = ToString1,
      ToType = ToType,
      ToUInt16 = ToUInt16,
      ToUInt32 = ToUInt32,
      ToUInt64 = ToUInt64,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "__bsonTypeSortOrder", 0x9, System.Dictionary(System.Int32, System.Int32) }
          },
          properties = {
            { "AsBoolean", 0x206, System.Boolean, getAsBoolean },
            { "AsBsonArray", 0x206, out.MongoDB.Bson.BsonArray, getAsBsonArray },
            { "AsBsonBinaryData", 0x206, out.MongoDB.Bson.BsonBinaryData, getAsBsonBinaryData },
            { "AsBsonDateTime", 0x206, out.MongoDB.Bson.BsonDateTime, getAsBsonDateTime },
            { "AsBsonDocument", 0x206, out.MongoDB.Bson.BsonDocument, getAsBsonDocument },
            { "AsBsonJavaScript", 0x206, out.MongoDB.Bson.BsonJavaScript, getAsBsonJavaScript },
            { "AsBsonJavaScriptWithScope", 0x206, out.MongoDB.Bson.BsonJavaScriptWithScope, getAsBsonJavaScriptWithScope },
            { "AsBsonMaxKey", 0x206, out.MongoDB.Bson.BsonMaxKey, getAsBsonMaxKey },
            { "AsBsonMinKey", 0x206, out.MongoDB.Bson.BsonMinKey, getAsBsonMinKey },
            { "AsBsonNull", 0x206, out.MongoDB.Bson.BsonNull, getAsBsonNull },
            { "AsBsonRegularExpression", 0x206, out.MongoDB.Bson.BsonRegularExpression, getAsBsonRegularExpression },
            { "AsBsonSymbol", 0x206, out.MongoDB.Bson.BsonSymbol, getAsBsonSymbol },
            { "AsBsonTimestamp", 0x206, out.MongoDB.Bson.BsonTimestamp, getAsBsonTimestamp },
            { "AsBsonUndefined", 0x206, out.MongoDB.Bson.BsonUndefined, getAsBsonUndefined },
            { "AsBsonValue", 0x206, class, getAsBsonValue },
            { "AsByteArray", 0x206, System.Array(System.Byte), getAsByteArray },
            { "AsDateTime", 0x206, System.DateTime, getAsDateTime, System.ObsoleteAttribute("Use ToUniversalTime instead.") },
            { "AsDecimal", 0x206, System.Double, getAsDecimal },
            { "AsDecimal128", 0x206, out.MongoDB.Bson.Decimal128, getAsDecimal128 },
            { "AsDouble", 0x206, System.Double, getAsDouble },
            { "AsGuid", 0x206, System.Guid, getAsGuid },
            { "AsInt32", 0x206, System.Int32, getAsInt32 },
            { "AsInt64", 0x206, System.Int64, getAsInt64 },
            { "AsLocalTime", 0x206, System.DateTime, getAsLocalTime, System.ObsoleteAttribute("Use ToLocalTime instead.") },
            { "AsNullableBoolean", 0x206, System.Nullable(System.Boolean), getAsNullableBoolean },
            { "AsNullableDateTime", 0x206, System.Nullable(System.DateTime), getAsNullableDateTime, System.ObsoleteAttribute("Use ToNullableUniversalTime instead.") },
            { "AsNullableDecimal", 0x206, System.Nullable(System.Double), getAsNullableDecimal },
            { "AsNullableDecimal128", 0x206, System.Nullable(out.MongoDB.Bson.Decimal128), getAsNullableDecimal128 },
            { "AsNullableDouble", 0x206, System.Nullable(System.Double), getAsNullableDouble },
            { "AsNullableGuid", 0x206, System.Nullable(System.Guid), getAsNullableGuid },
            { "AsNullableInt32", 0x206, System.Nullable(System.Int32), getAsNullableInt32 },
            { "AsNullableInt64", 0x206, System.Nullable(System.Int64), getAsNullableInt64 },
            { "AsNullableObjectId", 0x206, System.Nullable(out.MongoDB.Bson.ObjectId), getAsNullableObjectId },
            { "AsObjectId", 0x206, out.MongoDB.Bson.ObjectId, getAsObjectId },
            { "AsRegex", 0x206, System.Text.RegularExpressions.Regex, getAsRegex },
            { "AsString", 0x206, System.String, getAsString },
            { "AsUniversalTime", 0x206, System.DateTime, getAsUniversalTime, System.ObsoleteAttribute("Use ToUniversalTime instead.") },
            { "IsBoolean", 0x206, System.Boolean, getIsBoolean },
            { "IsBsonArray", 0x206, System.Boolean, getIsBsonArray },
            { "IsBsonBinaryData", 0x206, System.Boolean, getIsBsonBinaryData },
            { "IsBsonDateTime", 0x206, System.Boolean, getIsBsonDateTime },
            { "IsBsonDocument", 0x206, System.Boolean, getIsBsonDocument },
            { "IsBsonJavaScript", 0x206, System.Boolean, getIsBsonJavaScript },
            { "IsBsonJavaScriptWithScope", 0x206, System.Boolean, getIsBsonJavaScriptWithScope },
            { "IsBsonMaxKey", 0x206, System.Boolean, getIsBsonMaxKey },
            { "IsBsonMinKey", 0x206, System.Boolean, getIsBsonMinKey },
            { "IsBsonNull", 0x206, System.Boolean, getIsBsonNull },
            { "IsBsonRegularExpression", 0x206, System.Boolean, getIsBsonRegularExpression },
            { "IsBsonSymbol", 0x206, System.Boolean, getIsBsonSymbol },
            { "IsBsonTimestamp", 0x206, System.Boolean, getIsBsonTimestamp },
            { "IsBsonUndefined", 0x206, System.Boolean, getIsBsonUndefined },
            { "IsDateTime", 0x206, System.Boolean, getIsDateTime, System.ObsoleteAttribute("Use IsValidDateTime instead.") },
            { "IsDecimal128", 0x206, System.Boolean, getIsDecimal128 },
            { "IsDouble", 0x206, System.Boolean, getIsDouble },
            { "IsGuid", 0x206, System.Boolean, getIsGuid },
            { "IsInt32", 0x206, System.Boolean, getIsInt32 },
            { "IsInt64", 0x206, System.Boolean, getIsInt64 },
            { "IsNumeric", 0x206, System.Boolean, const.getIsNumeric },
            { "IsObjectId", 0x206, System.Boolean, const.getIsObjectId },
            { "IsString", 0x206, System.Boolean, const.getIsString },
            { "IsValidDateTime", 0x206, System.Boolean, const.getIsValidDateTime },
            { "RawValue", 0x206, System.Object, const.getRawValue, System.ObsoleteAttribute("Use Value property of subclasses or BsonTypeMapper.MapToDotNetValue instead.") }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
