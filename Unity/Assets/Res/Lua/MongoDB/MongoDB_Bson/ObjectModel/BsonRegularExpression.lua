-- Generated by CSharp.lua Compiler
--[[ Copyright 2010-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemRegularExpressions = System.Text.RegularExpressions
local MongoDBBson
System.import(function (out)
  MongoDBBson = MongoDB.Bson
end)
System.namespace("MongoDB.Bson", function (namespace)
  -- <summary>
  -- Represents a BSON regular expression value.
  -- </summary>
  namespace.class("BsonRegularExpression", function (namespace)
    local getBsonType, getPattern, getOptions, op_Implicit22, op_Implicit23, op_Inequality1, op_Equality1, Create1, 
    CompareTo, CompareTo1, Equals, EqualsObj, GetHashCode, ToRegex, ToString, class, 
    __ctor1__, __ctor2__, __ctor3__
    -- <summary>
    -- Initializes a new instance of the BsonRegularExpression class.
    -- </summary>
    __ctor1__ = function (this, pattern)
      MongoDBBson.BsonValue.__ctor__(this)
      if pattern == nil then
        System.throw(System.ArgumentNullException("pattern"))
      end
      if #pattern > 0 and pattern:get(0) == 47 --[['/']] then
        local index = pattern:LastIndexOf(47 --[['/']])
        local escaped = pattern:Substring(1, index - 1)
        local unescaped = (escaped == "(?:)") and "" or escaped:Replace("\\/", "/")
        this._pattern = unescaped
        this._options = pattern:Substring(index + 1)
      else
        this._pattern = pattern
        this._options = ""
      end
    end
    -- <summary>
    -- Initializes a new instance of the BsonRegularExpression class.
    -- </summary>
    -- <param name="options">Regular expression options.</param>
    __ctor2__ = function (this, pattern, options)
      MongoDBBson.BsonValue.__ctor__(this)
      if pattern == nil then
        System.throw(System.ArgumentNullException("pattern"))
      end
      this._pattern = pattern
      this._options = options or ""
    end
    -- <summary>
    -- Initializes a new instance of the BsonRegularExpression class.
    -- </summary>
    __ctor3__ = function (this, regex)
      MongoDBBson.BsonValue.__ctor__(this)
      if regex == nil then
        System.throw(System.ArgumentNullException("regex"))
      end
      this._pattern = regex:ToString()
      this._options = ""
      if (regex:getOptions() & 1 --[[RegexOptions.IgnoreCase]]) ~= 0 then
        this._options = this._options .. "i"
      end
      if (regex:getOptions() & 2 --[[RegexOptions.Multiline]]) ~= 0 then
        this._options = this._options .. "m"
      end
      if (regex:getOptions() & 32 --[[RegexOptions.IgnorePatternWhitespace]]) ~= 0 then
        this._options = this._options .. "x"
      end
      if (regex:getOptions() & 16 --[[RegexOptions.Singleline]]) ~= 0 then
        this._options = this._options .. "s"
      end
    end
    getBsonType = function (this)
      return 11 --[[BsonType.RegularExpression]]
    end
    getPattern = function (this)
      return this._pattern
    end
    getOptions = function (this)
      return this._options
    end
    -- <summary>
    -- Converts a Regex to a BsonRegularExpression.
    -- </summary>
    -- <returns>A BsonRegularExpression.</returns>
    op_Implicit22 = function (value)
      return System.new(class, 3, value)
    end
    -- <summary>
    -- Converts a string to a BsonRegularExpression.
    -- </summary>
    -- <returns>A BsonRegularExpression.</returns>
    op_Implicit23 = function (value)
      return class(value)
    end
    -- <summary>
    -- Compares two BsonRegularExpression values.
    -- </summary>
    -- <param name="rhs">The other BsonRegularExpression.</param>
    -- <returns>True if the two BsonRegularExpression values are not equal according to ==.</returns>
    op_Inequality1 = function (lhs, rhs)
      return not (op_Equality1(lhs, rhs))
    end
    -- <summary>
    -- Compares two BsonRegularExpression values.
    -- </summary>
    -- <param name="rhs">The other BsonRegularExpression.</param>
    -- <returns>True if the two BsonRegularExpression values are equal according to ==.</returns>
    op_Equality1 = function (lhs, rhs)
      if System.Object.ReferenceEquals(lhs) then
        return System.Object.ReferenceEquals(rhs)
      end
      return Equals(lhs, rhs)
    end
    -- <summary>
    -- Creates a new BsonRegularExpression.
    -- </summary>
    -- <returns>A BsonRegularExpression or null.</returns>
    Create1 = function (value)
      if value == nil then
        System.throw(System.ArgumentNullException("value"))
      end

      return System.cast(class, MongoDBBson.BsonTypeMapper.MapToBsonValue1(value, 11 --[[BsonType.RegularExpression]]))
    end
    -- <summary>
    -- Compares this BsonRegularExpression to another BsonRegularExpression.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonRegularExpression is less than, equal to, or greather than the other.</returns>
    CompareTo = function (this, other)
      if op_Equality1(other, nil) then
        return 1
      end
      local r = this._pattern:CompareTo(other._pattern)
      if r ~= 0 then
        return r
      end
      return this._options:CompareTo(other._options)
    end
    -- <summary>
    -- Compares the BsonRegularExpression to another BsonValue.
    -- </summary>
    -- <returns>A 32-bit signed integer that indicates whether this BsonRegularExpression is less than, equal to, or greather than the other BsonValue.</returns>
    CompareTo1 = function (this, other)
      if MongoDBBson.BsonValue.op_Equality(other, nil) then
        return 1
      end
      local otherRegularExpression = System.as(other, class)
      if op_Inequality1(otherRegularExpression, nil) then
        return CompareTo(this, otherRegularExpression)
      end
      return this:CompareTypeTo(other)
    end
    -- <summary>
    -- Compares this BsonRegularExpression to another BsonRegularExpression.
    -- </summary>
    -- <returns>True if the two BsonRegularExpression values are equal.</returns>
    Equals = function (this, rhs)
      if System.Object.ReferenceEquals(rhs) or this:GetType() ~= rhs:GetType() then
        return false
      end
      return this._pattern == rhs._pattern and this._options == rhs._options
    end
    -- <summary>
    -- Compares this BsonRegularExpression to another object.
    -- </summary>
    -- <returns>True if the other object is a BsonRegularExpression and equal to this one.</returns>
    EqualsObj = function (this, obj)
      return Equals(this, System.as(obj, class))
      -- works even if obj is null or of a different type
    end
    -- <summary>
    -- Gets the hash code.
    -- </summary>
    GetHashCode = function (this)
      -- see Effective Java by Joshua Bloch
      local hash = 17
      hash = 37 * hash + this:getBsonType():GetHashCode()
      hash = 37 * hash + this._pattern:GetHashCode()
      hash = 37 * hash + this._options:GetHashCode()
      return hash
    end
    -- <summary>
    -- Converts the BsonRegularExpression to a Regex.
    -- </summary>
    ToRegex = function (this)
      local options = 0 --[[RegexOptions.None]]
      if this._options:IndexOf(105 --[['i']]) ~= - 1 then
        options = options | 1 --[[RegexOptions.IgnoreCase]]
      end
      if this._options:IndexOf(109 --[['m']]) ~= - 1 then
        options = options | 2 --[[RegexOptions.Multiline]]
      end
      if this._options:IndexOf(120 --[['x']]) ~= - 1 then
        options = options | 32 --[[RegexOptions.IgnorePatternWhitespace]]
      end
      if this._options:IndexOf(115 --[['s']]) ~= - 1 then
        options = options | 16 --[[RegexOptions.Singleline]]
      end
      return SystemRegularExpressions.Regex(this._pattern, options)
    end
    -- <summary>
    -- Returns a string representation of the value.
    -- </summary>
    ToString = function (this)
      local escaped = (this._pattern == "") and "(?:)" or this._pattern:Replace("/", [[\/]])
      return System.String.Format("/{0}/{1}", escaped, this._options)
    end
    class = {
      base = function (out)
        return {
          out.MongoDB.Bson.BsonValue,
          System.IComparable_1(out.MongoDB.Bson.BsonRegularExpression),
          System.IEquatable_1(out.MongoDB.Bson.BsonRegularExpression)
        }
      end,
      getBsonType = getBsonType,
      getPattern = getPattern,
      getOptions = getOptions,
      op_Implicit22 = op_Implicit22,
      op_Implicit23 = op_Implicit23,
      op_Inequality1 = op_Inequality1,
      op_Equality1 = op_Equality1,
      Create1 = Create1,
      CompareTo = CompareTo,
      CompareTo1 = CompareTo1,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToRegex = ToRegex,
      ToString = ToString,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "_options", 0x1, System.String },
            { "_pattern", 0x1, System.String }
          },
          properties = {
            { "BsonType", 0x206, System.Int32, getBsonType },
            { "Options", 0x206, System.String, getOptions },
            { "Pattern", 0x206, System.String, getPattern }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
    return class
  end)
end)
