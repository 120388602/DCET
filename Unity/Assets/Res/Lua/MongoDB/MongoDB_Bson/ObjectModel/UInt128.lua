-- Generated by CSharp.lua Compiler
--[[ Copyright 2016-present MongoDB Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
]]
local System = System
local SystemGlobalization = System.Globalization
local SystemRegularExpressions = System.Text.RegularExpressions
System.namespace("MongoDB.Bson", function (namespace)
  -- this is a minimal implementation of UInt128 containing only what we need for Decimal128
  namespace.struct("UInt128", function (namespace)
    local getZero, Add, Compare, Divide, Equals1, Multiply, Multiply1, Parse, 
    TryParse, getHigh, getLow, CompareTo, EqualsObj, Equals, GetHashCode, ToString, 
    class, __ctor1__, __ctor2__
    __ctor1__ = function (this, low)
      if low == nil then
        return
      end
      this._high = 0
      this._low = low
    end
    __ctor2__ = function (this, high, low)
      this._high = high
      this._low = low
    end
    getZero = function ()
      return System.new(class, 2, 0, 0)
    end
    Add = function (x, y)
      local high = getHigh(x) + getHigh(y)
      local low = getLow(x) + getLow(y)
      if low < getLow(x) then
        high = high + 1
      end
      return System.new(class, 2, high, low)
    end
    Compare = function (x, y)
      local result = getHigh(x):CompareTo(getHigh(y))
      if result == 0 then
        result = getLow(x):CompareTo(getLow(y))
      end
      return result
    end
    Divide = function (x, divisor, remainder)
      if getHigh(x) == 0 and getLow(x) == 0 then
        remainder = 0
        return getZero(), remainder
      end

      local a = System.sr(getHigh(x), 32)
      local b = System.band(getHigh(x), 0xffffffff)
      local c = System.sr(getLow(x), 32)
      local d = System.band(getLow(x), 0xffffffff)

      local temp = a
      a = System.band((System.div(temp, divisor)), 0xffffffff)
      temp = (System.sl((System.mod(temp, divisor)), 32)) + b
      b = System.band((System.div(temp, divisor)), 0xffffffff)
      temp = (System.sl((System.mod(temp, divisor)), 32)) + c
      c = System.band((System.div(temp, divisor)), 0xffffffff)
      temp = (System.sl((System.mod(temp, divisor)), 32)) + d
      d = System.band((System.div(temp, divisor)), 0xffffffff)

      local high = (System.sl(a, 32)) + b
      local low = (System.sl(c, 32)) + d
      remainder = System.toUInt32(System.mod(temp, divisor))

      return System.new(class, 2, high, low), remainder
    end
    Equals1 = function (x, y)
      return getHigh(x) == getHigh(y) and getLow(x) == getLow(y)
    end
    Multiply = function (x, y)
      local a = System.sr(getHigh(x), 32)
      local b = System.band(getHigh(x), 0xffffffff)
      local c = System.sr(getLow(x), 32)
      local d = System.band(getLow(x), 0xffffffff)

      d = d * y
      c = c * y + (System.sr(d, 32))
      b = b * y + (System.sr(c, 32))
      a = a * y + (System.sr(b, 32))

      local low = (System.sl(c, 32)) + (System.band(d, 0xffffffff))
      local high = (System.sl(a, 32)) + (System.band(b, 0xffffffff))

      return System.new(class, 2, high, low)
    end
    Multiply1 = function (x, y)
      -- x = a * 2^32 + b
      -- y = c * 2^32 + d
      -- xy = ac * 2^64 + (ad + bc) * 2^32 + bd

      local a = System.sr(x, 32)
      local b = System.band(x, 0xffffffff)
      local c = System.sr(y, 32)
      local d = System.band(y, 0xffffffff)

      local ac = a * c
      local ad = a * d
      local bc = b * c
      local bd = b * d

      local mid = (System.band(ad, 0xffffffff)) + (System.band(bc, 0xffffffff)) + (System.sr(bd, 32))
      local high = ac + (System.sr(ad, 32)) + (System.sr(bc, 32)) + (System.sr(mid, 32))
      local low = (System.sl(mid, 32)) + (System.band(bd, 0xffffffff))

      return System.new(class, 2, high, low)
    end
    Parse = function (s)
      local value
      local default
      default, value = TryParse(s)
      if not default then
        System.throw(System.FormatException("Error parsing UInt128 string: \"" .. s .. "\"."))
      end
      return value:__clone__()
    end
    TryParse = function (s, value)
      if s == nil or #s == 0 then
        value = System.default(class)
        return false, value
      end

      -- remove leading zeroes (and return true if value is zero)
      if s:get(0) == 48 --[['0']] then
        if #s == 1 then
          value = getZero()
          return true, value
        else
          s = SystemRegularExpressions.Regex.Replace(s, "^0+", "")
          if #s == 0 then
            value = getZero()
            return true, value
          end
        end
      end

      -- parse 9 or fewer decimal digits at a time
      value = getZero()
      while #s > 0 do
        local fragmentSize = System.mod(#s, 9)
        if fragmentSize == 0 then
          fragmentSize = 9
        end
        local fragmentString = s:Substring(0, fragmentSize)

        local fragmentValue
        local default
        default, fragmentValue = System.UInt32.TryParse(fragmentString, nil)
        if not default then
          value = System.default(class)
          return false, value
        end

        local combinedValue = Multiply(value:__clone__(), 1000000000 --[[(uint)1000000000]])
        combinedValue = Add(combinedValue:__clone__(), System.new(class, 2, 0, fragmentValue))
        if Compare(combinedValue:__clone__(), value:__clone__()) < 0 then
          -- overflow means s represents a value larger than UInt128.MaxValue
          value = System.default(class)
          return false, value
        end
        value = combinedValue:__clone__()

        s = s:Substring(fragmentSize)
      end

      return true, value
    end
    getHigh = function (this)
      return this._high
    end
    getLow = function (this)
      return this._low
    end
    CompareTo = function (this, other)
      return Compare(this, other:__clone__())
    end
    EqualsObj = function (this, obj)
      if obj == nil or obj:GetType() ~= System.typeof(class) then
        return false
      end
      return Equals(this, System.cast(class, obj))
    end
    Equals = function (this, other)
      return this._high == other._high and this._low == other._low
    end
    GetHashCode = function (this)
      return 37 * this._high:GetHashCode() + this._low:GetHashCode()
    end
    ToString = function (this)
      local builder = nil
      -- don't create the builder until we actually need it
      local value = this
      while true do
        -- convert 9 decimal digits at a time to a string
        local remainder
        local default
        default, remainder = Divide(value:__clone__(), 1000000000 --[[(uint)1000000000]])
        value = default
        local fragmentString = remainder:ToString(SystemGlobalization.NumberFormatInfo.getInvariantInfo())

        if Equals1(value:__clone__(), getZero()) then
          if builder == nil then
            return fragmentString
            -- values with 9 decimal digits or less don't need the builder
          else
            builder:Insert(0, fragmentString)
            return builder:ToString()
          end
        end

        if builder == nil then
          builder = System.StringBuilder(38)
        end
        builder:Insert(0, fragmentString)
        builder:Insert(0, "0", 9 - #fragmentString)
      end
    end
    class = {
      base = function (out)
        return {
          System.IComparable_1(out.MongoDB.Bson.UInt128),
          System.IEquatable_1(out.MongoDB.Bson.UInt128)
        }
      end,
      getZero = getZero,
      Add = Add,
      Compare = Compare,
      Divide = Divide,
      Equals1 = Equals1,
      Multiply = Multiply,
      Multiply1 = Multiply1,
      Parse = Parse,
      TryParse = TryParse,
      _high = 0,
      _low = 0,
      getHigh = getHigh,
      getLow = getLow,
      CompareTo = CompareTo,
      EqualsObj = EqualsObj,
      Equals = Equals,
      GetHashCode = GetHashCode,
      ToString = ToString,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
