//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_FloodPathConstraintWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.FloodPathConstraint), typeof(PF.NNConstraint));
		L.RegFunction("Suitable", Suitable);
		L.RegFunction("New", _CreatePF_FloodPathConstraint);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_FloodPathConstraint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				PF.FloodPath arg0 = (PF.FloodPath)ToLua.CheckObject<PF.FloodPath>(L, 1);
				PF.FloodPathConstraint obj = new PF.FloodPathConstraint(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.FloodPathConstraint.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Suitable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.FloodPathConstraint obj = (PF.FloodPathConstraint)ToLua.CheckObject<PF.FloodPathConstraint>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			bool o = obj.Suitable(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

