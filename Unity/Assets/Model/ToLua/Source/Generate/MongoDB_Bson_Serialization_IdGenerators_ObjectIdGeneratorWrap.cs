//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_IdGenerators_ObjectIdGeneratorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator), typeof(System.Object));
		L.RegFunction("GenerateId", GenerateId);
		L.RegFunction("IsEmpty", IsEmpty);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_IdGenerators_ObjectIdGenerator);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("getInstance", get_Instance);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_IdGenerators_ObjectIdGenerator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator obj = new MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator obj = (MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator)ToLua.CheckObject<MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			object o = obj.GenerateId(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsEmpty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator obj = (MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator)ToLua.CheckObject<MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj.IsEmpty(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

