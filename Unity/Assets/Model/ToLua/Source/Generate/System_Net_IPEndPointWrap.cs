//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_IPEndPointWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.IPEndPoint), typeof(System.Net.EndPoint));
		L.RegFunction("ToString", ToString);
		L.RegFunction("Serialize", Serialize);
		L.RegFunction("Create", Create);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("New", _CreateSystem_Net_IPEndPoint);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("MinPort", 0);
		L.RegConstant("MaxPort", 65535);
		L.RegVar("AddressFamily", get_AddressFamily, null);
		L.RegFunction("getAddressFamily", get_AddressFamily);
		L.RegVar("Address", get_Address, set_Address);
		L.RegFunction("getAddress", get_Address);
		L.RegFunction("setAddress", set_Address);
		L.RegVar("Port", get_Port, set_Port);
		L.RegFunction("getPort", get_Port);
		L.RegFunction("setPort", set_Port);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Net_IPEndPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<long, int>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Net.IPEndPoint obj = new System.Net.IPEndPoint(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Net.IPAddress, int>(L, 1))
			{
				System.Net.IPAddress arg0 = (System.Net.IPAddress)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Net.IPEndPoint obj = new System.Net.IPEndPoint(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Net.IPEndPoint.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Serialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 1);
			System.Net.SocketAddress o = obj.Serialize();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 1);
			System.Net.SocketAddress arg0 = (System.Net.SocketAddress)ToLua.CheckObject<System.Net.SocketAddress>(L, 2);
			System.Net.EndPoint o = obj.Create(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressFamily(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)o;
			System.Net.Sockets.AddressFamily ret = obj.AddressFamily;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AddressFamily on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Address(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)o;
			System.Net.IPAddress ret = obj.Address;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Address on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)o;
			int ret = obj.Port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Address(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)o;
			System.Net.IPAddress arg0 = (System.Net.IPAddress)ToLua.CheckObject<System.Net.IPAddress>(L, 2);
			obj.Address = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Address on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPEndPoint obj = (System.Net.IPEndPoint)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Port = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}
}

