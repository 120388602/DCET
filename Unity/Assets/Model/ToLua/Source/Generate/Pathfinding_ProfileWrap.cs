//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_ProfileWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.Profile), typeof(System.Object));
		L.RegFunction("ControlValue", ControlValue);
		L.RegFunction("WriteCSV", WriteCSV);
		L.RegFunction("Run", Run);
		L.RegFunction("Start", Start);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Log", Log);
		L.RegFunction("ConsoleLog", ConsoleLog);
		L.RegFunction("Control", Control);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreatePathfinding_Profile);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("name", get_name, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_Profile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Pathfinding.Profile obj = new Pathfinding.Profile(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.Profile.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ControlValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
			int o = obj.ControlValue();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteCSV(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			Pathfinding.Profile[] arg1 = ToLua.CheckParamsObject<Pathfinding.Profile>(L, 2, count - 1);
			Pathfinding.Profile.WriteCSV(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Run(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.Run(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
				obj.Stop();
				return 0;
			}
			else if (count == 2)
			{
				Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.Stop(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.Profile.Stop");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
			obj.Log();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConsoleLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
			obj.ConsoleLog();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Control(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
			Pathfinding.Profile arg0 = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 2);
			obj.Control(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Profile obj = (Pathfinding.Profile)ToLua.CheckObject<Pathfinding.Profile>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Profile obj = (Pathfinding.Profile)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}
}

