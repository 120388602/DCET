//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Conventions_ObjectDiscriminatorConventionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention), typeof(System.Object));
		L.RegFunction("GetActualType", GetActualType);
		L.RegFunction("GetDiscriminator", GetDiscriminator);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_Conventions_ObjectDiscriminatorConvention);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("getInstance", get_Instance);
		L.RegVar("ElementName", get_ElementName, null);
		L.RegFunction("getElementName", get_ElementName);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_Conventions_ObjectDiscriminatorConvention(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention obj = new MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetActualType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention obj = (MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention>(L, 1);
			MongoDB.Bson.IO.IBsonReader arg0 = (MongoDB.Bson.IO.IBsonReader)ToLua.CheckObject<MongoDB.Bson.IO.IBsonReader>(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			System.Type o = obj.GetActualType(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDiscriminator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention obj = (MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			MongoDB.Bson.BsonValue o = obj.GetDiscriminator(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElementName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention obj = (MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention)o;
			string ret = obj.ElementName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ElementName on a nil value");
		}
	}
}

