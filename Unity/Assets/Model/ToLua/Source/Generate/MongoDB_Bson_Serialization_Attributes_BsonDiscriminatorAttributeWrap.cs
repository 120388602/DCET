//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Attributes_BsonDiscriminatorAttributeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute), typeof(System.Attribute));
		L.RegFunction("Apply", Apply);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_Attributes_BsonDiscriminatorAttribute);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Discriminator", get_Discriminator, null);
		L.RegFunction("getDiscriminator", get_Discriminator);
		L.RegVar("Required", get_Required, set_Required);
		L.RegFunction("getRequired", get_Required);
		L.RegFunction("setRequired", set_Required);
		L.RegVar("RootClass", get_RootClass, set_RootClass);
		L.RegFunction("getRootClass", get_RootClass);
		L.RegFunction("setRootClass", set_RootClass);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_Attributes_BsonDiscriminatorAttribute(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = new MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = new MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Apply(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = (MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute)ToLua.CheckObject<MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute>(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap arg0 = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 2);
			obj.Apply(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Discriminator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = (MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute)o;
			string ret = obj.Discriminator;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Discriminator on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Required(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = (MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute)o;
			bool ret = obj.Required;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Required on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RootClass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = (MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute)o;
			bool ret = obj.RootClass;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RootClass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Required(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = (MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Required = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Required on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RootClass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute obj = (MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.RootClass = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RootClass on a nil value");
		}
	}
}

