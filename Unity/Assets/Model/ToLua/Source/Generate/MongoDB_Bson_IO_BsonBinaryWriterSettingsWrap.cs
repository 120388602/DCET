//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonBinaryWriterSettingsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.BsonBinaryWriterSettings), typeof(MongoDB.Bson.IO.BsonWriterSettings));
		L.RegFunction("Clone", Clone);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_BsonBinaryWriterSettings);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Defaults", get_Defaults, set_Defaults);
		L.RegFunction("getDefaults", get_Defaults);
		L.RegFunction("setDefaults", set_Defaultster);
		L.RegVar("Encoding", get_Encoding, set_Encoding);
		L.RegFunction("getEncoding", get_Encoding);
		L.RegFunction("setEncoding", set_Encoding);
		L.RegVar("FixOldBinarySubTypeOnOutput", get_FixOldBinarySubTypeOnOutput, set_FixOldBinarySubTypeOnOutput);
		L.RegFunction("getFixOldBinarySubTypeOnOutput", get_FixOldBinarySubTypeOnOutput);
		L.RegFunction("setFixOldBinarySubTypeOnOutput", set_FixOldBinarySubTypeOnOutput);
		L.RegVar("MaxDocumentSize", get_MaxDocumentSize, set_MaxDocumentSize);
		L.RegFunction("getMaxDocumentSize", get_MaxDocumentSize);
		L.RegFunction("setMaxDocumentSize", set_MaxDocumentSize);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_BsonBinaryWriterSettings(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.IO.BsonBinaryWriterSettings obj = new MongoDB.Bson.IO.BsonBinaryWriterSettings();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.BsonBinaryWriterSettings.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings obj = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Defaults(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.IO.BsonBinaryWriterSettings.Defaults);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Encoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings obj = (MongoDB.Bson.IO.BsonBinaryWriterSettings)o;
			System.Text.UTF8Encoding ret = obj.Encoding;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Encoding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FixOldBinarySubTypeOnOutput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings obj = (MongoDB.Bson.IO.BsonBinaryWriterSettings)o;
			bool ret = obj.FixOldBinarySubTypeOnOutput;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FixOldBinarySubTypeOnOutput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxDocumentSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings obj = (MongoDB.Bson.IO.BsonBinaryWriterSettings)o;
			int ret = obj.MaxDocumentSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxDocumentSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaults(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.BsonBinaryWriterSettings arg0 = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriterSettings.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaultster(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.BsonBinaryWriterSettings arg0 = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Encoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings obj = (MongoDB.Bson.IO.BsonBinaryWriterSettings)o;
			System.Text.UTF8Encoding arg0 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 2);
			obj.Encoding = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Encoding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FixOldBinarySubTypeOnOutput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings obj = (MongoDB.Bson.IO.BsonBinaryWriterSettings)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FixOldBinarySubTypeOnOutput = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FixOldBinarySubTypeOnOutput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxDocumentSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriterSettings obj = (MongoDB.Bson.IO.BsonBinaryWriterSettings)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxDocumentSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxDocumentSize on a nil value");
		}
	}
}

