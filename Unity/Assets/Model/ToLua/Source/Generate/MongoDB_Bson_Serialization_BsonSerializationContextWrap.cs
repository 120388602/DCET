//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonSerializationContextWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonSerializationContext), typeof(System.Object));
		L.RegFunction("CreateRoot", CreateRoot);
		L.RegFunction("With", With);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsDynamicType", get_IsDynamicType, null);
		L.RegFunction("getIsDynamicType", get_IsDynamicType);
		L.RegVar("Writer", get_Writer, null);
		L.RegFunction("getWriter", get_Writer);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateRoot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
				MongoDB.Bson.Serialization.BsonSerializationContext o = MongoDB.Bson.Serialization.BsonSerializationContext.CreateRoot(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg1 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 2);
				MongoDB.Bson.Serialization.BsonSerializationContext o = MongoDB.Bson.Serialization.BsonSerializationContext.CreateRoot(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonSerializationContext.CreateRoot");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int With(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.Serialization.BsonSerializationContext obj = (MongoDB.Bson.Serialization.BsonSerializationContext)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationContext>(L, 1);
				MongoDB.Bson.Serialization.BsonSerializationContext o = obj.With();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.Serialization.BsonSerializationContext obj = (MongoDB.Bson.Serialization.BsonSerializationContext)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationContext>(L, 1);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg0 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 2);
				MongoDB.Bson.Serialization.BsonSerializationContext o = obj.With(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonSerializationContext.With");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDynamicType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationContext obj = (MongoDB.Bson.Serialization.BsonSerializationContext)o;
			System.Func<System.Type,bool> ret = obj.IsDynamicType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDynamicType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Writer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationContext obj = (MongoDB.Bson.Serialization.BsonSerializationContext)o;
			MongoDB.Bson.IO.IBsonWriter ret = obj.Writer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Writer on a nil value");
		}
	}
}

