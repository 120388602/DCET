//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_FloodPathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.FloodPath), typeof(PF.Path));
		L.RegFunction("HasPathTo", HasPathTo);
		L.RegFunction("GetParent", GetParent);
		L.RegFunction("Construct", Construct);
		L.RegFunction("New", _CreatePF_FloodPath);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("originalStartPoint", get_originalStartPoint, set_originalStartPoint);
		L.RegVar("startPoint", get_startPoint, set_startPoint);
		L.RegVar("startNode", get_startNode, set_startNode);
		L.RegVar("saveParents", get_saveParents, set_saveParents);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_FloodPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.FloodPath obj = new PF.FloodPath();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.FloodPath.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasPathTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.FloodPath obj = (PF.FloodPath)ToLua.CheckObject<PF.FloodPath>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			bool o = obj.HasPathTo(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetParent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.FloodPath obj = (PF.FloodPath)ToLua.CheckObject<PF.FloodPath>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			PF.GraphNode o = obj.GetParent(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Construct(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				PF.FloodPath o = PF.FloodPath.Construct(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<PF.GraphNode>(L, 1))
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.ToObject(L, 1);
				PF.FloodPath o = PF.FloodPath.Construct(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3, PF.OnPathDelegate>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				PF.OnPathDelegate arg1 = (PF.OnPathDelegate)ToLua.ToObject(L, 2);
				PF.FloodPath o = PF.FloodPath.Construct(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<PF.GraphNode, PF.OnPathDelegate>(L, 1))
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.ToObject(L, 1);
				PF.OnPathDelegate arg1 = (PF.OnPathDelegate)ToLua.ToObject(L, 2);
				PF.FloodPath o = PF.FloodPath.Construct(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.FloodPath.Construct");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_originalStartPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			UnityEngine.Vector3 ret = obj.originalStartPoint;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index originalStartPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_startPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			UnityEngine.Vector3 ret = obj.startPoint;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_startNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			PF.GraphNode ret = obj.startNode;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startNode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_saveParents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			bool ret = obj.saveParents;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index saveParents on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_originalStartPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.originalStartPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index originalStartPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_startPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.startPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_startNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			obj.startNode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startNode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_saveParents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.FloodPath obj = (PF.FloodPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.saveParents = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index saveParents on a nil value");
		}
	}
}

