//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LitJson_JsonWriterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LitJson.JsonWriter), typeof(System.Object));
		L.RegFunction("ToString", ToString);
		L.RegFunction("Reset", Reset);
		L.RegFunction("Write", Write);
		L.RegFunction("WriteArrayEnd", WriteArrayEnd);
		L.RegFunction("WriteArrayStart", WriteArrayStart);
		L.RegFunction("WriteObjectEnd", WriteObjectEnd);
		L.RegFunction("WriteObjectStart", WriteObjectStart);
		L.RegFunction("WritePropertyName", WritePropertyName);
		L.RegFunction("New", _CreateLitJson_JsonWriter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IndentValue", get_IndentValue, set_IndentValue);
		L.RegFunction("getIndentValue", get_IndentValue);
		L.RegFunction("setIndentValue", set_IndentValue);
		L.RegVar("PrettyPrint", get_PrettyPrint, set_PrettyPrint);
		L.RegFunction("getPrettyPrint", get_PrettyPrint);
		L.RegFunction("setPrettyPrint", set_PrettyPrint);
		L.RegVar("TextWriter", get_TextWriter, null);
		L.RegFunction("getTextWriter", get_TextWriter);
		L.RegVar("Validate", get_Validate, set_Validate);
		L.RegFunction("getValidate", get_Validate);
		L.RegFunction("setValidate", set_Validate);
		L.RegVar("LowerCaseProperties", get_LowerCaseProperties, set_LowerCaseProperties);
		L.RegFunction("getLowerCaseProperties", get_LowerCaseProperties);
		L.RegFunction("setLowerCaseProperties", set_LowerCaseProperties);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLitJson_JsonWriter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LitJson.JsonWriter obj = new LitJson.JsonWriter();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Text.StringBuilder>(L, 1))
			{
				System.Text.StringBuilder arg0 = (System.Text.StringBuilder)ToLua.ToObject(L, 1);
				LitJson.JsonWriter obj = new LitJson.JsonWriter(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.IO.TextWriter>(L, 1))
			{
				System.IO.TextWriter arg0 = (System.IO.TextWriter)ToLua.ToObject(L, 1);
				LitJson.JsonWriter obj = new LitJson.JsonWriter(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LitJson.JsonWriter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<ulong>(L, 2))
			{
				LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
				ulong arg0 = LuaDLL.tolua_touint64(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<decimal>(L, 2))
			{
				LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
				decimal arg0 = StackTraits<decimal>.To(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LitJson.JsonWriter.Write");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteArrayEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
			obj.WriteArrayEnd();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteArrayStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
			obj.WriteArrayStart();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteObjectEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
			obj.WriteObjectEnd();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteObjectStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
			obj.WriteObjectStart();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WritePropertyName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WritePropertyName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IndentValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			int ret = obj.IndentValue;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IndentValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PrettyPrint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			bool ret = obj.PrettyPrint;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PrettyPrint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TextWriter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			System.IO.TextWriter ret = obj.TextWriter;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TextWriter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Validate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			bool ret = obj.Validate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Validate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LowerCaseProperties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			bool ret = obj.LowerCaseProperties;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LowerCaseProperties on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IndentValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.IndentValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IndentValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PrettyPrint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.PrettyPrint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PrettyPrint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Validate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Validate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Validate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LowerCaseProperties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonWriter obj = (LitJson.JsonWriter)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.LowerCaseProperties = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LowerCaseProperties on a nil value");
		}
	}
}

