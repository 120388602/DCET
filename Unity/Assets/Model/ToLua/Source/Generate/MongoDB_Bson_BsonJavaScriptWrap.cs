//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_BsonJavaScriptWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.BsonJavaScript), typeof(MongoDB.Bson.BsonValue));
		L.RegFunction("Create", Create);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateMongoDB_Bson_BsonJavaScript);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BsonType", get_BsonType, null);
		L.RegFunction("getBsonType", get_BsonType);
		L.RegVar("Code", get_Code, null);
		L.RegFunction("getCode", get_Code);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_BsonJavaScript(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				MongoDB.Bson.BsonJavaScript obj = new MongoDB.Bson.BsonJavaScript(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.BsonJavaScript.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonJavaScript arg0 = (MongoDB.Bson.BsonJavaScript)ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonJavaScript arg1 = (MongoDB.Bson.BsonJavaScript)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			MongoDB.Bson.BsonJavaScript o = MongoDB.Bson.BsonJavaScript.Create(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonJavaScript>(L, 2))
			{
				MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)ToLua.CheckObject<MongoDB.Bson.BsonJavaScript>(L, 1);
				MongoDB.Bson.BsonJavaScript arg0 = (MongoDB.Bson.BsonJavaScript)ToLua.ToObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)ToLua.CheckObject<MongoDB.Bson.BsonJavaScript>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonJavaScript.CompareTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonJavaScript>(L, 2))
			{
				MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)ToLua.CheckObject<MongoDB.Bson.BsonJavaScript>(L, 1);
				MongoDB.Bson.BsonJavaScript arg0 = (MongoDB.Bson.BsonJavaScript)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)ToLua.CheckObject<MongoDB.Bson.BsonJavaScript>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)ToLua.CheckObject<MongoDB.Bson.BsonJavaScript>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonJavaScript.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)ToLua.CheckObject<MongoDB.Bson.BsonJavaScript>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)ToLua.CheckObject<MongoDB.Bson.BsonJavaScript>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BsonType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)o;
			MongoDB.Bson.BsonType ret = obj.BsonType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BsonType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Code(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonJavaScript obj = (MongoDB.Bson.BsonJavaScript)o;
			string ret = obj.Code;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Code on a nil value");
		}
	}
}

