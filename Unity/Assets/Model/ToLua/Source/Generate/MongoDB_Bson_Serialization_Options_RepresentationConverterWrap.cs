//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Options_RepresentationConverterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.Options.RepresentationConverter), typeof(System.Object));
		L.RegFunction("ToDecimal", ToDecimal);
		L.RegFunction("ToDecimal128", ToDecimal128);
		L.RegFunction("ToDouble", ToDouble);
		L.RegFunction("ToInt16", ToInt16);
		L.RegFunction("ToInt32", ToInt32);
		L.RegFunction("ToInt64", ToInt64);
		L.RegFunction("ToSingle", ToSingle);
		L.RegFunction("ToUInt16", ToUInt16);
		L.RegFunction("ToUInt32", ToUInt32);
		L.RegFunction("ToUInt64", ToUInt64);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_Options_RepresentationConverter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AllowOverflow", get_AllowOverflow, null);
		L.RegFunction("getAllowOverflow", get_AllowOverflow);
		L.RegVar("AllowTruncation", get_AllowTruncation, null);
		L.RegFunction("getAllowTruncation", get_AllowTruncation);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_Options_RepresentationConverter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = new MongoDB.Bson.Serialization.Options.RepresentationConverter(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.Options.RepresentationConverter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDecimal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				decimal o = obj.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				decimal o = obj.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				decimal o = obj.ToDecimal(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToDecimal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDecimal128(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				MongoDB.Bson.Decimal128 o = obj.ToDecimal128(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<ulong>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				ulong arg0 = LuaDLL.tolua_touint64(L, 2);
				MongoDB.Bson.Decimal128 o = obj.ToDecimal128(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<decimal>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				decimal arg0 = StackTraits<decimal>.To(L, 2);
				MongoDB.Bson.Decimal128 o = obj.ToDecimal128(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToDecimal128");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDouble(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				double o = obj.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<ulong>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				ulong arg0 = LuaDLL.tolua_touint64(L, 2);
				double o = obj.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<decimal>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				decimal arg0 = StackTraits<decimal>.To(L, 2);
				double o = obj.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				double o = obj.ToDouble(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToDouble");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt16(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				short o = obj.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				short o = obj.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				short o = obj.ToInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToInt16");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt32(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				int o = obj.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<ulong>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				ulong arg0 = LuaDLL.tolua_touint64(L, 2);
				int o = obj.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<decimal>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				decimal arg0 = StackTraits<decimal>.To(L, 2);
				int o = obj.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				int o = obj.ToInt32(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToInt32");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt64(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				long o = obj.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<ulong>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				ulong arg0 = LuaDLL.tolua_touint64(L, 2);
				long o = obj.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<decimal>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				decimal arg0 = StackTraits<decimal>.To(L, 2);
				long o = obj.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				long o = obj.ToInt64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToInt64");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToSingle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				float o = obj.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				float o = obj.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				float o = obj.ToSingle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToSingle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt16(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				ushort o = obj.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				ushort o = obj.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				ushort o = obj.ToUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToUInt16");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt32(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				uint o = obj.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				uint o = obj.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				uint o = obj.ToUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToUInt32");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt64(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				ulong o = obj.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				ulong o = obj.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)ToLua.CheckObject<MongoDB.Bson.Serialization.Options.RepresentationConverter>(L, 1);
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				ulong o = obj.ToUInt64(arg0);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.Options.RepresentationConverter.ToUInt64");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllowOverflow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)o;
			bool ret = obj.AllowOverflow;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowOverflow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllowTruncation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Options.RepresentationConverter obj = (MongoDB.Bson.Serialization.Options.RepresentationConverter)o;
			bool ret = obj.AllowTruncation;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowTruncation on a nil value");
		}
	}
}

