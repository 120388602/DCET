//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Conventions_StandardDiscriminatorConventionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention), typeof(System.Object));
		L.RegFunction("GetActualType", GetActualType);
		L.RegFunction("GetDiscriminator", GetDiscriminator);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Scalar", get_Scalar, null);
		L.RegFunction("getScalar", get_Scalar);
		L.RegVar("Hierarchical", get_Hierarchical, null);
		L.RegFunction("getHierarchical", get_Hierarchical);
		L.RegVar("ElementName", get_ElementName, null);
		L.RegFunction("getElementName", get_ElementName);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetActualType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention obj = (MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention>(L, 1);
			MongoDB.Bson.IO.IBsonReader arg0 = (MongoDB.Bson.IO.IBsonReader)ToLua.CheckObject<MongoDB.Bson.IO.IBsonReader>(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			System.Type o = obj.GetActualType(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDiscriminator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention obj = (MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			MongoDB.Bson.BsonValue o = obj.GetDiscriminator(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Scalar(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention.Scalar);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hierarchical(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention.Hierarchical);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElementName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention obj = (MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention)o;
			string ret = obj.ElementName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ElementName on a nil value");
		}
	}
}

