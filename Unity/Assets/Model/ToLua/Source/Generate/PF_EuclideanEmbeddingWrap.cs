//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_EuclideanEmbeddingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.EuclideanEmbedding), typeof(System.Object));
		L.RegFunction("GetHeuristic", GetHeuristic);
		L.RegFunction("RecalculatePivots", RecalculatePivots);
		L.RegFunction("New", _CreatePF_EuclideanEmbedding);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mode", get_mode, set_mode);
		L.RegVar("seed", get_seed, set_seed);
		L.RegVar("spreadOutCount", get_spreadOutCount, set_spreadOutCount);
		L.RegVar("dirty", get_dirty, set_dirty);
		L.RegVar("pivots", get_pivots, set_pivots);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_EuclideanEmbedding(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.EuclideanEmbedding obj = new PF.EuclideanEmbedding();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.EuclideanEmbedding.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeuristic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)ToLua.CheckObject<PF.EuclideanEmbedding>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			uint o = obj.GetHeuristic(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecalculatePivots(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)ToLua.CheckObject<PF.EuclideanEmbedding>(L, 1);
			obj.RecalculatePivots();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			PF.HeuristicOptimizationMode ret = obj.mode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_seed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			int ret = obj.seed;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index seed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spreadOutCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			int ret = obj.spreadOutCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spreadOutCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dirty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			bool ret = obj.dirty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dirty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pivots(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			PF.GraphNode[] ret = obj.pivots;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pivots on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			PF.HeuristicOptimizationMode arg0 = (PF.HeuristicOptimizationMode)LuaDLL.luaL_checknumber(L, 2);
			obj.mode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_seed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.seed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index seed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spreadOutCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.spreadOutCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spreadOutCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dirty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.dirty = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dirty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pivots(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.EuclideanEmbedding obj = (PF.EuclideanEmbedding)o;
			PF.GraphNode[] arg0 = ToLua.CheckObjectArray<PF.GraphNode>(L, 2);
			obj.pivots = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pivots on a nil value");
		}
	}
}

