//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_ShapeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.Shape), typeof(FairyGUI.DisplayObject));
		L.RegFunction("DrawRect", DrawRect);
		L.RegFunction("DrawRoundRect", DrawRoundRect);
		L.RegFunction("DrawEllipse", DrawEllipse);
		L.RegFunction("DrawPolygon", DrawPolygon);
		L.RegFunction("DrawRegularPolygon", DrawRegularPolygon);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateFairyGUI_Shape);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("color", get_color, set_color);
		L.RegFunction("getcolor", get_color);
		L.RegFunction("setcolor", set_color);
		L.RegVar("isEmpty", get_isEmpty, null);
		L.RegFunction("getisEmpty", get_isEmpty);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_Shape(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FairyGUI.Shape obj = new FairyGUI.Shape();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.Shape.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Color32[] arg1 = ToLua.CheckStructArray<UnityEngine.Color32>(L, 3);
				obj.DrawRect(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
				obj.DrawRect(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.Shape.DrawRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRoundRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 8);
			obj.DrawRoundRect(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawEllipse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
				UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
				obj.DrawEllipse(arg0);
				return 0;
			}
			else if (count == 7)
			{
				FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
				UnityEngine.Color arg3 = ToLua.ToColor(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
				obj.DrawEllipse(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.Shape.DrawEllipse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawPolygon(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Color>(L, 3))
			{
				FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				obj.DrawPolygon(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Color32[]>(L, 3))
			{
				FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 2);
				UnityEngine.Color32[] arg1 = ToLua.ToStructArray<UnityEngine.Color32>(L, 3);
				obj.DrawPolygon(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.Shape.DrawPolygon");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRegularPolygon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
			UnityEngine.Color arg3 = ToLua.ToColor(L, 5);
			UnityEngine.Color arg4 = ToLua.ToColor(L, 6);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
			float[] arg6 = ToLua.CheckNumberArray<float>(L, 8);
			obj.DrawRegularPolygon(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.Shape obj = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Shape obj = (FairyGUI.Shape)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isEmpty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Shape obj = (FairyGUI.Shape)o;
			bool ret = obj.isEmpty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isEmpty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.Shape obj = (FairyGUI.Shape)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}
}

