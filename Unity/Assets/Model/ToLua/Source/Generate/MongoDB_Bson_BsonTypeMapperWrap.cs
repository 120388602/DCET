//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_BsonTypeMapperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("BsonTypeMapper");
		L.RegFunction("MapToBsonValue", MapToBsonValue);
		L.RegFunction("MapToDotNetValue", MapToDotNetValue);
		L.RegFunction("RegisterCustomTypeMapper", RegisterCustomTypeMapper);
		L.RegFunction("TryMapToBsonValue", TryMapToBsonValue);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapToBsonValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				MongoDB.Bson.BsonValue o = MongoDB.Bson.BsonTypeMapper.MapToBsonValue(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				MongoDB.Bson.BsonType arg1 = (MongoDB.Bson.BsonType)LuaDLL.luaL_checknumber(L, 2);
				MongoDB.Bson.BsonValue o = MongoDB.Bson.BsonTypeMapper.MapToBsonValue(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonTypeMapper.MapToBsonValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapToDotNetValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				object o = MongoDB.Bson.BsonTypeMapper.MapToDotNetValue(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				MongoDB.Bson.BsonTypeMapperOptions arg1 = (MongoDB.Bson.BsonTypeMapperOptions)ToLua.CheckObject<MongoDB.Bson.BsonTypeMapperOptions>(L, 2);
				object o = MongoDB.Bson.BsonTypeMapper.MapToDotNetValue(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonTypeMapper.MapToDotNetValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCustomTypeMapper(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.ICustomBsonTypeMapper arg1 = (MongoDB.Bson.ICustomBsonTypeMapper)ToLua.CheckObject<MongoDB.Bson.ICustomBsonTypeMapper>(L, 2);
			MongoDB.Bson.BsonTypeMapper.RegisterCustomTypeMapper(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryMapToBsonValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			object arg0 = ToLua.ToVarObject(L, 1);
			MongoDB.Bson.BsonValue arg1 = null;
			bool o = MongoDB.Bson.BsonTypeMapper.TryMapToBsonValue(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushObject(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

