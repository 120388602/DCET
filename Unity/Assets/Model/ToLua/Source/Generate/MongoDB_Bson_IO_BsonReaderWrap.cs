//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonReaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.BsonReader), typeof(System.Object));
		L.RegFunction("Close", Close);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("GetBookmark", GetBookmark);
		L.RegFunction("GetCurrentBsonType", GetCurrentBsonType);
		L.RegFunction("IsAtEndOfFile", IsAtEndOfFile);
		L.RegFunction("ReadBinaryData", ReadBinaryData);
		L.RegFunction("ReadBoolean", ReadBoolean);
		L.RegFunction("ReadBsonType", ReadBsonType);
		L.RegFunction("ReadBytes", ReadBytes);
		L.RegFunction("ReadDateTime", ReadDateTime);
		L.RegFunction("ReadDecimal128", ReadDecimal128);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("ReadEndArray", ReadEndArray);
		L.RegFunction("ReadEndDocument", ReadEndDocument);
		L.RegFunction("ReadInt32", ReadInt32);
		L.RegFunction("ReadInt64", ReadInt64);
		L.RegFunction("ReadJavaScript", ReadJavaScript);
		L.RegFunction("ReadJavaScriptWithScope", ReadJavaScriptWithScope);
		L.RegFunction("ReadMaxKey", ReadMaxKey);
		L.RegFunction("ReadMinKey", ReadMinKey);
		L.RegFunction("ReadName", ReadName);
		L.RegFunction("ReadNull", ReadNull);
		L.RegFunction("ReadObjectId", ReadObjectId);
		L.RegFunction("ReadRawBsonArray", ReadRawBsonArray);
		L.RegFunction("ReadRawBsonDocument", ReadRawBsonDocument);
		L.RegFunction("ReadRegularExpression", ReadRegularExpression);
		L.RegFunction("ReadStartArray", ReadStartArray);
		L.RegFunction("ReadStartDocument", ReadStartDocument);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("ReadSymbol", ReadSymbol);
		L.RegFunction("ReadTimestamp", ReadTimestamp);
		L.RegFunction("ReadUndefined", ReadUndefined);
		L.RegFunction("ReturnToBookmark", ReturnToBookmark);
		L.RegFunction("SkipName", SkipName);
		L.RegFunction("SkipValue", SkipValue);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CurrentBsonType", get_CurrentBsonType, null);
		L.RegFunction("getCurrentBsonType", get_CurrentBsonType);
		L.RegVar("Settings", get_Settings, null);
		L.RegFunction("getSettings", get_Settings);
		L.RegVar("State", get_State, null);
		L.RegFunction("getState", get_State);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBookmark(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.IO.BsonReaderBookmark o = obj.GetBookmark();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentBsonType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.BsonType o = obj.GetCurrentBsonType();
			LuaDLL.lua_pushinteger(L, (int)o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAtEndOfFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			bool o = obj.IsAtEndOfFile();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBinaryData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.BsonBinaryData o = obj.ReadBinaryData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			bool o = obj.ReadBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBsonType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.BsonType o = obj.ReadBsonType();
			LuaDLL.lua_pushinteger(L, (int)o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			byte[] o = obj.ReadBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDateTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			long o = obj.ReadDateTime();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.Decimal128 o = obj.ReadDecimal128();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadEndArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadEndArray();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadEndDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadEndDocument();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			int o = obj.ReadInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			long o = obj.ReadInt64();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadJavaScript(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			string o = obj.ReadJavaScript();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadJavaScriptWithScope(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			string o = obj.ReadJavaScriptWithScope();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadMaxKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadMaxKey();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadMinKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadMinKey();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadName(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
				string o = obj.ReadName();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
				MongoDB.Bson.IO.INameDecoder arg0 = (MongoDB.Bson.IO.INameDecoder)ToLua.CheckObject<MongoDB.Bson.IO.INameDecoder>(L, 2);
				string o = obj.ReadName(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.IO.BsonReader.ReadName");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadNull(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadNull();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadObjectId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.ObjectId o = obj.ReadObjectId();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadRawBsonArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.IO.IByteBuffer o = obj.ReadRawBsonArray();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadRawBsonDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.IO.IByteBuffer o = obj.ReadRawBsonDocument();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadRegularExpression(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.BsonRegularExpression o = obj.ReadRegularExpression();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadStartArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadStartArray();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadStartDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadStartDocument();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSymbol(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			string o = obj.ReadSymbol();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadTimestamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			long o = obj.ReadTimestamp();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUndefined(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.ReadUndefined();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnToBookmark(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			MongoDB.Bson.IO.BsonReaderBookmark arg0 = (MongoDB.Bson.IO.BsonReaderBookmark)ToLua.CheckObject<MongoDB.Bson.IO.BsonReaderBookmark>(L, 2);
			obj.ReturnToBookmark(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkipName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.SkipName();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkipValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)ToLua.CheckObject<MongoDB.Bson.IO.BsonReader>(L, 1);
			obj.SkipValue();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentBsonType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)o;
			MongoDB.Bson.BsonType ret = obj.CurrentBsonType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentBsonType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Settings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)o;
			MongoDB.Bson.IO.BsonReaderSettings ret = obj.Settings;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Settings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonReader obj = (MongoDB.Bson.IO.BsonReader)o;
			MongoDB.Bson.IO.BsonReaderState ret = obj.State;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}
}

