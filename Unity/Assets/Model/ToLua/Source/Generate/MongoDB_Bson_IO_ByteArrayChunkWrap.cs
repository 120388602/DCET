//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_ByteArrayChunkWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.ByteArrayChunk), typeof(System.Object));
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("Fork", Fork);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_ByteArrayChunk);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Bytes", get_Bytes, null);
		L.RegFunction("getBytes", get_Bytes);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_ByteArrayChunk(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				MongoDB.Bson.IO.ByteArrayChunk obj = new MongoDB.Bson.IO.ByteArrayChunk(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				MongoDB.Bson.IO.ByteArrayChunk obj = new MongoDB.Bson.IO.ByteArrayChunk(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.ByteArrayChunk.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.ByteArrayChunk obj = (MongoDB.Bson.IO.ByteArrayChunk)ToLua.CheckObject<MongoDB.Bson.IO.ByteArrayChunk>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Fork(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.ByteArrayChunk obj = (MongoDB.Bson.IO.ByteArrayChunk)ToLua.CheckObject<MongoDB.Bson.IO.ByteArrayChunk>(L, 1);
			MongoDB.Bson.IO.IBsonChunk o = obj.Fork();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.ByteArrayChunk obj = (MongoDB.Bson.IO.ByteArrayChunk)o;
			System.ArraySegment<byte> ret = obj.Bytes;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Bytes on a nil value");
		}
	}
}

