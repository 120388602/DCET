//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonMemberMapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonMemberMap), typeof(System.Object));
		L.RegFunction("ApplyDefaultValue", ApplyDefaultValue);
		L.RegFunction("Freeze", Freeze);
		L.RegFunction("GetSerializer", GetSerializer);
		L.RegFunction("Reset", Reset);
		L.RegFunction("SetDefaultValue", SetDefaultValue);
		L.RegFunction("SetElementName", SetElementName);
		L.RegFunction("SetIdGenerator", SetIdGenerator);
		L.RegFunction("SetIgnoreIfDefault", SetIgnoreIfDefault);
		L.RegFunction("SetIgnoreIfNull", SetIgnoreIfNull);
		L.RegFunction("SetIsRequired", SetIsRequired);
		L.RegFunction("SetOrder", SetOrder);
		L.RegFunction("SetSerializer", SetSerializer);
		L.RegFunction("SetShouldSerializeMethod", SetShouldSerializeMethod);
		L.RegFunction("ShouldSerialize", ShouldSerialize);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_BsonMemberMap);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ClassMap", get_ClassMap, null);
		L.RegFunction("getClassMap", get_ClassMap);
		L.RegVar("MemberName", get_MemberName, null);
		L.RegFunction("getMemberName", get_MemberName);
		L.RegVar("MemberType", get_MemberType, null);
		L.RegFunction("getMemberType", get_MemberType);
		L.RegVar("MemberTypeIsBsonValue", get_MemberTypeIsBsonValue, null);
		L.RegFunction("getMemberTypeIsBsonValue", get_MemberTypeIsBsonValue);
		L.RegVar("ElementName", get_ElementName, null);
		L.RegFunction("getElementName", get_ElementName);
		L.RegVar("Order", get_Order, null);
		L.RegFunction("getOrder", get_Order);
		L.RegVar("MemberInfo", get_MemberInfo, null);
		L.RegFunction("getMemberInfo", get_MemberInfo);
		L.RegVar("Getter", get_Getter, null);
		L.RegFunction("getGetter", get_Getter);
		L.RegVar("Setter", get_Setter, null);
		L.RegFunction("getSetter", get_Setter);
		L.RegVar("IdGenerator", get_IdGenerator, null);
		L.RegFunction("getIdGenerator", get_IdGenerator);
		L.RegVar("IsDefaultValueSpecified", get_IsDefaultValueSpecified, null);
		L.RegFunction("getIsDefaultValueSpecified", get_IsDefaultValueSpecified);
		L.RegVar("IsRequired", get_IsRequired, null);
		L.RegFunction("getIsRequired", get_IsRequired);
		L.RegVar("ShouldSerializeMethod", get_ShouldSerializeMethod, null);
		L.RegFunction("getShouldSerializeMethod", get_ShouldSerializeMethod);
		L.RegVar("IgnoreIfDefault", get_IgnoreIfDefault, null);
		L.RegFunction("getIgnoreIfDefault", get_IgnoreIfDefault);
		L.RegVar("IgnoreIfNull", get_IgnoreIfNull, null);
		L.RegFunction("getIgnoreIfNull", get_IgnoreIfNull);
		L.RegVar("DefaultValue", get_DefaultValue, null);
		L.RegFunction("getDefaultValue", get_DefaultValue);
		L.RegVar("IsReadOnly", get_IsReadOnly, null);
		L.RegFunction("getIsReadOnly", get_IsReadOnly);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_BsonMemberMap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MongoDB.Bson.Serialization.BsonClassMap arg0 = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
				System.Reflection.MemberInfo arg1 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 2);
				MongoDB.Bson.Serialization.BsonMemberMap obj = new MongoDB.Bson.Serialization.BsonMemberMap(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.BsonMemberMap.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyDefaultValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.ApplyDefaultValue(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Freeze(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			obj.Freeze();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSerializer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			MongoDB.Bson.Serialization.IBsonSerializer o = obj.GetSerializer();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.Reset();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDefaultValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Func<object>>(L, 2))
			{
				MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
				System.Func<object> arg0 = (System.Func<object>)ToLua.ToObject(L, 2);
				MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetDefaultValue(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetDefaultValue(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonMemberMap.SetDefaultValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetElementName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetElementName(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIdGenerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			MongoDB.Bson.Serialization.IIdGenerator arg0 = (MongoDB.Bson.Serialization.IIdGenerator)ToLua.CheckObject<MongoDB.Bson.Serialization.IIdGenerator>(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetIdGenerator(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIgnoreIfDefault(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetIgnoreIfDefault(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIgnoreIfNull(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetIgnoreIfNull(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIsRequired(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetIsRequired(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetOrder(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSerializer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			MongoDB.Bson.Serialization.IBsonSerializer arg0 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetSerializer(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShouldSerializeMethod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			System.Func<object,bool> arg0 = (System.Func<object,bool>)ToLua.CheckDelegate<System.Func<object,bool>>(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.SetShouldSerializeMethod(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShouldSerialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			bool o = obj.ShouldSerialize(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClassMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			MongoDB.Bson.Serialization.BsonClassMap ret = obj.ClassMap;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClassMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemberName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			string ret = obj.MemberName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemberType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			System.Type ret = obj.MemberType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemberTypeIsBsonValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			bool ret = obj.MemberTypeIsBsonValue;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberTypeIsBsonValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElementName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			string ret = obj.ElementName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ElementName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Order(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			int ret = obj.Order;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Order on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemberInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			System.Reflection.MemberInfo ret = obj.MemberInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Getter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			System.Func<object,object> ret = obj.Getter;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Getter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Setter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			System.Action<object,object> ret = obj.Setter;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Setter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IdGenerator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			MongoDB.Bson.Serialization.IIdGenerator ret = obj.IdGenerator;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IdGenerator on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDefaultValueSpecified(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			bool ret = obj.IsDefaultValueSpecified;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDefaultValueSpecified on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRequired(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			bool ret = obj.IsRequired;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsRequired on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShouldSerializeMethod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			System.Func<object,bool> ret = obj.ShouldSerializeMethod;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShouldSerializeMethod on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IgnoreIfDefault(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			bool ret = obj.IgnoreIfDefault;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IgnoreIfDefault on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IgnoreIfNull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			bool ret = obj.IgnoreIfNull;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IgnoreIfNull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			object ret = obj.DefaultValue;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsReadOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap obj = (MongoDB.Bson.Serialization.BsonMemberMap)o;
			bool ret = obj.IsReadOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsReadOnly on a nil value");
		}
	}
}

