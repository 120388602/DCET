//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_RecastTileUpdateHandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.RecastTileUpdateHandler), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetGraph", SetGraph);
		L.RegFunction("ScheduleUpdate", ScheduleUpdate);
		L.RegFunction("UpdateDirtyTiles", UpdateDirtyTiles);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("maxThrottlingDelay", get_maxThrottlingDelay, set_maxThrottlingDelay);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGraph(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.RecastTileUpdateHandler obj = (Pathfinding.RecastTileUpdateHandler)ToLua.CheckObject<Pathfinding.RecastTileUpdateHandler>(L, 1);
			PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 2);
			obj.SetGraph(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScheduleUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.RecastTileUpdateHandler obj = (Pathfinding.RecastTileUpdateHandler)ToLua.CheckObject<Pathfinding.RecastTileUpdateHandler>(L, 1);
			UnityEngine.Bounds arg0 = ToLua.ToBounds(L, 2);
			obj.ScheduleUpdate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateDirtyTiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RecastTileUpdateHandler obj = (Pathfinding.RecastTileUpdateHandler)ToLua.CheckObject<Pathfinding.RecastTileUpdateHandler>(L, 1);
			obj.UpdateDirtyTiles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxThrottlingDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RecastTileUpdateHandler obj = (Pathfinding.RecastTileUpdateHandler)o;
			float ret = obj.maxThrottlingDelay;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxThrottlingDelay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxThrottlingDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RecastTileUpdateHandler obj = (Pathfinding.RecastTileUpdateHandler)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxThrottlingDelay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxThrottlingDelay on a nil value");
		}
	}
}

