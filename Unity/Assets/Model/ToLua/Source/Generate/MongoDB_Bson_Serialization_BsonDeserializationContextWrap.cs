//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonDeserializationContextWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonDeserializationContext), typeof(System.Object));
		L.RegFunction("CreateRoot", CreateRoot);
		L.RegFunction("With", With);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AllowDuplicateElementNames", get_AllowDuplicateElementNames, null);
		L.RegFunction("getAllowDuplicateElementNames", get_AllowDuplicateElementNames);
		L.RegVar("DynamicArraySerializer", get_DynamicArraySerializer, null);
		L.RegFunction("getDynamicArraySerializer", get_DynamicArraySerializer);
		L.RegVar("DynamicDocumentSerializer", get_DynamicDocumentSerializer, null);
		L.RegFunction("getDynamicDocumentSerializer", get_DynamicDocumentSerializer);
		L.RegVar("Reader", get_Reader, null);
		L.RegFunction("getReader", get_Reader);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateRoot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.IO.IBsonReader arg0 = (MongoDB.Bson.IO.IBsonReader)ToLua.CheckObject<MongoDB.Bson.IO.IBsonReader>(L, 1);
				MongoDB.Bson.Serialization.BsonDeserializationContext o = MongoDB.Bson.Serialization.BsonDeserializationContext.CreateRoot(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.IO.IBsonReader arg0 = (MongoDB.Bson.IO.IBsonReader)ToLua.CheckObject<MongoDB.Bson.IO.IBsonReader>(L, 1);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg1 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 2);
				MongoDB.Bson.Serialization.BsonDeserializationContext o = MongoDB.Bson.Serialization.BsonDeserializationContext.CreateRoot(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonDeserializationContext.CreateRoot");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int With(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.Serialization.BsonDeserializationContext obj = (MongoDB.Bson.Serialization.BsonDeserializationContext)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonDeserializationContext>(L, 1);
				MongoDB.Bson.Serialization.BsonDeserializationContext o = obj.With();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.Serialization.BsonDeserializationContext obj = (MongoDB.Bson.Serialization.BsonDeserializationContext)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonDeserializationContext>(L, 1);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg0 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 2);
				MongoDB.Bson.Serialization.BsonDeserializationContext o = obj.With(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonDeserializationContext.With");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllowDuplicateElementNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonDeserializationContext obj = (MongoDB.Bson.Serialization.BsonDeserializationContext)o;
			bool ret = obj.AllowDuplicateElementNames;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowDuplicateElementNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DynamicArraySerializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonDeserializationContext obj = (MongoDB.Bson.Serialization.BsonDeserializationContext)o;
			MongoDB.Bson.Serialization.IBsonSerializer ret = obj.DynamicArraySerializer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DynamicArraySerializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DynamicDocumentSerializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonDeserializationContext obj = (MongoDB.Bson.Serialization.BsonDeserializationContext)o;
			MongoDB.Bson.Serialization.IBsonSerializer ret = obj.DynamicDocumentSerializer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DynamicDocumentSerializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Reader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonDeserializationContext obj = (MongoDB.Bson.Serialization.BsonDeserializationContext)o;
			MongoDB.Bson.IO.IBsonReader ret = obj.Reader;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Reader on a nil value");
		}
	}
}

