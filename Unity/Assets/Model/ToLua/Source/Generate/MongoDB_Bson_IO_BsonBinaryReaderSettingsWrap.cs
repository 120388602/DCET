//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonBinaryReaderSettingsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.BsonBinaryReaderSettings), typeof(MongoDB.Bson.IO.BsonReaderSettings));
		L.RegFunction("Clone", Clone);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_BsonBinaryReaderSettings);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Defaults", get_Defaults, set_Defaults);
		L.RegFunction("getDefaults", get_Defaults);
		L.RegFunction("setDefaults", set_Defaultster);
		L.RegVar("Encoding", get_Encoding, set_Encoding);
		L.RegFunction("getEncoding", get_Encoding);
		L.RegFunction("setEncoding", set_Encoding);
		L.RegVar("FixOldBinarySubTypeOnInput", get_FixOldBinarySubTypeOnInput, set_FixOldBinarySubTypeOnInput);
		L.RegFunction("getFixOldBinarySubTypeOnInput", get_FixOldBinarySubTypeOnInput);
		L.RegFunction("setFixOldBinarySubTypeOnInput", set_FixOldBinarySubTypeOnInput);
		L.RegVar("FixOldDateTimeMaxValueOnInput", get_FixOldDateTimeMaxValueOnInput, set_FixOldDateTimeMaxValueOnInput);
		L.RegFunction("getFixOldDateTimeMaxValueOnInput", get_FixOldDateTimeMaxValueOnInput);
		L.RegFunction("setFixOldDateTimeMaxValueOnInput", set_FixOldDateTimeMaxValueOnInput);
		L.RegVar("MaxDocumentSize", get_MaxDocumentSize, set_MaxDocumentSize);
		L.RegFunction("getMaxDocumentSize", get_MaxDocumentSize);
		L.RegFunction("setMaxDocumentSize", set_MaxDocumentSize);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_BsonBinaryReaderSettings(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.IO.BsonBinaryReaderSettings obj = new MongoDB.Bson.IO.BsonBinaryReaderSettings();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.BsonBinaryReaderSettings.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryReaderSettings>(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Defaults(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.IO.BsonBinaryReaderSettings.Defaults);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Encoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			System.Text.UTF8Encoding ret = obj.Encoding;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Encoding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FixOldBinarySubTypeOnInput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			bool ret = obj.FixOldBinarySubTypeOnInput;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FixOldBinarySubTypeOnInput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FixOldDateTimeMaxValueOnInput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			bool ret = obj.FixOldDateTimeMaxValueOnInput;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FixOldDateTimeMaxValueOnInput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxDocumentSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			int ret = obj.MaxDocumentSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxDocumentSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaults(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.BsonBinaryReaderSettings arg0 = (MongoDB.Bson.IO.BsonBinaryReaderSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryReaderSettings>(L, 2);
			MongoDB.Bson.IO.BsonBinaryReaderSettings.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaultster(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.BsonBinaryReaderSettings arg0 = (MongoDB.Bson.IO.BsonBinaryReaderSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryReaderSettings>(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Encoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			System.Text.UTF8Encoding arg0 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 2);
			obj.Encoding = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Encoding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FixOldBinarySubTypeOnInput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FixOldBinarySubTypeOnInput = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FixOldBinarySubTypeOnInput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FixOldDateTimeMaxValueOnInput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FixOldDateTimeMaxValueOnInput = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FixOldDateTimeMaxValueOnInput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxDocumentSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings obj = (MongoDB.Bson.IO.BsonBinaryReaderSettings)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxDocumentSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxDocumentSize on a nil value");
		}
	}
}

