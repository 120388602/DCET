//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonSerializerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("BsonSerializer");
		L.RegFunction("Deserialize", Deserialize);
		L.RegFunction("IsTypeDiscriminated", IsTypeDiscriminated);
		L.RegFunction("LookupActualType", LookupActualType);
		L.RegFunction("LookupDiscriminatorConvention", LookupDiscriminatorConvention);
		L.RegFunction("LookupIdGenerator", LookupIdGenerator);
		L.RegFunction("LookupSerializer", LookupSerializer);
		L.RegFunction("RegisterDiscriminator", RegisterDiscriminator);
		L.RegFunction("RegisterDiscriminatorConvention", RegisterDiscriminatorConvention);
		L.RegFunction("RegisterGenericSerializerDefinition", RegisterGenericSerializerDefinition);
		L.RegFunction("RegisterIdGenerator", RegisterIdGenerator);
		L.RegFunction("RegisterSerializationProvider", RegisterSerializationProvider);
		L.RegFunction("RegisterSerializer", RegisterSerializer);
		L.RegFunction("Serialize", Serialize);
		L.RegVar("SerializerRegistry", get_SerializerRegistry, null);
		L.RegFunction("getSerializerRegistry", get_SerializerRegistry);
		L.RegVar("UseNullIdChecker", get_UseNullIdChecker, set_UseNullIdChecker);
		L.RegFunction("getUseNullIdChecker", get_UseNullIdChecker);
		L.RegFunction("setUseNullIdChecker", set_UseNullIdCheckerter);
		L.RegVar("UseZeroIdChecker", get_UseZeroIdChecker, set_UseZeroIdChecker);
		L.RegFunction("getUseZeroIdChecker", get_UseZeroIdChecker);
		L.RegFunction("setUseZeroIdChecker", set_UseZeroIdCheckerter);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Deserialize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonDocument, System.Type>(L, 1))
			{
				MongoDB.Bson.BsonDocument arg0 = (MongoDB.Bson.BsonDocument)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.IO.IBsonReader, System.Type>(L, 1))
			{
				MongoDB.Bson.IO.IBsonReader arg0 = (MongoDB.Bson.IO.IBsonReader)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[], System.Type>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.Stream, System.Type>(L, 1))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.Type>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IO.TextReader, System.Type>(L, 1))
			{
				System.IO.TextReader arg0 = (System.IO.TextReader)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<MongoDB.Bson.BsonDocument, System.Type, System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 1))
			{
				MongoDB.Bson.BsonDocument arg0 = (MongoDB.Bson.BsonDocument)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg2 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.ToObject(L, 3);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<MongoDB.Bson.IO.IBsonReader, System.Type, System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 1))
			{
				MongoDB.Bson.IO.IBsonReader arg0 = (MongoDB.Bson.IO.IBsonReader)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg2 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.ToObject(L, 3);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], System.Type, System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg2 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.ToObject(L, 3);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.IO.Stream, System.Type, System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 1))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg2 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.ToObject(L, 3);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Type, System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg2 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.ToObject(L, 3);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.IO.TextReader, System.Type, System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>>(L, 1))
			{
				System.IO.TextReader arg0 = (System.IO.TextReader)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder> arg2 = (System.Action<MongoDB.Bson.Serialization.BsonDeserializationContext.Builder>)ToLua.ToObject(L, 3);
				object o = MongoDB.Bson.Serialization.BsonSerializer.Deserialize(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonSerializer.Deserialize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTypeDiscriminated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			bool o = MongoDB.Bson.Serialization.BsonSerializer.IsTypeDiscriminated(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LookupActualType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			System.Type o = MongoDB.Bson.Serialization.BsonSerializer.LookupActualType(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LookupDiscriminatorConvention(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention o = MongoDB.Bson.Serialization.BsonSerializer.LookupDiscriminatorConvention(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LookupIdGenerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.IIdGenerator o = MongoDB.Bson.Serialization.BsonSerializer.LookupIdGenerator(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LookupSerializer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.IBsonSerializer o = MongoDB.Bson.Serialization.BsonSerializer.LookupSerializer(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterDiscriminator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			MongoDB.Bson.Serialization.BsonSerializer.RegisterDiscriminator(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterDiscriminatorConvention(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention arg1 = (MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention>(L, 2);
			MongoDB.Bson.Serialization.BsonSerializer.RegisterDiscriminatorConvention(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterGenericSerializerDefinition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			MongoDB.Bson.Serialization.BsonSerializer.RegisterGenericSerializerDefinition(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterIdGenerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.IIdGenerator arg1 = (MongoDB.Bson.Serialization.IIdGenerator)ToLua.CheckObject<MongoDB.Bson.Serialization.IIdGenerator>(L, 2);
			MongoDB.Bson.Serialization.BsonSerializer.RegisterIdGenerator(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterSerializationProvider(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.IBsonSerializationProvider arg0 = (MongoDB.Bson.Serialization.IBsonSerializationProvider)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializationProvider>(L, 1);
			MongoDB.Bson.Serialization.BsonSerializer.RegisterSerializationProvider(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterSerializer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.IBsonSerializer arg1 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 2);
			MongoDB.Bson.Serialization.BsonSerializer.RegisterSerializer(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Serialize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				MongoDB.Bson.Serialization.BsonSerializer.Serialize(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg3 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 4);
				MongoDB.Bson.Serialization.BsonSerializer.Serialize(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg3 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 4);
				MongoDB.Bson.Serialization.BsonSerializationArgs arg4 = StackTraits<MongoDB.Bson.Serialization.BsonSerializationArgs>.Check(L, 5);
				MongoDB.Bson.Serialization.BsonSerializer.Serialize(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonSerializer.Serialize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SerializerRegistry(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.Serialization.BsonSerializer.SerializerRegistry);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseNullIdChecker(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, MongoDB.Bson.Serialization.BsonSerializer.UseNullIdChecker);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseZeroIdChecker(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, MongoDB.Bson.Serialization.BsonSerializer.UseZeroIdChecker);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseNullIdChecker(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			MongoDB.Bson.Serialization.BsonSerializer.UseNullIdChecker = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseNullIdCheckerter(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			MongoDB.Bson.Serialization.BsonSerializer.UseNullIdChecker = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseZeroIdChecker(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			MongoDB.Bson.Serialization.BsonSerializer.UseZeroIdChecker = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseZeroIdCheckerter(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			MongoDB.Bson.Serialization.BsonSerializer.UseZeroIdChecker = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

