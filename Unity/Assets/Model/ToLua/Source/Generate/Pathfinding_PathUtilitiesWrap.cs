//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_PathUtilitiesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("PathUtilities");
		L.RegFunction("IsPathPossible", IsPathPossible);
		L.RegFunction("GetReachableNodes", GetReachableNodes);
		L.RegFunction("BFS", BFS);
		L.RegFunction("GetSpiralPoints", GetSpiralPoints);
		L.RegFunction("GetPointsAroundPointWorld", GetPointsAroundPointWorld);
		L.RegFunction("GetPointsAroundPoint", GetPointsAroundPoint);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPathPossible(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Collections.Generic.List<PF.GraphNode> arg0 = (System.Collections.Generic.List<PF.GraphNode>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<PF.GraphNode>));
				bool o = Pathfinding.PathUtilities.IsPathPossible(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.List<PF.GraphNode>, int>(L, 1))
			{
				System.Collections.Generic.List<PF.GraphNode> arg0 = (System.Collections.Generic.List<PF.GraphNode>)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = Pathfinding.PathUtilities.IsPathPossible(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<PF.GraphNode, PF.GraphNode>(L, 1))
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.ToObject(L, 1);
				PF.GraphNode arg1 = (PF.GraphNode)ToLua.ToObject(L, 2);
				bool o = Pathfinding.PathUtilities.IsPathPossible(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.PathUtilities.IsPathPossible");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetReachableNodes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
				System.Collections.Generic.List<PF.GraphNode> o = Pathfinding.PathUtilities.GetReachableNodes(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Collections.Generic.List<PF.GraphNode> o = Pathfinding.PathUtilities.GetReachableNodes(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Func<PF.GraphNode,bool> arg2 = (System.Func<PF.GraphNode,bool>)ToLua.CheckDelegate<System.Func<PF.GraphNode,bool>>(L, 3);
				System.Collections.Generic.List<PF.GraphNode> o = Pathfinding.PathUtilities.GetReachableNodes(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.PathUtilities.GetReachableNodes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BFS(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Collections.Generic.List<PF.GraphNode> o = Pathfinding.PathUtilities.BFS(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Collections.Generic.List<PF.GraphNode> o = Pathfinding.PathUtilities.BFS(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Func<PF.GraphNode,bool> arg3 = (System.Func<PF.GraphNode,bool>)ToLua.CheckDelegate<System.Func<PF.GraphNode,bool>>(L, 4);
				System.Collections.Generic.List<PF.GraphNode> o = Pathfinding.PathUtilities.BFS(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.PathUtilities.BFS");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSpiralPoints(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector3> o = Pathfinding.PathUtilities.GetSpiralPoints(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPointsAroundPointWorld(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			PF.IRaycastableGraph arg1 = (PF.IRaycastableGraph)ToLua.CheckObject<PF.IRaycastableGraph>(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector3> arg2 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			Pathfinding.PathUtilities.GetPointsAroundPointWorld(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPointsAroundPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			PF.IRaycastableGraph arg1 = (PF.IRaycastableGraph)ToLua.CheckObject<PF.IRaycastableGraph>(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector3> arg2 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			Pathfinding.PathUtilities.GetPointsAroundPoint(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

