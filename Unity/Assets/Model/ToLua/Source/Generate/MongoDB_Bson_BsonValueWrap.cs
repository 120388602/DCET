//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_BsonValueWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.BsonValue), typeof(System.Object));
		L.RegFunction(".geti", get_Item);
		L.RegFunction("get", get_Item);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("get", get_Item);
		L.RegFunction(".seti", set_Item);
		L.RegFunction("set", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("set", set_Item);
		L.RegFunction("Create", Create);
		L.RegFunction("Clone", Clone);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("CompareTypeTo", CompareTypeTo);
		L.RegFunction("DeepClone", DeepClone);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("ToBoolean", ToBoolean);
		L.RegFunction("ToDecimal", ToDecimal);
		L.RegFunction("ToDecimal128", ToDecimal128);
		L.RegFunction("ToDouble", ToDouble);
		L.RegFunction("ToInt32", ToInt32);
		L.RegFunction("ToInt64", ToInt64);
		L.RegFunction("ToLocalTime", ToLocalTime);
		L.RegFunction("ToNullableLocalTime", ToNullableLocalTime);
		L.RegFunction("ToNullableUniversalTime", ToNullableUniversalTime);
		L.RegFunction("ToUniversalTime", ToUniversalTime);
		L.RegVar("this", _this, null);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AsBoolean", get_AsBoolean, null);
		L.RegFunction("getAsBoolean", get_AsBoolean);
		L.RegVar("AsBsonArray", get_AsBsonArray, null);
		L.RegFunction("getAsBsonArray", get_AsBsonArray);
		L.RegVar("AsBsonBinaryData", get_AsBsonBinaryData, null);
		L.RegFunction("getAsBsonBinaryData", get_AsBsonBinaryData);
		L.RegVar("AsBsonDateTime", get_AsBsonDateTime, null);
		L.RegFunction("getAsBsonDateTime", get_AsBsonDateTime);
		L.RegVar("AsBsonDocument", get_AsBsonDocument, null);
		L.RegFunction("getAsBsonDocument", get_AsBsonDocument);
		L.RegVar("AsBsonJavaScript", get_AsBsonJavaScript, null);
		L.RegFunction("getAsBsonJavaScript", get_AsBsonJavaScript);
		L.RegVar("AsBsonJavaScriptWithScope", get_AsBsonJavaScriptWithScope, null);
		L.RegFunction("getAsBsonJavaScriptWithScope", get_AsBsonJavaScriptWithScope);
		L.RegVar("AsBsonMaxKey", get_AsBsonMaxKey, null);
		L.RegFunction("getAsBsonMaxKey", get_AsBsonMaxKey);
		L.RegVar("AsBsonMinKey", get_AsBsonMinKey, null);
		L.RegFunction("getAsBsonMinKey", get_AsBsonMinKey);
		L.RegVar("AsBsonNull", get_AsBsonNull, null);
		L.RegFunction("getAsBsonNull", get_AsBsonNull);
		L.RegVar("AsBsonRegularExpression", get_AsBsonRegularExpression, null);
		L.RegFunction("getAsBsonRegularExpression", get_AsBsonRegularExpression);
		L.RegVar("AsBsonSymbol", get_AsBsonSymbol, null);
		L.RegFunction("getAsBsonSymbol", get_AsBsonSymbol);
		L.RegVar("AsBsonTimestamp", get_AsBsonTimestamp, null);
		L.RegFunction("getAsBsonTimestamp", get_AsBsonTimestamp);
		L.RegVar("AsBsonUndefined", get_AsBsonUndefined, null);
		L.RegFunction("getAsBsonUndefined", get_AsBsonUndefined);
		L.RegVar("AsBsonValue", get_AsBsonValue, null);
		L.RegFunction("getAsBsonValue", get_AsBsonValue);
		L.RegVar("AsByteArray", get_AsByteArray, null);
		L.RegFunction("getAsByteArray", get_AsByteArray);
		L.RegVar("AsDecimal", get_AsDecimal, null);
		L.RegFunction("getAsDecimal", get_AsDecimal);
		L.RegVar("AsDecimal128", get_AsDecimal128, null);
		L.RegFunction("getAsDecimal128", get_AsDecimal128);
		L.RegVar("AsDouble", get_AsDouble, null);
		L.RegFunction("getAsDouble", get_AsDouble);
		L.RegVar("AsGuid", get_AsGuid, null);
		L.RegFunction("getAsGuid", get_AsGuid);
		L.RegVar("AsInt32", get_AsInt32, null);
		L.RegFunction("getAsInt32", get_AsInt32);
		L.RegVar("AsInt64", get_AsInt64, null);
		L.RegFunction("getAsInt64", get_AsInt64);
		L.RegVar("AsNullableBoolean", get_AsNullableBoolean, null);
		L.RegFunction("getAsNullableBoolean", get_AsNullableBoolean);
		L.RegVar("AsNullableDecimal", get_AsNullableDecimal, null);
		L.RegFunction("getAsNullableDecimal", get_AsNullableDecimal);
		L.RegVar("AsNullableDecimal128", get_AsNullableDecimal128, null);
		L.RegFunction("getAsNullableDecimal128", get_AsNullableDecimal128);
		L.RegVar("AsNullableDouble", get_AsNullableDouble, null);
		L.RegFunction("getAsNullableDouble", get_AsNullableDouble);
		L.RegVar("AsNullableGuid", get_AsNullableGuid, null);
		L.RegFunction("getAsNullableGuid", get_AsNullableGuid);
		L.RegVar("AsNullableInt32", get_AsNullableInt32, null);
		L.RegFunction("getAsNullableInt32", get_AsNullableInt32);
		L.RegVar("AsNullableInt64", get_AsNullableInt64, null);
		L.RegFunction("getAsNullableInt64", get_AsNullableInt64);
		L.RegVar("AsNullableObjectId", get_AsNullableObjectId, null);
		L.RegFunction("getAsNullableObjectId", get_AsNullableObjectId);
		L.RegVar("AsObjectId", get_AsObjectId, null);
		L.RegFunction("getAsObjectId", get_AsObjectId);
		L.RegVar("AsRegex", get_AsRegex, null);
		L.RegFunction("getAsRegex", get_AsRegex);
		L.RegVar("AsString", get_AsString, null);
		L.RegFunction("getAsString", get_AsString);
		L.RegVar("BsonType", get_BsonType, null);
		L.RegFunction("getBsonType", get_BsonType);
		L.RegVar("IsBoolean", get_IsBoolean, null);
		L.RegFunction("getIsBoolean", get_IsBoolean);
		L.RegVar("IsBsonArray", get_IsBsonArray, null);
		L.RegFunction("getIsBsonArray", get_IsBsonArray);
		L.RegVar("IsBsonBinaryData", get_IsBsonBinaryData, null);
		L.RegFunction("getIsBsonBinaryData", get_IsBsonBinaryData);
		L.RegVar("IsBsonDateTime", get_IsBsonDateTime, null);
		L.RegFunction("getIsBsonDateTime", get_IsBsonDateTime);
		L.RegVar("IsBsonDocument", get_IsBsonDocument, null);
		L.RegFunction("getIsBsonDocument", get_IsBsonDocument);
		L.RegVar("IsBsonJavaScript", get_IsBsonJavaScript, null);
		L.RegFunction("getIsBsonJavaScript", get_IsBsonJavaScript);
		L.RegVar("IsBsonJavaScriptWithScope", get_IsBsonJavaScriptWithScope, null);
		L.RegFunction("getIsBsonJavaScriptWithScope", get_IsBsonJavaScriptWithScope);
		L.RegVar("IsBsonMaxKey", get_IsBsonMaxKey, null);
		L.RegFunction("getIsBsonMaxKey", get_IsBsonMaxKey);
		L.RegVar("IsBsonMinKey", get_IsBsonMinKey, null);
		L.RegFunction("getIsBsonMinKey", get_IsBsonMinKey);
		L.RegVar("IsBsonNull", get_IsBsonNull, null);
		L.RegFunction("getIsBsonNull", get_IsBsonNull);
		L.RegVar("IsBsonRegularExpression", get_IsBsonRegularExpression, null);
		L.RegFunction("getIsBsonRegularExpression", get_IsBsonRegularExpression);
		L.RegVar("IsBsonSymbol", get_IsBsonSymbol, null);
		L.RegFunction("getIsBsonSymbol", get_IsBsonSymbol);
		L.RegVar("IsBsonTimestamp", get_IsBsonTimestamp, null);
		L.RegFunction("getIsBsonTimestamp", get_IsBsonTimestamp);
		L.RegVar("IsBsonUndefined", get_IsBsonUndefined, null);
		L.RegFunction("getIsBsonUndefined", get_IsBsonUndefined);
		L.RegVar("IsDecimal128", get_IsDecimal128, null);
		L.RegFunction("getIsDecimal128", get_IsDecimal128);
		L.RegVar("IsDouble", get_IsDouble, null);
		L.RegFunction("getIsDouble", get_IsDouble);
		L.RegVar("IsGuid", get_IsGuid, null);
		L.RegFunction("getIsGuid", get_IsGuid);
		L.RegVar("IsInt32", get_IsInt32, null);
		L.RegFunction("getIsInt32", get_IsInt32);
		L.RegVar("IsInt64", get_IsInt64, null);
		L.RegFunction("getIsInt64", get_IsInt64);
		L.RegVar("IsNumeric", get_IsNumeric, null);
		L.RegFunction("getIsNumeric", get_IsNumeric);
		L.RegVar("IsObjectId", get_IsObjectId, null);
		L.RegFunction("getIsObjectId", get_IsObjectId);
		L.RegVar("IsString", get_IsString, null);
		L.RegFunction("getIsString", get_IsString);
		L.RegVar("IsValidDateTime", get_IsValidDateTime, null);
		L.RegFunction("getIsValidDateTime", get_IsValidDateTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: MongoDB.Bson.BsonValue.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: MongoDB.Bson.BsonValue.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonValue.get_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonValue.set_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			MongoDB.Bson.BsonValue o = MongoDB.Bson.BsonValue.Create(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			MongoDB.Bson.BsonValue o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			int o = obj.CompareTo(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTypeTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			int o = obj.CompareTypeTo(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeepClone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			MongoDB.Bson.BsonValue o = obj.DeepClone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonValue.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			bool o = obj.ToBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDecimal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			decimal o = obj.ToDecimal();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			MongoDB.Bson.Decimal128 o = obj.ToDecimal128();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			double o = obj.ToDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			int o = obj.ToInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			long o = obj.ToInt64();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToLocalTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			System.DateTime o = obj.ToLocalTime();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToNullableLocalTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			System.Nullable<System.DateTime> o = obj.ToNullableLocalTime();
			ToLua.PusNullable(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToNullableUniversalTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			System.Nullable<System.DateTime> o = obj.ToNullableUniversalTime();
			ToLua.PusNullable(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUniversalTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 1);
			System.DateTime o = obj.ToUniversalTime();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBoolean(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.AsBoolean;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBoolean on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonArray ret = obj.AsBsonArray;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonArray on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonBinaryData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonBinaryData ret = obj.AsBsonBinaryData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonBinaryData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonDateTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonDateTime ret = obj.AsBsonDateTime;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonDateTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonDocument(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonDocument ret = obj.AsBsonDocument;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonDocument on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonJavaScript(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonJavaScript ret = obj.AsBsonJavaScript;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonJavaScript on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonJavaScriptWithScope(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonJavaScriptWithScope ret = obj.AsBsonJavaScriptWithScope;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonJavaScriptWithScope on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonMaxKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonMaxKey ret = obj.AsBsonMaxKey;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonMaxKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonMinKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonMinKey ret = obj.AsBsonMinKey;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonMinKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonNull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonNull ret = obj.AsBsonNull;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonNull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonRegularExpression(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonRegularExpression ret = obj.AsBsonRegularExpression;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonRegularExpression on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonSymbol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonSymbol ret = obj.AsBsonSymbol;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonSymbol on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonTimestamp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonTimestamp ret = obj.AsBsonTimestamp;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonTimestamp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonUndefined(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonUndefined ret = obj.AsBsonUndefined;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonUndefined on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsBsonValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonValue ret = obj.AsBsonValue;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsBsonValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsByteArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			byte[] ret = obj.AsByteArray;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsByteArray on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsDecimal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			decimal ret = obj.AsDecimal;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsDecimal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsDecimal128(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.Decimal128 ret = obj.AsDecimal128;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsDecimal128 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsDouble(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			double ret = obj.AsDouble;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsDouble on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsGuid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Guid ret = obj.AsGuid;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsGuid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsInt32(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			int ret = obj.AsInt32;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsInt32 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsInt64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			long ret = obj.AsInt64;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsInt64 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableBoolean(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<bool> ret = obj.AsNullableBoolean;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableBoolean on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableDecimal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<decimal> ret = obj.AsNullableDecimal;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableDecimal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableDecimal128(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<MongoDB.Bson.Decimal128> ret = obj.AsNullableDecimal128;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableDecimal128 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableDouble(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<double> ret = obj.AsNullableDouble;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableDouble on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableGuid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<System.Guid> ret = obj.AsNullableGuid;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableGuid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableInt32(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<int> ret = obj.AsNullableInt32;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableInt32 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableInt64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<long> ret = obj.AsNullableInt64;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableInt64 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsNullableObjectId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Nullable<MongoDB.Bson.ObjectId> ret = obj.AsNullableObjectId;
			ToLua.PusNullable(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsNullableObjectId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsObjectId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.ObjectId ret = obj.AsObjectId;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsObjectId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsRegex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			System.Text.RegularExpressions.Regex ret = obj.AsRegex;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsRegex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsString(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			string ret = obj.AsString;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsString on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BsonType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			MongoDB.Bson.BsonType ret = obj.BsonType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BsonType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBoolean(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBoolean;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBoolean on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonArray;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonArray on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonBinaryData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonBinaryData;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonBinaryData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonDateTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonDateTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonDateTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonDocument(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonDocument;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonDocument on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonJavaScript(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonJavaScript;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonJavaScript on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonJavaScriptWithScope(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonJavaScriptWithScope;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonJavaScriptWithScope on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonMaxKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonMaxKey;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonMaxKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonMinKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonMinKey;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonMinKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonNull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonNull;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonNull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonRegularExpression(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonRegularExpression;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonRegularExpression on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonSymbol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonSymbol;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonSymbol on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonTimestamp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonTimestamp;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonTimestamp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBsonUndefined(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsBsonUndefined;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBsonUndefined on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDecimal128(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsDecimal128;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDecimal128 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDouble(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsDouble;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDouble on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsGuid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsGuid;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsGuid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsInt32(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsInt32;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsInt32 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsInt64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsInt64;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsInt64 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsNumeric(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsNumeric;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsNumeric on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsObjectId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsObjectId;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsObjectId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsString(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsString;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsString on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsValidDateTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonValue obj = (MongoDB.Bson.BsonValue)o;
			bool ret = obj.IsValidDateTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsValidDateTime on a nil value");
		}
	}
}

