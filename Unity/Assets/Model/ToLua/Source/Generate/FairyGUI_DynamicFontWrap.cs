//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_DynamicFontWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.DynamicFont), typeof(FairyGUI.BaseFont));
		L.RegFunction("SetFormat", SetFormat);
		L.RegFunction("PrepareCharacters", PrepareCharacters);
		L.RegFunction("GetGlyphSize", GetGlyphSize);
		L.RegFunction("GetGlyph", GetGlyph);
		L.RegFunction("HasCharacter", HasCharacter);
		L.RegFunction("New", _CreateFairyGUI_DynamicFont);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_DynamicFont(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				FairyGUI.DynamicFont obj = new FairyGUI.DynamicFont(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.DynamicFont.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFormat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FairyGUI.DynamicFont obj = (FairyGUI.DynamicFont)ToLua.CheckObject<FairyGUI.DynamicFont>(L, 1);
			FairyGUI.TextFormat arg0 = (FairyGUI.TextFormat)ToLua.CheckObject<FairyGUI.TextFormat>(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetFormat(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrepareCharacters(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.DynamicFont obj = (FairyGUI.DynamicFont)ToLua.CheckObject<FairyGUI.DynamicFont>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.PrepareCharacters(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGlyphSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			FairyGUI.DynamicFont obj = (FairyGUI.DynamicFont)ToLua.CheckObject<FairyGUI.DynamicFont>(L, 1);
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			float arg1;
			float arg2;
			bool o = obj.GetGlyphSize(arg0, out arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg1);
			LuaDLL.lua_pushnumber(L, arg2);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGlyph(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FairyGUI.DynamicFont obj = (FairyGUI.DynamicFont)ToLua.CheckObject<FairyGUI.DynamicFont>(L, 1);
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			FairyGUI.GlyphInfo arg1 = StackTraits<FairyGUI.GlyphInfo>.Check(L, 3);
			bool o = obj.GetGlyph(arg0, ref arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasCharacter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.DynamicFont obj = (FairyGUI.DynamicFont)ToLua.CheckObject<FairyGUI.DynamicFont>(L, 1);
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.HasCharacter(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

