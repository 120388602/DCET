//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_Sockets_SocketWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.Sockets.Socket), typeof(System.Object));
		L.RegFunction("Connect", Connect);
		L.RegFunction("Send", Send);
		L.RegFunction("SendFile", SendFile);
		L.RegFunction("SendTo", SendTo);
		L.RegFunction("Receive", Receive);
		L.RegFunction("ReceiveFrom", ReceiveFrom);
		L.RegFunction("IOControl", IOControl);
		L.RegFunction("SetIPProtectionLevel", SetIPProtectionLevel);
		L.RegFunction("BeginSendFile", BeginSendFile);
		L.RegFunction("BeginConnect", BeginConnect);
		L.RegFunction("BeginSend", BeginSend);
		L.RegFunction("EndSend", EndSend);
		L.RegFunction("BeginReceive", BeginReceive);
		L.RegFunction("EndReceive", EndReceive);
		L.RegFunction("BeginAccept", BeginAccept);
		L.RegFunction("EndAccept", EndAccept);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("ConnectAsync", ConnectAsync);
		L.RegFunction("Select", Select);
		L.RegFunction("Poll", Poll);
		L.RegFunction("Accept", Accept);
		L.RegFunction("AcceptAsync", AcceptAsync);
		L.RegFunction("Bind", Bind);
		L.RegFunction("Listen", Listen);
		L.RegFunction("CancelConnectAsync", CancelConnectAsync);
		L.RegFunction("EndConnect", EndConnect);
		L.RegFunction("Disconnect", Disconnect);
		L.RegFunction("DisconnectAsync", DisconnectAsync);
		L.RegFunction("BeginDisconnect", BeginDisconnect);
		L.RegFunction("EndDisconnect", EndDisconnect);
		L.RegFunction("ReceiveAsync", ReceiveAsync);
		L.RegFunction("ReceiveFromAsync", ReceiveFromAsync);
		L.RegFunction("BeginReceiveFrom", BeginReceiveFrom);
		L.RegFunction("EndReceiveFrom", EndReceiveFrom);
		L.RegFunction("SendAsync", SendAsync);
		L.RegFunction("SendToAsync", SendToAsync);
		L.RegFunction("BeginSendTo", BeginSendTo);
		L.RegFunction("EndSendTo", EndSendTo);
		L.RegFunction("EndSendFile", EndSendFile);
		L.RegFunction("DuplicateAndClose", DuplicateAndClose);
		L.RegFunction("GetSocketOption", GetSocketOption);
		L.RegFunction("SetSocketOption", SetSocketOption);
		L.RegFunction("Close", Close);
		L.RegFunction("Shutdown", Shutdown);
		L.RegFunction("New", _CreateSystem_Net_Sockets_Socket);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OSSupportsIPv4", get_OSSupportsIPv4, null);
		L.RegFunction("getOSSupportsIPv4", get_OSSupportsIPv4);
		L.RegVar("OSSupportsIPv6", get_OSSupportsIPv6, null);
		L.RegFunction("getOSSupportsIPv6", get_OSSupportsIPv6);
		L.RegVar("Handle", get_Handle, null);
		L.RegFunction("getHandle", get_Handle);
		L.RegVar("UseOnlyOverlappedIO", get_UseOnlyOverlappedIO, set_UseOnlyOverlappedIO);
		L.RegFunction("getUseOnlyOverlappedIO", get_UseOnlyOverlappedIO);
		L.RegFunction("setUseOnlyOverlappedIO", set_UseOnlyOverlappedIO);
		L.RegVar("AddressFamily", get_AddressFamily, null);
		L.RegFunction("getAddressFamily", get_AddressFamily);
		L.RegVar("SocketType", get_SocketType, null);
		L.RegFunction("getSocketType", get_SocketType);
		L.RegVar("ProtocolType", get_ProtocolType, null);
		L.RegFunction("getProtocolType", get_ProtocolType);
		L.RegVar("ExclusiveAddressUse", get_ExclusiveAddressUse, set_ExclusiveAddressUse);
		L.RegFunction("getExclusiveAddressUse", get_ExclusiveAddressUse);
		L.RegFunction("setExclusiveAddressUse", set_ExclusiveAddressUse);
		L.RegVar("ReceiveBufferSize", get_ReceiveBufferSize, set_ReceiveBufferSize);
		L.RegFunction("getReceiveBufferSize", get_ReceiveBufferSize);
		L.RegFunction("setReceiveBufferSize", set_ReceiveBufferSize);
		L.RegVar("SendBufferSize", get_SendBufferSize, set_SendBufferSize);
		L.RegFunction("getSendBufferSize", get_SendBufferSize);
		L.RegFunction("setSendBufferSize", set_SendBufferSize);
		L.RegVar("ReceiveTimeout", get_ReceiveTimeout, set_ReceiveTimeout);
		L.RegFunction("getReceiveTimeout", get_ReceiveTimeout);
		L.RegFunction("setReceiveTimeout", set_ReceiveTimeout);
		L.RegVar("SendTimeout", get_SendTimeout, set_SendTimeout);
		L.RegFunction("getSendTimeout", get_SendTimeout);
		L.RegFunction("setSendTimeout", set_SendTimeout);
		L.RegVar("LingerState", get_LingerState, set_LingerState);
		L.RegFunction("getLingerState", get_LingerState);
		L.RegFunction("setLingerState", set_LingerState);
		L.RegVar("Ttl", get_Ttl, set_Ttl);
		L.RegFunction("getTtl", get_Ttl);
		L.RegFunction("setTtl", set_Ttl);
		L.RegVar("DontFragment", get_DontFragment, set_DontFragment);
		L.RegFunction("getDontFragment", get_DontFragment);
		L.RegFunction("setDontFragment", set_DontFragment);
		L.RegVar("DualMode", get_DualMode, set_DualMode);
		L.RegFunction("getDualMode", get_DualMode);
		L.RegFunction("setDualMode", set_DualMode);
		L.RegVar("Available", get_Available, null);
		L.RegFunction("getAvailable", get_Available);
		L.RegVar("EnableBroadcast", get_EnableBroadcast, set_EnableBroadcast);
		L.RegFunction("getEnableBroadcast", get_EnableBroadcast);
		L.RegFunction("setEnableBroadcast", set_EnableBroadcast);
		L.RegVar("IsBound", get_IsBound, null);
		L.RegFunction("getIsBound", get_IsBound);
		L.RegVar("MulticastLoopback", get_MulticastLoopback, set_MulticastLoopback);
		L.RegFunction("getMulticastLoopback", get_MulticastLoopback);
		L.RegFunction("setMulticastLoopback", set_MulticastLoopback);
		L.RegVar("LocalEndPoint", get_LocalEndPoint, null);
		L.RegFunction("getLocalEndPoint", get_LocalEndPoint);
		L.RegVar("Blocking", get_Blocking, set_Blocking);
		L.RegFunction("getBlocking", get_Blocking);
		L.RegFunction("setBlocking", set_Blocking);
		L.RegVar("Connected", get_Connected, null);
		L.RegFunction("getConnected", get_Connected);
		L.RegVar("NoDelay", get_NoDelay, set_NoDelay);
		L.RegFunction("getNoDelay", get_NoDelay);
		L.RegFunction("setNoDelay", set_NoDelay);
		L.RegVar("RemoteEndPoint", get_RemoteEndPoint, null);
		L.RegFunction("getRemoteEndPoint", get_RemoteEndPoint);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Net_Sockets_Socket(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Net.Sockets.SocketInformation arg0 = StackTraits<System.Net.Sockets.SocketInformation>.Check(L, 1);
				System.Net.Sockets.Socket obj = new System.Net.Sockets.Socket(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				System.Net.Sockets.SocketType arg0 = (System.Net.Sockets.SocketType)LuaDLL.luaL_checknumber(L, 1);
				System.Net.Sockets.ProtocolType arg1 = (System.Net.Sockets.ProtocolType)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.Socket obj = new System.Net.Sockets.Socket(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				System.Net.Sockets.AddressFamily arg0 = (System.Net.Sockets.AddressFamily)LuaDLL.luaL_checknumber(L, 1);
				System.Net.Sockets.SocketType arg1 = (System.Net.Sockets.SocketType)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.ProtocolType arg2 = (System.Net.Sockets.ProtocolType)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.Socket obj = new System.Net.Sockets.Socket(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Net.Sockets.Socket.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.EndPoint arg0 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 2);
				obj.Connect(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Net.IPAddress[], int>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.IPAddress[] arg0 = ToLua.ToObjectArray<System.Net.IPAddress>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.Connect(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Net.IPAddress, int>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.IPAddress arg0 = (System.Net.IPAddress)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.Connect(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.Connect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.Connect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int o = obj.Send(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IList<System.ArraySegment<byte>>>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.ToObject(L, 2);
				int o = obj.Send(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], uint>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 3);
				int o = obj.Send(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.IList<System.ArraySegment<byte>>, uint>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.ToObject(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 3);
				int o = obj.Send(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, uint>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.Net.Sockets.SocketFlags arg2 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 4);
				int o = obj.Send(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Collections.Generic.IList<System.ArraySegment<byte>>, uint, LuaInterface.LuaOut<System.Net.Sockets.SocketError>>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.ToObject(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 3);
				System.Net.Sockets.SocketError arg2;
				int o = obj.Send(arg0, arg1, out arg2);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg2);
				return 2;
			}
			else if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				int o = obj.Send(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.Net.Sockets.SocketError arg4;
				int o = obj.Send(arg0, arg1, arg2, arg3, out arg4);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg4);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.SendFile(arg0);
				return 0;
			}
			else if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				System.Net.Sockets.TransmitFileOptions arg3 = (System.Net.Sockets.TransmitFileOptions)LuaDLL.luaL_checknumber(L, 5);
				obj.SendFile(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.SendFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				System.Net.EndPoint arg1 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 3);
				int o = obj.SendTo(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 3);
				System.Net.EndPoint arg2 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 4);
				int o = obj.SendTo(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.SocketFlags arg2 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 4);
				System.Net.EndPoint arg3 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 5);
				int o = obj.SendTo(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.Net.EndPoint arg4 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 6);
				int o = obj.SendTo(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.SendTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Receive(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int o = obj.Receive(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IList<System.ArraySegment<byte>>>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.ToObject(L, 2);
				int o = obj.Receive(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], uint>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 3);
				int o = obj.Receive(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.IList<System.ArraySegment<byte>>, uint>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.ToObject(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 3);
				int o = obj.Receive(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, uint>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.Net.Sockets.SocketFlags arg2 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 4);
				int o = obj.Receive(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Collections.Generic.IList<System.ArraySegment<byte>>, uint, LuaInterface.LuaOut<System.Net.Sockets.SocketError>>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.ToObject(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.lua_tonumber(L, 3);
				System.Net.Sockets.SocketError arg2;
				int o = obj.Receive(arg0, arg1, out arg2);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg2);
				return 2;
			}
			else if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				int o = obj.Receive(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.Net.Sockets.SocketError arg4;
				int o = obj.Receive(arg0, arg1, arg2, arg3, out arg4);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg4);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.Receive");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReceiveFrom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				System.Net.EndPoint arg1 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 3);
				int o = obj.ReceiveFrom(arg0, ref arg1);
				LuaDLL.lua_pushinteger(L, o);
				ToLua.PushObject(L, arg1);
				return 2;
			}
			else if (count == 4)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 3);
				System.Net.EndPoint arg2 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 4);
				int o = obj.ReceiveFrom(arg0, arg1, ref arg2);
				LuaDLL.lua_pushinteger(L, o);
				ToLua.PushObject(L, arg2);
				return 2;
			}
			else if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.SocketFlags arg2 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 4);
				System.Net.EndPoint arg3 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 5);
				int o = obj.ReceiveFrom(arg0, arg1, arg2, ref arg3);
				LuaDLL.lua_pushinteger(L, o);
				ToLua.PushObject(L, arg3);
				return 2;
			}
			else if (count == 6)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.Net.EndPoint arg4 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 6);
				int o = obj.ReceiveFrom(arg0, arg1, arg2, arg3, ref arg4);
				LuaDLL.lua_pushinteger(L, o);
				ToLua.PushObject(L, arg4);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.ReceiveFrom");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IOControl(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<int, byte[], byte[]>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				int o = obj.IOControl(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<uint, byte[], byte[]>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.IOControlCode arg0 = (System.Net.Sockets.IOControlCode)LuaDLL.lua_tonumber(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				int o = obj.IOControl(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.IOControl");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIPProtectionLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.IPProtectionLevel arg0 = (System.Net.Sockets.IPProtectionLevel)LuaDLL.luaL_checknumber(L, 2);
			obj.SetIPProtectionLevel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginSendFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.AsyncCallback arg1 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				System.IAsyncResult o = obj.BeginSendFile(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 7)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				System.Net.Sockets.TransmitFileOptions arg3 = (System.Net.Sockets.TransmitFileOptions)LuaDLL.luaL_checknumber(L, 5);
				System.AsyncCallback arg4 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 6);
				object arg5 = ToLua.ToVarObject(L, 7);
				System.IAsyncResult o = obj.BeginSendFile(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.BeginSendFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginConnect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.EndPoint arg0 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 2);
				System.AsyncCallback arg1 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				System.IAsyncResult o = obj.BeginConnect(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Net.IPAddress, int, System.AsyncCallback, object>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.IPAddress arg0 = (System.Net.IPAddress)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.AsyncCallback arg2 = (System.AsyncCallback)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				System.IAsyncResult o = obj.BeginConnect(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, int, System.AsyncCallback, object>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.AsyncCallback arg2 = (System.AsyncCallback)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				System.IAsyncResult o = obj.BeginConnect(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Net.IPAddress[], int, System.AsyncCallback, object>(L, 2))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.IPAddress[] arg0 = ToLua.ToObjectArray<System.Net.IPAddress>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.AsyncCallback arg2 = (System.AsyncCallback)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				System.IAsyncResult o = obj.BeginConnect(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.BeginConnect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginSend(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.CheckObject<System.Collections.Generic.IList<System.ArraySegment<byte>>>(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 3);
				System.AsyncCallback arg2 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				System.IAsyncResult o = obj.BeginSend(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.CheckObject<System.Collections.Generic.IList<System.ArraySegment<byte>>>(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.SocketError arg2;
				System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				System.IAsyncResult o = obj.BeginSend(arg0, arg1, out arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg2);
				return 2;
			}
			else if (count == 7)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.AsyncCallback arg4 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 6);
				object arg5 = ToLua.ToVarObject(L, 7);
				System.IAsyncResult o = obj.BeginSend(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.Net.Sockets.SocketError arg4;
				System.AsyncCallback arg5 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 7);
				object arg6 = ToLua.ToVarObject(L, 8);
				System.IAsyncResult o = obj.BeginSend(arg0, arg1, arg2, arg3, out arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg4);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.BeginSend");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndSend(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
				int o = obj.EndSend(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
				System.Net.Sockets.SocketError arg1;
				int o = obj.EndSend(arg0, out arg1);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.EndSend");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginReceive(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.CheckObject<System.Collections.Generic.IList<System.ArraySegment<byte>>>(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 3);
				System.AsyncCallback arg2 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				System.IAsyncResult o = obj.BeginReceive(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Collections.Generic.IList<System.ArraySegment<byte>> arg0 = (System.Collections.Generic.IList<System.ArraySegment<byte>>)ToLua.CheckObject<System.Collections.Generic.IList<System.ArraySegment<byte>>>(L, 2);
				System.Net.Sockets.SocketFlags arg1 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.SocketError arg2;
				System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				System.IAsyncResult o = obj.BeginReceive(arg0, arg1, out arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg2);
				return 2;
			}
			else if (count == 7)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.AsyncCallback arg4 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 6);
				object arg5 = ToLua.ToVarObject(L, 7);
				System.IAsyncResult o = obj.BeginReceive(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
				System.Net.Sockets.SocketError arg4;
				System.AsyncCallback arg5 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 7);
				object arg6 = ToLua.ToVarObject(L, 8);
				System.IAsyncResult o = obj.BeginReceive(arg0, arg1, arg2, arg3, out arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg4);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.BeginReceive");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndReceive(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
				int o = obj.EndReceive(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
				System.Net.Sockets.SocketError arg1;
				int o = obj.EndReceive(arg0, out arg1);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushinteger(L, (int)arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.EndReceive");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginAccept(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.AsyncCallback arg0 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				System.IAsyncResult o = obj.BeginAccept(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.AsyncCallback arg1 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				System.IAsyncResult o = obj.BeginAccept(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.AsyncCallback arg2 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				System.IAsyncResult o = obj.BeginAccept(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.BeginAccept");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndAccept(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
				System.Net.Sockets.Socket o = obj.EndAccept(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = null;
				System.IAsyncResult arg1 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 3);
				System.Net.Sockets.Socket o = obj.EndAccept(out arg0, arg1);
				ToLua.PushObject(L, o);
				ToLua.Push(L, arg0);
				return 2;
			}
			else if (count == 4)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				byte[] arg0 = null;
				int arg1;
				System.IAsyncResult arg2 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 4);
				System.Net.Sockets.Socket o = obj.EndAccept(out arg0, out arg1, arg2);
				ToLua.PushObject(L, o);
				ToLua.Push(L, arg0);
				LuaDLL.lua_pushinteger(L, arg1);
				return 3;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.EndAccept");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 2);
				bool o = obj.ConnectAsync(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Net.Sockets.SocketType arg0 = (System.Net.Sockets.SocketType)LuaDLL.luaL_checknumber(L, 1);
				System.Net.Sockets.ProtocolType arg1 = (System.Net.Sockets.ProtocolType)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketAsyncEventArgs arg2 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 3);
				bool o = System.Net.Sockets.Socket.ConnectAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.ConnectAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Select(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Collections.IList arg0 = (System.Collections.IList)ToLua.CheckObject<System.Collections.IList>(L, 1);
			System.Collections.IList arg1 = (System.Collections.IList)ToLua.CheckObject<System.Collections.IList>(L, 2);
			System.Collections.IList arg2 = (System.Collections.IList)ToLua.CheckObject<System.Collections.IList>(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.Net.Sockets.Socket.Select(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Poll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Net.Sockets.SelectMode arg1 = (System.Net.Sockets.SelectMode)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.Poll(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Accept(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.Socket o = obj.Accept();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AcceptAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 2);
			bool o = obj.AcceptAsync(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Bind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.EndPoint arg0 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 2);
			obj.Bind(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Listen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Listen(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelConnectAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 1);
			System.Net.Sockets.Socket.CancelConnectAsync(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.EndConnect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Disconnect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisconnectAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 2);
			bool o = obj.DisconnectAsync(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginDisconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			System.AsyncCallback arg1 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 3);
			object arg2 = ToLua.ToVarObject(L, 4);
			System.IAsyncResult o = obj.BeginDisconnect(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndDisconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.EndDisconnect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReceiveAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 2);
			bool o = obj.ReceiveAsync(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReceiveFromAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 2);
			bool o = obj.ReceiveFromAsync(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginReceiveFrom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
			System.Net.EndPoint arg4 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 6);
			System.AsyncCallback arg5 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 7);
			object arg6 = ToLua.ToVarObject(L, 8);
			System.IAsyncResult o = obj.BeginReceiveFrom(arg0, arg1, arg2, arg3, ref arg4, arg5, arg6);
			ToLua.PushObject(L, o);
			ToLua.PushObject(L, arg4);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndReceiveFrom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			System.Net.EndPoint arg1 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 3);
			int o = obj.EndReceiveFrom(arg0, ref arg1);
			LuaDLL.lua_pushinteger(L, o);
			ToLua.PushObject(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 2);
			bool o = obj.SendAsync(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendToAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.SocketAsyncEventArgs arg0 = (System.Net.Sockets.SocketAsyncEventArgs)ToLua.CheckObject<System.Net.Sockets.SocketAsyncEventArgs>(L, 2);
			bool o = obj.SendToAsync(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginSendTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.Net.Sockets.SocketFlags arg3 = (System.Net.Sockets.SocketFlags)LuaDLL.luaL_checknumber(L, 5);
			System.Net.EndPoint arg4 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 6);
			System.AsyncCallback arg5 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 7);
			object arg6 = ToLua.ToVarObject(L, 8);
			System.IAsyncResult o = obj.BeginSendTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndSendTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			int o = obj.EndSendTo(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndSendFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.EndSendFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DuplicateAndClose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Net.Sockets.SocketInformation o = obj.DuplicateAndClose(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSocketOption(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketOptionLevel arg0 = (System.Net.Sockets.SocketOptionLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketOptionName arg1 = (System.Net.Sockets.SocketOptionName)LuaDLL.luaL_checknumber(L, 3);
				object o = obj.GetSocketOption(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int>(L, 4))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketOptionLevel arg0 = (System.Net.Sockets.SocketOptionLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketOptionName arg1 = (System.Net.Sockets.SocketOptionName)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				byte[] o = obj.GetSocketOption(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[]>(L, 4))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketOptionLevel arg0 = (System.Net.Sockets.SocketOptionLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketOptionName arg1 = (System.Net.Sockets.SocketOptionName)LuaDLL.luaL_checknumber(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				obj.GetSocketOption(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.GetSocketOption");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSocketOption(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<bool>(L, 4))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketOptionLevel arg0 = (System.Net.Sockets.SocketOptionLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketOptionName arg1 = (System.Net.Sockets.SocketOptionName)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.SetSocketOption(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int>(L, 4))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketOptionLevel arg0 = (System.Net.Sockets.SocketOptionLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketOptionName arg1 = (System.Net.Sockets.SocketOptionName)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.SetSocketOption(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[]>(L, 4))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketOptionLevel arg0 = (System.Net.Sockets.SocketOptionLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketOptionName arg1 = (System.Net.Sockets.SocketOptionName)LuaDLL.luaL_checknumber(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				obj.SetSocketOption(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<object>(L, 4))
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				System.Net.Sockets.SocketOptionLevel arg0 = (System.Net.Sockets.SocketOptionLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Net.Sockets.SocketOptionName arg1 = (System.Net.Sockets.SocketOptionName)LuaDLL.luaL_checknumber(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.SetSocketOption(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.SetSocketOption");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				obj.Close();
				return 0;
			}
			else if (count == 2)
			{
				System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.Close(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.Sockets.Socket.Close");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Shutdown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 1);
			System.Net.Sockets.SocketShutdown arg0 = (System.Net.Sockets.SocketShutdown)LuaDLL.luaL_checknumber(L, 2);
			obj.Shutdown(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OSSupportsIPv4(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, System.Net.Sockets.Socket.OSSupportsIPv4);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OSSupportsIPv6(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, System.Net.Sockets.Socket.OSSupportsIPv6);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Handle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.IntPtr ret = obj.Handle;
			LuaDLL.lua_pushlightuserdata(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Handle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseOnlyOverlappedIO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.UseOnlyOverlappedIO;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseOnlyOverlappedIO on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressFamily(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.Net.Sockets.AddressFamily ret = obj.AddressFamily;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AddressFamily on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.Net.Sockets.SocketType ret = obj.SocketType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SocketType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.Net.Sockets.ProtocolType ret = obj.ProtocolType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProtocolType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExclusiveAddressUse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.ExclusiveAddressUse;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExclusiveAddressUse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveBufferSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int ret = obj.ReceiveBufferSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveBufferSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendBufferSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int ret = obj.SendBufferSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendBufferSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int ret = obj.ReceiveTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int ret = obj.SendTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LingerState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.Net.Sockets.LingerOption ret = obj.LingerState;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LingerState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Ttl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			short ret = obj.Ttl;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Ttl on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DontFragment(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.DontFragment;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DontFragment on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DualMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.DualMode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DualMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Available(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int ret = obj.Available;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Available on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnableBroadcast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.EnableBroadcast;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EnableBroadcast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBound(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.IsBound;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBound on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MulticastLoopback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.MulticastLoopback;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MulticastLoopback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LocalEndPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.Net.EndPoint ret = obj.LocalEndPoint;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LocalEndPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Blocking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.Blocking;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Blocking on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Connected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.Connected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Connected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool ret = obj.NoDelay;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NoDelay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RemoteEndPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.Net.EndPoint ret = obj.RemoteEndPoint;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RemoteEndPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseOnlyOverlappedIO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UseOnlyOverlappedIO = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseOnlyOverlappedIO on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExclusiveAddressUse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ExclusiveAddressUse = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExclusiveAddressUse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceiveBufferSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReceiveBufferSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveBufferSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendBufferSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SendBufferSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendBufferSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceiveTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReceiveTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SendTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LingerState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			System.Net.Sockets.LingerOption arg0 = (System.Net.Sockets.LingerOption)ToLua.CheckObject<System.Net.Sockets.LingerOption>(L, 2);
			obj.LingerState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LingerState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Ttl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.Ttl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Ttl on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DontFragment(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DontFragment = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DontFragment on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DualMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DualMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DualMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnableBroadcast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.EnableBroadcast = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EnableBroadcast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MulticastLoopback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MulticastLoopback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MulticastLoopback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Blocking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Blocking = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Blocking on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.Sockets.Socket obj = (System.Net.Sockets.Socket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.NoDelay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NoDelay on a nil value");
		}
	}
}

