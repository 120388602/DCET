//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_BlockManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.BlockManager), typeof(Pathfinding.VersionedMonoBehaviour));
		L.RegFunction("NodeContainsAnyOf", NodeContainsAnyOf);
		L.RegFunction("NodeContainsAnyExcept", NodeContainsAnyExcept);
		L.RegFunction("InternalBlock", InternalBlock);
		L.RegFunction("InternalUnblock", InternalUnblock);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NodeContainsAnyOf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.BlockManager obj = (Pathfinding.BlockManager)ToLua.CheckObject<Pathfinding.BlockManager>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			System.Collections.Generic.List<Pathfinding.SingleNodeBlocker> arg1 = (System.Collections.Generic.List<Pathfinding.SingleNodeBlocker>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<Pathfinding.SingleNodeBlocker>));
			bool o = obj.NodeContainsAnyOf(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NodeContainsAnyExcept(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.BlockManager obj = (Pathfinding.BlockManager)ToLua.CheckObject<Pathfinding.BlockManager>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			System.Collections.Generic.List<Pathfinding.SingleNodeBlocker> arg1 = (System.Collections.Generic.List<Pathfinding.SingleNodeBlocker>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<Pathfinding.SingleNodeBlocker>));
			bool o = obj.NodeContainsAnyExcept(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InternalBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.BlockManager obj = (Pathfinding.BlockManager)ToLua.CheckObject<Pathfinding.BlockManager>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			Pathfinding.SingleNodeBlocker arg1 = (Pathfinding.SingleNodeBlocker)ToLua.CheckObject<Pathfinding.SingleNodeBlocker>(L, 3);
			obj.InternalBlock(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InternalUnblock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.BlockManager obj = (Pathfinding.BlockManager)ToLua.CheckObject<Pathfinding.BlockManager>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			Pathfinding.SingleNodeBlocker arg1 = (Pathfinding.SingleNodeBlocker)ToLua.CheckObject<Pathfinding.SingleNodeBlocker>(L, 3);
			obj.InternalUnblock(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

