//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_LazyBsonArrayWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.LazyBsonArray), typeof(MongoDB.Bson.MaterializedOnDemandBsonArray));
		L.RegFunction("Clone", Clone);
		L.RegFunction("DeepClone", DeepClone);
		L.RegFunction("New", _CreateMongoDB_Bson_LazyBsonArray);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Slice", get_Slice, null);
		L.RegFunction("getSlice", get_Slice);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_LazyBsonArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.IO.IByteBuffer arg0 = (MongoDB.Bson.IO.IByteBuffer)ToLua.CheckObject<MongoDB.Bson.IO.IByteBuffer>(L, 1);
				MongoDB.Bson.LazyBsonArray obj = new MongoDB.Bson.LazyBsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.LazyBsonArray.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.LazyBsonArray obj = (MongoDB.Bson.LazyBsonArray)ToLua.CheckObject<MongoDB.Bson.LazyBsonArray>(L, 1);
			MongoDB.Bson.BsonValue o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeepClone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.LazyBsonArray obj = (MongoDB.Bson.LazyBsonArray)ToLua.CheckObject<MongoDB.Bson.LazyBsonArray>(L, 1);
			MongoDB.Bson.BsonValue o = obj.DeepClone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonArray arg0 = (MongoDB.Bson.BsonArray)ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray arg1 = (MongoDB.Bson.BsonArray)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Slice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.LazyBsonArray obj = (MongoDB.Bson.LazyBsonArray)o;
			MongoDB.Bson.IO.IByteBuffer ret = obj.Slice;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Slice on a nil value");
		}
	}
}

