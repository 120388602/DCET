//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_JsonTokenTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(MongoDB.Bson.IO.JsonTokenType));
		L.RegConstant("Invalid", MongoDB.Bson.IO.JsonTokenType.Invalid);
		L.RegConstant("BeginArray", MongoDB.Bson.IO.JsonTokenType.BeginArray);
		L.RegConstant("BeginObject", MongoDB.Bson.IO.JsonTokenType.BeginObject);
		L.RegConstant("EndArray", MongoDB.Bson.IO.JsonTokenType.EndArray);
		L.RegConstant("LeftParen", MongoDB.Bson.IO.JsonTokenType.LeftParen);
		L.RegConstant("RightParen", MongoDB.Bson.IO.JsonTokenType.RightParen);
		L.RegConstant("EndObject", MongoDB.Bson.IO.JsonTokenType.EndObject);
		L.RegConstant("Colon", MongoDB.Bson.IO.JsonTokenType.Colon);
		L.RegConstant("Comma", MongoDB.Bson.IO.JsonTokenType.Comma);
		L.RegConstant("DateTime", MongoDB.Bson.IO.JsonTokenType.DateTime);
		L.RegConstant("Double", MongoDB.Bson.IO.JsonTokenType.Double);
		L.RegConstant("Int32", MongoDB.Bson.IO.JsonTokenType.Int32);
		L.RegConstant("Int64", MongoDB.Bson.IO.JsonTokenType.Int64);
		L.RegConstant("ObjectId", MongoDB.Bson.IO.JsonTokenType.ObjectId);
		L.RegConstant("RegularExpression", MongoDB.Bson.IO.JsonTokenType.RegularExpression);
		L.RegConstant("String", MongoDB.Bson.IO.JsonTokenType.String);
		L.RegConstant("UnquotedString", MongoDB.Bson.IO.JsonTokenType.UnquotedString);
		L.RegConstant("EndOfFile", MongoDB.Bson.IO.JsonTokenType.EndOfFile);
		L.EndEnum();
		TypeTraits<MongoDB.Bson.IO.JsonTokenType>.Check = CheckType;
		StackTraits<MongoDB.Bson.IO.JsonTokenType>.Push = Push;
	}

	static void Push(IntPtr L, MongoDB.Bson.IO.JsonTokenType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(MongoDB.Bson.IO.JsonTokenType), L, pos);
	}
}

