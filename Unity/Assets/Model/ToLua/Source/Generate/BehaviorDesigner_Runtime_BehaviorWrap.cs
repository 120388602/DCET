//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BehaviorDesigner_Runtime_BehaviorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BehaviorDesigner.Runtime.Behavior), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetBehaviorSource", GetBehaviorSource);
		L.RegFunction("SetBehaviorSource", SetBehaviorSource);
		L.RegFunction("GetObject", GetObject);
		L.RegFunction("GetOwnerName", GetOwnerName);
		L.RegFunction("Start", Start);
		L.RegFunction("EnableBehavior", EnableBehavior);
		L.RegFunction("DisableBehavior", DisableBehavior);
		L.RegFunction("OnEnable", OnEnable);
		L.RegFunction("OnDisable", OnDisable);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("CheckForSerialization", CheckForSerialization);
		L.RegFunction("OnDrawGizmos", OnDrawGizmos);
		L.RegFunction("OnDrawGizmosSelected", OnDrawGizmosSelected);
		L.RegFunction("FindTaskWithName", FindTaskWithName);
		L.RegFunction("FindTasksWithName", FindTasksWithName);
		L.RegFunction("GetActiveTasks", GetActiveTasks);
		L.RegFunction("OnBehaviorStarted", OnBehaviorStarted);
		L.RegFunction("OnBehaviorRestarted", OnBehaviorRestarted);
		L.RegFunction("OnBehaviorEnded", OnBehaviorEnded);
		L.RegFunction("RegisterEvent", RegisterEvent);
		L.RegFunction("SendEvent", SendEvent);
		L.RegFunction("UnregisterEvent", UnregisterEvent);
		L.RegFunction("SaveResetValues", SaveResetValues);
		L.RegFunction("ToString", ToString);
		L.RegFunction("CreateBehaviorManager", CreateBehaviorManager);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("showBehaviorDesignerGizmo", get_showBehaviorDesignerGizmo, set_showBehaviorDesignerGizmo);
		L.RegVar("gizmoViewMode", get_gizmoViewMode, set_gizmoViewMode);
		L.RegVar("StartWhenEnabled", get_StartWhenEnabled, set_StartWhenEnabled);
		L.RegFunction("getStartWhenEnabled", get_StartWhenEnabled);
		L.RegFunction("setStartWhenEnabled", set_StartWhenEnabled);
		L.RegVar("PauseWhenDisabled", get_PauseWhenDisabled, set_PauseWhenDisabled);
		L.RegFunction("getPauseWhenDisabled", get_PauseWhenDisabled);
		L.RegFunction("setPauseWhenDisabled", set_PauseWhenDisabled);
		L.RegVar("RestartWhenComplete", get_RestartWhenComplete, set_RestartWhenComplete);
		L.RegFunction("getRestartWhenComplete", get_RestartWhenComplete);
		L.RegFunction("setRestartWhenComplete", set_RestartWhenComplete);
		L.RegVar("LogTaskChanges", get_LogTaskChanges, set_LogTaskChanges);
		L.RegFunction("getLogTaskChanges", get_LogTaskChanges);
		L.RegFunction("setLogTaskChanges", set_LogTaskChanges);
		L.RegVar("ResetValuesOnRestart", get_ResetValuesOnRestart, set_ResetValuesOnRestart);
		L.RegFunction("getResetValuesOnRestart", get_ResetValuesOnRestart);
		L.RegFunction("setResetValuesOnRestart", set_ResetValuesOnRestart);
		L.RegVar("ExternalBehavior", get_ExternalBehavior, set_ExternalBehavior);
		L.RegFunction("getExternalBehavior", get_ExternalBehavior);
		L.RegFunction("setExternalBehavior", set_ExternalBehavior);
		L.RegVar("HasInheritedVariables", get_HasInheritedVariables, set_HasInheritedVariables);
		L.RegFunction("getHasInheritedVariables", get_HasInheritedVariables);
		L.RegFunction("setHasInheritedVariables", set_HasInheritedVariables);
		L.RegVar("BehaviorName", get_BehaviorName, set_BehaviorName);
		L.RegFunction("getBehaviorName", get_BehaviorName);
		L.RegFunction("setBehaviorName", set_BehaviorName);
		L.RegVar("BehaviorDescription", get_BehaviorDescription, set_BehaviorDescription);
		L.RegFunction("getBehaviorDescription", get_BehaviorDescription);
		L.RegFunction("setBehaviorDescription", set_BehaviorDescription);
		L.RegVar("ExecutionStatus", get_ExecutionStatus, set_ExecutionStatus);
		L.RegFunction("getExecutionStatus", get_ExecutionStatus);
		L.RegFunction("setExecutionStatus", set_ExecutionStatus);
		L.RegVar("HasEvent", get_HasEvent, null);
		L.RegFunction("getHasEvent", get_HasEvent);
		L.RegVar("OnBehaviorStart", get_OnBehaviorStart, set_OnBehaviorStart);
		L.RegFunction("addOnBehaviorStart", addOnBehaviorStart);
		L.RegFunction("removeOnBehaviorStart", removeOnBehaviorStart);
		L.RegVar("OnBehaviorRestart", get_OnBehaviorRestart, set_OnBehaviorRestart);
		L.RegFunction("addOnBehaviorRestart", addOnBehaviorRestart);
		L.RegFunction("removeOnBehaviorRestart", removeOnBehaviorRestart);
		L.RegVar("OnBehaviorEnd", get_OnBehaviorEnd, set_OnBehaviorEnd);
		L.RegFunction("addOnBehaviorEnd", addOnBehaviorEnd);
		L.RegFunction("removeOnBehaviorEnd", removeOnBehaviorEnd);
		L.RegFunction("BehaviorHandler", BehaviorDesigner_Runtime_Behavior_BehaviorHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBehaviorSource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			BehaviorDesigner.Runtime.BehaviorSource o = obj.GetBehaviorSource();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBehaviorSource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			BehaviorDesigner.Runtime.BehaviorSource arg0 = (BehaviorDesigner.Runtime.BehaviorSource)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorSource>(L, 2);
			obj.SetBehaviorSource(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			UnityEngine.Object o = obj.GetObject();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOwnerName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			string o = obj.GetOwnerName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableBehavior(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.EnableBehavior();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisableBehavior(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
				obj.DisableBehavior();
				return 0;
			}
			else if (count == 2)
			{
				BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.DisableBehavior(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BehaviorDesigner.Runtime.Behavior.DisableBehavior");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnEnable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDisable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnDisable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckForSerialization(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.CheckForSerialization();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrawGizmos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnDrawGizmos();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrawGizmosSelected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnDrawGizmosSelected();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTaskWithName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			BehaviorDesigner.Runtime.Tasks.Task o = obj.FindTaskWithName(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTasksWithName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<BehaviorDesigner.Runtime.Tasks.Task> o = obj.FindTasksWithName(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetActiveTasks(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			System.Collections.Generic.List<BehaviorDesigner.Runtime.Tasks.Task> o = obj.GetActiveTasks();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBehaviorStarted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnBehaviorStarted();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBehaviorRestarted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnBehaviorRestarted();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBehaviorEnded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.OnBehaviorEnded();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.RegisterEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SendEvent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregisterEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.UnregisterEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveResetValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			obj.SaveResetValues();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateBehaviorManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BehaviorDesigner.Runtime.BehaviorManager o = BehaviorDesigner.Runtime.Behavior.CreateBehaviorManager();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showBehaviorDesignerGizmo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool ret = obj.showBehaviorDesignerGizmo;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showBehaviorDesignerGizmo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gizmoViewMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			BehaviorDesigner.Runtime.Behavior.GizmoViewMode ret = obj.gizmoViewMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gizmoViewMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StartWhenEnabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool ret = obj.StartWhenEnabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StartWhenEnabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PauseWhenDisabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool ret = obj.PauseWhenDisabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PauseWhenDisabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RestartWhenComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool ret = obj.RestartWhenComplete;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RestartWhenComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogTaskChanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool ret = obj.LogTaskChanges;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LogTaskChanges on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResetValuesOnRestart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool ret = obj.ResetValuesOnRestart;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResetValuesOnRestart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExternalBehavior(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			BehaviorDesigner.Runtime.ExternalBehavior ret = obj.ExternalBehavior;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExternalBehavior on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasInheritedVariables(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool ret = obj.HasInheritedVariables;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasInheritedVariables on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BehaviorName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			string ret = obj.BehaviorName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BehaviorName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BehaviorDescription(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			string ret = obj.BehaviorDescription;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BehaviorDescription on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExecutionStatus(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			BehaviorDesigner.Runtime.Tasks.TaskStatus ret = obj.ExecutionStatus;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExecutionStatus on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool[] ret = obj.HasEvent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasEvent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBehaviorStart(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(BehaviorDesigner.Runtime.Behavior.BehaviorHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBehaviorRestart(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(BehaviorDesigner.Runtime.Behavior.BehaviorHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBehaviorEnd(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(BehaviorDesigner.Runtime.Behavior.BehaviorHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showBehaviorDesignerGizmo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showBehaviorDesignerGizmo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showBehaviorDesignerGizmo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gizmoViewMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			BehaviorDesigner.Runtime.Behavior.GizmoViewMode arg0 = (BehaviorDesigner.Runtime.Behavior.GizmoViewMode)LuaDLL.luaL_checknumber(L, 2);
			obj.gizmoViewMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gizmoViewMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StartWhenEnabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.StartWhenEnabled = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StartWhenEnabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PauseWhenDisabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.PauseWhenDisabled = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PauseWhenDisabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RestartWhenComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.RestartWhenComplete = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RestartWhenComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogTaskChanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.LogTaskChanges = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LogTaskChanges on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResetValuesOnRestart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ResetValuesOnRestart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResetValuesOnRestart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExternalBehavior(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			BehaviorDesigner.Runtime.ExternalBehavior arg0 = (BehaviorDesigner.Runtime.ExternalBehavior)ToLua.CheckObject<BehaviorDesigner.Runtime.ExternalBehavior>(L, 2);
			obj.ExternalBehavior = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExternalBehavior on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HasInheritedVariables(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.HasInheritedVariables = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasInheritedVariables on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BehaviorName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.BehaviorName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BehaviorName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BehaviorDescription(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.BehaviorDescription = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BehaviorDescription on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExecutionStatus(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)o;
			BehaviorDesigner.Runtime.Tasks.TaskStatus arg0 = (BehaviorDesigner.Runtime.Tasks.TaskStatus)LuaDLL.luaL_checknumber(L, 2);
			obj.ExecutionStatus = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExecutionStatus on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBehaviorStart(IntPtr L)
	{
		try
		{
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'BehaviorDesigner.Runtime.Behavior.OnBehaviorStart' can only appear on the left hand side of += or -= when used outside of the type 'BehaviorDesigner.Runtime.Behavior'");
			}

			if (arg0.op == EventOp.Add)
			{
				BehaviorDesigner.Runtime.Behavior.BehaviorHandler ev = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)arg0.func;
				obj.OnBehaviorStart += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				BehaviorDesigner.Runtime.Behavior.BehaviorHandler ev = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)arg0.func;
				obj.OnBehaviorStart -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addOnBehaviorStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			var arg0 = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>(L, 2);
			obj.OnBehaviorStart += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeOnBehaviorStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			var arg0 = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>(L, 2);
			obj.OnBehaviorStart -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBehaviorRestart(IntPtr L)
	{
		try
		{
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'BehaviorDesigner.Runtime.Behavior.OnBehaviorRestart' can only appear on the left hand side of += or -= when used outside of the type 'BehaviorDesigner.Runtime.Behavior'");
			}

			if (arg0.op == EventOp.Add)
			{
				BehaviorDesigner.Runtime.Behavior.BehaviorHandler ev = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)arg0.func;
				obj.OnBehaviorRestart += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				BehaviorDesigner.Runtime.Behavior.BehaviorHandler ev = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)arg0.func;
				obj.OnBehaviorRestart -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addOnBehaviorRestart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			var arg0 = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>(L, 2);
			obj.OnBehaviorRestart += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeOnBehaviorRestart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			var arg0 = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>(L, 2);
			obj.OnBehaviorRestart -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBehaviorEnd(IntPtr L)
	{
		try
		{
			BehaviorDesigner.Runtime.Behavior obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'BehaviorDesigner.Runtime.Behavior.OnBehaviorEnd' can only appear on the left hand side of += or -= when used outside of the type 'BehaviorDesigner.Runtime.Behavior'");
			}

			if (arg0.op == EventOp.Add)
			{
				BehaviorDesigner.Runtime.Behavior.BehaviorHandler ev = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)arg0.func;
				obj.OnBehaviorEnd += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				BehaviorDesigner.Runtime.Behavior.BehaviorHandler ev = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)arg0.func;
				obj.OnBehaviorEnd -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addOnBehaviorEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			var arg0 = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>(L, 2);
			obj.OnBehaviorEnd += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeOnBehaviorEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject(L, 1, typeof(BehaviorDesigner.Runtime.Behavior));
			var arg0 = (BehaviorDesigner.Runtime.Behavior.BehaviorHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>(L, 2);
			obj.OnBehaviorEnd -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorDesigner_Runtime_Behavior_BehaviorHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BehaviorDesigner.Runtime.Behavior.BehaviorHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

