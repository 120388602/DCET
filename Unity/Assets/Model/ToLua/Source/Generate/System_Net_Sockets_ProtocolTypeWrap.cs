//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_Sockets_ProtocolTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(System.Net.Sockets.ProtocolType));
		L.RegConstant("IP", System.Net.Sockets.ProtocolType.IP);
		L.RegConstant("IPv6HopByHopOptions", System.Net.Sockets.ProtocolType.IPv6HopByHopOptions);
		L.RegConstant("Icmp", System.Net.Sockets.ProtocolType.Icmp);
		L.RegConstant("Igmp", System.Net.Sockets.ProtocolType.Igmp);
		L.RegConstant("Ggp", System.Net.Sockets.ProtocolType.Ggp);
		L.RegConstant("IPv4", System.Net.Sockets.ProtocolType.IPv4);
		L.RegConstant("Tcp", System.Net.Sockets.ProtocolType.Tcp);
		L.RegConstant("Pup", System.Net.Sockets.ProtocolType.Pup);
		L.RegConstant("Udp", System.Net.Sockets.ProtocolType.Udp);
		L.RegConstant("Idp", System.Net.Sockets.ProtocolType.Idp);
		L.RegConstant("IPv6", System.Net.Sockets.ProtocolType.IPv6);
		L.RegConstant("IPv6RoutingHeader", System.Net.Sockets.ProtocolType.IPv6RoutingHeader);
		L.RegConstant("IPv6FragmentHeader", System.Net.Sockets.ProtocolType.IPv6FragmentHeader);
		L.RegConstant("IPSecEncapsulatingSecurityPayload", System.Net.Sockets.ProtocolType.IPSecEncapsulatingSecurityPayload);
		L.RegConstant("IPSecAuthenticationHeader", System.Net.Sockets.ProtocolType.IPSecAuthenticationHeader);
		L.RegConstant("IcmpV6", System.Net.Sockets.ProtocolType.IcmpV6);
		L.RegConstant("IPv6NoNextHeader", System.Net.Sockets.ProtocolType.IPv6NoNextHeader);
		L.RegConstant("IPv6DestinationOptions", System.Net.Sockets.ProtocolType.IPv6DestinationOptions);
		L.RegConstant("ND", System.Net.Sockets.ProtocolType.ND);
		L.RegConstant("Raw", System.Net.Sockets.ProtocolType.Raw);
		L.RegConstant("Unspecified", System.Net.Sockets.ProtocolType.Unspecified);
		L.RegConstant("Ipx", System.Net.Sockets.ProtocolType.Ipx);
		L.RegConstant("Spx", System.Net.Sockets.ProtocolType.Spx);
		L.RegConstant("SpxII", System.Net.Sockets.ProtocolType.SpxII);
		L.RegConstant("Unknown", System.Net.Sockets.ProtocolType.Unknown);
		L.EndEnum();
		TypeTraits<System.Net.Sockets.ProtocolType>.Check = CheckType;
		StackTraits<System.Net.Sockets.ProtocolType>.Push = Push;
	}

	static void Push(IntPtr L, System.Net.Sockets.ProtocolType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(System.Net.Sockets.ProtocolType), L, pos);
	}
}

