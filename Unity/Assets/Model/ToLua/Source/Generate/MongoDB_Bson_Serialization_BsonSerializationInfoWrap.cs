//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonSerializationInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonSerializationInfo), typeof(System.Object));
		L.RegFunction("DeserializeValue", DeserializeValue);
		L.RegFunction("Merge", Merge);
		L.RegFunction("SerializeValue", SerializeValue);
		L.RegFunction("SerializeValues", SerializeValues);
		L.RegFunction("WithNewName", WithNewName);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_BsonSerializationInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ElementName", get_ElementName, null);
		L.RegFunction("getElementName", get_ElementName);
		L.RegVar("Serializer", get_Serializer, null);
		L.RegFunction("getSerializer", get_Serializer);
		L.RegVar("NominalType", get_NominalType, null);
		L.RegFunction("getNominalType", get_NominalType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_BsonSerializationInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				MongoDB.Bson.Serialization.IBsonSerializer arg1 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				MongoDB.Bson.Serialization.BsonSerializationInfo obj = new MongoDB.Bson.Serialization.BsonSerializationInfo(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.BsonSerializationInfo.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeserializeValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationInfo>(L, 1);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			object o = obj.DeserializeValue(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Merge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationInfo>(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationInfo arg0 = (MongoDB.Bson.Serialization.BsonSerializationInfo)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationInfo>(L, 2);
			MongoDB.Bson.Serialization.BsonSerializationInfo o = obj.Merge(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationInfo>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			MongoDB.Bson.BsonValue o = obj.SerializeValue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationInfo>(L, 1);
			System.Collections.IEnumerable arg0 = (System.Collections.IEnumerable)ToLua.CheckObject<System.Collections.IEnumerable>(L, 2);
			MongoDB.Bson.BsonArray o = obj.SerializeValues(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WithNewName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonSerializationInfo>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonSerializationInfo o = obj.WithNewName(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElementName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)o;
			string ret = obj.ElementName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ElementName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Serializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)o;
			MongoDB.Bson.Serialization.IBsonSerializer ret = obj.Serializer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Serializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NominalType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationInfo obj = (MongoDB.Bson.Serialization.BsonSerializationInfo)o;
			System.Type ret = obj.NominalType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NominalType on a nil value");
		}
	}
}

