//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonCreatorMapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonCreatorMap), typeof(System.Object));
		L.RegFunction("Freeze", Freeze);
		L.RegFunction("HasDefaultValue", HasDefaultValue);
		L.RegFunction("SetArguments", SetArguments);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_BsonCreatorMap);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Arguments", get_Arguments, null);
		L.RegFunction("getArguments", get_Arguments);
		L.RegVar("ClassMap", get_ClassMap, null);
		L.RegFunction("getClassMap", get_ClassMap);
		L.RegVar("Delegate", get_Delegate, null);
		L.RegFunction("getDelegate", get_Delegate);
		L.RegVar("ElementNames", get_ElementNames, null);
		L.RegFunction("getElementNames", get_ElementNames);
		L.RegVar("MemberInfo", get_MemberInfo, null);
		L.RegFunction("getMemberInfo", get_MemberInfo);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_BsonCreatorMap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				MongoDB.Bson.Serialization.BsonClassMap arg0 = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
				System.Reflection.MemberInfo arg1 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 2);
				System.Delegate arg2 = (System.Delegate)ToLua.CheckObject<System.Delegate>(L, 3);
				MongoDB.Bson.Serialization.BsonCreatorMap obj = new MongoDB.Bson.Serialization.BsonCreatorMap(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.BsonCreatorMap.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Freeze(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonCreatorMap>(L, 1);
			obj.Freeze();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasDefaultValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonCreatorMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasDefaultValue(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetArguments(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>>(L, 2))
			{
				MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonCreatorMap>(L, 1);
				System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> arg0 = (System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)ToLua.ToObject(L, 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.SetArguments(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<string>>(L, 2))
			{
				MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonCreatorMap>(L, 1);
				System.Collections.Generic.IEnumerable<string> arg0 = (System.Collections.Generic.IEnumerable<string>)ToLua.ToObject(L, 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.SetArguments(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonCreatorMap.SetArguments");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Arguments(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)o;
			System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> ret = obj.Arguments;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Arguments on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClassMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)o;
			MongoDB.Bson.Serialization.BsonClassMap ret = obj.ClassMap;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClassMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Delegate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)o;
			System.Delegate ret = obj.Delegate;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Delegate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElementNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)o;
			System.Collections.Generic.IEnumerable<string> ret = obj.ElementNames;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ElementNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemberInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonCreatorMap obj = (MongoDB.Bson.Serialization.BsonCreatorMap)o;
			System.Reflection.MemberInfo ret = obj.MemberInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberInfo on a nil value");
		}
	}
}

