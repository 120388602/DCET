//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Serializers_SerializerHelper_MemberWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member), typeof(System.Object));
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_Serializers_SerializerHelper_Member);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Flag", get_Flag, null);
		L.RegFunction("getFlag", get_Flag);
		L.RegVar("ElementName", get_ElementName, null);
		L.RegFunction("getElementName", get_ElementName);
		L.RegVar("IsOptional", get_IsOptional, null);
		L.RegFunction("getIsOptional", get_IsOptional);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_Serializers_SerializerHelper_Member(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				long arg1 = LuaDLL.tolua_checkint64(L, 2);
				MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member obj = new MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				long arg1 = LuaDLL.tolua_checkint64(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member obj = new MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Flag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member obj = (MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member)o;
			long ret = obj.Flag;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Flag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElementName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member obj = (MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member)o;
			string ret = obj.ElementName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ElementName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsOptional(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member obj = (MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member)o;
			bool ret = obj.IsOptional;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsOptional on a nil value");
		}
	}
}

