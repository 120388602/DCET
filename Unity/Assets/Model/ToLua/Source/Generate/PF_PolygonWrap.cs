//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_PolygonWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("Polygon");
		L.RegFunction("ContainsPointXZ", ContainsPointXZ);
		L.RegFunction("ContainsPoint", ContainsPoint);
		L.RegFunction("SampleYCoordinateInTriangle", SampleYCoordinateInTriangle);
		L.RegFunction("ConvexHullXZ", ConvexHullXZ);
		L.RegFunction("ClosestPointOnTriangle", ClosestPointOnTriangle);
		L.RegFunction("ClosestPointOnTriangleXZ", ClosestPointOnTriangleXZ);
		L.RegFunction("CompressMesh", CompressMesh);
		L.RegFunction("TraceContours", TraceContours);
		L.RegFunction("Subdivide", Subdivide);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsPointXZ(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				bool o = PF.Polygon.ContainsPointXZ(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<PF.Int3, PF.Int3, PF.Int3, PF.Int3>(L, 1))
			{
				PF.Int3 arg0 = StackTraits<PF.Int3>.To(L, 1);
				PF.Int3 arg1 = StackTraits<PF.Int3>.To(L, 2);
				PF.Int3 arg2 = StackTraits<PF.Int3>.To(L, 3);
				PF.Int3 arg3 = StackTraits<PF.Int3>.To(L, 4);
				bool o = PF.Polygon.ContainsPointXZ(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				bool o = PF.Polygon.ContainsPointXZ(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.Polygon.ContainsPointXZ");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				bool o = PF.Polygon.ContainsPoint(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				PF.Int2 arg0 = StackTraits<PF.Int2>.Check(L, 1);
				PF.Int2 arg1 = StackTraits<PF.Int2>.Check(L, 2);
				PF.Int2 arg2 = StackTraits<PF.Int2>.Check(L, 3);
				PF.Int2 arg3 = StackTraits<PF.Int2>.Check(L, 4);
				bool o = PF.Polygon.ContainsPoint(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.Polygon.ContainsPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SampleYCoordinateInTriangle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PF.Int3 arg0 = StackTraits<PF.Int3>.Check(L, 1);
			PF.Int3 arg1 = StackTraits<PF.Int3>.Check(L, 2);
			PF.Int3 arg2 = StackTraits<PF.Int3>.Check(L, 3);
			PF.Int3 arg3 = StackTraits<PF.Int3>.Check(L, 4);
			int o = PF.Polygon.SampleYCoordinateInTriangle(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvexHullXZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 1);
			UnityEngine.Vector3[] o = PF.Polygon.ConvexHullXZ(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPointOnTriangle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2>(L, 1))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.Vector2 o = PF.Polygon.ClosestPointOnTriangle(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				UnityEngine.Vector3 o = PF.Polygon.ClosestPointOnTriangle(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.Polygon.ClosestPointOnTriangle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPointOnTriangleXZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.Vector3 o = PF.Polygon.ClosestPointOnTriangleXZ(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompressMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Collections.Generic.List<PF.Int3> arg0 = (System.Collections.Generic.List<PF.Int3>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<PF.Int3>));
			System.Collections.Generic.List<int> arg1 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<int>));
			PF.Int3[] arg2 = null;
			int[] arg3 = null;
			PF.Polygon.CompressMesh(arg0, arg1, out arg2, out arg3);
			ToLua.Push(L, arg2);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TraceContours(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.Dictionary<int,int>));
			System.Collections.Generic.HashSet<int> arg1 = (System.Collections.Generic.HashSet<int>)ToLua.CheckObject<System.Collections.Generic.HashSet<int>>(L, 2);
			System.Action<System.Collections.Generic.List<int>,bool> arg2 = (System.Action<System.Collections.Generic.List<int>,bool>)ToLua.CheckDelegate<System.Action<System.Collections.Generic.List<int>,bool>>(L, 3);
			PF.Polygon.TraceContours(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Subdivide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			PF.Polygon.Subdivide(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

