//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_TinyJsonDeserializerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.TinyJsonDeserializer), typeof(System.Object));
		L.RegFunction("Deserialize", Deserialize);
		L.RegFunction("New", _CreatePF_TinyJsonDeserializer);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_TinyJsonDeserializer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.TinyJsonDeserializer obj = new PF.TinyJsonDeserializer();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.TinyJsonDeserializer.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Deserialize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object o = PF.TinyJsonDeserializer.Deserialize(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				object o = PF.TinyJsonDeserializer.Deserialize(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.TinyJsonDeserializer.Deserialize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

