//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_ObjectIdWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.ObjectId), null);
		L.RegFunction("GenerateNewId", GenerateNewId);
		L.RegFunction("Pack", Pack);
		L.RegFunction("Parse", Parse);
		L.RegFunction("TryParse", TryParse);
		L.RegFunction("Unpack", Unpack);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("ToByteArray", ToByteArray);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateMongoDB_Bson_ObjectId);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Empty", get_Empty, null);
		L.RegFunction("getEmpty", get_Empty);
		L.RegVar("Timestamp", get_Timestamp, null);
		L.RegFunction("getTimestamp", get_Timestamp);
		L.RegVar("Machine", get_Machine, null);
		L.RegFunction("getMachine", get_Machine);
		L.RegVar("Pid", get_Pid, null);
		L.RegFunction("getPid", get_Pid);
		L.RegVar("Increment", get_Increment, null);
		L.RegFunction("getIncrement", get_Increment);
		L.RegVar("CreationTime", get_CreationTime, null);
		L.RegFunction("getCreationTime", get_CreationTime);
		L.RegFunction("default", __default__);
		L.RegFunction("__clone__", __clone__);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_ObjectId(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				MongoDB.Bson.ObjectId obj = new MongoDB.Bson.ObjectId(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				MongoDB.Bson.ObjectId obj = new MongoDB.Bson.ObjectId(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, int, short, int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				short arg2 = (short)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				MongoDB.Bson.ObjectId obj = new MongoDB.Bson.ObjectId(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.DateTime, int, short, int>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				short arg2 = (short)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				MongoDB.Bson.ObjectId obj = new MongoDB.Bson.ObjectId(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				MongoDB.Bson.ObjectId obj = new MongoDB.Bson.ObjectId();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.ObjectId.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.ObjectId arg0 = StackTraits<MongoDB.Bson.ObjectId>.To(L, 1);
			MongoDB.Bson.ObjectId arg1 = StackTraits<MongoDB.Bson.ObjectId>.To(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateNewId(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.ObjectId o = MongoDB.Bson.ObjectId.GenerateNewId();
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				MongoDB.Bson.ObjectId o = MongoDB.Bson.ObjectId.GenerateNewId(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				MongoDB.Bson.ObjectId o = MongoDB.Bson.ObjectId.GenerateNewId(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.ObjectId.GenerateNewId");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			short arg2 = (short)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			byte[] o = MongoDB.Bson.ObjectId.Pack(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			MongoDB.Bson.ObjectId o = MongoDB.Bson.ObjectId.Parse(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryParse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			MongoDB.Bson.ObjectId arg1;
			bool o = MongoDB.Bson.ObjectId.TryParse(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unpack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			int arg1;
			int arg2;
			short arg3;
			int arg4;
			MongoDB.Bson.ObjectId.Unpack(arg0, out arg1, out arg2, out arg3, out arg4);
			LuaDLL.lua_pushinteger(L, arg1);
			LuaDLL.lua_pushinteger(L, arg2);
			LuaDLL.lua_pushnumber(L, arg3);
			LuaDLL.lua_pushinteger(L, arg4);
			return 4;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
			MongoDB.Bson.ObjectId arg0 = StackTraits<MongoDB.Bson.ObjectId>.Check(L, 2);
			int o = obj.CompareTo(arg0);
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.ObjectId>(L, 2))
			{
				MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
				MongoDB.Bson.ObjectId arg0 = StackTraits<MongoDB.Bson.ObjectId>.To(L, 2);
				bool o = obj.Equals(arg0);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj.Equals(arg0);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.ObjectId.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToByteArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
				byte[] o = obj.ToByteArray();
				ToLua.Push(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.ToByteArray(arg0, arg1);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.ObjectId.ToByteArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Empty(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.ObjectId.Empty);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Timestamp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)o;
			int ret = obj.Timestamp;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timestamp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Machine(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)o;
			int ret = obj.Machine;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Machine on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)o;
			short ret = obj.Pid;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Increment(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)o;
			int ret = obj.Increment;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Increment on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CreationTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.ObjectId obj = (MongoDB.Bson.ObjectId)o;
			System.DateTime ret = obj.CreationTime;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CreationTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __default__(IntPtr L)
	{
		try
		{
			var o = new MongoDB.Bson.ObjectId();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __clone__(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (MongoDB.Bson.ObjectId)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.ObjectId));
			var o = obj;
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

