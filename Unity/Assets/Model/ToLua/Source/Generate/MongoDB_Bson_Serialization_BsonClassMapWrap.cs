//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonClassMapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonClassMap), typeof(System.Object));
		L.RegFunction("GetMemberInfoType", GetMemberInfoType);
		L.RegFunction("GetRegisteredClassMaps", GetRegisteredClassMaps);
		L.RegFunction("IsClassMapRegistered", IsClassMapRegistered);
		L.RegFunction("LookupClassMap", LookupClassMap);
		L.RegFunction("RegisterClassMap", RegisterClassMap);
		L.RegFunction("AutoMap", AutoMap);
		L.RegFunction("CreateInstance", CreateInstance);
		L.RegFunction("Freeze", Freeze);
		L.RegFunction("GetMemberMap", GetMemberMap);
		L.RegFunction("GetMemberMapForElement", GetMemberMapForElement);
		L.RegFunction("MapConstructor", MapConstructor);
		L.RegFunction("MapCreator", MapCreator);
		L.RegFunction("MapExtraElementsField", MapExtraElementsField);
		L.RegFunction("MapExtraElementsMember", MapExtraElementsMember);
		L.RegFunction("MapExtraElementsProperty", MapExtraElementsProperty);
		L.RegFunction("MapFactoryMethod", MapFactoryMethod);
		L.RegFunction("MapField", MapField);
		L.RegFunction("MapIdField", MapIdField);
		L.RegFunction("MapIdMember", MapIdMember);
		L.RegFunction("MapIdProperty", MapIdProperty);
		L.RegFunction("MapMember", MapMember);
		L.RegFunction("MapProperty", MapProperty);
		L.RegFunction("Reset", Reset);
		L.RegFunction("SetCreator", SetCreator);
		L.RegFunction("SetDiscriminator", SetDiscriminator);
		L.RegFunction("SetDiscriminatorIsRequired", SetDiscriminatorIsRequired);
		L.RegFunction("SetExtraElementsMember", SetExtraElementsMember);
		L.RegFunction("AddKnownType", AddKnownType);
		L.RegFunction("SetIdMember", SetIdMember);
		L.RegFunction("SetIgnoreExtraElements", SetIgnoreExtraElements);
		L.RegFunction("SetIgnoreExtraElementsIsInherited", SetIgnoreExtraElementsIsInherited);
		L.RegFunction("SetIsRootClass", SetIsRootClass);
		L.RegFunction("UnmapConstructor", UnmapConstructor);
		L.RegFunction("UnmapFactoryMethod", UnmapFactoryMethod);
		L.RegFunction("UnmapField", UnmapField);
		L.RegFunction("UnmapMember", UnmapMember);
		L.RegFunction("UnmapProperty", UnmapProperty);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_BsonClassMap);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AllMemberMaps", get_AllMemberMaps, null);
		L.RegFunction("getAllMemberMaps", get_AllMemberMaps);
		L.RegVar("BaseClassMap", get_BaseClassMap, null);
		L.RegFunction("getBaseClassMap", get_BaseClassMap);
		L.RegVar("ClassType", get_ClassType, null);
		L.RegFunction("getClassType", get_ClassType);
		L.RegVar("CreatorMaps", get_CreatorMaps, null);
		L.RegFunction("getCreatorMaps", get_CreatorMaps);
		L.RegVar("ConventionPack", get_ConventionPack, null);
		L.RegFunction("getConventionPack", get_ConventionPack);
		L.RegVar("DeclaredMemberMaps", get_DeclaredMemberMaps, null);
		L.RegFunction("getDeclaredMemberMaps", get_DeclaredMemberMaps);
		L.RegVar("Discriminator", get_Discriminator, null);
		L.RegFunction("getDiscriminator", get_Discriminator);
		L.RegVar("DiscriminatorIsRequired", get_DiscriminatorIsRequired, null);
		L.RegFunction("getDiscriminatorIsRequired", get_DiscriminatorIsRequired);
		L.RegVar("ExtraElementsMemberMap", get_ExtraElementsMemberMap, null);
		L.RegFunction("getExtraElementsMemberMap", get_ExtraElementsMemberMap);
		L.RegVar("HasCreatorMaps", get_HasCreatorMaps, null);
		L.RegFunction("getHasCreatorMaps", get_HasCreatorMaps);
		L.RegVar("HasRootClass", get_HasRootClass, null);
		L.RegFunction("getHasRootClass", get_HasRootClass);
		L.RegVar("IdMemberMap", get_IdMemberMap, null);
		L.RegFunction("getIdMemberMap", get_IdMemberMap);
		L.RegVar("IgnoreExtraElements", get_IgnoreExtraElements, null);
		L.RegFunction("getIgnoreExtraElements", get_IgnoreExtraElements);
		L.RegVar("IgnoreExtraElementsIsInherited", get_IgnoreExtraElementsIsInherited, null);
		L.RegFunction("getIgnoreExtraElementsIsInherited", get_IgnoreExtraElementsIsInherited);
		L.RegVar("IsAnonymous", get_IsAnonymous, null);
		L.RegFunction("getIsAnonymous", get_IsAnonymous);
		L.RegVar("IsFrozen", get_IsFrozen, null);
		L.RegFunction("getIsFrozen", get_IsFrozen);
		L.RegVar("IsRootClass", get_IsRootClass, null);
		L.RegFunction("getIsRootClass", get_IsRootClass);
		L.RegVar("KnownTypes", get_KnownTypes, null);
		L.RegFunction("getKnownTypes", get_KnownTypes);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_BsonClassMap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				MongoDB.Bson.Serialization.BsonClassMap obj = new MongoDB.Bson.Serialization.BsonClassMap(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				MongoDB.Bson.Serialization.BsonClassMap arg1 = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 2);
				MongoDB.Bson.Serialization.BsonClassMap obj = new MongoDB.Bson.Serialization.BsonClassMap(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.BsonClassMap.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMemberInfoType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 1);
			System.Type o = MongoDB.Bson.Serialization.BsonClassMap.GetMemberInfoType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRegisteredClassMaps(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.IEnumerable<MongoDB.Bson.Serialization.BsonClassMap> o = MongoDB.Bson.Serialization.BsonClassMap.GetRegisteredClassMaps();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsClassMapRegistered(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			bool o = MongoDB.Bson.Serialization.BsonClassMap.IsClassMapRegistered(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LookupClassMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap o = MongoDB.Bson.Serialization.BsonClassMap.LookupClassMap(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterClassMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap arg0 = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap.RegisterClassMap(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AutoMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			obj.AutoMap();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			object o = obj.CreateInstance();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Freeze(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap o = obj.Freeze();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMemberMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.GetMemberMap(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMemberMapForElement(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.GetMemberMapForElement(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapConstructor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Serialization.BsonClassMap, System.Reflection.ConstructorInfo>(L, 1))
			{
				MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.ToObject(L, 1);
				System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.MapConstructor(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<MongoDB.Bson.Serialization.BsonClassMap, System.Reflection.ConstructorInfo>(L, 1) && TypeChecker.CheckParamsType<string>(L, 3, count - 2))
			{
				MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.ToObject(L, 1);
				System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 2);
				string[] arg1 = ToLua.ToParamsString(L, 3, count - 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.MapConstructor(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonClassMap.MapConstructor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapCreator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Serialization.BsonClassMap, System.Delegate>(L, 1))
			{
				MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.ToObject(L, 1);
				System.Delegate arg0 = (System.Delegate)ToLua.ToObject(L, 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.MapCreator(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<MongoDB.Bson.Serialization.BsonClassMap, System.Delegate>(L, 1) && TypeChecker.CheckParamsType<string>(L, 3, count - 2))
			{
				MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.ToObject(L, 1);
				System.Delegate arg0 = (System.Delegate)ToLua.ToObject(L, 2);
				string[] arg1 = ToLua.ToParamsString(L, 3, count - 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.MapCreator(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonClassMap.MapCreator");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapExtraElementsField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapExtraElementsField(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapExtraElementsMember(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapExtraElementsMember(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapExtraElementsProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapExtraElementsProperty(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapFactoryMethod(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Serialization.BsonClassMap, System.Reflection.MethodInfo>(L, 1))
			{
				MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.MapFactoryMethod(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<MongoDB.Bson.Serialization.BsonClassMap, System.Reflection.MethodInfo>(L, 1) && TypeChecker.CheckParamsType<string>(L, 3, count - 2))
			{
				MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.ToObject(L, 1);
				System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.ToObject(L, 2);
				string[] arg1 = ToLua.ToParamsString(L, 3, count - 2);
				MongoDB.Bson.Serialization.BsonCreatorMap o = obj.MapFactoryMethod(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Serialization.BsonClassMap.MapFactoryMethod");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapField(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapIdField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapIdField(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapIdMember(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapIdMember(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapIdProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapIdProperty(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapMember(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapMember(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.BsonMemberMap o = obj.MapProperty(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCreator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Func<object> arg0 = (System.Func<object>)ToLua.CheckDelegate<System.Func<object>>(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap o = obj.SetCreator(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDiscriminator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetDiscriminator(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDiscriminatorIsRequired(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetDiscriminatorIsRequired(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetExtraElementsMember(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap arg0 = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 2);
			obj.SetExtraElementsMember(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddKnownType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			obj.AddKnownType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIdMember(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			MongoDB.Bson.Serialization.BsonMemberMap arg0 = (MongoDB.Bson.Serialization.BsonMemberMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonMemberMap>(L, 2);
			obj.SetIdMember(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIgnoreExtraElements(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetIgnoreExtraElements(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIgnoreExtraElementsIsInherited(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetIgnoreExtraElementsIsInherited(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIsRootClass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetIsRootClass(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmapConstructor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.CheckObject<System.Reflection.ConstructorInfo>(L, 2);
			obj.UnmapConstructor(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmapFactoryMethod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Reflection.MethodInfo arg0 = (System.Reflection.MethodInfo)ToLua.CheckObject<System.Reflection.MethodInfo>(L, 2);
			obj.UnmapFactoryMethod(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmapField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnmapField(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmapMember(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.CheckObject<System.Reflection.MemberInfo>(L, 2);
			obj.UnmapMember(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmapProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnmapProperty(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllMemberMaps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			System.Collections.ObjectModel.ReadOnlyCollection<MongoDB.Bson.Serialization.BsonMemberMap> ret = obj.AllMemberMaps;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllMemberMaps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseClassMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			MongoDB.Bson.Serialization.BsonClassMap ret = obj.BaseClassMap;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BaseClassMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClassType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			System.Type ret = obj.ClassType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClassType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CreatorMaps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			System.Collections.Generic.IEnumerable<MongoDB.Bson.Serialization.BsonCreatorMap> ret = obj.CreatorMaps;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CreatorMaps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConventionPack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			MongoDB.Bson.Serialization.Conventions.IConventionPack ret = obj.ConventionPack;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConventionPack on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeclaredMemberMaps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			System.Collections.Generic.IEnumerable<MongoDB.Bson.Serialization.BsonMemberMap> ret = obj.DeclaredMemberMaps;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeclaredMemberMaps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Discriminator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			string ret = obj.Discriminator;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Discriminator on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DiscriminatorIsRequired(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.DiscriminatorIsRequired;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DiscriminatorIsRequired on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtraElementsMemberMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			MongoDB.Bson.Serialization.BsonMemberMap ret = obj.ExtraElementsMemberMap;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExtraElementsMemberMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasCreatorMaps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.HasCreatorMaps;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasCreatorMaps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasRootClass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.HasRootClass;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasRootClass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IdMemberMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			MongoDB.Bson.Serialization.BsonMemberMap ret = obj.IdMemberMap;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IdMemberMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IgnoreExtraElements(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.IgnoreExtraElements;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IgnoreExtraElements on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IgnoreExtraElementsIsInherited(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.IgnoreExtraElementsIsInherited;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IgnoreExtraElementsIsInherited on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnonymous(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.IsAnonymous;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAnonymous on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFrozen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.IsFrozen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFrozen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRootClass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			bool ret = obj.IsRootClass;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsRootClass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_KnownTypes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap obj = (MongoDB.Bson.Serialization.BsonClassMap)o;
			System.Collections.Generic.IEnumerable<System.Type> ret = obj.KnownTypes;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index KnownTypes on a nil value");
		}
	}
}

