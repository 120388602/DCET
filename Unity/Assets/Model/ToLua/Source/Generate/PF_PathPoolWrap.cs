//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_PathPoolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("PathPool");
		L.RegFunction("Pool", Pool);
		L.RegFunction("GetTotalCreated", GetTotalCreated);
		L.RegFunction("GetSize", GetSize);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 1);
			PF.PathPool.Pool(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTotalCreated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			int o = PF.PathPool.GetTotalCreated(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			int o = PF.PathPool.GetSize(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

