//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Diagnostics_Tracing_EventSourceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Diagnostics.Tracing.EventSource), typeof(System.Object));
		L.RegFunction("Write", Write);
		L.RegFunction("IsEnabled", IsEnabled);
		L.RegFunction("GetGuid", GetGuid);
		L.RegFunction("GetName", GetName);
		L.RegFunction("GenerateManifest", GenerateManifest);
		L.RegFunction("GetSources", GetSources);
		L.RegFunction("SendCommand", SendCommand);
		L.RegFunction("SetCurrentThreadActivityId", SetCurrentThreadActivityId);
		L.RegFunction("GetTrait", GetTrait);
		L.RegFunction("ToString", ToString);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateSystem_Diagnostics_Tracing_EventSource);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Name", get_Name, null);
		L.RegFunction("getName", get_Name);
		L.RegVar("Guid", get_Guid, null);
		L.RegFunction("getGuid", get_Guid);
		L.RegVar("Settings", get_Settings, null);
		L.RegFunction("getSettings", get_Settings);
		L.RegVar("CurrentThreadActivityId", get_CurrentThreadActivityId, null);
		L.RegFunction("getCurrentThreadActivityId", get_CurrentThreadActivityId);
		L.RegVar("ConstructionException", get_ConstructionException, null);
		L.RegFunction("getConstructionException", get_ConstructionException);
		L.RegVar("EventCommandExecuted", get_EventCommandExecuted, set_EventCommandExecuted);
		L.RegFunction("addEventCommandExecuted", addEventCommandExecuted);
		L.RegFunction("removeEventCommandExecuted", removeEventCommandExecuted);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Diagnostics_Tracing_EventSource(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Diagnostics.Tracing.EventSource obj = new System.Diagnostics.Tracing.EventSource(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, uint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Diagnostics.Tracing.EventSourceSettings arg1 = (System.Diagnostics.Tracing.EventSourceSettings)LuaDLL.lua_tonumber(L, 2);
				System.Diagnostics.Tracing.EventSource obj = new System.Diagnostics.Tracing.EventSource(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string, uint>(L, 1) && TypeChecker.CheckParamsType<string>(L, 3, count - 2))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Diagnostics.Tracing.EventSourceSettings arg1 = (System.Diagnostics.Tracing.EventSourceSettings)LuaDLL.lua_tonumber(L, 2);
				string[] arg2 = ToLua.ToParamsString(L, 3, count - 2);
				System.Diagnostics.Tracing.EventSource obj = new System.Diagnostics.Tracing.EventSource(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Diagnostics.Tracing.EventSource.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 3)
			{
				System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Diagnostics.Tracing.EventSourceOptions arg1 = StackTraits<System.Diagnostics.Tracing.EventSourceOptions>.Check(L, 3);
				obj.Write(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Diagnostics.Tracing.EventSource.Write");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsEnabled(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
				bool o = obj.IsEnabled();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
				System.Diagnostics.Tracing.EventLevel arg0 = (System.Diagnostics.Tracing.EventLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Diagnostics.Tracing.EventKeywords arg1 = (System.Diagnostics.Tracing.EventKeywords)LuaDLL.luaL_checknumber(L, 3);
				bool o = obj.IsEnabled(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
				System.Diagnostics.Tracing.EventLevel arg0 = (System.Diagnostics.Tracing.EventLevel)LuaDLL.luaL_checknumber(L, 2);
				System.Diagnostics.Tracing.EventKeywords arg1 = (System.Diagnostics.Tracing.EventKeywords)LuaDLL.luaL_checknumber(L, 3);
				System.Diagnostics.Tracing.EventChannel arg2 = (System.Diagnostics.Tracing.EventChannel)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.IsEnabled(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Diagnostics.Tracing.EventSource.IsEnabled");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			System.Guid o = System.Diagnostics.Tracing.EventSource.GetGuid(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			string o = System.Diagnostics.Tracing.EventSource.GetName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateManifest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = System.Diagnostics.Tracing.EventSource.GenerateManifest(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Diagnostics.Tracing.EventManifestOptions arg2 = (System.Diagnostics.Tracing.EventManifestOptions)LuaDLL.luaL_checknumber(L, 3);
				string o = System.Diagnostics.Tracing.EventSource.GenerateManifest(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Diagnostics.Tracing.EventSource.GenerateManifest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource> o = System.Diagnostics.Tracing.EventSource.GetSources();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Diagnostics.Tracing.EventSource arg0 = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
			System.Diagnostics.Tracing.EventCommand arg1 = (System.Diagnostics.Tracing.EventCommand)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.IDictionary<string,string> arg2 = (System.Collections.Generic.IDictionary<string,string>)ToLua.CheckObject<System.Collections.Generic.IDictionary<string,string>>(L, 3);
			System.Diagnostics.Tracing.EventSource.SendCommand(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurrentThreadActivityId(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Guid arg0 = StackTraits<System.Guid>.Check(L, 1);
				System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(arg0);
				return 0;
			}
			else if (count == 2)
			{
				System.Guid arg0 = StackTraits<System.Guid>.Check(L, 1);
				System.Guid arg1;
				System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(arg0, out arg1);
				ToLua.PushValue(L, arg1);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTrait(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetTrait(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject<System.Diagnostics.Tracing.EventSource>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Guid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)o;
			System.Guid ret = obj.Guid;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Guid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Settings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)o;
			System.Diagnostics.Tracing.EventSourceSettings ret = obj.Settings;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Settings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentThreadActivityId(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConstructionException(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)o;
			System.Exception ret = obj.ConstructionException;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConstructionException on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventCommandExecuted(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EventCommandExecuted(IntPtr L)
	{
		try
		{
			System.Diagnostics.Tracing.EventSource obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject(L, 1, typeof(System.Diagnostics.Tracing.EventSource));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'System.Diagnostics.Tracing.EventSource.EventCommandExecuted' can only appear on the left hand side of += or -= when used outside of the type 'System.Diagnostics.Tracing.EventSource'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs> ev = (System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>)arg0.func;
				obj.EventCommandExecuted += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs> ev = (System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>)arg0.func;
				obj.EventCommandExecuted -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addEventCommandExecuted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject(L, 1, typeof(System.Diagnostics.Tracing.EventSource));
			var arg0 = (System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>)ToLua.CheckDelegate<System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>>(L, 2);
			obj.EventCommandExecuted += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeEventCommandExecuted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (System.Diagnostics.Tracing.EventSource)ToLua.CheckObject(L, 1, typeof(System.Diagnostics.Tracing.EventSource));
			var arg0 = (System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>)ToLua.CheckDelegate<System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>>(L, 2);
			obj.EventCommandExecuted -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

