//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_BsonTypeMapperOptionsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.BsonTypeMapperOptions), typeof(System.Object));
		L.RegFunction("Clone", Clone);
		L.RegFunction("Freeze", Freeze);
		L.RegFunction("New", _CreateMongoDB_Bson_BsonTypeMapperOptions);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Defaults", get_Defaults, set_Defaults);
		L.RegFunction("getDefaults", get_Defaults);
		L.RegFunction("setDefaults", set_Defaultster);
		L.RegVar("DuplicateNameHandling", get_DuplicateNameHandling, set_DuplicateNameHandling);
		L.RegFunction("getDuplicateNameHandling", get_DuplicateNameHandling);
		L.RegFunction("setDuplicateNameHandling", set_DuplicateNameHandling);
		L.RegVar("IsFrozen", get_IsFrozen, null);
		L.RegFunction("getIsFrozen", get_IsFrozen);
		L.RegVar("MapBsonArrayTo", get_MapBsonArrayTo, set_MapBsonArrayTo);
		L.RegFunction("getMapBsonArrayTo", get_MapBsonArrayTo);
		L.RegFunction("setMapBsonArrayTo", set_MapBsonArrayTo);
		L.RegVar("MapBsonDocumentTo", get_MapBsonDocumentTo, set_MapBsonDocumentTo);
		L.RegFunction("getMapBsonDocumentTo", get_MapBsonDocumentTo);
		L.RegFunction("setMapBsonDocumentTo", set_MapBsonDocumentTo);
		L.RegVar("MapOldBinaryToByteArray", get_MapOldBinaryToByteArray, set_MapOldBinaryToByteArray);
		L.RegFunction("getMapOldBinaryToByteArray", get_MapOldBinaryToByteArray);
		L.RegFunction("setMapOldBinaryToByteArray", set_MapOldBinaryToByteArray);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_BsonTypeMapperOptions(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.BsonTypeMapperOptions obj = new MongoDB.Bson.BsonTypeMapperOptions();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.BsonTypeMapperOptions.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)ToLua.CheckObject<MongoDB.Bson.BsonTypeMapperOptions>(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Freeze(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)ToLua.CheckObject<MongoDB.Bson.BsonTypeMapperOptions>(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions o = obj.Freeze();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Defaults(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.BsonTypeMapperOptions.Defaults);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DuplicateNameHandling(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			MongoDB.Bson.DuplicateNameHandling ret = obj.DuplicateNameHandling;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DuplicateNameHandling on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFrozen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			bool ret = obj.IsFrozen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFrozen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MapBsonArrayTo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			System.Type ret = obj.MapBsonArrayTo;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MapBsonArrayTo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MapBsonDocumentTo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			System.Type ret = obj.MapBsonDocumentTo;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MapBsonDocumentTo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MapOldBinaryToByteArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			bool ret = obj.MapOldBinaryToByteArray;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MapOldBinaryToByteArray on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaults(IntPtr L)
	{
		try
		{
			MongoDB.Bson.BsonTypeMapperOptions arg0 = (MongoDB.Bson.BsonTypeMapperOptions)ToLua.CheckObject<MongoDB.Bson.BsonTypeMapperOptions>(L, 2);
			MongoDB.Bson.BsonTypeMapperOptions.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaultster(IntPtr L)
	{
		try
		{
			MongoDB.Bson.BsonTypeMapperOptions arg0 = (MongoDB.Bson.BsonTypeMapperOptions)ToLua.CheckObject<MongoDB.Bson.BsonTypeMapperOptions>(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DuplicateNameHandling(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			MongoDB.Bson.DuplicateNameHandling arg0 = (MongoDB.Bson.DuplicateNameHandling)LuaDLL.luaL_checknumber(L, 2);
			obj.DuplicateNameHandling = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DuplicateNameHandling on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MapBsonArrayTo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			obj.MapBsonArrayTo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MapBsonArrayTo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MapBsonDocumentTo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			obj.MapBsonDocumentTo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MapBsonDocumentTo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MapOldBinaryToByteArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonTypeMapperOptions obj = (MongoDB.Bson.BsonTypeMapperOptions)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MapOldBinaryToByteArray = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MapOldBinaryToByteArray on a nil value");
		}
	}
}

