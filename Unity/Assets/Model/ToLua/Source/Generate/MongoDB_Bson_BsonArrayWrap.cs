//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_BsonArrayWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.BsonArray), typeof(MongoDB.Bson.BsonValue));
		L.RegFunction(".geti", get_Item);
		L.RegFunction("get", get_Item);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("get", get_Item);
		L.RegFunction(".seti", set_Item);
		L.RegFunction("set", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("set", set_Item);
		L.RegFunction("Create", Create);
		L.RegFunction("Add", Add);
		L.RegFunction("AddRange", AddRange);
		L.RegFunction("Clone", Clone);
		L.RegFunction("Clear", Clear);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("Contains", Contains);
		L.RegFunction("CopyTo", CopyTo);
		L.RegFunction("DeepClone", DeepClone);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("IndexOf", IndexOf);
		L.RegFunction("Insert", Insert);
		L.RegFunction("Remove", Remove);
		L.RegFunction("RemoveAt", RemoveAt);
		L.RegFunction("ToArray", ToArray);
		L.RegFunction("ToList", ToList);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateMongoDB_Bson_BsonArray);
		L.RegVar("this", _this, null);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BsonType", get_BsonType, null);
		L.RegFunction("getBsonType", get_BsonType);
		L.RegVar("Capacity", get_Capacity, set_Capacity);
		L.RegFunction("getCapacity", get_Capacity);
		L.RegFunction("setCapacity", set_Capacity);
		L.RegVar("Count", get_Count, null);
		L.RegFunction("getCount", get_Count);
		L.RegVar("IsReadOnly", get_IsReadOnly, null);
		L.RegFunction("getIsReadOnly", get_IsReadOnly);
		L.RegVar("Values", get_Values, null);
		L.RegFunction("getValues", get_Values);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_BsonArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<bool>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<bool> arg0 = (System.Collections.Generic.IEnumerable<bool>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue> arg0 = (System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.DateTime>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<System.DateTime> arg0 = (System.Collections.Generic.IEnumerable<System.DateTime>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<double>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<double> arg0 = (System.Collections.Generic.IEnumerable<double>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<int>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<int> arg0 = (System.Collections.Generic.IEnumerable<int>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<long>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<long> arg0 = (System.Collections.Generic.IEnumerable<long>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<MongoDB.Bson.ObjectId>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<MongoDB.Bson.ObjectId> arg0 = (System.Collections.Generic.IEnumerable<MongoDB.Bson.ObjectId>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<string>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<string> arg0 = (System.Collections.Generic.IEnumerable<string>)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.IEnumerable>(L, 1))
			{
				System.Collections.IEnumerable arg0 = (System.Collections.IEnumerable)ToLua.ToObject(L, 1);
				MongoDB.Bson.BsonArray obj = new MongoDB.Bson.BsonArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.BsonArray.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.BsonValue o = obj[arg0];
			ToLua.PushObject(L, o);
			return 1;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 3);
			obj[arg0] = arg1;
			return 0;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonArray arg0 = (MongoDB.Bson.BsonArray)ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray arg1 = (MongoDB.Bson.BsonArray)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonArray.get_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonArray.set_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			MongoDB.Bson.BsonArray o = MongoDB.Bson.BsonArray.Create(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			MongoDB.Bson.BsonArray o = obj.Add(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<bool>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<bool> arg0 = (System.Collections.Generic.IEnumerable<bool>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue> arg0 = (System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.DateTime>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<System.DateTime> arg0 = (System.Collections.Generic.IEnumerable<System.DateTime>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<double>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<double> arg0 = (System.Collections.Generic.IEnumerable<double>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<int>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<int> arg0 = (System.Collections.Generic.IEnumerable<int>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<long>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<long> arg0 = (System.Collections.Generic.IEnumerable<long>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<MongoDB.Bson.ObjectId>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<MongoDB.Bson.ObjectId> arg0 = (System.Collections.Generic.IEnumerable<MongoDB.Bson.ObjectId>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<string>>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.Generic.IEnumerable<string> arg0 = (System.Collections.Generic.IEnumerable<string>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.IEnumerable>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				System.Collections.IEnumerable arg0 = (System.Collections.IEnumerable)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonArray o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonArray.AddRange");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			MongoDB.Bson.BsonValue o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonArray>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				MongoDB.Bson.BsonArray arg0 = (MongoDB.Bson.BsonArray)ToLua.ToObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonArray.CompareTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Contains(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			bool o = obj.Contains(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			MongoDB.Bson.BsonValue[] arg0 = ToLua.CheckObjectArray<MongoDB.Bson.BsonValue>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.CopyTo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeepClone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			MongoDB.Bson.BsonValue o = obj.DeepClone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonArray>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				MongoDB.Bson.BsonArray arg0 = (MongoDB.Bson.BsonArray)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonArray.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			System.Collections.Generic.IEnumerator<MongoDB.Bson.BsonValue> o = obj.GetEnumerator();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IndexOf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
				int o = obj.IndexOf(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int o = obj.IndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
				MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = obj.IndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonArray.IndexOf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Insert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 3);
			obj.Insert(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			bool o = obj.Remove(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RemoveAt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			MongoDB.Bson.BsonValue[] o = obj.ToArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			System.Collections.Generic.List<MongoDB.Bson.BsonValue> o = obj.ToList();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)ToLua.CheckObject<MongoDB.Bson.BsonArray>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BsonType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)o;
			MongoDB.Bson.BsonType ret = obj.BsonType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BsonType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)o;
			int ret = obj.Capacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Capacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsReadOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)o;
			bool ret = obj.IsReadOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsReadOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Values(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)o;
			System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue> ret = obj.Values;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Values on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonArray obj = (MongoDB.Bson.BsonArray)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Capacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Capacity on a nil value");
		}
	}
}

