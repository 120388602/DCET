//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonSerializationContext_BuilderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonSerializationContext.Builder), typeof(System.Object));
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsDynamicType", get_IsDynamicType, set_IsDynamicType);
		L.RegFunction("getIsDynamicType", get_IsDynamicType);
		L.RegFunction("setIsDynamicType", set_IsDynamicType);
		L.RegVar("Writer", get_Writer, null);
		L.RegFunction("getWriter", get_Writer);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDynamicType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationContext.Builder obj = (MongoDB.Bson.Serialization.BsonSerializationContext.Builder)o;
			System.Func<System.Type,bool> ret = obj.IsDynamicType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDynamicType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Writer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationContext.Builder obj = (MongoDB.Bson.Serialization.BsonSerializationContext.Builder)o;
			MongoDB.Bson.IO.IBsonWriter ret = obj.Writer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Writer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsDynamicType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationContext.Builder obj = (MongoDB.Bson.Serialization.BsonSerializationContext.Builder)o;
			System.Func<System.Type,bool> arg0 = (System.Func<System.Type,bool>)ToLua.CheckDelegate<System.Func<System.Type,bool>>(L, 2);
			obj.IsDynamicType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDynamicType on a nil value");
		}
	}
}

