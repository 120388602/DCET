//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonChunkPoolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.BsonChunkPool), typeof(System.Object));
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("GetChunk", GetChunk);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_BsonChunkPool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Default", get_Default, set_Default);
		L.RegFunction("getDefault", get_Default);
		L.RegFunction("setDefault", set_Defaultter);
		L.RegVar("ChunkSize", get_ChunkSize, null);
		L.RegFunction("getChunkSize", get_ChunkSize);
		L.RegVar("MaxChunkCount", get_MaxChunkCount, null);
		L.RegFunction("getMaxChunkCount", get_MaxChunkCount);
		L.RegVar("ChunkCount", get_ChunkCount, null);
		L.RegFunction("getChunkCount", get_ChunkCount);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_BsonChunkPool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				MongoDB.Bson.IO.BsonChunkPool obj = new MongoDB.Bson.IO.BsonChunkPool(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.BsonChunkPool.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonChunkPool obj = (MongoDB.Bson.IO.BsonChunkPool)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonChunkPool));
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonChunkPool obj = (MongoDB.Bson.IO.BsonChunkPool)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonChunkPool));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.IO.IBsonChunk o = obj.GetChunk(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Default(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, MongoDB.Bson.IO.BsonChunkPool.Default);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChunkSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonChunkPool obj = (MongoDB.Bson.IO.BsonChunkPool)o;
			int ret = obj.ChunkSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ChunkSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxChunkCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonChunkPool obj = (MongoDB.Bson.IO.BsonChunkPool)o;
			int ret = obj.MaxChunkCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxChunkCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChunkCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonChunkPool obj = (MongoDB.Bson.IO.BsonChunkPool)o;
			int ret = obj.ChunkCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ChunkCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Default(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.BsonChunkPool arg0 = (MongoDB.Bson.IO.BsonChunkPool)ToLua.CheckObject(L, 2, typeof(MongoDB.Bson.IO.BsonChunkPool));
			MongoDB.Bson.IO.BsonChunkPool.Default = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaultter(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.BsonChunkPool arg0 = (MongoDB.Bson.IO.BsonChunkPool)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonChunkPool));
			MongoDB.Bson.IO.BsonChunkPool.Default = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

