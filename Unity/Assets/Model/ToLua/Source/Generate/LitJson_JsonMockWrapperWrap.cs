//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LitJson_JsonMockWrapperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LitJson.JsonMockWrapper), typeof(System.Object));
		L.RegFunction("GetBoolean", GetBoolean);
		L.RegFunction("GetDouble", GetDouble);
		L.RegFunction("GetInt", GetInt);
		L.RegFunction("GetJsonType", GetJsonType);
		L.RegFunction("GetLong", GetLong);
		L.RegFunction("GetString", GetString);
		L.RegFunction("SetBoolean", SetBoolean);
		L.RegFunction("SetDouble", SetDouble);
		L.RegFunction("SetInt", SetInt);
		L.RegFunction("SetJsonType", SetJsonType);
		L.RegFunction("SetLong", SetLong);
		L.RegFunction("SetString", SetString);
		L.RegFunction("ToJson", ToJson);
		L.RegFunction("New", _CreateLitJson_JsonMockWrapper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsArray", get_IsArray, null);
		L.RegFunction("getIsArray", get_IsArray);
		L.RegVar("IsBoolean", get_IsBoolean, null);
		L.RegFunction("getIsBoolean", get_IsBoolean);
		L.RegVar("IsDouble", get_IsDouble, null);
		L.RegFunction("getIsDouble", get_IsDouble);
		L.RegVar("IsInt", get_IsInt, null);
		L.RegFunction("getIsInt", get_IsInt);
		L.RegVar("IsLong", get_IsLong, null);
		L.RegFunction("getIsLong", get_IsLong);
		L.RegVar("IsObject", get_IsObject, null);
		L.RegFunction("getIsObject", get_IsObject);
		L.RegVar("IsString", get_IsString, null);
		L.RegFunction("getIsString", get_IsString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLitJson_JsonMockWrapper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LitJson.JsonMockWrapper obj = new LitJson.JsonMockWrapper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LitJson.JsonMockWrapper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			bool o = obj.GetBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			double o = obj.GetDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			int o = obj.GetInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetJsonType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			LitJson.JsonType o = obj.GetJsonType();
			LuaDLL.lua_pushinteger(L, (int)o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			long o = obj.GetLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			string o = obj.GetString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetBoolean(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.SetDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetJsonType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			LitJson.JsonType arg0 = (LitJson.JsonType)LuaDLL.luaL_checknumber(L, 2);
			obj.SetJsonType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToJson(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
				string o = obj.ToJson();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)ToLua.CheckObject<LitJson.JsonMockWrapper>(L, 1);
				LitJson.JsonWriter arg0 = (LitJson.JsonWriter)ToLua.CheckObject<LitJson.JsonWriter>(L, 2);
				obj.ToJson(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LitJson.JsonMockWrapper.ToJson");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsArray(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)o;
			bool ret = obj.IsArray;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsArray on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBoolean(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)o;
			bool ret = obj.IsBoolean;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsBoolean on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDouble(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)o;
			bool ret = obj.IsDouble;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDouble on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsInt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)o;
			bool ret = obj.IsInt;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsInt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLong(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)o;
			bool ret = obj.IsLong;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsLong on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)o;
			bool ret = obj.IsObject;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsString(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LitJson.JsonMockWrapper obj = (LitJson.JsonMockWrapper)o;
			bool ret = obj.IsString;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsString on a nil value");
		}
	}
}

