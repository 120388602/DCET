//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Microsoft_IO_RecyclableMemoryStreamManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Microsoft.IO.RecyclableMemoryStreamManager), typeof(System.Object));
		L.RegFunction("GetStream", GetStream);
		L.RegFunction("New", _CreateMicrosoft_IO_RecyclableMemoryStreamManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("DefaultBlockSize", 131072);
		L.RegConstant("DefaultLargeBufferMultiple", 1048576);
		L.RegConstant("DefaultMaximumBufferSize", 134217728);
		L.RegVar("BlockSize", get_BlockSize, null);
		L.RegFunction("getBlockSize", get_BlockSize);
		L.RegVar("LargeBufferMultiple", get_LargeBufferMultiple, null);
		L.RegFunction("getLargeBufferMultiple", get_LargeBufferMultiple);
		L.RegVar("MaximumBufferSize", get_MaximumBufferSize, null);
		L.RegFunction("getMaximumBufferSize", get_MaximumBufferSize);
		L.RegVar("SmallPoolFreeSize", get_SmallPoolFreeSize, null);
		L.RegFunction("getSmallPoolFreeSize", get_SmallPoolFreeSize);
		L.RegVar("SmallPoolInUseSize", get_SmallPoolInUseSize, null);
		L.RegFunction("getSmallPoolInUseSize", get_SmallPoolInUseSize);
		L.RegVar("LargePoolFreeSize", get_LargePoolFreeSize, null);
		L.RegFunction("getLargePoolFreeSize", get_LargePoolFreeSize);
		L.RegVar("LargePoolInUseSize", get_LargePoolInUseSize, null);
		L.RegFunction("getLargePoolInUseSize", get_LargePoolInUseSize);
		L.RegVar("SmallBlocksFree", get_SmallBlocksFree, null);
		L.RegFunction("getSmallBlocksFree", get_SmallBlocksFree);
		L.RegVar("LargeBuffersFree", get_LargeBuffersFree, null);
		L.RegFunction("getLargeBuffersFree", get_LargeBuffersFree);
		L.RegVar("MaximumFreeSmallPoolBytes", get_MaximumFreeSmallPoolBytes, set_MaximumFreeSmallPoolBytes);
		L.RegFunction("getMaximumFreeSmallPoolBytes", get_MaximumFreeSmallPoolBytes);
		L.RegFunction("setMaximumFreeSmallPoolBytes", set_MaximumFreeSmallPoolBytes);
		L.RegVar("MaximumFreeLargePoolBytes", get_MaximumFreeLargePoolBytes, set_MaximumFreeLargePoolBytes);
		L.RegFunction("getMaximumFreeLargePoolBytes", get_MaximumFreeLargePoolBytes);
		L.RegFunction("setMaximumFreeLargePoolBytes", set_MaximumFreeLargePoolBytes);
		L.RegVar("MaximumStreamCapacity", get_MaximumStreamCapacity, set_MaximumStreamCapacity);
		L.RegFunction("getMaximumStreamCapacity", get_MaximumStreamCapacity);
		L.RegFunction("setMaximumStreamCapacity", set_MaximumStreamCapacity);
		L.RegVar("GenerateCallStacks", get_GenerateCallStacks, set_GenerateCallStacks);
		L.RegFunction("getGenerateCallStacks", get_GenerateCallStacks);
		L.RegFunction("setGenerateCallStacks", set_GenerateCallStacks);
		L.RegVar("AggressiveBufferReturn", get_AggressiveBufferReturn, set_AggressiveBufferReturn);
		L.RegFunction("getAggressiveBufferReturn", get_AggressiveBufferReturn);
		L.RegFunction("setAggressiveBufferReturn", set_AggressiveBufferReturn);
		L.RegVar("BlockCreated", get_BlockCreated, set_BlockCreated);
		L.RegFunction("addBlockCreated", addBlockCreated);
		L.RegFunction("removeBlockCreated", removeBlockCreated);
		L.RegVar("BlockDiscarded", get_BlockDiscarded, set_BlockDiscarded);
		L.RegFunction("addBlockDiscarded", addBlockDiscarded);
		L.RegFunction("removeBlockDiscarded", removeBlockDiscarded);
		L.RegVar("LargeBufferCreated", get_LargeBufferCreated, set_LargeBufferCreated);
		L.RegFunction("addLargeBufferCreated", addLargeBufferCreated);
		L.RegFunction("removeLargeBufferCreated", removeLargeBufferCreated);
		L.RegVar("StreamCreated", get_StreamCreated, set_StreamCreated);
		L.RegFunction("addStreamCreated", addStreamCreated);
		L.RegFunction("removeStreamCreated", removeStreamCreated);
		L.RegVar("StreamDisposed", get_StreamDisposed, set_StreamDisposed);
		L.RegFunction("addStreamDisposed", addStreamDisposed);
		L.RegFunction("removeStreamDisposed", removeStreamDisposed);
		L.RegVar("StreamFinalized", get_StreamFinalized, set_StreamFinalized);
		L.RegFunction("addStreamFinalized", addStreamFinalized);
		L.RegFunction("removeStreamFinalized", removeStreamFinalized);
		L.RegVar("StreamLength", get_StreamLength, set_StreamLength);
		L.RegFunction("addStreamLength", addStreamLength);
		L.RegFunction("removeStreamLength", removeStreamLength);
		L.RegVar("StreamConvertedToArray", get_StreamConvertedToArray, set_StreamConvertedToArray);
		L.RegFunction("addStreamConvertedToArray", addStreamConvertedToArray);
		L.RegFunction("removeStreamConvertedToArray", removeStreamConvertedToArray);
		L.RegVar("LargeBufferDiscarded", get_LargeBufferDiscarded, set_LargeBufferDiscarded);
		L.RegFunction("addLargeBufferDiscarded", addLargeBufferDiscarded);
		L.RegFunction("removeLargeBufferDiscarded", removeLargeBufferDiscarded);
		L.RegVar("UsageReport", get_UsageReport, set_UsageReport);
		L.RegFunction("addUsageReport", addUsageReport);
		L.RegFunction("removeUsageReport", removeUsageReport);
		L.RegFunction("UsageReportEventHandler", Microsoft_IO_RecyclableMemoryStreamManager_UsageReportEventHandler);
		L.RegFunction("LargeBufferDiscardedEventHandler", Microsoft_IO_RecyclableMemoryStreamManager_LargeBufferDiscardedEventHandler);
		L.RegFunction("EventHandler", Microsoft_IO_RecyclableMemoryStreamManager_EventHandler);
		L.RegFunction("StreamLengthReportHandler", Microsoft_IO_RecyclableMemoryStreamManager_StreamLengthReportHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMicrosoft_IO_RecyclableMemoryStreamManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Microsoft.IO.RecyclableMemoryStreamManager obj = new Microsoft.IO.RecyclableMemoryStreamManager();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Microsoft.IO.RecyclableMemoryStreamManager obj = new Microsoft.IO.RecyclableMemoryStreamManager(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Microsoft.IO.RecyclableMemoryStreamManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
				System.IO.MemoryStream o = obj.GetStream();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
				string arg0 = ToLua.CheckString(L, 2);
				System.IO.MemoryStream o = obj.GetStream(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.IO.MemoryStream o = obj.GetStream(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.IO.MemoryStream o = obj.GetStream(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.IO.MemoryStream o = obj.GetStream(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Microsoft.IO.RecyclableMemoryStreamManager.GetStream");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			int ret = obj.BlockSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BlockSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LargeBufferMultiple(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			int ret = obj.LargeBufferMultiple;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LargeBufferMultiple on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaximumBufferSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			int ret = obj.MaximumBufferSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumBufferSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SmallPoolFreeSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.SmallPoolFreeSize;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SmallPoolFreeSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SmallPoolInUseSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.SmallPoolInUseSize;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SmallPoolInUseSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LargePoolFreeSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.LargePoolFreeSize;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LargePoolFreeSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LargePoolInUseSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.LargePoolInUseSize;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LargePoolInUseSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SmallBlocksFree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.SmallBlocksFree;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SmallBlocksFree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LargeBuffersFree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.LargeBuffersFree;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LargeBuffersFree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaximumFreeSmallPoolBytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.MaximumFreeSmallPoolBytes;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumFreeSmallPoolBytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaximumFreeLargePoolBytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.MaximumFreeLargePoolBytes;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumFreeLargePoolBytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaximumStreamCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long ret = obj.MaximumStreamCapacity;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumStreamCapacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GenerateCallStacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			bool ret = obj.GenerateCallStacks;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GenerateCallStacks on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AggressiveBufferReturn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			bool ret = obj.AggressiveBufferReturn;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AggressiveBufferReturn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockCreated(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockDiscarded(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LargeBufferCreated(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamCreated(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamDisposed(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamFinalized(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamLength(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamConvertedToArray(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LargeBufferDiscarded(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UsageReport(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaximumFreeSmallPoolBytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.MaximumFreeSmallPoolBytes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumFreeSmallPoolBytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaximumFreeLargePoolBytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.MaximumFreeLargePoolBytes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumFreeLargePoolBytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaximumStreamCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.MaximumStreamCapacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumStreamCapacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GenerateCallStacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.GenerateCallStacks = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GenerateCallStacks on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AggressiveBufferReturn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AggressiveBufferReturn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AggressiveBufferReturn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BlockCreated(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.BlockCreated' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.BlockCreated += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.BlockCreated -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addBlockCreated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.BlockCreated += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeBlockCreated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.BlockCreated -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BlockDiscarded(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.BlockDiscarded' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.BlockDiscarded += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.BlockDiscarded -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addBlockDiscarded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.BlockDiscarded += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeBlockDiscarded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.BlockDiscarded -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LargeBufferCreated(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferCreated' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.LargeBufferCreated += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.LargeBufferCreated -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addLargeBufferCreated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.LargeBufferCreated += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeLargeBufferCreated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.LargeBufferCreated -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamCreated(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.StreamCreated' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamCreated += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamCreated -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addStreamCreated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamCreated += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeStreamCreated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamCreated -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamDisposed(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.StreamDisposed' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamDisposed += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamDisposed -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addStreamDisposed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamDisposed += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeStreamDisposed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamDisposed -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamFinalized(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.StreamFinalized' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamFinalized += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamFinalized -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addStreamFinalized(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamFinalized += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeStreamFinalized(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamFinalized -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamLength(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.StreamLength' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler)arg0.func;
				obj.StreamLength += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler)arg0.func;
				obj.StreamLength -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addStreamLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler>(L, 2);
			obj.StreamLength += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeStreamLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler>(L, 2);
			obj.StreamLength -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamConvertedToArray(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.StreamConvertedToArray' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamConvertedToArray += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.EventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)arg0.func;
				obj.StreamConvertedToArray -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addStreamConvertedToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamConvertedToArray += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeStreamConvertedToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.EventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>(L, 2);
			obj.StreamConvertedToArray -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LargeBufferDiscarded(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscarded' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler)arg0.func;
				obj.LargeBufferDiscarded += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler)arg0.func;
				obj.LargeBufferDiscarded -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addLargeBufferDiscarded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler>(L, 2);
			obj.LargeBufferDiscarded += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeLargeBufferDiscarded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler>(L, 2);
			obj.LargeBufferDiscarded -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UsageReport(IntPtr L)
	{
		try
		{
			Microsoft.IO.RecyclableMemoryStreamManager obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Microsoft.IO.RecyclableMemoryStreamManager.UsageReport' can only appear on the left hand side of += or -= when used outside of the type 'Microsoft.IO.RecyclableMemoryStreamManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler)arg0.func;
				obj.UsageReport += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler ev = (Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler)arg0.func;
				obj.UsageReport -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addUsageReport(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler>(L, 2);
			obj.UsageReport += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeUsageReport(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (Microsoft.IO.RecyclableMemoryStreamManager)ToLua.CheckObject(L, 1, typeof(Microsoft.IO.RecyclableMemoryStreamManager));
			var arg0 = (Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler)ToLua.CheckDelegate<Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler>(L, 2);
			obj.UsageReport -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_UsageReportEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_LargeBufferDiscardedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_EventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.EventHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Microsoft_IO_RecyclableMemoryStreamManager_StreamLengthReportHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

