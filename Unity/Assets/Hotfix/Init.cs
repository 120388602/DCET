using BehaviorDesigner.Runtime;
using DCETRuntime;
using System;
using UnityEngine;

namespace DCET
{
	public static class Init
	{
		public async static void Start()
		{
			try
			{
				TypeHelper.Init();
				Game.EventSystem.Init();

				// 注册热更层回调
				GameLoop.onUpdate += Update;
				GameLoop.onLateUpdate += LateUpdate;
				GameLoop.onApplicationQuit += OnApplicationQuit;

				Game.Scene = EntityFactory.CreateScene();
				Game.Scene.AddComponent<NetOuterComponent>();
				Game.Scene.AddComponent<OpcodeTypeComponent>();
				Game.Scene.AddComponent<MessageDispatcherComponent>();
				Game.Scene.AddComponent<SessionComponent>();
				Game.Scene.AddComponent<PlayerComponent>();
				Game.Scene.AddComponent<UnitComponent>();

				// 加载热更配置
				Game.Scene.AddComponent<ResourcesComponent>().LoadBundle("config.unity3d");
				Game.Scene.AddComponent<ConfigComponent>();
				Game.Scene.GetComponent<ResourcesComponent>().UnloadBundle("config.unity3d");

				Game.Scene.AddComponent<FUIPackageComponent>();
				Game.Scene.AddComponent<FUIComponent>();
				await Game.Scene.AddComponent<FUIInitComponent>().Init();
				Game.EventSystem.Run(EventIdType.InitSceneStart);

#if __CSharpLua__
      /*
      [[
      protobuf.register_file("Assets/Res/Lua/pbc/AutoGeneratedCode/OuterMessage.pb")
      ]]
      */
#endif

				byte[] bytes = null;

#if !__CSharpLua__
				var message = new R2C_Login();

				message.Address = "127.0.0.1:10001";
				message.Error = 1;
				message.GateId = 2;
				message.Key = 3;
				message.Message = "error";
				message.RpcId = 4;

				System.IO.File.WriteAllBytes("D:/cs.bytes", Encode(message));
#else
				/*
				[[
					f = io.open("D:/cs.bytes", 'r')
					bytes = f:read('*a')
					f: close()
				]]
				*/
#endif

				var t = Decode<R2C_Login>(bytes);

				Log.Error(JsonHelper.ToJson(t));

				// 演示行为树用法
				//TestBehaviorTree();
			}
			catch (Exception e)
			{
				Log.Exception(e);
			}
		}

		private static byte[] Encode(object proto)
		{
#if !__CSharpLua__
			using (System.IO.MemoryStream s = new System.IO.MemoryStream())
			{
				ProtoBuf.Meta.RuntimeTypeModel.Default.Serialize(s, proto);
				return s.ToArray();
			}
#else
      byte[] bytes = null;
      /*
      [[
       bytes = encodeProtobuf(proto)
      ]]
      */
      return bytes;
#endif
		}

		private static T Decode<T>(byte[] bytes) where T : class
		{
#if !__CSharpLua__
			using (System.IO.MemoryStream s = new System.IO.MemoryStream(bytes))
			{
				var t = (T)ProtoBuf.Meta.RuntimeTypeModel.Default.Deserialize(s, null, typeof(T));
				return t;
			}
#else
      T t = null;
      /*
      [[
       t = decodeProtobuf(bytes, T)
      ]]
      */
      return t;
#endif
		}

		/// <summary>
		/// 演示行为树用法，使用时可以删除
		/// </summary>
		private static void TestBehaviorTree()
		{
			// 全局共享变量用法
			Game.Scene.AddComponent<BehaviorTreeVariableComponent>().SetVariable("全局变量", 1);

			var runtimeBehaivorTree = UnityEngine.Object.Instantiate(ResourcesHelper.Load("Cube") as GameObject).GetComponent<BehaviorDesigner.Runtime.BehaviorTree>();

			if (runtimeBehaivorTree)
			{
				//建议在资源预加载时进行初始化，以免游戏对局中反序列化GC卡顿
				BehaviorTreeHelper.Init(runtimeBehaivorTree.gameObject);

				//动态加载外部行为树用法
				//UnityEngine.Object externalBehavior = 加载("外部行为树资源");
				//BehaviorTreeHelper.Init(externalBehavior);
				//runtimeBehaivorTree.Ensure<BehaviorTreeController>().SetExternalBehavior(externalBehavior);

				(runtimeBehaivorTree.gameObject.Ensure(typeof(BehaviorTreeController)) as BehaviorTreeController).Init();
			}

			var behaviorTree = BehaviorTreeFactory.Create(Game.Scene, runtimeBehaivorTree);

			// 新增行为树共享变量用法
			var p1 = behaviorTree.GetComponent<BehaviorTreeVariableComponent>().GetVariable<int>("变量1");

			Log.Info($"行为树变量：{p1}");

			behaviorTree.GetComponent<BehaviorTreeVariableComponent>().SetVariable("变量1", 2);

			p1 = behaviorTree.GetComponent<BehaviorTreeVariableComponent>().GetVariable<int>("变量1");

			Log.Info($"行为树变量：{p1}");

			behaviorTree.GetComponent<BehaviorTreeVariableComponent>().SetVariable("变量2", "");
			behaviorTree.GetComponent<BehaviorTreeVariableComponent>().SetVariable("变量3", behaviorTree);
			behaviorTree.GetComponent<BehaviorTreeVariableComponent>().SetVariable("变量4", runtimeBehaivorTree);

		}

		public static void Update()
		{
			Game.EventSystem.Update();
		}

		public static void LateUpdate()
		{
			Game.EventSystem.LateUpdate();
		}

		public static void OnApplicationQuit()
		{
			Game.Close();
		}
	}
}