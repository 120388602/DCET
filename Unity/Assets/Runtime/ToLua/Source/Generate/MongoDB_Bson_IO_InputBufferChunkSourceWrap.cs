//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_InputBufferChunkSourceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.InputBufferChunkSource), typeof(System.Object));
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("GetChunk", GetChunk);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_InputBufferChunkSource);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BaseSource", get_BaseSource, null);
		L.RegFunction("getBaseSource", get_BaseSource);
		L.RegVar("MaxChunkSize", get_MaxChunkSize, null);
		L.RegFunction("getMaxChunkSize", get_MaxChunkSize);
		L.RegVar("MinChunkSize", get_MinChunkSize, null);
		L.RegFunction("getMinChunkSize", get_MinChunkSize);
		L.RegVar("MaxUnpooledChunkSize", get_MaxUnpooledChunkSize, null);
		L.RegFunction("getMaxUnpooledChunkSize", get_MaxUnpooledChunkSize);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_InputBufferChunkSource(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.IO.IBsonChunkSource arg0 = (MongoDB.Bson.IO.IBsonChunkSource)ToLua.CheckObject<MongoDB.Bson.IO.IBsonChunkSource>(L, 1);
				MongoDB.Bson.IO.InputBufferChunkSource obj = new MongoDB.Bson.IO.InputBufferChunkSource(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.IO.IBsonChunkSource arg0 = (MongoDB.Bson.IO.IBsonChunkSource)ToLua.CheckObject<MongoDB.Bson.IO.IBsonChunkSource>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				MongoDB.Bson.IO.InputBufferChunkSource obj = new MongoDB.Bson.IO.InputBufferChunkSource(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.IO.IBsonChunkSource arg0 = (MongoDB.Bson.IO.IBsonChunkSource)ToLua.CheckObject<MongoDB.Bson.IO.IBsonChunkSource>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				MongoDB.Bson.IO.InputBufferChunkSource obj = new MongoDB.Bson.IO.InputBufferChunkSource(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 4)
			{
				MongoDB.Bson.IO.IBsonChunkSource arg0 = (MongoDB.Bson.IO.IBsonChunkSource)ToLua.CheckObject<MongoDB.Bson.IO.IBsonChunkSource>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				MongoDB.Bson.IO.InputBufferChunkSource obj = new MongoDB.Bson.IO.InputBufferChunkSource(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.InputBufferChunkSource.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.InputBufferChunkSource obj = (MongoDB.Bson.IO.InputBufferChunkSource)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.InputBufferChunkSource));
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.InputBufferChunkSource obj = (MongoDB.Bson.IO.InputBufferChunkSource)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.InputBufferChunkSource));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.IO.IBsonChunk o = obj.GetChunk(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.InputBufferChunkSource obj = (MongoDB.Bson.IO.InputBufferChunkSource)o;
			MongoDB.Bson.IO.IBsonChunkSource ret = obj.BaseSource;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BaseSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxChunkSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.InputBufferChunkSource obj = (MongoDB.Bson.IO.InputBufferChunkSource)o;
			int ret = obj.MaxChunkSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxChunkSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MinChunkSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.InputBufferChunkSource obj = (MongoDB.Bson.IO.InputBufferChunkSource)o;
			int ret = obj.MinChunkSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MinChunkSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxUnpooledChunkSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.InputBufferChunkSource obj = (MongoDB.Bson.IO.InputBufferChunkSource)o;
			int ret = obj.MaxUnpooledChunkSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxUnpooledChunkSize on a nil value");
		}
	}
}

