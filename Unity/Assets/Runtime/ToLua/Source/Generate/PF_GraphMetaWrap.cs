//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_GraphMetaWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.GraphMeta), typeof(System.Object));
		L.RegFunction("GetGraphType", GetGraphType);
		L.RegFunction("New", _CreatePF_GraphMeta);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("version", get_version, set_version);
		L.RegVar("graphs", get_graphs, set_graphs);
		L.RegVar("guids", get_guids, set_guids);
		L.RegVar("typeNames", get_typeNames, set_typeNames);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_GraphMeta(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.GraphMeta obj = new PF.GraphMeta();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.GraphMeta.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGraphType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.GraphMeta obj = (PF.GraphMeta)ToLua.CheckObject<PF.GraphMeta>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Type o = obj.GetGraphType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_version(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			System.Version ret = obj.version;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index version on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			int ret = obj.graphs;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_guids(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			System.Collections.Generic.List<string> ret = obj.guids;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index guids on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_typeNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			System.Collections.Generic.List<string> ret = obj.typeNames;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index typeNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_version(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			System.Version arg0 = (System.Version)ToLua.CheckObject(L, 2, typeof(System.Version));
			obj.version = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index version on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_graphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.graphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_guids(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.guids = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index guids on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_typeNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.GraphMeta obj = (PF.GraphMeta)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.typeNames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index typeNames on a nil value");
		}
	}
}

