//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_IBsonWriterExtensionsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("IBsonWriterExtensions");
		L.RegFunction("WriteBinaryData", WriteBinaryData);
		L.RegFunction("WriteBoolean", WriteBoolean);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("WriteDateTime", WriteDateTime);
		L.RegFunction("WriteDecimal128", WriteDecimal128);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteInt32", WriteInt32);
		L.RegFunction("WriteInt64", WriteInt64);
		L.RegFunction("WriteJavaScript", WriteJavaScript);
		L.RegFunction("WriteJavaScriptWithScope", WriteJavaScriptWithScope);
		L.RegFunction("WriteMaxKey", WriteMaxKey);
		L.RegFunction("WriteMinKey", WriteMinKey);
		L.RegFunction("WriteNull", WriteNull);
		L.RegFunction("WriteObjectId", WriteObjectId);
		L.RegFunction("WriteRawBsonArray", WriteRawBsonArray);
		L.RegFunction("WriteRawBsonDocument", WriteRawBsonDocument);
		L.RegFunction("WriteRegularExpression", WriteRegularExpression);
		L.RegFunction("WriteStartArray", WriteStartArray);
		L.RegFunction("WriteStartDocument", WriteStartDocument);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("WriteSymbol", WriteSymbol);
		L.RegFunction("WriteTimestamp", WriteTimestamp);
		L.RegFunction("WriteUndefined", WriteUndefined);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBinaryData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.BsonBinaryData arg2 = (MongoDB.Bson.BsonBinaryData)ToLua.CheckObject<MongoDB.Bson.BsonBinaryData>(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteBinaryData(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteBoolean(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteBytes(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDateTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			long arg2 = LuaDLL.tolua_checkint64(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteDateTime(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Decimal128 arg2 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteDecimal128(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			double arg2 = (double)LuaDLL.luaL_checknumber(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteDouble(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteInt32(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			long arg2 = LuaDLL.tolua_checkint64(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteInt64(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteJavaScript(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteJavaScript(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteJavaScriptWithScope(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteJavaScriptWithScope(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteMaxKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteMaxKey(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteMinKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteMinKey(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteNull(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteNull(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteObjectId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.ObjectId arg2 = StackTraits<MongoDB.Bson.ObjectId>.Check(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteObjectId(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteRawBsonArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IByteBuffer arg2 = (MongoDB.Bson.IO.IByteBuffer)ToLua.CheckObject<MongoDB.Bson.IO.IByteBuffer>(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteRawBsonArray(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteRawBsonDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IByteBuffer arg2 = (MongoDB.Bson.IO.IByteBuffer)ToLua.CheckObject<MongoDB.Bson.IO.IByteBuffer>(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteRawBsonDocument(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteRegularExpression(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.BsonRegularExpression arg2 = (MongoDB.Bson.BsonRegularExpression)ToLua.CheckObject<MongoDB.Bson.BsonRegularExpression>(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteRegularExpression(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStartArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteStartArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStartDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteStartDocument(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteString(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSymbol(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteSymbol(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTimestamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			long arg2 = LuaDLL.tolua_checkint64(L, 3);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteTimestamp(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUndefined(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.IBsonWriter arg0 = (MongoDB.Bson.IO.IBsonWriter)ToLua.CheckObject<MongoDB.Bson.IO.IBsonWriter>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MongoDB.Bson.IO.IBsonWriterExtensions.WriteUndefined(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

