//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_MultiTargetPathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.MultiTargetPath), typeof(PF.ABPath));
		L.RegFunction("Construct", Construct);
		L.RegFunction("New", _CreatePF_MultiTargetPath);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("callbacks", get_callbacks, set_callbacks);
		L.RegVar("targetNodes", get_targetNodes, set_targetNodes);
		L.RegVar("targetsFound", get_targetsFound, set_targetsFound);
		L.RegVar("targetPoints", get_targetPoints, set_targetPoints);
		L.RegVar("originalTargetPoints", get_originalTargetPoints, set_originalTargetPoints);
		L.RegVar("vectorPaths", get_vectorPaths, set_vectorPaths);
		L.RegVar("nodePaths", get_nodePaths, set_nodePaths);
		L.RegVar("pathsForAll", get_pathsForAll, set_pathsForAll);
		L.RegVar("chosenTarget", get_chosenTarget, set_chosenTarget);
		L.RegVar("heuristicMode", get_heuristicMode, set_heuristicMode);
		L.RegVar("inverted", get_inverted, null);
		L.RegFunction("getinverted", get_inverted);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_MultiTargetPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PF.MultiTargetPath obj = new PF.MultiTargetPath();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.MultiTargetPath.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Construct(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3[], UnityEngine.Vector3, PF.OnPathDelegate[]>(L, 1))
			{
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				PF.OnPathDelegate[] arg2 = ToLua.ToObjectArray<PF.OnPathDelegate>(L, 3);
				PF.MultiTargetPath o = PF.MultiTargetPath.Construct(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3[], PF.OnPathDelegate[]>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3[] arg1 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				PF.OnPathDelegate[] arg2 = ToLua.ToObjectArray<PF.OnPathDelegate>(L, 3);
				PF.MultiTargetPath o = PF.MultiTargetPath.Construct(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3[], UnityEngine.Vector3, PF.OnPathDelegate[], PF.OnPathDelegate>(L, 1))
			{
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				PF.OnPathDelegate[] arg2 = ToLua.ToObjectArray<PF.OnPathDelegate>(L, 3);
				PF.OnPathDelegate arg3 = (PF.OnPathDelegate)ToLua.ToObject(L, 4);
				PF.MultiTargetPath o = PF.MultiTargetPath.Construct(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3[], PF.OnPathDelegate[], PF.OnPathDelegate>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3[] arg1 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				PF.OnPathDelegate[] arg2 = ToLua.ToObjectArray<PF.OnPathDelegate>(L, 3);
				PF.OnPathDelegate arg3 = (PF.OnPathDelegate)ToLua.ToObject(L, 4);
				PF.MultiTargetPath o = PF.MultiTargetPath.Construct(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.MultiTargetPath.Construct");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_callbacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			PF.OnPathDelegate[] ret = obj.callbacks;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index callbacks on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			PF.GraphNode[] ret = obj.targetNodes;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetsFound(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			bool[] ret = obj.targetsFound;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetsFound on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetPoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			UnityEngine.Vector3[] ret = obj.targetPoints;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetPoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_originalTargetPoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			UnityEngine.Vector3[] ret = obj.originalTargetPoints;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index originalTargetPoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vectorPaths(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			System.Collections.Generic.List<UnityEngine.Vector3>[] ret = obj.vectorPaths;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vectorPaths on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nodePaths(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			System.Collections.Generic.List<PF.GraphNode>[] ret = obj.nodePaths;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodePaths on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathsForAll(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			bool ret = obj.pathsForAll;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathsForAll on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_chosenTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			int ret = obj.chosenTarget;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index chosenTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristicMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			PF.MultiTargetPath.HeuristicMode ret = obj.heuristicMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inverted(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			bool ret = obj.inverted;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inverted on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_callbacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			PF.OnPathDelegate[] arg0 = ToLua.CheckObjectArray<PF.OnPathDelegate>(L, 2);
			obj.callbacks = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index callbacks on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			PF.GraphNode[] arg0 = ToLua.CheckObjectArray<PF.GraphNode>(L, 2);
			obj.targetNodes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetsFound(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			bool[] arg0 = ToLua.CheckBoolArray(L, 2);
			obj.targetsFound = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetsFound on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetPoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
			obj.targetPoints = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetPoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_originalTargetPoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
			obj.originalTargetPoints = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index originalTargetPoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_vectorPaths(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			System.Collections.Generic.List<UnityEngine.Vector3>[] arg0 = ToLua.CheckObjectArray<System.Collections.Generic.List<UnityEngine.Vector3>>(L, 2);
			obj.vectorPaths = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vectorPaths on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nodePaths(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			System.Collections.Generic.List<PF.GraphNode>[] arg0 = ToLua.CheckObjectArray<System.Collections.Generic.List<PF.GraphNode>>(L, 2);
			obj.nodePaths = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodePaths on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathsForAll(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.pathsForAll = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathsForAll on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_chosenTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.chosenTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index chosenTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.MultiTargetPath obj = (PF.MultiTargetPath)o;
			PF.MultiTargetPath.HeuristicMode arg0 = (PF.MultiTargetPath.HeuristicMode)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristicMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicMode on a nil value");
		}
	}
}

