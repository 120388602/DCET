//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonBinaryWriterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.BsonBinaryWriter), typeof(MongoDB.Bson.IO.BsonWriter));
		L.RegFunction("Close", Close);
		L.RegFunction("Flush", Flush);
		L.RegFunction("WriteBinaryData", WriteBinaryData);
		L.RegFunction("WriteBoolean", WriteBoolean);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("WriteDateTime", WriteDateTime);
		L.RegFunction("WriteDecimal128", WriteDecimal128);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteEndArray", WriteEndArray);
		L.RegFunction("WriteEndDocument", WriteEndDocument);
		L.RegFunction("WriteInt32", WriteInt32);
		L.RegFunction("WriteInt64", WriteInt64);
		L.RegFunction("WriteJavaScript", WriteJavaScript);
		L.RegFunction("WriteJavaScriptWithScope", WriteJavaScriptWithScope);
		L.RegFunction("WriteMaxKey", WriteMaxKey);
		L.RegFunction("WriteMinKey", WriteMinKey);
		L.RegFunction("WriteNull", WriteNull);
		L.RegFunction("WriteObjectId", WriteObjectId);
		L.RegFunction("WriteRawBsonArray", WriteRawBsonArray);
		L.RegFunction("WriteRawBsonDocument", WriteRawBsonDocument);
		L.RegFunction("WriteRegularExpression", WriteRegularExpression);
		L.RegFunction("WriteStartArray", WriteStartArray);
		L.RegFunction("WriteStartDocument", WriteStartDocument);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("WriteSymbol", WriteSymbol);
		L.RegFunction("WriteTimestamp", WriteTimestamp);
		L.RegFunction("WriteUndefined", WriteUndefined);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_BsonBinaryWriter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BaseStream", get_BaseStream, null);
		L.RegFunction("getBaseStream", get_BaseStream);
		L.RegVar("BsonStream", get_BsonStream, null);
		L.RegFunction("getBsonStream", get_BsonStream);
		L.RegVar("Position", get_Position, null);
		L.RegFunction("getPosition", get_Position);
		L.RegVar("Settings", get_Settings, null);
		L.RegFunction("getSettings", get_Settings);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_BsonBinaryWriter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				MongoDB.Bson.IO.BsonBinaryWriter obj = new MongoDB.Bson.IO.BsonBinaryWriter(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				MongoDB.Bson.IO.BsonBinaryWriterSettings arg1 = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 2);
				MongoDB.Bson.IO.BsonBinaryWriter obj = new MongoDB.Bson.IO.BsonBinaryWriter(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.BsonBinaryWriter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.Flush();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBinaryData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			MongoDB.Bson.BsonBinaryData arg0 = (MongoDB.Bson.BsonBinaryData)ToLua.CheckObject<MongoDB.Bson.BsonBinaryData>(L, 2);
			obj.WriteBinaryData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WriteBoolean(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.WriteBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDateTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteDateTime(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 2);
			obj.WriteDecimal128(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteEndArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteEndArray();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteEndDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteEndDocument();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt32(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteInt64(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteJavaScript(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteJavaScript(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteJavaScriptWithScope(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteJavaScriptWithScope(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteMaxKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteMaxKey();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteMinKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteMinKey();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteNull(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteNull();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteObjectId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			MongoDB.Bson.ObjectId arg0 = StackTraits<MongoDB.Bson.ObjectId>.Check(L, 2);
			obj.WriteObjectId(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteRawBsonArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			MongoDB.Bson.IO.IByteBuffer arg0 = (MongoDB.Bson.IO.IByteBuffer)ToLua.CheckObject<MongoDB.Bson.IO.IByteBuffer>(L, 2);
			obj.WriteRawBsonArray(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteRawBsonDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			MongoDB.Bson.IO.IByteBuffer arg0 = (MongoDB.Bson.IO.IByteBuffer)ToLua.CheckObject<MongoDB.Bson.IO.IByteBuffer>(L, 2);
			obj.WriteRawBsonDocument(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteRegularExpression(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			MongoDB.Bson.BsonRegularExpression arg0 = (MongoDB.Bson.BsonRegularExpression)ToLua.CheckObject<MongoDB.Bson.BsonRegularExpression>(L, 2);
			obj.WriteRegularExpression(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStartArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteStartArray();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStartDocument(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteStartDocument();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSymbol(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteSymbol(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTimestamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteTimestamp(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUndefined(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriter>(L, 1);
			obj.WriteUndefined();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)o;
			System.IO.Stream ret = obj.BaseStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BaseStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BsonStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)o;
			MongoDB.Bson.IO.BsonStream ret = obj.BsonStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BsonStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)o;
			long ret = obj.Position;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Settings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonBinaryWriter obj = (MongoDB.Bson.IO.BsonBinaryWriter)o;
			MongoDB.Bson.IO.BsonBinaryWriterSettings ret = obj.Settings;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Settings on a nil value");
		}
	}
}

