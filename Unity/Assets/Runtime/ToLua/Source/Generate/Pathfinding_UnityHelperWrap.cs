//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_UnityHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UnityHelper");
		L.RegFunction("Close", Close);
		L.RegFunction("OnDrawGizmos", OnDrawGizmos);
		L.RegFunction("GetGraph", GetGraph);
		L.RegFunction("GetTileBounds", GetTileBounds);
		L.RegFunction("GetTileBoundsInGraphSpace", GetTileBoundsInGraphSpace);
		L.RegFunction("CreateNavmeshSurfaceVisualization", CreateNavmeshSurfaceVisualization);
		L.RegFunction("CreateNavmeshOutlineVisualization", CreateNavmeshOutlineVisualization);
		L.RegFunction("DrawUnwalkableNodes", DrawUnwalkableNodes);
		L.RegFunction("ScanAllTiles", ScanAllTiles);
		L.RegFunction("PutMeshesIntoTileBuckets", PutMeshesIntoTileBuckets);
		L.RegFunction("CollectMeshes", CollectMeshes);
		L.RegFunction("CalculateTileBoundsWithBorder", CalculateTileBoundsWithBorder);
		L.RegFunction("BuildTileMesh", BuildTileMesh);
		L.RegFunction("CreateTile", CreateTile);
		L.RegFunction("SnapForceBoundsToScene", SnapForceBoundsToScene);
		L.RegFunction("Transform", Transform);
		L.RegFunction("InverseTransform", InverseTransform);
		L.RegFunction("GetTouchingTiles", GetTouchingTiles);
		L.RegFunction("GetTouchingTilesInGraphSpace", GetTouchingTilesInGraphSpace);
		L.RegFunction("ReversesFaceOrientations", ReversesFaceOrientations);
		L.RegFunction("ReversesFaceOrientationsXZ", ReversesFaceOrientationsXZ);
		L.RegFunction("IntToColor", IntToColor);
		L.RegFunction("HSVToRGB", HSVToRGB);
		L.RegVar("OnGraphPreScan", get_OnGraphPreScan, set_OnGraphPreScan);
		L.RegVar("OnGraphPostScan", get_OnGraphPostScan, set_OnGraphPostScan);
		L.RegVar("OnPreScan", get_OnPreScan, set_OnPreScan);
		L.RegVar("OnPostScan", get_OnPostScan, set_OnPostScan);
		L.RegVar("OnLatePostScan", get_OnLatePostScan, set_OnLatePostScan);
		L.RegVar("OnGraphsUpdated", get_OnGraphsUpdated, set_OnGraphsUpdated);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Pathfinding.UnityHelper.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrawGizmos(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				PF.EuclideanEmbedding arg0 = (PF.EuclideanEmbedding)ToLua.CheckObject<PF.EuclideanEmbedding>(L, 1);
				Pathfinding.UnityHelper.OnDrawGizmos(arg0);
				return 0;
			}
			else if (count == 3)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				Pathfinding.Util.RetainedGizmos arg1 = (Pathfinding.Util.RetainedGizmos)ToLua.CheckObject<Pathfinding.Util.RetainedGizmos>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				Pathfinding.UnityHelper.OnDrawGizmos(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.UnityHelper.OnDrawGizmos");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGraph(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
			PF.NavGraph o = Pathfinding.UnityHelper.GetGraph(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTileBounds(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				PF.IntRect arg1 = StackTraits<PF.IntRect>.Check(L, 2);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBounds(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBounds(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBounds(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBounds(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.UnityHelper.GetTileBounds");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTileBoundsInGraphSpace(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				PF.IntRect arg1 = StackTraits<PF.IntRect>.Check(L, 2);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBoundsInGraphSpace(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBoundsInGraphSpace(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBoundsInGraphSpace(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Bounds o = Pathfinding.UnityHelper.GetTileBoundsInGraphSpace(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.UnityHelper.GetTileBoundsInGraphSpace");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateNavmeshSurfaceVisualization(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
			PF.NavmeshTile arg1 = (PF.NavmeshTile)ToLua.CheckObject<PF.NavmeshTile>(L, 2);
			Pathfinding.Util.GraphGizmoHelper arg2 = (Pathfinding.Util.GraphGizmoHelper)ToLua.CheckObject<Pathfinding.Util.GraphGizmoHelper>(L, 3);
			Pathfinding.UnityHelper.CreateNavmeshSurfaceVisualization(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateNavmeshOutlineVisualization(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.NavmeshTile arg0 = (PF.NavmeshTile)ToLua.CheckObject<PF.NavmeshTile>(L, 1);
			Pathfinding.Util.GraphGizmoHelper arg1 = (Pathfinding.Util.GraphGizmoHelper)ToLua.CheckObject<Pathfinding.Util.GraphGizmoHelper>(L, 2);
			Pathfinding.UnityHelper.CreateNavmeshOutlineVisualization(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawUnwalkableNodes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Pathfinding.UnityHelper.DrawUnwalkableNodes(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScanAllTiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
			System.Collections.Generic.IEnumerable<Pathfinding.Progress> o = Pathfinding.UnityHelper.ScanAllTiles(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PutMeshesIntoTileBuckets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
			System.Collections.Generic.List<Pathfinding.Voxels.RasterizationMesh> arg1 = (System.Collections.Generic.List<Pathfinding.Voxels.RasterizationMesh>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Pathfinding.Voxels.RasterizationMesh>));
			System.Collections.Generic.List<Pathfinding.Voxels.RasterizationMesh>[] o = Pathfinding.UnityHelper.PutMeshesIntoTileBuckets(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CollectMeshes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
			UnityEngine.Bounds arg1 = ToLua.ToBounds(L, 2);
			System.Collections.Generic.List<Pathfinding.Voxels.RasterizationMesh> o = Pathfinding.UnityHelper.CollectMeshes(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateTileBoundsWithBorder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Bounds o = Pathfinding.UnityHelper.CalculateTileBoundsWithBorder(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuildTileMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
				Pathfinding.Voxels.Voxelize arg1 = (Pathfinding.Voxels.Voxelize)ToLua.CheckObject<Pathfinding.Voxels.Voxelize>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				PF.NavmeshTile o = Pathfinding.UnityHelper.BuildTileMesh(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
				Pathfinding.Voxels.Voxelize arg1 = (Pathfinding.Voxels.Voxelize)ToLua.CheckObject<Pathfinding.Voxels.Voxelize>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				PF.NavmeshTile o = Pathfinding.UnityHelper.BuildTileMesh(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.UnityHelper.BuildTileMesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
			Pathfinding.Voxels.Voxelize arg1 = (Pathfinding.Voxels.Voxelize)ToLua.CheckObject<Pathfinding.Voxels.Voxelize>(L, 2);
			Pathfinding.Voxels.VoxelMesh arg2 = StackTraits<Pathfinding.Voxels.VoxelMesh>.Check(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
			PF.NavmeshTile o = Pathfinding.UnityHelper.CreateTile(arg0, arg1, arg2, arg3, arg4, arg5);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SnapForceBoundsToScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.RecastGraph arg0 = (PF.RecastGraph)ToLua.CheckObject<PF.RecastGraph>(L, 1);
			Pathfinding.UnityHelper.SnapForceBoundsToScene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Transform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.GraphTransform arg0 = (PF.GraphTransform)ToLua.CheckObject<PF.GraphTransform>(L, 1);
			UnityEngine.Bounds arg1 = ToLua.ToBounds(L, 2);
			UnityEngine.Bounds o = Pathfinding.UnityHelper.Transform(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InverseTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.GraphTransform arg0 = (PF.GraphTransform)ToLua.CheckObject<PF.GraphTransform>(L, 1);
			UnityEngine.Bounds arg1 = ToLua.ToBounds(L, 2);
			UnityEngine.Bounds o = Pathfinding.UnityHelper.InverseTransform(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTouchingTiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
			UnityEngine.Bounds arg1 = ToLua.ToBounds(L, 2);
			PF.IntRect o = Pathfinding.UnityHelper.GetTouchingTiles(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTouchingTilesInGraphSpace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.NavmeshBase arg0 = (PF.NavmeshBase)ToLua.CheckObject<PF.NavmeshBase>(L, 1);
			UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
			PF.IntRect o = Pathfinding.UnityHelper.GetTouchingTilesInGraphSpace(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReversesFaceOrientations(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 1);
			bool o = Pathfinding.UnityHelper.ReversesFaceOrientations(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReversesFaceOrientationsXZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 1);
			bool o = Pathfinding.UnityHelper.ReversesFaceOrientationsXZ(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Color o = Pathfinding.UnityHelper.IntToColor(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HSVToRGB(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Color o = Pathfinding.UnityHelper.HSVToRGB(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGraphPreScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.UnityHelper.OnGraphPreScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGraphPostScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.UnityHelper.OnGraphPostScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPreScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.UnityHelper.OnPreScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPostScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.UnityHelper.OnPostScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLatePostScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.UnityHelper.OnLatePostScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGraphsUpdated(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.UnityHelper.OnGraphsUpdated);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGraphPreScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnGraphDelegate arg0 = (Pathfinding.OnGraphDelegate)ToLua.CheckDelegate<Pathfinding.OnGraphDelegate>(L, 2);
			Pathfinding.UnityHelper.OnGraphPreScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGraphPostScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnGraphDelegate arg0 = (Pathfinding.OnGraphDelegate)ToLua.CheckDelegate<Pathfinding.OnGraphDelegate>(L, 2);
			Pathfinding.UnityHelper.OnGraphPostScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPreScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			Pathfinding.UnityHelper.OnPreScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPostScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			Pathfinding.UnityHelper.OnPostScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLatePostScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			Pathfinding.UnityHelper.OnLatePostScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGraphsUpdated(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			Pathfinding.UnityHelper.OnGraphsUpdated = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

