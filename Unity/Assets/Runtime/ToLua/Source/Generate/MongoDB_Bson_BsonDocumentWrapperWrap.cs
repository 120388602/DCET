//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_BsonDocumentWrapperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.BsonDocumentWrapper), typeof(MongoDB.Bson.MaterializedOnDemandBsonDocument));
		L.RegFunction("Create", Create);
		L.RegFunction("CreateMultiple", CreateMultiple);
		L.RegFunction("Clone", Clone);
		L.RegFunction("New", _CreateMongoDB_Bson_BsonDocumentWrapper);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Serializer", get_Serializer, null);
		L.RegFunction("getSerializer", get_Serializer);
		L.RegVar("Wrapped", get_Wrapped, null);
		L.RegFunction("getWrapped", get_Wrapped);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_BsonDocumentWrapper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				MongoDB.Bson.BsonDocumentWrapper obj = new MongoDB.Bson.BsonDocumentWrapper(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				MongoDB.Bson.Serialization.IBsonSerializer arg1 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 2);
				MongoDB.Bson.BsonDocumentWrapper obj = new MongoDB.Bson.BsonDocumentWrapper(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.BsonDocumentWrapper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			object arg1 = ToLua.ToVarObject(L, 2);
			MongoDB.Bson.BsonDocumentWrapper o = MongoDB.Bson.BsonDocumentWrapper.Create(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateMultiple(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			System.Collections.IEnumerable arg1 = (System.Collections.IEnumerable)ToLua.CheckObject<System.Collections.IEnumerable>(L, 2);
			System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonDocumentWrapper> o = MongoDB.Bson.BsonDocumentWrapper.CreateMultiple(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.BsonDocumentWrapper obj = (MongoDB.Bson.BsonDocumentWrapper)ToLua.CheckObject<MongoDB.Bson.BsonDocumentWrapper>(L, 1);
			MongoDB.Bson.BsonValue o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonDocument arg0 = (MongoDB.Bson.BsonDocument)ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonDocument arg1 = (MongoDB.Bson.BsonDocument)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Serializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonDocumentWrapper obj = (MongoDB.Bson.BsonDocumentWrapper)o;
			MongoDB.Bson.Serialization.IBsonSerializer ret = obj.Serializer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Serializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Wrapped(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonDocumentWrapper obj = (MongoDB.Bson.BsonDocumentWrapper)o;
			object ret = obj.Wrapped;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Wrapped on a nil value");
		}
	}
}

