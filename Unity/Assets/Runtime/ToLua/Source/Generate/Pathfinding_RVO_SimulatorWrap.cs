//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_RVO_SimulatorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.RVO.Simulator), typeof(System.Object));
		L.RegFunction("GetAgents", GetAgents);
		L.RegFunction("GetObstacles", GetObstacles);
		L.RegFunction("ClearAgents", ClearAgents);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("AddAgent", AddAgent);
		L.RegFunction("RemoveAgent", RemoveAgent);
		L.RegFunction("AddObstacle", AddObstacle);
		L.RegFunction("UpdateObstacle", UpdateObstacle);
		L.RegFunction("RemoveObstacle", RemoveObstacle);
		L.RegFunction("UpdateObstacles", UpdateObstacles);
		L.RegFunction("Update", Update);
		L.RegFunction("New", _CreatePathfinding_RVO_Simulator);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("obstacles", get_obstacles, set_obstacles);
		L.RegVar("symmetryBreakingBias", get_symmetryBreakingBias, set_symmetryBreakingBias);
		L.RegVar("movementPlane", get_movementPlane, null);
		L.RegVar("Quadtree", get_Quadtree, null);
		L.RegFunction("getQuadtree", get_Quadtree);
		L.RegVar("DeltaTime", get_DeltaTime, null);
		L.RegFunction("getDeltaTime", get_DeltaTime);
		L.RegVar("Multithreading", get_Multithreading, null);
		L.RegFunction("getMultithreading", get_Multithreading);
		L.RegVar("DesiredDeltaTime", get_DesiredDeltaTime, set_DesiredDeltaTime);
		L.RegFunction("getDesiredDeltaTime", get_DesiredDeltaTime);
		L.RegFunction("setDesiredDeltaTime", set_DesiredDeltaTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_RVO_Simulator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Pathfinding.RVO.MovementPlane arg2 = (Pathfinding.RVO.MovementPlane)LuaDLL.luaL_checknumber(L, 3);
				Pathfinding.RVO.Simulator obj = new Pathfinding.RVO.Simulator(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.RVO.Simulator.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAgents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			System.Collections.Generic.List<Pathfinding.RVO.Sampled.Agent> o = obj.GetAgents();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObstacles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			System.Collections.Generic.List<Pathfinding.RVO.ObstacleVertex> o = obj.GetObstacles();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAgents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			obj.ClearAgents();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAgent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				Pathfinding.RVO.IAgent arg0 = (Pathfinding.RVO.IAgent)ToLua.CheckObject<Pathfinding.RVO.IAgent>(L, 2);
				Pathfinding.RVO.IAgent o = obj.AddAgent(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Pathfinding.RVO.IAgent o = obj.AddAgent(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.RVO.Simulator.AddAgent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAgent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			Pathfinding.RVO.IAgent arg0 = (Pathfinding.RVO.IAgent)ToLua.CheckObject<Pathfinding.RVO.IAgent>(L, 2);
			obj.RemoveAgent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddObstacle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				Pathfinding.RVO.ObstacleVertex arg0 = (Pathfinding.RVO.ObstacleVertex)ToLua.CheckObject<Pathfinding.RVO.ObstacleVertex>(L, 2);
				Pathfinding.RVO.ObstacleVertex o = obj.AddObstacle(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Pathfinding.RVO.ObstacleVertex o = obj.AddObstacle(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3[], float, bool>(L, 2))
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				Pathfinding.RVO.ObstacleVertex o = obj.AddObstacle(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3[], float, UnityEngine.Matrix4x4>(L, 2))
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				UnityEngine.Matrix4x4 arg2 = StackTraits<UnityEngine.Matrix4x4>.To(L, 4);
				Pathfinding.RVO.ObstacleVertex o = obj.AddObstacle(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, float>(L, 2))
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				Pathfinding.RVO.ObstacleVertex o = obj.AddObstacle(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Matrix4x4 arg2 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 4);
				Pathfinding.RVO.RVOLayer arg3 = (Pathfinding.RVO.RVOLayer)LuaDLL.luaL_checknumber(L, 5);
				Pathfinding.RVO.ObstacleVertex o = obj.AddObstacle(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Matrix4x4 arg2 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 4);
				Pathfinding.RVO.RVOLayer arg3 = (Pathfinding.RVO.RVOLayer)LuaDLL.luaL_checknumber(L, 5);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
				Pathfinding.RVO.ObstacleVertex o = obj.AddObstacle(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.RVO.Simulator.AddObstacle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateObstacle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			Pathfinding.RVO.ObstacleVertex arg0 = (Pathfinding.RVO.ObstacleVertex)ToLua.CheckObject<Pathfinding.RVO.ObstacleVertex>(L, 2);
			UnityEngine.Vector3[] arg1 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 3);
			UnityEngine.Matrix4x4 arg2 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 4);
			obj.UpdateObstacle(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveObstacle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			Pathfinding.RVO.ObstacleVertex arg0 = (Pathfinding.RVO.ObstacleVertex)ToLua.CheckObject<Pathfinding.RVO.ObstacleVertex>(L, 2);
			obj.RemoveObstacle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateObstacles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			obj.UpdateObstacles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)ToLua.CheckObject<Pathfinding.RVO.Simulator>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_obstacles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			System.Collections.Generic.List<Pathfinding.RVO.ObstacleVertex> ret = obj.obstacles;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index obstacles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_symmetryBreakingBias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			float ret = obj.symmetryBreakingBias;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index symmetryBreakingBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_movementPlane(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			Pathfinding.RVO.MovementPlane ret = obj.movementPlane;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index movementPlane on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Quadtree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			Pathfinding.RVO.RVOQuadtree ret = obj.Quadtree;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Quadtree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeltaTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			float ret = obj.DeltaTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeltaTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Multithreading(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			bool ret = obj.Multithreading;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Multithreading on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DesiredDeltaTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			float ret = obj.DesiredDeltaTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DesiredDeltaTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_obstacles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			System.Collections.Generic.List<Pathfinding.RVO.ObstacleVertex> arg0 = (System.Collections.Generic.List<Pathfinding.RVO.ObstacleVertex>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Pathfinding.RVO.ObstacleVertex>));
			obj.obstacles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index obstacles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_symmetryBreakingBias(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.symmetryBreakingBias = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index symmetryBreakingBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DesiredDeltaTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.Simulator obj = (Pathfinding.RVO.Simulator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DesiredDeltaTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DesiredDeltaTime on a nil value");
		}
	}
}

