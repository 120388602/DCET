//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Conventions_ConventionPackWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.Conventions.ConventionPack), typeof(System.Object));
		L.RegFunction("Add", Add);
		L.RegFunction("AddClassMapConvention", AddClassMapConvention);
		L.RegFunction("AddMemberMapConvention", AddMemberMapConvention);
		L.RegFunction("AddPostProcessingConvention", AddPostProcessingConvention);
		L.RegFunction("AddRange", AddRange);
		L.RegFunction("Append", Append);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("InsertAfter", InsertAfter);
		L.RegFunction("InsertBefore", InsertBefore);
		L.RegFunction("Remove", Remove);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_Conventions_ConventionPack);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Conventions", get_Conventions, null);
		L.RegFunction("getConventions", get_Conventions);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_Conventions_ConventionPack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.Serialization.Conventions.ConventionPack obj = new MongoDB.Bson.Serialization.Conventions.ConventionPack();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.Conventions.ConventionPack.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			MongoDB.Bson.Serialization.Conventions.IConvention arg0 = (MongoDB.Bson.Serialization.Conventions.IConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.IConvention>(L, 2);
			obj.Add(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddClassMapConvention(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<MongoDB.Bson.Serialization.BsonClassMap> arg1 = (System.Action<MongoDB.Bson.Serialization.BsonClassMap>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonClassMap>>(L, 3);
			obj.AddClassMapConvention(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddMemberMapConvention(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<MongoDB.Bson.Serialization.BsonMemberMap> arg1 = (System.Action<MongoDB.Bson.Serialization.BsonMemberMap>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonMemberMap>>(L, 3);
			obj.AddMemberMapConvention(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPostProcessingConvention(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<MongoDB.Bson.Serialization.BsonClassMap> arg1 = (System.Action<MongoDB.Bson.Serialization.BsonClassMap>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonClassMap>>(L, 3);
			obj.AddPostProcessingConvention(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			System.Collections.Generic.IEnumerable<MongoDB.Bson.Serialization.Conventions.IConvention> arg0 = (System.Collections.Generic.IEnumerable<MongoDB.Bson.Serialization.Conventions.IConvention>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<MongoDB.Bson.Serialization.Conventions.IConvention>>(L, 2);
			obj.AddRange(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Append(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			MongoDB.Bson.Serialization.Conventions.IConventionPack arg0 = (MongoDB.Bson.Serialization.Conventions.IConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.IConventionPack>(L, 2);
			obj.Append(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			System.Collections.Generic.IEnumerator<MongoDB.Bson.Serialization.Conventions.IConvention> o = obj.GetEnumerator();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertAfter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.Conventions.IConvention arg1 = (MongoDB.Bson.Serialization.Conventions.IConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.IConvention>(L, 3);
			obj.InsertAfter(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertBefore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.Serialization.Conventions.IConvention arg1 = (MongoDB.Bson.Serialization.Conventions.IConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.IConvention>(L, 3);
			obj.InsertBefore(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ConventionPack>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Remove(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Conventions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.Conventions.ConventionPack obj = (MongoDB.Bson.Serialization.Conventions.ConventionPack)o;
			System.Collections.Generic.IEnumerable<MongoDB.Bson.Serialization.Conventions.IConvention> ret = obj.Conventions;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Conventions on a nil value");
		}
	}
}

