//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_IntRectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.IntRect), null);
		L.RegFunction("Contains", Contains);
		L.RegFunction("IsValid", IsValid);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("Intersection", Intersection);
		L.RegFunction("Intersects", Intersects);
		L.RegFunction("Union", Union);
		L.RegFunction("ExpandToContain", ExpandToContain);
		L.RegFunction("Expand", Expand);
		L.RegFunction("Rotate", Rotate);
		L.RegFunction("Offset", Offset);
		L.RegFunction("ToString", ToString);
		L.RegFunction("DebugDraw", DebugDraw);
		L.RegFunction("New", _CreatePF_IntRect);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("xmin", get_xmin, set_xmin);
		L.RegVar("ymin", get_ymin, set_ymin);
		L.RegVar("xmax", get_xmax, set_xmax);
		L.RegVar("ymax", get_ymax, set_ymax);
		L.RegVar("Width", get_Width, null);
		L.RegFunction("getWidth", get_Width);
		L.RegVar("Height", get_Height, null);
		L.RegFunction("getHeight", get_Height);
		L.RegFunction("default", __default__);
		L.RegFunction("__clone__", __clone__);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePF_IntRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				PF.IntRect obj = new PF.IntRect(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				PF.IntRect obj = new PF.IntRect();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PF.IntRect.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Contains(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.Contains(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsValid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			bool o = obj.IsValid();
			LuaDLL.lua_pushboolean(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.IntRect arg0 = StackTraits<PF.IntRect>.To(L, 1);
			PF.IntRect arg1 = StackTraits<PF.IntRect>.To(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj.Equals(arg0);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Intersection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.IntRect arg0 = StackTraits<PF.IntRect>.Check(L, 1);
			PF.IntRect arg1 = StackTraits<PF.IntRect>.Check(L, 2);
			PF.IntRect o = PF.IntRect.Intersection(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Intersects(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.IntRect arg0 = StackTraits<PF.IntRect>.Check(L, 1);
			PF.IntRect arg1 = StackTraits<PF.IntRect>.Check(L, 2);
			bool o = PF.IntRect.Intersects(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Union(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.IntRect arg0 = StackTraits<PF.IntRect>.Check(L, 1);
			PF.IntRect arg1 = StackTraits<PF.IntRect>.Check(L, 2);
			PF.IntRect o = PF.IntRect.Union(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExpandToContain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			PF.IntRect o = obj.ExpandToContain(arg0, arg1);
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Expand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PF.IntRect o = obj.Expand(arg0);
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rotate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PF.IntRect o = obj.Rotate(arg0);
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Offset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
				PF.Int2 arg0 = StackTraits<PF.Int2>.Check(L, 2);
				PF.IntRect o = obj.Offset(arg0);
				ToLua.PushValue(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else if (count == 3)
			{
				PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				PF.IntRect o = obj.Offset(arg0, arg1);
				ToLua.PushValue(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.IntRect.Offset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DebugDraw(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PF.IntRect obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			PF.GraphTransform arg0 = (PF.GraphTransform)ToLua.CheckObject<PF.GraphTransform>(L, 2);
			UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
			obj.DebugDraw(arg0, arg1);
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_xmin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int ret = obj.xmin;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xmin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ymin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int ret = obj.ymin;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ymin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_xmax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int ret = obj.xmax;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xmax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ymax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int ret = obj.ymax;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ymax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int ret = obj.Width;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int ret = obj.Height;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Height on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_xmin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.xmin = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xmin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ymin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ymin = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ymin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_xmax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.xmax = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xmax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ymax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.IntRect obj = (PF.IntRect)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ymax = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ymax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __default__(IntPtr L)
	{
		try
		{
			var o = new PF.IntRect();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __clone__(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (PF.IntRect)ToLua.CheckObject(L, 1, typeof(PF.IntRect));
			var o = obj;
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

