//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_Util_PathInterpolatorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.Util.PathInterpolator), typeof(System.Object));
		L.RegFunction("SetPath", SetPath);
		L.RegFunction("MoveToSegment", MoveToSegment);
		L.RegFunction("MoveToClosestPoint", MoveToClosestPoint);
		L.RegFunction("MoveToLocallyClosestPoint", MoveToLocallyClosestPoint);
		L.RegFunction("MoveToCircleIntersection2D", MoveToCircleIntersection2D);
		L.RegFunction("New", _CreatePathfinding_Util_PathInterpolator);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("position", get_position, null);
		L.RegFunction("getposition", get_position);
		L.RegVar("tangent", get_tangent, null);
		L.RegFunction("gettangent", get_tangent);
		L.RegVar("remainingDistance", get_remainingDistance, set_remainingDistance);
		L.RegFunction("getremainingDistance", get_remainingDistance);
		L.RegFunction("setremainingDistance", set_remainingDistance);
		L.RegVar("distance", get_distance, set_distance);
		L.RegFunction("getdistance", get_distance);
		L.RegFunction("setdistance", set_distance);
		L.RegVar("segmentIndex", get_segmentIndex, null);
		L.RegFunction("getsegmentIndex", get_segmentIndex);
		L.RegVar("valid", get_valid, null);
		L.RegFunction("getvalid", get_valid);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_Util_PathInterpolator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Pathfinding.Util.PathInterpolator obj = new Pathfinding.Util.PathInterpolator();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.Util.PathInterpolator.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)ToLua.CheckObject<Pathfinding.Util.PathInterpolator>(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			obj.SetPath(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToSegment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)ToLua.CheckObject<Pathfinding.Util.PathInterpolator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.MoveToSegment(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToClosestPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)ToLua.CheckObject<Pathfinding.Util.PathInterpolator>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.MoveToClosestPoint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToLocallyClosestPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)ToLua.CheckObject<Pathfinding.Util.PathInterpolator>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				obj.MoveToLocallyClosestPoint(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)ToLua.CheckObject<Pathfinding.Util.PathInterpolator>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.MoveToLocallyClosestPoint(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)ToLua.CheckObject<Pathfinding.Util.PathInterpolator>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.MoveToLocallyClosestPoint(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.Util.PathInterpolator.MoveToLocallyClosestPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToCircleIntersection2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)ToLua.CheckObject<Pathfinding.Util.PathInterpolator>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			PF.IMovementPlane arg2 = (PF.IMovementPlane)ToLua.CheckObject<PF.IMovementPlane>(L, 4);
			obj.MoveToCircleIntersection2D(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			UnityEngine.Vector3 ret = obj.position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tangent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			UnityEngine.Vector3 ret = obj.tangent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tangent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_remainingDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			float ret = obj.remainingDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index remainingDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_distance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			float ret = obj.distance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index distance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_segmentIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			int ret = obj.segmentIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index segmentIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_valid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			bool ret = obj.valid;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index valid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_remainingDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.remainingDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index remainingDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_distance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Util.PathInterpolator obj = (Pathfinding.Util.PathInterpolator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.distance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index distance on a nil value");
		}
	}
}

