//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_BsonExtensionMethodsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("BsonExtensionMethods");
		L.RegFunction("ToBson", ToBson);
		L.RegFunction("ToBsonDocument", ToBsonDocument);
		L.RegFunction("ToJson", ToJson);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToBson(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				byte[] o = MongoDB.Bson.BsonExtensionMethods.ToBson(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.BsonBinaryWriterSettings arg2 = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 3);
				byte[] o = MongoDB.Bson.BsonExtensionMethods.ToBson(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.BsonBinaryWriterSettings arg2 = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 3);
				MongoDB.Bson.Serialization.IBsonSerializer arg3 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 4);
				byte[] o = MongoDB.Bson.BsonExtensionMethods.ToBson(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.BsonBinaryWriterSettings arg2 = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 3);
				MongoDB.Bson.Serialization.IBsonSerializer arg3 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 4);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg4 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 5);
				byte[] o = MongoDB.Bson.BsonExtensionMethods.ToBson(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.BsonBinaryWriterSettings arg2 = (MongoDB.Bson.IO.BsonBinaryWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryWriterSettings>(L, 3);
				MongoDB.Bson.Serialization.IBsonSerializer arg3 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 4);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg4 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 5);
				MongoDB.Bson.Serialization.BsonSerializationArgs arg5 = StackTraits<MongoDB.Bson.Serialization.BsonSerializationArgs>.Check(L, 6);
				byte[] o = MongoDB.Bson.BsonExtensionMethods.ToBson(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonExtensionMethods.ToBson");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToBsonDocument(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.BsonDocument o = MongoDB.Bson.BsonExtensionMethods.ToBsonDocument(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.Serialization.IBsonSerializer arg2 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 3);
				MongoDB.Bson.BsonDocument o = MongoDB.Bson.BsonExtensionMethods.ToBsonDocument(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.Serialization.IBsonSerializer arg2 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 3);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg3 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 4);
				MongoDB.Bson.BsonDocument o = MongoDB.Bson.BsonExtensionMethods.ToBsonDocument(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.Serialization.IBsonSerializer arg2 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 3);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg3 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 4);
				MongoDB.Bson.Serialization.BsonSerializationArgs arg4 = StackTraits<MongoDB.Bson.Serialization.BsonSerializationArgs>.Check(L, 5);
				MongoDB.Bson.BsonDocument o = MongoDB.Bson.BsonExtensionMethods.ToBsonDocument(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonExtensionMethods.ToBsonDocument");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToJson(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				string o = MongoDB.Bson.BsonExtensionMethods.ToJson(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.JsonWriterSettings arg2 = (MongoDB.Bson.IO.JsonWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.JsonWriterSettings>(L, 3);
				string o = MongoDB.Bson.BsonExtensionMethods.ToJson(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.JsonWriterSettings arg2 = (MongoDB.Bson.IO.JsonWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.JsonWriterSettings>(L, 3);
				MongoDB.Bson.Serialization.IBsonSerializer arg3 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 4);
				string o = MongoDB.Bson.BsonExtensionMethods.ToJson(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.JsonWriterSettings arg2 = (MongoDB.Bson.IO.JsonWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.JsonWriterSettings>(L, 3);
				MongoDB.Bson.Serialization.IBsonSerializer arg3 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 4);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg4 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 5);
				string o = MongoDB.Bson.BsonExtensionMethods.ToJson(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 6)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				MongoDB.Bson.IO.JsonWriterSettings arg2 = (MongoDB.Bson.IO.JsonWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.JsonWriterSettings>(L, 3);
				MongoDB.Bson.Serialization.IBsonSerializer arg3 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 4);
				System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder> arg4 = (System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>)ToLua.CheckDelegate<System.Action<MongoDB.Bson.Serialization.BsonSerializationContext.Builder>>(L, 5);
				MongoDB.Bson.Serialization.BsonSerializationArgs arg5 = StackTraits<MongoDB.Bson.Serialization.BsonSerializationArgs>.Check(L, 6);
				string o = MongoDB.Bson.BsonExtensionMethods.ToJson(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.BsonExtensionMethods.ToJson");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

