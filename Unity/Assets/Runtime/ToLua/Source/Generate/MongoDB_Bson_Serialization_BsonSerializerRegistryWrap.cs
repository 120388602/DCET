//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonSerializerRegistryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonSerializerRegistry), typeof(System.Object));
		L.RegFunction("GetSerializer", GetSerializer);
		L.RegFunction("RegisterSerializer", RegisterSerializer);
		L.RegFunction("RegisterSerializationProvider", RegisterSerializationProvider);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_BsonSerializerRegistry);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_BsonSerializerRegistry(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.Serialization.BsonSerializerRegistry obj = new MongoDB.Bson.Serialization.BsonSerializerRegistry();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.BsonSerializerRegistry.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSerializer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonSerializerRegistry obj = (MongoDB.Bson.Serialization.BsonSerializerRegistry)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Serialization.BsonSerializerRegistry));
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			MongoDB.Bson.Serialization.IBsonSerializer o = obj.GetSerializer(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterSerializer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.Serialization.BsonSerializerRegistry obj = (MongoDB.Bson.Serialization.BsonSerializerRegistry)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Serialization.BsonSerializerRegistry));
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			MongoDB.Bson.Serialization.IBsonSerializer arg1 = (MongoDB.Bson.Serialization.IBsonSerializer)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializer>(L, 3);
			obj.RegisterSerializer(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterSerializationProvider(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.BsonSerializerRegistry obj = (MongoDB.Bson.Serialization.BsonSerializerRegistry)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Serialization.BsonSerializerRegistry));
			MongoDB.Bson.Serialization.IBsonSerializationProvider arg0 = (MongoDB.Bson.Serialization.IBsonSerializationProvider)ToLua.CheckObject<MongoDB.Bson.Serialization.IBsonSerializationProvider>(L, 2);
			obj.RegisterSerializationProvider(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

