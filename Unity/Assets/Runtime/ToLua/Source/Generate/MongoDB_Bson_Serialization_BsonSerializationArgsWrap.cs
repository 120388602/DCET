//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_BsonSerializationArgsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.BsonSerializationArgs), null);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_BsonSerializationArgs);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("NominalType", get_NominalType, set_NominalType);
		L.RegFunction("getNominalType", get_NominalType);
		L.RegFunction("setNominalType", set_NominalType);
		L.RegVar("SerializeAsNominalType", get_SerializeAsNominalType, set_SerializeAsNominalType);
		L.RegFunction("getSerializeAsNominalType", get_SerializeAsNominalType);
		L.RegFunction("setSerializeAsNominalType", set_SerializeAsNominalType);
		L.RegVar("SerializeIdFirst", get_SerializeIdFirst, set_SerializeIdFirst);
		L.RegFunction("getSerializeIdFirst", get_SerializeIdFirst);
		L.RegFunction("setSerializeIdFirst", set_SerializeIdFirst);
		L.RegFunction("default", __default__);
		L.RegFunction("__clone__", __clone__);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_BsonSerializationArgs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				MongoDB.Bson.Serialization.BsonSerializationArgs obj = new MongoDB.Bson.Serialization.BsonSerializationArgs(arg0, arg1, arg2);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				MongoDB.Bson.Serialization.BsonSerializationArgs obj = new MongoDB.Bson.Serialization.BsonSerializationArgs();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.BsonSerializationArgs.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NominalType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationArgs obj = (MongoDB.Bson.Serialization.BsonSerializationArgs)o;
			System.Type ret = obj.NominalType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NominalType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SerializeAsNominalType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationArgs obj = (MongoDB.Bson.Serialization.BsonSerializationArgs)o;
			bool ret = obj.SerializeAsNominalType;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SerializeAsNominalType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SerializeIdFirst(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationArgs obj = (MongoDB.Bson.Serialization.BsonSerializationArgs)o;
			bool ret = obj.SerializeIdFirst;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SerializeIdFirst on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NominalType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationArgs obj = (MongoDB.Bson.Serialization.BsonSerializationArgs)o;
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			obj.NominalType = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NominalType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SerializeAsNominalType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationArgs obj = (MongoDB.Bson.Serialization.BsonSerializationArgs)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SerializeAsNominalType = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SerializeAsNominalType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SerializeIdFirst(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.Serialization.BsonSerializationArgs obj = (MongoDB.Bson.Serialization.BsonSerializationArgs)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SerializeIdFirst = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SerializeIdFirst on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __default__(IntPtr L)
	{
		try
		{
			var o = new MongoDB.Bson.Serialization.BsonSerializationArgs();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __clone__(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (MongoDB.Bson.Serialization.BsonSerializationArgs)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Serialization.BsonSerializationArgs));
			var o = obj;
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

