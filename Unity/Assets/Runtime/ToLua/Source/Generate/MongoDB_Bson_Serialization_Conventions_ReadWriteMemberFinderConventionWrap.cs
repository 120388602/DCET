//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Conventions_ReadWriteMemberFinderConventionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention), typeof(MongoDB.Bson.Serialization.Conventions.ConventionBase));
		L.RegFunction("Apply", Apply);
		L.RegFunction("New", _CreateMongoDB_Bson_Serialization_Conventions_ReadWriteMemberFinderConvention);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Serialization_Conventions_ReadWriteMemberFinderConvention(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention obj = new MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<uint>(L, 1))
			{
				System.Reflection.MemberTypes arg0 = (System.Reflection.MemberTypes)LuaDLL.lua_tonumber(L, 1);
				MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention obj = new MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<uint>(L, 1))
			{
				System.Reflection.BindingFlags arg0 = (System.Reflection.BindingFlags)LuaDLL.lua_tonumber(L, 1);
				MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention obj = new MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				System.Reflection.MemberTypes arg0 = (System.Reflection.MemberTypes)LuaDLL.luaL_checknumber(L, 1);
				System.Reflection.BindingFlags arg1 = (System.Reflection.BindingFlags)LuaDLL.luaL_checknumber(L, 2);
				MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention obj = new MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Apply(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention obj = (MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention>(L, 1);
			MongoDB.Bson.Serialization.BsonClassMap arg0 = (MongoDB.Bson.Serialization.BsonClassMap)ToLua.CheckObject<MongoDB.Bson.Serialization.BsonClassMap>(L, 2);
			obj.Apply(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

