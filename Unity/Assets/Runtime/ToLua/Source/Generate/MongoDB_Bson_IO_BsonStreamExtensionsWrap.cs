//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonStreamExtensionsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("BsonStreamExtensions");
		L.RegFunction("BackpatchSize", BackpatchSize);
		L.RegFunction("ReadBinarySubType", ReadBinarySubType);
		L.RegFunction("ReadBoolean", ReadBoolean);
		L.RegFunction("ReadBsonType", ReadBsonType);
		L.RegFunction("ReadBytes", ReadBytes);
		L.RegFunction("WriteBinarySubType", WriteBinarySubType);
		L.RegFunction("WriteBoolean", WriteBoolean);
		L.RegFunction("WriteBsonType", WriteBsonType);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("WriteSlice", WriteSlice);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BackpatchSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			long arg1 = LuaDLL.tolua_checkint64(L, 2);
			MongoDB.Bson.IO.BsonStreamExtensions.BackpatchSize(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBinarySubType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.BsonBinarySubType o = MongoDB.Bson.IO.BsonStreamExtensions.ReadBinarySubType(arg0);
			LuaDLL.lua_pushinteger(L, (int)o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			bool o = MongoDB.Bson.IO.BsonStreamExtensions.ReadBoolean(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBsonType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.BsonType o = MongoDB.Bson.IO.BsonStreamExtensions.ReadBsonType(arg0);
			LuaDLL.lua_pushinteger(L, (int)o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				byte[] o = MongoDB.Bson.IO.BsonStreamExtensions.ReadBytes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				MongoDB.Bson.IO.BsonStreamExtensions.ReadBytes(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.IO.BsonStreamExtensions.ReadBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBinarySubType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.BsonBinarySubType arg1 = (MongoDB.Bson.BsonBinarySubType)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.IO.BsonStreamExtensions.WriteBinarySubType(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			MongoDB.Bson.IO.BsonStreamExtensions.WriteBoolean(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBsonType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.BsonType arg1 = (MongoDB.Bson.BsonType)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.IO.BsonStreamExtensions.WriteBsonType(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			MongoDB.Bson.IO.BsonStreamExtensions.WriteBytes(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSlice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream arg0 = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.IO.IByteBuffer arg1 = (MongoDB.Bson.IO.IByteBuffer)ToLua.CheckObject<MongoDB.Bson.IO.IByteBuffer>(L, 2);
			MongoDB.Bson.IO.BsonStreamExtensions.WriteSlice(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

