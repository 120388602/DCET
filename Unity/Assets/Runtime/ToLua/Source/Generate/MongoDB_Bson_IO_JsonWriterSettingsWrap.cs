//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_JsonWriterSettingsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.JsonWriterSettings), typeof(MongoDB.Bson.IO.BsonWriterSettings));
		L.RegFunction("Clone", Clone);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_JsonWriterSettings);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Defaults", get_Defaults, set_Defaults);
		L.RegFunction("getDefaults", get_Defaults);
		L.RegFunction("setDefaults", set_Defaultster);
		L.RegVar("Indent", get_Indent, set_Indent);
		L.RegFunction("getIndent", get_Indent);
		L.RegFunction("setIndent", set_Indent);
		L.RegVar("IndentChars", get_IndentChars, set_IndentChars);
		L.RegFunction("getIndentChars", get_IndentChars);
		L.RegFunction("setIndentChars", set_IndentChars);
		L.RegVar("NewLineChars", get_NewLineChars, set_NewLineChars);
		L.RegFunction("getNewLineChars", get_NewLineChars);
		L.RegFunction("setNewLineChars", set_NewLineChars);
		L.RegVar("OutputMode", get_OutputMode, set_OutputMode);
		L.RegFunction("getOutputMode", get_OutputMode);
		L.RegFunction("setOutputMode", set_OutputMode);
		L.RegVar("ShellVersion", get_ShellVersion, set_ShellVersion);
		L.RegFunction("getShellVersion", get_ShellVersion);
		L.RegFunction("setShellVersion", set_ShellVersion);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_JsonWriterSettings(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MongoDB.Bson.IO.JsonWriterSettings obj = new MongoDB.Bson.IO.JsonWriterSettings();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.JsonWriterSettings.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.JsonWriterSettings>(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Defaults(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MongoDB.Bson.IO.JsonWriterSettings.Defaults);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Indent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			bool ret = obj.Indent;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Indent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IndentChars(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			string ret = obj.IndentChars;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IndentChars on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NewLineChars(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			string ret = obj.NewLineChars;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NewLineChars on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OutputMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			MongoDB.Bson.IO.JsonOutputMode ret = obj.OutputMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OutputMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShellVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			System.Version ret = obj.ShellVersion;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShellVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaults(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.JsonWriterSettings arg0 = (MongoDB.Bson.IO.JsonWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.JsonWriterSettings>(L, 2);
			MongoDB.Bson.IO.JsonWriterSettings.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Defaultster(IntPtr L)
	{
		try
		{
			MongoDB.Bson.IO.JsonWriterSettings arg0 = (MongoDB.Bson.IO.JsonWriterSettings)ToLua.CheckObject<MongoDB.Bson.IO.JsonWriterSettings>(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings.Defaults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Indent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Indent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Indent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IndentChars(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.IndentChars = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IndentChars on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NewLineChars(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.NewLineChars = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NewLineChars on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OutputMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			MongoDB.Bson.IO.JsonOutputMode arg0 = (MongoDB.Bson.IO.JsonOutputMode)LuaDLL.luaL_checknumber(L, 2);
			obj.OutputMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OutputMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShellVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.JsonWriterSettings obj = (MongoDB.Bson.IO.JsonWriterSettings)o;
			System.Version arg0 = (System.Version)ToLua.CheckObject(L, 2, typeof(System.Version));
			obj.ShellVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShellVersion on a nil value");
		}
	}
}

