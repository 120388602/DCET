//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_SimpleSmoothModifierWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.SimpleSmoothModifier), typeof(Pathfinding.MonoModifier));
		L.RegFunction("AddComp", AddComp);
		L.RegFunction("Apply", Apply);
		L.RegFunction("CurvedNonuniform", CurvedNonuniform);
		L.RegFunction("GetPointOnCubic", GetPointOnCubic);
		L.RegFunction("SmoothOffsetSimple", SmoothOffsetSimple);
		L.RegFunction("SmoothSimple", SmoothSimple);
		L.RegFunction("SmoothBezier", SmoothBezier);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("smoothType", get_smoothType, set_smoothType);
		L.RegVar("subdivisions", get_subdivisions, set_subdivisions);
		L.RegVar("iterations", get_iterations, set_iterations);
		L.RegVar("strength", get_strength, set_strength);
		L.RegVar("uniformLength", get_uniformLength, set_uniformLength);
		L.RegVar("maxSegmentLength", get_maxSegmentLength, set_maxSegmentLength);
		L.RegVar("bezierTangentLength", get_bezierTangentLength, set_bezierTangentLength);
		L.RegVar("offset", get_offset, set_offset);
		L.RegVar("factor", get_factor, set_factor);
		L.RegVar("Order", get_Order, null);
		L.RegFunction("getOrder", get_Order);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddComp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEditor.MenuCommand arg0 = (UnityEditor.MenuCommand)ToLua.CheckObject(L, 1, typeof(UnityEditor.MenuCommand));
			Pathfinding.SimpleSmoothModifier.AddComp(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Apply(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)ToLua.CheckObject<Pathfinding.SimpleSmoothModifier>(L, 1);
			PF.Path arg0 = (PF.Path)ToLua.CheckObject<PF.Path>(L, 2);
			obj.Apply(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CurvedNonuniform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)ToLua.CheckObject<Pathfinding.SimpleSmoothModifier>(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			System.Collections.Generic.List<UnityEngine.Vector3> o = obj.CurvedNonuniform(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPointOnCubic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			UnityEngine.Vector3 o = Pathfinding.SimpleSmoothModifier.GetPointOnCubic(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SmoothOffsetSimple(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)ToLua.CheckObject<Pathfinding.SimpleSmoothModifier>(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			System.Collections.Generic.List<UnityEngine.Vector3> o = obj.SmoothOffsetSimple(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SmoothSimple(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)ToLua.CheckObject<Pathfinding.SimpleSmoothModifier>(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			System.Collections.Generic.List<UnityEngine.Vector3> o = obj.SmoothSimple(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SmoothBezier(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)ToLua.CheckObject<Pathfinding.SimpleSmoothModifier>(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			System.Collections.Generic.List<UnityEngine.Vector3> o = obj.SmoothBezier(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_smoothType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			Pathfinding.SimpleSmoothModifier.SmoothType ret = obj.smoothType;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_subdivisions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			int ret = obj.subdivisions;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index subdivisions on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_iterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			int ret = obj.iterations;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index iterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_strength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float ret = obj.strength;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index strength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uniformLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			bool ret = obj.uniformLength;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uniformLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxSegmentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float ret = obj.maxSegmentLength;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxSegmentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bezierTangentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float ret = obj.bezierTangentLength;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bezierTangentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float ret = obj.offset;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index offset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_factor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float ret = obj.factor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index factor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Order(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			int ret = obj.Order;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Order on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_smoothType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			Pathfinding.SimpleSmoothModifier.SmoothType arg0 = (Pathfinding.SimpleSmoothModifier.SmoothType)LuaDLL.luaL_checknumber(L, 2);
			obj.smoothType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_subdivisions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.subdivisions = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index subdivisions on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_iterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.iterations = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index iterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_strength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.strength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index strength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uniformLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.uniformLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uniformLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxSegmentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxSegmentLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxSegmentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bezierTangentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.bezierTangentLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bezierTangentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.offset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index offset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_factor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.SimpleSmoothModifier obj = (Pathfinding.SimpleSmoothModifier)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.factor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index factor on a nil value");
		}
	}
}

