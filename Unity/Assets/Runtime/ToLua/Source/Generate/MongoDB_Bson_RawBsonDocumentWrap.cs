//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_RawBsonDocumentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.RawBsonDocument), typeof(MongoDB.Bson.BsonDocument));
		L.RegFunction(".geti", get_Item);
		L.RegFunction("get", get_Item);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("get", get_Item);
		L.RegFunction(".seti", set_Item);
		L.RegFunction("set", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("set", set_Item);
		L.RegFunction("Add", Add);
		L.RegFunction("AddRange", AddRange);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Clone", Clone);
		L.RegFunction("Contains", Contains);
		L.RegFunction("ContainsValue", ContainsValue);
		L.RegFunction("DeepClone", DeepClone);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("GetElement", GetElement);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("InsertAt", InsertAt);
		L.RegFunction("Materialize", Materialize);
		L.RegFunction("Merge", Merge);
		L.RegFunction("Remove", Remove);
		L.RegFunction("RemoveAt", RemoveAt);
		L.RegFunction("RemoveElement", RemoveElement);
		L.RegFunction("Set", Set);
		L.RegFunction("SetElement", SetElement);
		L.RegFunction("TryGetElement", TryGetElement);
		L.RegFunction("TryGetValue", TryGetValue);
		L.RegFunction("New", _CreateMongoDB_Bson_RawBsonDocument);
		L.RegVar("this", _this, null);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ElementCount", get_ElementCount, null);
		L.RegFunction("getElementCount", get_ElementCount);
		L.RegVar("Elements", get_Elements, null);
		L.RegFunction("getElements", get_Elements);
		L.RegVar("Names", get_Names, null);
		L.RegFunction("getNames", get_Names);
		L.RegVar("Slice", get_Slice, null);
		L.RegFunction("getSlice", get_Slice);
		L.RegVar("Values", get_Values, null);
		L.RegFunction("getValues", get_Values);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_RawBsonDocument(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<MongoDB.Bson.IO.IByteBuffer>(L, 1))
			{
				MongoDB.Bson.IO.IByteBuffer arg0 = (MongoDB.Bson.IO.IByteBuffer)ToLua.ToObject(L, 1);
				MongoDB.Bson.RawBsonDocument obj = new MongoDB.Bson.RawBsonDocument(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				MongoDB.Bson.RawBsonDocument obj = new MongoDB.Bson.RawBsonDocument(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.RawBsonDocument.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: MongoDB.Bson.RawBsonDocument.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: MongoDB.Bson.RawBsonDocument.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.get_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.set_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				MongoDB.Bson.BsonElement arg0 = StackTraits<MongoDB.Bson.BsonElement>.Check(L, 2);
				MongoDB.Bson.BsonDocument o = obj.Add(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 3);
				MongoDB.Bson.BsonDocument o = obj.Add(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<MongoDB.Bson.BsonValue, bool>(L, 3))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				MongoDB.Bson.BsonDocument o = obj.Add(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Func<MongoDB.Bson.BsonValue>, bool>(L, 3))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Func<MongoDB.Bson.BsonValue> arg1 = (System.Func<MongoDB.Bson.BsonValue>)ToLua.ToObject(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				MongoDB.Bson.BsonDocument o = obj.Add(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.Add");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.Dictionary<string,object>>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				System.Collections.Generic.Dictionary<string,object> arg0 = (System.Collections.Generic.Dictionary<string,object>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonDocument o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.IDictionary>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				System.Collections.IDictionary arg0 = (System.Collections.IDictionary)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonDocument o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonElement>>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonElement> arg0 = (System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonElement>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonDocument o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> arg0 = (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>)ToLua.ToObject(L, 2);
				MongoDB.Bson.BsonDocument o = obj.AddRange(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.AddRange");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			MongoDB.Bson.BsonValue o = obj.Clone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Contains(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.Contains(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			MongoDB.Bson.BsonValue arg0 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 2);
			bool o = obj.ContainsValue(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeepClone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			MongoDB.Bson.BsonValue o = obj.DeepClone();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetElement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonElement o = obj.GetElement(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonElement o = obj.GetElement(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.GetElement");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			System.Collections.Generic.IEnumerator<MongoDB.Bson.BsonElement> o = obj.GetEnumerator();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue o = obj.GetValue(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue o = obj.GetValue(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.CheckObject<MongoDB.Bson.BsonValue>(L, 3);
				MongoDB.Bson.BsonValue o = obj.GetValue(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.GetValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertAt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MongoDB.Bson.BsonElement arg1 = StackTraits<MongoDB.Bson.BsonElement>.Check(L, 3);
			obj.InsertAt(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Materialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			MongoDB.Bson.IO.BsonBinaryReaderSettings arg0 = (MongoDB.Bson.IO.BsonBinaryReaderSettings)ToLua.CheckObject<MongoDB.Bson.IO.BsonBinaryReaderSettings>(L, 2);
			MongoDB.Bson.BsonDocument o = obj.Materialize(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Merge(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				MongoDB.Bson.BsonDocument arg0 = (MongoDB.Bson.BsonDocument)ToLua.CheckObject<MongoDB.Bson.BsonDocument>(L, 2);
				MongoDB.Bson.BsonDocument o = obj.Merge(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				MongoDB.Bson.BsonDocument arg0 = (MongoDB.Bson.BsonDocument)ToLua.CheckObject<MongoDB.Bson.BsonDocument>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				MongoDB.Bson.BsonDocument o = obj.Merge(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.Merge");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Remove(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RemoveAt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveElement(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			MongoDB.Bson.BsonElement arg0 = StackTraits<MongoDB.Bson.BsonElement>.Check(L, 2);
			obj.RemoveElement(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Set(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				MongoDB.Bson.BsonDocument o = obj.Set(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, MongoDB.Bson.BsonValue>(L, 2))
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				MongoDB.Bson.BsonValue arg1 = (MongoDB.Bson.BsonValue)ToLua.ToObject(L, 3);
				MongoDB.Bson.BsonDocument o = obj.Set(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.Set");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetElement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				MongoDB.Bson.BsonElement arg0 = StackTraits<MongoDB.Bson.BsonElement>.Check(L, 2);
				MongoDB.Bson.BsonDocument o = obj.SetElement(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				MongoDB.Bson.BsonElement arg1 = StackTraits<MongoDB.Bson.BsonElement>.Check(L, 3);
				MongoDB.Bson.BsonDocument o = obj.SetElement(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.RawBsonDocument.SetElement");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetElement(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.BsonElement arg1;
			bool o = obj.TryGetElement(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)ToLua.CheckObject<MongoDB.Bson.RawBsonDocument>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MongoDB.Bson.BsonValue arg1 = null;
			bool o = obj.TryGetValue(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushObject(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.BsonDocument arg0 = (MongoDB.Bson.BsonDocument)ToLua.ToObject(L, 1);
			MongoDB.Bson.BsonDocument arg1 = (MongoDB.Bson.BsonDocument)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElementCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)o;
			int ret = obj.ElementCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ElementCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Elements(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)o;
			System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonElement> ret = obj.Elements;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Elements on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Names(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)o;
			System.Collections.Generic.IEnumerable<string> ret = obj.Names;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Names on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Slice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)o;
			MongoDB.Bson.IO.IByteBuffer ret = obj.Slice;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Slice on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Values(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.RawBsonDocument obj = (MongoDB.Bson.RawBsonDocument)o;
			System.Collections.Generic.IEnumerable<MongoDB.Bson.BsonValue> ret = obj.Values;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Values on a nil value");
		}
	}
}

