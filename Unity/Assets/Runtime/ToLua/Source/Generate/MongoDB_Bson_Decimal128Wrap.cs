//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Decimal128Wrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.Decimal128), null);
		L.RegFunction("Compare", Compare);
		L.RegFunction("Equals", Equals);
		L.RegFunction("FromComponents", FromComponents);
		L.RegFunction("FromIEEEBits", FromIEEEBits);
		L.RegFunction("GetExponent", GetExponent);
		L.RegFunction("GetSignificandHighBits", GetSignificandHighBits);
		L.RegFunction("GetSignificandLowBits", GetSignificandLowBits);
		L.RegFunction("IsInfinity", IsInfinity);
		L.RegFunction("IsNaN", IsNaN);
		L.RegFunction("IsNegative", IsNegative);
		L.RegFunction("IsNegativeInfinity", IsNegativeInfinity);
		L.RegFunction("IsPositiveInfinity", IsPositiveInfinity);
		L.RegFunction("IsQNaN", IsQNaN);
		L.RegFunction("IsSNaN", IsSNaN);
		L.RegFunction("IsZero", IsZero);
		L.RegFunction("Negate", Negate);
		L.RegFunction("Parse", Parse);
		L.RegFunction("ToByte", ToByte);
		L.RegFunction("ToDecimal", ToDecimal);
		L.RegFunction("ToDouble", ToDouble);
		L.RegFunction("ToInt16", ToInt16);
		L.RegFunction("ToInt32", ToInt32);
		L.RegFunction("ToInt64", ToInt64);
		L.RegFunction("ToSByte", ToSByte);
		L.RegFunction("ToSingle", ToSingle);
		L.RegFunction("ToUInt16", ToUInt16);
		L.RegFunction("ToUInt32", ToUInt32);
		L.RegFunction("ToUInt64", ToUInt64);
		L.RegFunction("TryParse", TryParse);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("GetIEEEHighBits", GetIEEEHighBits);
		L.RegFunction("GetIEEELowBits", GetIEEELowBits);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateMongoDB_Bson_Decimal128);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MaxValue", get_MaxValue, null);
		L.RegFunction("getMaxValue", get_MaxValue);
		L.RegVar("MinValue", get_MinValue, null);
		L.RegFunction("getMinValue", get_MinValue);
		L.RegVar("NegativeInfinity", get_NegativeInfinity, null);
		L.RegFunction("getNegativeInfinity", get_NegativeInfinity);
		L.RegVar("One", get_One, null);
		L.RegFunction("getOne", get_One);
		L.RegVar("PositiveInfinity", get_PositiveInfinity, null);
		L.RegFunction("getPositiveInfinity", get_PositiveInfinity);
		L.RegVar("QNaN", get_QNaN, null);
		L.RegFunction("getQNaN", get_QNaN);
		L.RegVar("SNaN", get_SNaN, null);
		L.RegFunction("getSNaN", get_SNaN);
		L.RegVar("Zero", get_Zero, null);
		L.RegFunction("getZero", get_Zero);
		L.RegFunction("default", __default__);
		L.RegFunction("__clone__", __clone__);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_Decimal128(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				MongoDB.Bson.Decimal128 obj = new MongoDB.Bson.Decimal128(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				MongoDB.Bson.Decimal128 obj = new MongoDB.Bson.Decimal128(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<decimal>(L, 1))
			{
				decimal arg0 = StackTraits<decimal>.To(L, 1);
				MongoDB.Bson.Decimal128 obj = new MongoDB.Bson.Decimal128(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				MongoDB.Bson.Decimal128 obj = new MongoDB.Bson.Decimal128();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.Decimal128.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 1);
			MongoDB.Bson.Decimal128 arg1 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Compare(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			MongoDB.Bson.Decimal128 arg1 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 2);
			int o = MongoDB.Bson.Decimal128.Compare(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<MongoDB.Bson.Decimal128>(L, 2))
			{
				MongoDB.Bson.Decimal128 obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
				MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.To(L, 2);
				bool o = obj.Equals(arg0);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				MongoDB.Bson.Decimal128 obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj.Equals(arg0);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.Decimal128.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromComponents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			short arg1 = (short)LuaDLL.luaL_checknumber(L, 2);
			ulong arg2 = LuaDLL.tolua_checkuint64(L, 3);
			ulong arg3 = LuaDLL.tolua_checkuint64(L, 4);
			MongoDB.Bson.Decimal128 o = MongoDB.Bson.Decimal128.FromComponents(arg0, arg1, arg2, arg3);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromIEEEBits(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			ulong arg1 = LuaDLL.tolua_checkuint64(L, 2);
			MongoDB.Bson.Decimal128 o = MongoDB.Bson.Decimal128.FromIEEEBits(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetExponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			short o = MongoDB.Bson.Decimal128.GetExponent(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSignificandHighBits(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			ulong o = MongoDB.Bson.Decimal128.GetSignificandHighBits(arg0);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSignificandLowBits(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			ulong o = MongoDB.Bson.Decimal128.GetSignificandLowBits(arg0);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInfinity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsInfinity(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsNaN(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsNaN(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsNegative(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsNegative(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsNegativeInfinity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsNegativeInfinity(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPositiveInfinity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsPositiveInfinity(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsQNaN(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsQNaN(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSNaN(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsSNaN(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsZero(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			bool o = MongoDB.Bson.Decimal128.IsZero(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Negate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			MongoDB.Bson.Decimal128 o = MongoDB.Bson.Decimal128.Negate(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			MongoDB.Bson.Decimal128 o = MongoDB.Bson.Decimal128.Parse(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			byte o = MongoDB.Bson.Decimal128.ToByte(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDecimal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			decimal o = MongoDB.Bson.Decimal128.ToDecimal(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			double o = MongoDB.Bson.Decimal128.ToDouble(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			short o = MongoDB.Bson.Decimal128.ToInt16(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			int o = MongoDB.Bson.Decimal128.ToInt32(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			long o = MongoDB.Bson.Decimal128.ToInt64(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToSByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			sbyte o = MongoDB.Bson.Decimal128.ToSByte(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToSingle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			float o = MongoDB.Bson.Decimal128.ToSingle(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			ushort o = MongoDB.Bson.Decimal128.ToUInt16(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			uint o = MongoDB.Bson.Decimal128.ToUInt32(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 1);
			ulong o = MongoDB.Bson.Decimal128.ToUInt64(arg0);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryParse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			MongoDB.Bson.Decimal128 arg1;
			bool o = MongoDB.Bson.Decimal128.TryParse(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.Decimal128 obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 2);
			int o = obj.CompareTo(arg0);
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIEEEHighBits(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
			ulong o = obj.GetIEEEHighBits();
			LuaDLL.tolua_pushuint64(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIEEELowBits(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
			ulong o = obj.GetIEEELowBits();
			LuaDLL.tolua_pushuint64(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.Decimal128 obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxValue(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.MaxValue);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MinValue(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.MinValue);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NegativeInfinity(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.NegativeInfinity);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_One(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.One);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PositiveInfinity(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.PositiveInfinity);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_QNaN(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.QNaN);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SNaN(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.SNaN);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Zero(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, MongoDB.Bson.Decimal128.Zero);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __default__(IntPtr L)
	{
		try
		{
			var o = new MongoDB.Bson.Decimal128();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __clone__(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (MongoDB.Bson.Decimal128)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.Decimal128));
			var o = obj;
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

