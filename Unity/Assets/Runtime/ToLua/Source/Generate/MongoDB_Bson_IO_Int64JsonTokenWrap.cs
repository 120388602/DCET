//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_Int64JsonTokenWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.Int64JsonToken), typeof(MongoDB.Bson.IO.JsonToken));
		L.RegFunction("New", _CreateMongoDB_Bson_IO_Int64JsonToken);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DoubleValue", get_DoubleValue, null);
		L.RegFunction("getDoubleValue", get_DoubleValue);
		L.RegVar("Int32Value", get_Int32Value, null);
		L.RegFunction("getInt32Value", get_Int32Value);
		L.RegVar("Int64Value", get_Int64Value, null);
		L.RegFunction("getInt64Value", get_Int64Value);
		L.RegVar("IsNumber", get_IsNumber, null);
		L.RegFunction("getIsNumber", get_IsNumber);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_Int64JsonToken(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				long arg1 = LuaDLL.tolua_checkint64(L, 2);
				MongoDB.Bson.IO.Int64JsonToken obj = new MongoDB.Bson.IO.Int64JsonToken(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.Int64JsonToken.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DoubleValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.Int64JsonToken obj = (MongoDB.Bson.IO.Int64JsonToken)o;
			double ret = obj.DoubleValue;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DoubleValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Int32Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.Int64JsonToken obj = (MongoDB.Bson.IO.Int64JsonToken)o;
			int ret = obj.Int32Value;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Int32Value on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Int64Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.Int64JsonToken obj = (MongoDB.Bson.IO.Int64JsonToken)o;
			long ret = obj.Int64Value;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Int64Value on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsNumber(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.Int64JsonToken obj = (MongoDB.Bson.IO.Int64JsonToken)o;
			bool ret = obj.IsNumber;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsNumber on a nil value");
		}
	}
}

