//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_AdvancedSmooth_TurnWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.AdvancedSmooth.Turn), null);
		L.RegFunction("GetPath", GetPath);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("New", _CreatePathfinding_AdvancedSmooth_Turn);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("length", get_length, set_length);
		L.RegVar("id", get_id, set_id);
		L.RegVar("constructor", get_constructor, set_constructor);
		L.RegVar("score", get_score, null);
		L.RegFunction("getscore", get_score);
		L.RegFunction("default", __default__);
		L.RegFunction("__clone__", __clone__);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_AdvancedSmooth_Turn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				Pathfinding.AdvancedSmooth.TurnConstructor arg1 = (Pathfinding.AdvancedSmooth.TurnConstructor)ToLua.CheckObject<Pathfinding.AdvancedSmooth.TurnConstructor>(L, 2);
				Pathfinding.AdvancedSmooth.Turn obj = new Pathfinding.AdvancedSmooth.Turn(arg0, arg1);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				Pathfinding.AdvancedSmooth.TurnConstructor arg1 = (Pathfinding.AdvancedSmooth.TurnConstructor)ToLua.CheckObject<Pathfinding.AdvancedSmooth.TurnConstructor>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Pathfinding.AdvancedSmooth.Turn obj = new Pathfinding.AdvancedSmooth.Turn(arg0, arg1, arg2);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				Pathfinding.AdvancedSmooth.Turn obj = new Pathfinding.AdvancedSmooth.Turn();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.AdvancedSmooth.Turn.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)ToLua.CheckObject(L, 1, typeof(Pathfinding.AdvancedSmooth.Turn));
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			obj.GetPath(arg0);
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)ToLua.CheckObject(L, 1, typeof(Pathfinding.AdvancedSmooth.Turn));
			Pathfinding.AdvancedSmooth.Turn arg0 = StackTraits<Pathfinding.AdvancedSmooth.Turn>.Check(L, 2);
			int o = obj.CompareTo(arg0);
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)o;
			float ret = obj.length;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)o;
			int ret = obj.id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constructor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)o;
			Pathfinding.AdvancedSmooth.TurnConstructor ret = obj.constructor;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index constructor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_score(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)o;
			float ret = obj.score;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index score on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.length = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.id = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constructor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.AdvancedSmooth.Turn obj = (Pathfinding.AdvancedSmooth.Turn)o;
			Pathfinding.AdvancedSmooth.TurnConstructor arg0 = (Pathfinding.AdvancedSmooth.TurnConstructor)ToLua.CheckObject<Pathfinding.AdvancedSmooth.TurnConstructor>(L, 2);
			obj.constructor = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index constructor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __default__(IntPtr L)
	{
		try
		{
			var o = new Pathfinding.AdvancedSmooth.Turn();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int __clone__(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (Pathfinding.AdvancedSmooth.Turn)ToLua.CheckObject(L, 1, typeof(Pathfinding.AdvancedSmooth.Turn));
			var o = obj;
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

