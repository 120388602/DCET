//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_Serialization_Conventions_ConventionRegistryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("ConventionRegistry");
		L.RegFunction("Lookup", Lookup);
		L.RegFunction("Register", _Register);
		L.RegFunction("Remove", Remove);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lookup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			MongoDB.Bson.Serialization.Conventions.IConventionPack o = MongoDB.Bson.Serialization.Conventions.ConventionRegistry.Lookup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Register(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			MongoDB.Bson.Serialization.Conventions.IConventionPack arg1 = (MongoDB.Bson.Serialization.Conventions.IConventionPack)ToLua.CheckObject<MongoDB.Bson.Serialization.Conventions.IConventionPack>(L, 2);
			System.Func<System.Type,bool> arg2 = (System.Func<System.Type,bool>)ToLua.CheckDelegate<System.Func<System.Type,bool>>(L, 3);
			MongoDB.Bson.Serialization.Conventions.ConventionRegistry.Register(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			MongoDB.Bson.Serialization.Conventions.ConventionRegistry.Remove(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

