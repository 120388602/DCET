//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonStreamAdapterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.BsonStreamAdapter), typeof(MongoDB.Bson.IO.BsonStream));
		L.RegFunction("BeginRead", BeginRead);
		L.RegFunction("BeginWrite", BeginWrite);
		L.RegFunction("Close", Close);
		L.RegFunction("CopyToAsync", CopyToAsync);
		L.RegFunction("EndRead", EndRead);
		L.RegFunction("EndWrite", EndWrite);
		L.RegFunction("Flush", Flush);
		L.RegFunction("FlushAsync", FlushAsync);
		L.RegFunction("Read", Read);
		L.RegFunction("ReadAsync", ReadAsync);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("ReadCString", ReadCString);
		L.RegFunction("ReadCStringBytes", ReadCStringBytes);
		L.RegFunction("ReadDecimal128", ReadDecimal128);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("ReadInt32", ReadInt32);
		L.RegFunction("ReadInt64", ReadInt64);
		L.RegFunction("ReadObjectId", ReadObjectId);
		L.RegFunction("ReadSlice", ReadSlice);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("Seek", Seek);
		L.RegFunction("SetLength", SetLength);
		L.RegFunction("SkipCString", SkipCString);
		L.RegFunction("Write", Write);
		L.RegFunction("WriteAsync", WriteAsync);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("WriteCString", WriteCString);
		L.RegFunction("WriteCStringBytes", WriteCStringBytes);
		L.RegFunction("WriteDecimal128", WriteDecimal128);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteInt32", WriteInt32);
		L.RegFunction("WriteInt64", WriteInt64);
		L.RegFunction("WriteObjectId", WriteObjectId);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("New", _CreateMongoDB_Bson_IO_BsonStreamAdapter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BaseStream", get_BaseStream, null);
		L.RegFunction("getBaseStream", get_BaseStream);
		L.RegVar("CanRead", get_CanRead, null);
		L.RegFunction("getCanRead", get_CanRead);
		L.RegVar("CanSeek", get_CanSeek, null);
		L.RegFunction("getCanSeek", get_CanSeek);
		L.RegVar("CanTimeout", get_CanTimeout, null);
		L.RegFunction("getCanTimeout", get_CanTimeout);
		L.RegVar("CanWrite", get_CanWrite, null);
		L.RegFunction("getCanWrite", get_CanWrite);
		L.RegVar("Length", get_Length, null);
		L.RegFunction("getLength", get_Length);
		L.RegVar("Position", get_Position, set_Position);
		L.RegFunction("getPosition", get_Position);
		L.RegFunction("setPosition", set_Position);
		L.RegVar("ReadTimeout", get_ReadTimeout, set_ReadTimeout);
		L.RegFunction("getReadTimeout", get_ReadTimeout);
		L.RegFunction("setReadTimeout", set_ReadTimeout);
		L.RegVar("WriteTimeout", get_WriteTimeout, set_WriteTimeout);
		L.RegFunction("getWriteTimeout", get_WriteTimeout);
		L.RegFunction("setWriteTimeout", set_WriteTimeout);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMongoDB_Bson_IO_BsonStreamAdapter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				MongoDB.Bson.IO.BsonStreamAdapter obj = new MongoDB.Bson.IO.BsonStreamAdapter(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				MongoDB.Bson.IO.BsonStreamAdapter obj = new MongoDB.Bson.IO.BsonStreamAdapter(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MongoDB.Bson.IO.BsonStreamAdapter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginRead(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginWrite(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyToAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				System.Threading.Tasks.Task o = obj.CopyToAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Threading.Tasks.Task o = obj.CopyToAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Threading.CancellationToken arg2 = StackTraits<System.Threading.CancellationToken>.Check(L, 4);
				System.Threading.Tasks.Task o = obj.CopyToAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.IO.BsonStreamAdapter.CopyToAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			int o = obj.EndRead(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.EndWrite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			obj.Flush();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				System.Threading.Tasks.Task o = obj.FlushAsync();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				System.Threading.CancellationToken arg0 = StackTraits<System.Threading.CancellationToken>.Check(L, 2);
				System.Threading.Tasks.Task o = obj.FlushAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.IO.BsonStreamAdapter.FlushAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.Read(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.IO.BsonStreamAdapter.ReadAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			int o = obj.ReadByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadCString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			System.Text.UTF8Encoding arg0 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 2);
			string o = obj.ReadCString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadCStringBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			System.ArraySegment<byte> o = obj.ReadCStringBytes();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			MongoDB.Bson.Decimal128 o = obj.ReadDecimal128();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			int o = obj.ReadInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			long o = obj.ReadInt64();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadObjectId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			MongoDB.Bson.ObjectId o = obj.ReadObjectId();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSlice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			MongoDB.Bson.IO.IByteBuffer o = obj.ReadSlice();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			System.Text.UTF8Encoding arg0 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 2);
			string o = obj.ReadString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Seek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			System.IO.SeekOrigin arg1 = (System.IO.SeekOrigin)LuaDLL.luaL_checknumber(L, 3);
			long o = obj.Seek(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetLength(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkipCString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			obj.SkipCString();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.Write(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MongoDB.Bson.IO.BsonStreamAdapter.WriteAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteCString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteCString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteCStringBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.WriteCStringBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 2);
			obj.WriteDecimal128(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt32(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteInt64(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteObjectId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			MongoDB.Bson.ObjectId arg0 = StackTraits<MongoDB.Bson.ObjectId>.Check(L, 2);
			obj.WriteObjectId(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)ToLua.CheckObject(L, 1, typeof(MongoDB.Bson.IO.BsonStreamAdapter));
			string arg0 = ToLua.CheckString(L, 2);
			System.Text.UTF8Encoding arg1 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 3);
			obj.WriteString(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			System.IO.Stream ret = obj.BaseStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BaseStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanRead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			bool ret = obj.CanRead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanRead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanSeek(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			bool ret = obj.CanSeek;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanSeek on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			bool ret = obj.CanTimeout;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanWrite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			bool ret = obj.CanWrite;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanWrite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			long ret = obj.Length;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			long ret = obj.Position;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			int ret = obj.ReadTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WriteTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			int ret = obj.WriteTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WriteTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.Position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReadTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReadTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WriteTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MongoDB.Bson.IO.BsonStreamAdapter obj = (MongoDB.Bson.IO.BsonStreamAdapter)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WriteTimeout on a nil value");
		}
	}
}

