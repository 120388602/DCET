//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MongoDB_Bson_IO_BsonStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MongoDB.Bson.IO.BsonStream), typeof(System.IO.Stream));
		L.RegFunction("ReadCString", ReadCString);
		L.RegFunction("ReadCStringBytes", ReadCStringBytes);
		L.RegFunction("ReadDecimal128", ReadDecimal128);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("ReadInt32", ReadInt32);
		L.RegFunction("ReadInt64", ReadInt64);
		L.RegFunction("ReadObjectId", ReadObjectId);
		L.RegFunction("ReadSlice", ReadSlice);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("SkipCString", SkipCString);
		L.RegFunction("WriteCString", WriteCString);
		L.RegFunction("WriteCStringBytes", WriteCStringBytes);
		L.RegFunction("WriteDecimal128", WriteDecimal128);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteInt32", WriteInt32);
		L.RegFunction("WriteInt64", WriteInt64);
		L.RegFunction("WriteObjectId", WriteObjectId);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadCString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			System.Text.UTF8Encoding arg0 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 2);
			string o = obj.ReadCString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadCStringBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			System.ArraySegment<byte> o = obj.ReadCStringBytes();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.Decimal128 o = obj.ReadDecimal128();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			int o = obj.ReadInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			long o = obj.ReadInt64();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadObjectId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.ObjectId o = obj.ReadObjectId();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSlice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.IO.IByteBuffer o = obj.ReadSlice();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			System.Text.UTF8Encoding arg0 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 2);
			string o = obj.ReadString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkipCString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			obj.SkipCString();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteCString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteCString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteCStringBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.WriteCStringBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDecimal128(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.Decimal128 arg0 = StackTraits<MongoDB.Bson.Decimal128>.Check(L, 2);
			obj.WriteDecimal128(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt32(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteInt64(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteObjectId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			MongoDB.Bson.ObjectId arg0 = StackTraits<MongoDB.Bson.ObjectId>.Check(L, 2);
			obj.WriteObjectId(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MongoDB.Bson.IO.BsonStream obj = (MongoDB.Bson.IO.BsonStream)ToLua.CheckObject<MongoDB.Bson.IO.BsonStream>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Text.UTF8Encoding arg1 = (System.Text.UTF8Encoding)ToLua.CheckObject<System.Text.UTF8Encoding>(L, 3);
			obj.WriteString(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

