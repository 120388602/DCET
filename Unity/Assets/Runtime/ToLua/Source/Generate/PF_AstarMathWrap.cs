//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_AstarMathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("AstarMath");
		L.RegFunction("MapTo", MapTo);
		L.RegFunction("FormatBytesBinary", FormatBytesBinary);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			float o = PF.AstarMath.MapTo(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatBytesBinary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = PF.AstarMath.FormatBytesBinary(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

