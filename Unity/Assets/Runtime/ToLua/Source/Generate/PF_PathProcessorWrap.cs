//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_PathProcessorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PF.PathProcessor), typeof(System.Object));
		L.RegFunction("PausePathfinding", PausePathfinding);
		L.RegFunction("TickNonMultithreaded", TickNonMultithreaded);
		L.RegFunction("JoinThreads", JoinThreads);
		L.RegFunction("AbortThreads", AbortThreads);
		L.RegFunction("GetNewNodeIndex", GetNewNodeIndex);
		L.RegFunction("InitializeNode", InitializeNode);
		L.RegFunction("DestroyNode", DestroyNode);
		L.RegFunction("CalculatePaths", CalculatePaths);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("NumThreads", get_NumThreads, null);
		L.RegFunction("getNumThreads", get_NumThreads);
		L.RegVar("IsUsingMultithreading", get_IsUsingMultithreading, null);
		L.RegFunction("getIsUsingMultithreading", get_IsUsingMultithreading);
		L.RegVar("OnPathPreSearch", get_OnPathPreSearch, set_OnPathPreSearch);
		L.RegFunction("addOnPathPreSearch", addOnPathPreSearch);
		L.RegFunction("removeOnPathPreSearch", removeOnPathPreSearch);
		L.RegVar("OnPathPostSearch", get_OnPathPostSearch, set_OnPathPostSearch);
		L.RegFunction("addOnPathPostSearch", addOnPathPostSearch);
		L.RegFunction("removeOnPathPostSearch", removeOnPathPostSearch);
		L.RegVar("OnQueueUnblocked", get_OnQueueUnblocked, set_OnQueueUnblocked);
		L.RegFunction("addOnQueueUnblocked", addOnQueueUnblocked);
		L.RegFunction("removeOnQueueUnblocked", removeOnQueueUnblocked);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PausePathfinding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			PF.PathProcessor.GraphUpdateLock o = obj.PausePathfinding(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TickNonMultithreaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			obj.TickNonMultithreaded();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int JoinThreads(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			obj.JoinThreads();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AbortThreads(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			obj.AbortThreads();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNewNodeIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			int o = obj.GetNewNodeIndex();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitializeNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			obj.InitializeNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 2);
			obj.DestroyNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculatePaths(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			System.Collections.IEnumerator o = obj.CalculatePaths();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NumThreads(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.PathProcessor obj = (PF.PathProcessor)o;
			int ret = obj.NumThreads;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumThreads on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsUsingMultithreading(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PF.PathProcessor obj = (PF.PathProcessor)o;
			bool ret = obj.IsUsingMultithreading;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsUsingMultithreading on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPathPreSearch(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<PF.Path>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPathPostSearch(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<PF.Path>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnQueueUnblocked(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPathPreSearch(IntPtr L)
	{
		try
		{
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'PF.PathProcessor.OnPathPreSearch' can only appear on the left hand side of += or -= when used outside of the type 'PF.PathProcessor'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<PF.Path> ev = (System.Action<PF.Path>)arg0.func;
				obj.OnPathPreSearch += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<PF.Path> ev = (System.Action<PF.Path>)arg0.func;
				obj.OnPathPreSearch -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addOnPathPreSearch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			var arg0 = (System.Action<PF.Path>)ToLua.CheckDelegate<System.Action<PF.Path>>(L, 2);
			obj.OnPathPreSearch += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeOnPathPreSearch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			var arg0 = (System.Action<PF.Path>)ToLua.CheckDelegate<System.Action<PF.Path>>(L, 2);
			obj.OnPathPreSearch -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPathPostSearch(IntPtr L)
	{
		try
		{
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'PF.PathProcessor.OnPathPostSearch' can only appear on the left hand side of += or -= when used outside of the type 'PF.PathProcessor'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<PF.Path> ev = (System.Action<PF.Path>)arg0.func;
				obj.OnPathPostSearch += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<PF.Path> ev = (System.Action<PF.Path>)arg0.func;
				obj.OnPathPostSearch -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addOnPathPostSearch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			var arg0 = (System.Action<PF.Path>)ToLua.CheckDelegate<System.Action<PF.Path>>(L, 2);
			obj.OnPathPostSearch += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeOnPathPostSearch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			var arg0 = (System.Action<PF.Path>)ToLua.CheckDelegate<System.Action<PF.Path>>(L, 2);
			obj.OnPathPostSearch -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnQueueUnblocked(IntPtr L)
	{
		try
		{
			PF.PathProcessor obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'PF.PathProcessor.OnQueueUnblocked' can only appear on the left hand side of += or -= when used outside of the type 'PF.PathProcessor'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnQueueUnblocked += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnQueueUnblocked -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addOnQueueUnblocked(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			var arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.OnQueueUnblocked += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeOnQueueUnblocked(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (PF.PathProcessor)ToLua.CheckObject(L, 1, typeof(PF.PathProcessor));
			var arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.OnQueueUnblocked -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

