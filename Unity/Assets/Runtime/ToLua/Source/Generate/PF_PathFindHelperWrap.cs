//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PF_PathFindHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("PathFindHelper");
		L.RegFunction("GetConfig", GetConfig);
		L.RegFunction("GetNearest", GetNearest);
		L.RegFunction("GetNewNodeIndex", GetNewNodeIndex);
		L.RegFunction("InitializeNode", InitializeNode);
		L.RegFunction("GetNextPathID", GetNextPathID);
		L.RegFunction("Close", Close);
		L.RegVar("OnAwakeSettings", get_OnAwakeSettings, set_OnAwakeSettings);
		L.RegVar("OnPathPreSearch", get_OnPathPreSearch, set_OnPathPreSearch);
		L.RegVar("OnPathPostSearch", get_OnPathPostSearch, set_OnPathPostSearch);
		L.RegVar("On65KOverflow", get_On65KOverflow, set_On65KOverflow);
		L.RegVar("debugPathData", get_debugPathData, set_debugPathData);
		L.RegFunction("getdebugPathData", get_debugPathData);
		L.RegFunction("setdebugPathData", set_debugPathDatater);
		L.RegVar("debugPathID", get_debugPathID, set_debugPathID);
		L.RegFunction("getdebugPathID", get_debugPathID);
		L.RegFunction("setdebugPathID", set_debugPathIDter);
		L.RegVar("pathProcessor", get_pathProcessor, set_pathProcessor);
		L.RegFunction("getpathProcessor", get_pathProcessor);
		L.RegFunction("setpathProcessor", set_pathProcessorter);
		L.RegVar("IsUsingMultithreading", get_IsUsingMultithreading, null);
		L.RegFunction("getIsUsingMultithreading", get_IsUsingMultithreading);
		L.RegVar("graphs", get_graphs, null);
		L.RegFunction("getgraphs", get_graphs);
		L.RegVar("heuristic", get_heuristic, set_heuristic);
		L.RegFunction("getheuristic", get_heuristic);
		L.RegFunction("setheuristic", set_heuristicter);
		L.RegVar("heuristicScale", get_heuristicScale, set_heuristicScale);
		L.RegFunction("getheuristicScale", get_heuristicScale);
		L.RegFunction("setheuristicScale", set_heuristicScaleter);
		L.RegVar("euclideanEmbedding", get_euclideanEmbedding, set_euclideanEmbedding);
		L.RegFunction("geteuclideanEmbedding", get_euclideanEmbedding);
		L.RegFunction("seteuclideanEmbedding", set_euclideanEmbeddingter);
		L.RegVar("logPathResults", get_logPathResults, set_logPathResults);
		L.RegFunction("getlogPathResults", get_logPathResults);
		L.RegFunction("setlogPathResults", set_logPathResultster);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AstarPath o = PF.PathFindHelper.GetConfig();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNearest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				PF.NNInfo o = PF.PathFindHelper.GetNearest(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				PF.NNConstraint arg1 = (PF.NNConstraint)ToLua.CheckObject<PF.NNConstraint>(L, 2);
				PF.NNInfo o = PF.PathFindHelper.GetNearest(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				PF.NNConstraint arg1 = (PF.NNConstraint)ToLua.CheckObject<PF.NNConstraint>(L, 2);
				PF.GraphNode arg2 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 3);
				PF.NNInfo o = PF.PathFindHelper.GetNearest(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PF.PathFindHelper.GetNearest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNewNodeIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = PF.PathFindHelper.GetNewNodeIndex();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitializeNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PF.GraphNode arg0 = (PF.GraphNode)ToLua.CheckObject<PF.GraphNode>(L, 1);
			PF.PathFindHelper.InitializeNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextPathID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ushort o = PF.PathFindHelper.GetNextPathID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PF.PathFindHelper.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnAwakeSettings(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PF.PathFindHelper.OnAwakeSettings);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPathPreSearch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PF.PathFindHelper.OnPathPreSearch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPathPostSearch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PF.PathFindHelper.OnPathPostSearch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On65KOverflow(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PF.PathFindHelper.On65KOverflow);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathData(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, PF.PathFindHelper.debugPathData);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, PF.PathFindHelper.debugPathID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathProcessor(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, PF.PathFindHelper.pathProcessor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsUsingMultithreading(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, PF.PathFindHelper.IsUsingMultithreading);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphs(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PF.PathFindHelper.graphs);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristic(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)PF.PathFindHelper.heuristic);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristicScale(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, PF.PathFindHelper.heuristicScale);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_euclideanEmbedding(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, PF.PathFindHelper.euclideanEmbedding);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logPathResults(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)PF.PathFindHelper.logPathResults);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnAwakeSettings(IntPtr L)
	{
		try
		{
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			PF.PathFindHelper.OnAwakeSettings = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPathPreSearch(IntPtr L)
	{
		try
		{
			PF.OnPathDelegate arg0 = (PF.OnPathDelegate)ToLua.CheckDelegate<PF.OnPathDelegate>(L, 2);
			PF.PathFindHelper.OnPathPreSearch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPathPostSearch(IntPtr L)
	{
		try
		{
			PF.OnPathDelegate arg0 = (PF.OnPathDelegate)ToLua.CheckDelegate<PF.OnPathDelegate>(L, 2);
			PF.PathFindHelper.OnPathPostSearch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On65KOverflow(IntPtr L)
	{
		try
		{
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			PF.PathFindHelper.On65KOverflow = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathData(IntPtr L)
	{
		try
		{
			PF.PathHandler arg0 = (PF.PathHandler)ToLua.CheckObject<PF.PathHandler>(L, 2);
			PF.PathFindHelper.debugPathData = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathDatater(IntPtr L)
	{
		try
		{
			PF.PathHandler arg0 = (PF.PathHandler)ToLua.CheckObject<PF.PathHandler>(L, 1);
			PF.PathFindHelper.debugPathData = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathID(IntPtr L)
	{
		try
		{
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			PF.PathFindHelper.debugPathID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathIDter(IntPtr L)
	{
		try
		{
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 1);
			PF.PathFindHelper.debugPathID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathProcessor(IntPtr L)
	{
		try
		{
			PF.PathProcessor arg0 = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 2);
			PF.PathFindHelper.pathProcessor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathProcessorter(IntPtr L)
	{
		try
		{
			PF.PathProcessor arg0 = (PF.PathProcessor)ToLua.CheckObject<PF.PathProcessor>(L, 1);
			PF.PathFindHelper.pathProcessor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristic(IntPtr L)
	{
		try
		{
			PF.Heuristic arg0 = (PF.Heuristic)LuaDLL.luaL_checknumber(L, 2);
			PF.PathFindHelper.heuristic = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicter(IntPtr L)
	{
		try
		{
			PF.Heuristic arg0 = (PF.Heuristic)LuaDLL.luaL_checknumber(L, 1);
			PF.PathFindHelper.heuristic = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicScale(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			PF.PathFindHelper.heuristicScale = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicScaleter(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			PF.PathFindHelper.heuristicScale = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_euclideanEmbedding(IntPtr L)
	{
		try
		{
			PF.EuclideanEmbedding arg0 = (PF.EuclideanEmbedding)ToLua.CheckObject<PF.EuclideanEmbedding>(L, 2);
			PF.PathFindHelper.euclideanEmbedding = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_euclideanEmbeddingter(IntPtr L)
	{
		try
		{
			PF.EuclideanEmbedding arg0 = (PF.EuclideanEmbedding)ToLua.CheckObject<PF.EuclideanEmbedding>(L, 1);
			PF.PathFindHelper.euclideanEmbedding = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logPathResults(IntPtr L)
	{
		try
		{
			PF.PathLog arg0 = (PF.PathLog)LuaDLL.luaL_checknumber(L, 2);
			PF.PathFindHelper.logPathResults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logPathResultster(IntPtr L)
	{
		try
		{
			PF.PathLog arg0 = (PF.PathLog)LuaDLL.luaL_checknumber(L, 1);
			PF.PathFindHelper.logPathResults = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

