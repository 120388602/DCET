//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_EditorResourceHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("EditorResourceHelper");
		L.RegFunction("LocateEditorAssets", LocateEditorAssets);
		L.RegVar("editorAssets", get_editorAssets, set_editorAssets);
		L.RegVar("GizmoSurfaceMaterial", get_GizmoSurfaceMaterial, null);
		L.RegFunction("getGizmoSurfaceMaterial", get_GizmoSurfaceMaterial);
		L.RegVar("GizmoLineMaterial", get_GizmoLineMaterial, null);
		L.RegFunction("getGizmoLineMaterial", get_GizmoLineMaterial);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LocateEditorAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = Pathfinding.EditorResourceHelper.LocateEditorAssets();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editorAssets(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Pathfinding.EditorResourceHelper.editorAssets);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GizmoSurfaceMaterial(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.EditorResourceHelper.GizmoSurfaceMaterial);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GizmoLineMaterial(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Pathfinding.EditorResourceHelper.GizmoLineMaterial);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_editorAssets(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Pathfinding.EditorResourceHelper.editorAssets = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

