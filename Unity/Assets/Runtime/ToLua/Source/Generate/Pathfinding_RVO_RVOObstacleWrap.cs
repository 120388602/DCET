//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_RVO_RVOObstacleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.RVO.RVOObstacle), typeof(Pathfinding.VersionedMonoBehaviour));
		L.RegFunction("OnDrawGizmos", OnDrawGizmos);
		L.RegFunction("OnDrawGizmosSelected", OnDrawGizmosSelected);
		L.RegFunction("OnDisable", OnDisable);
		L.RegFunction("OnEnable", OnEnable);
		L.RegFunction("Start", Start);
		L.RegFunction("Update", Update);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("obstacleMode", get_obstacleMode, set_obstacleMode);
		L.RegVar("layer", get_layer, set_layer);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrawGizmos(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)ToLua.CheckObject<Pathfinding.RVO.RVOObstacle>(L, 1);
				obj.OnDrawGizmos();
				return 0;
			}
			else if (count == 2)
			{
				Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)ToLua.CheckObject<Pathfinding.RVO.RVOObstacle>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.OnDrawGizmos(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.RVO.RVOObstacle.OnDrawGizmos");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrawGizmosSelected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)ToLua.CheckObject<Pathfinding.RVO.RVOObstacle>(L, 1);
			obj.OnDrawGizmosSelected();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDisable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)ToLua.CheckObject<Pathfinding.RVO.RVOObstacle>(L, 1);
			obj.OnDisable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)ToLua.CheckObject<Pathfinding.RVO.RVOObstacle>(L, 1);
			obj.OnEnable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)ToLua.CheckObject<Pathfinding.RVO.RVOObstacle>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)ToLua.CheckObject<Pathfinding.RVO.RVOObstacle>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_obstacleMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)o;
			Pathfinding.RVO.RVOObstacle.ObstacleVertexWinding ret = obj.obstacleMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index obstacleMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)o;
			Pathfinding.RVO.RVOLayer ret = obj.layer;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_obstacleMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)o;
			Pathfinding.RVO.RVOObstacle.ObstacleVertexWinding arg0 = (Pathfinding.RVO.RVOObstacle.ObstacleVertexWinding)LuaDLL.luaL_checknumber(L, 2);
			obj.obstacleMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index obstacleMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_layer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.RVO.RVOObstacle obj = (Pathfinding.RVO.RVOObstacle)o;
			Pathfinding.RVO.RVOLayer arg0 = (Pathfinding.RVO.RVOLayer)LuaDLL.luaL_checknumber(L, 2);
			obj.layer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layer on a nil value");
		}
	}
}

