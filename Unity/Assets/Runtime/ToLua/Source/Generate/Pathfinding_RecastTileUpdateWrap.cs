//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_RecastTileUpdateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.RecastTileUpdate), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("ScheduleUpdate", ScheduleUpdate);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnNeedUpdates", get_OnNeedUpdates, set_OnNeedUpdates);
		L.RegFunction("addOnNeedUpdates", addOnNeedUpdates);
		L.RegFunction("removeOnNeedUpdates", removeOnNeedUpdates);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScheduleUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.RecastTileUpdate obj = (Pathfinding.RecastTileUpdate)ToLua.CheckObject<Pathfinding.RecastTileUpdate>(L, 1);
			obj.ScheduleUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnNeedUpdates(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<UnityEngine.Bounds>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnNeedUpdates(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Pathfinding.RecastTileUpdate.OnNeedUpdates' can only appear on the left hand side of += or -= when used outside of the type 'Pathfinding.RecastTileUpdate'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.Bounds> ev = (System.Action<UnityEngine.Bounds>)arg0.func;
				Pathfinding.RecastTileUpdate.OnNeedUpdates += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.Bounds> ev = (System.Action<UnityEngine.Bounds>)arg0.func;
				Pathfinding.RecastTileUpdate.OnNeedUpdates -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addOnNeedUpdates(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var arg0 = (System.Action<UnityEngine.Bounds>)ToLua.CheckDelegate<System.Action<UnityEngine.Bounds>>(L, 1);
			Pathfinding.RecastTileUpdate.OnNeedUpdates += arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeOnNeedUpdates(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var arg0 = (System.Action<UnityEngine.Bounds>)ToLua.CheckDelegate<System.Action<UnityEngine.Bounds>>(L, 1);
			Pathfinding.RecastTileUpdate.OnNeedUpdates -= arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

